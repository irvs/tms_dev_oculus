/*
 * Copyright (c) 2009, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* Turn off Follow RViz Camera and Set Target Frame to keytf and TF Frame ro oculus */ 

#include <ros/ros.h>
#include <signal.h>
#include <termios.h>
#include <stdio.h>
#include <pthread.h>
#include <tf/transform_broadcaster.h>

pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;

#define KEYCODE_R 0x43 
#define KEYCODE_L 0x44
#define KEYCODE_U 0x41
#define KEYCODE_D 0x42
#define KEYCODE_Q 0x71
#define KEYCODE_Z 0x7A
#define KEYCODE_X 0x78
#define KEYCODE_A 0x61
#define KEYCODE_S 0x73

void quit(int sig);

int kfd = 0;
struct termios cooked, raw;
ros::NodeHandlePtr nh_;

void *keyLoop( void *ptr )
{
  static tf::TransformBroadcaster br;
  char c;
  bool dirty=false;
  float x = 0;
  float y = 0;
  float z = 1.0;
  float theta = 0;

  // get the console in raw mode                                                              
  tcgetattr(kfd, &cooked);
  memcpy(&raw, &cooked, sizeof(struct termios));
  raw.c_lflag &=~ (ICANON | ECHO);
  // Setting a new line, then end of file                         
  raw.c_cc[VEOL] = 1;
  raw.c_cc[VEOF] = 2;
  tcsetattr(kfd, TCSANOW, &raw);

  puts("Reading from keyboard z/x/arrows");

  for(;;)
  {
    // get the next event from the keyboard  
    if(read(kfd, &c, 1) < 0)
    {
      perror("read():");
      exit(-1);
    }

    //ROS_DEBUG("value: 0x%02X\n", c);
    //ROS_INFO("value: 0x%02X\n", c);
    float dx = 0;
    float dy = 0;
    float dz = 0;
    float dtheta = 0;
    float r = 0.1;
    float rt = 0.1;
    float ddx = 0;
    float ddy = 0;
    switch(c)
    {
      case KEYCODE_L:
        ROS_DEBUG("LEFT");
        dy = +r;
        dirty = true;
        break;
      case KEYCODE_R:
        ROS_DEBUG("RIGHT");
        dy = -r;
        dirty = true;
        break;
      case KEYCODE_U:
        ROS_DEBUG("UP");
        dx = +r;
        dirty = true;
        break;
      case KEYCODE_D:
        ROS_DEBUG("DOWN");
        dx = -r;
        dirty = true;
        break;
      case KEYCODE_Z:
        ROS_DEBUG("Z");
        dtheta = +rt;
        dirty = true;
        break;
      case KEYCODE_X:
        ROS_DEBUG("X");
        dtheta = -rt;
        dirty = true;
        break;
      case KEYCODE_A:
        ROS_DEBUG("A");
        dz = +r;
        dirty = true;
        break;
      case KEYCODE_S:
        ROS_DEBUG("S");
        dz = -r;
        dirty = true;
        break;
      case KEYCODE_Q:
        ROS_DEBUG("Q");
       break;
    }

    if(dirty ==true)
    {
        ddx = dx * cos(theta) -  dy * sin(theta);
        ddy = dx * sin(theta) +  dy * cos(theta);
        x += ddx;
        y += ddy;
        z += dz;
        theta += dtheta;
        tf::Transform transform;
        transform.setOrigin( tf::Vector3(x, y, z) );
        tf::Quaternion q;
        q.setRPY(0, 0, theta);
        transform.setRotation(q);
std::cout << x << " " << y << " " << z <<  " " << theta << std::endl;
        br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "map", "keytf"));
        br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "start_position", "keytf"));
        dirty=false;
    }

    ros::Duration(0.01).sleep();

  }

  return NULL;
}

void quit(int sig)
{
  tcsetattr(kfd, TCSANOW, &cooked);
  std::cout << "quit" << std::endl;
  ros::shutdown();
  exit(0);
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "keytf");
  signal(SIGINT,quit);
  nh_.reset(new ros::NodeHandle);

  pthread_t thread;
  if ( pthread_create( &thread, NULL, keyLoop, NULL ) ){
    printf("error creating thread.");
    abort();
  }

  ros::Rate loop_rate(5);
  int count = 0;
  while (ros::ok())
  {
    ros::spinOnce();
    loop_rate.sleep();
    ++count;
  }

  ros::waitForShutdown();

  return(0);
}


