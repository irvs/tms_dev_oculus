!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
3RDPARTYPATH	Makefile	/^3RDPARTYPATH  = ..\/3rdParty$/;"	m
A	Src/Kernel/OVR_Color.h	/^    uint8_t R,G,B,A;$/;"	m	struct:OVR::Color
AJB_ARBC	Src/Kernel/OVR_Math.h	2643;"	d
AJB_ARBC	Src/Kernel/OVR_Math.h	2648;"	d
AJB_ARBC	Src/Kernel/OVR_Math.h	2654;"	d
AJB_ARBC	Src/Kernel/OVR_Math.h	2659;"	d
API	Src/OVR_CAPI.h	/^    ovrRenderAPIType API;$/;"	m	struct:ovrRenderAPIConfigHeader_
API	Src/OVR_CAPI.h	/^    ovrRenderAPIType API;$/;"	m	struct:ovrTextureHeader_
APICreateRegistry	Src/CAPI/CAPI_DistortionRenderer.cpp	/^DistortionRenderer::CreateFunc DistortionRenderer::APICreateRegistry[ovrRenderAPI_Count] =$/;"	m	class:OVR::CAPI::DistortionRenderer	file:
APICreateRegistry	Src/CAPI/CAPI_DistortionRenderer.h	/^    static CreateFunc APICreateRegistry[ovrRenderAPI_Count];$/;"	m	class:OVR::CAPI::DistortionRenderer
AVal0	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typename CleanType<A0>::Type  AVal0;$/;"	m	class:OVR::ThreadCommandMF2
AVal0	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typename CleanType<A0>::Type AVal0;$/;"	m	class:OVR::ThreadCommandMF1
AVal1	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typename CleanType<A1>::Type  AVal1;$/;"	m	class:OVR::ThreadCommandMF2
AboveNormalPriority	Src/Kernel/OVR_Threads.h	/^        AboveNormalPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
Abs	Src/Kernel/OVR_Alg.h	/^template <typename T>   OVR_FORCE_INLINE const T Abs(const T v)$/;"	f	namespace:OVR::Alg
Abs	Src/Kernel/OVR_Math.h	/^	T   Abs() const                                { return (a > 0) ? a : -a; }$/;"	f	class:OVR::Angle
AbsoluteTimeSeconds	Src/Sensors/OVR_DeviceConstants.h	/^    double   AbsoluteTimeSeconds;$/;"	m	class:OVR::SensorDataType
Acceleration	Src/Sensors/OVR_DeviceConstants.h	/^    Vector3f Acceleration;     \/\/ in m\/s^2$/;"	m	class:OVR::SensorDataType
Accelerometer	Src/OVR_CAPI.h	/^    ovrVector3f    Accelerometer;    \/\/\/ Acceleration reading in m\/s^2.$/;"	m	struct:ovrSensorData_
AccessMode	Src/Kernel/OVR_SharedMemory.h	/^	enum AccessMode$/;"	g	class:OVR::SharedMemory
AccessMode_ReadOnly	Src/Kernel/OVR_SharedMemory.h	/^		AccessMode_ReadOnly,		\/\/ Acquire read-only access$/;"	e	enum:OVR::SharedMemory::AccessMode
AccessMode_ReadWrite	Src/Kernel/OVR_SharedMemory.h	/^		AccessMode_ReadWrite,		\/\/ Acquire read or write access$/;"	e	enum:OVR::SharedMemory::AccessMode
AccessTime	Src/Kernel/OVR_SysFile.h	/^    int64_t AccessTime;$/;"	m	struct:OVR::FileStat
Acos	Src/Kernel/OVR_Math.h	/^T Acos(T val) { $/;"	f	namespace:OVR
AcquireSync	Src/Kernel/OVR_Atomic.h	/^    struct AcquireSync { inline AcquireSync() { } };$/;"	f	struct:OVR::AtomicOpsRawBase::AcquireSync
AcquireSync	Src/Kernel/OVR_Atomic.h	/^    struct AcquireSync { inline AcquireSync() { } };$/;"	s	struct:OVR::AtomicOpsRawBase
ActiveTexture	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint ActiveTexture;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Add	Src/Kernel/OVR_Hash.h	/^    inline void    Add(const C& key, const U& value)$/;"	f	class:OVR::Hash
Add	Src/Kernel/OVR_Hash.h	/^    inline void Add(const CRef& key)$/;"	f	class:OVR::HashSet
Add	Src/Kernel/OVR_Hash.h	/^    inline void Add(const CRef& key)$/;"	f	class:OVR::HashSetBase
Add	Src/Net/OVR_Unix_Socket.cpp	/^void TCPSocketPollState::Add(TCPSocket* tcpSocket)$/;"	f	class:OVR::Net::TCPSocketPollState
AddArrayElement	Src/OVR_JSON.cpp	/^void JSON::AddArrayElement(JSON *item)$/;"	f	class:OVR::JSON
AddArrayInt	Src/OVR_JSON.h	/^    void            AddArrayInt(int n)              { AddArrayElement(CreateInt(n)); }$/;"	f	class:OVR::JSON
AddArrayNumber	Src/OVR_JSON.h	/^    void            AddArrayNumber(double n)        { AddArrayElement(CreateNumber(n)); }$/;"	f	class:OVR::JSON
AddArrayString	Src/OVR_JSON.h	/^    void            AddArrayString(const char* s)   { AddArrayElement(CreateString(s)); }$/;"	f	class:OVR::JSON
AddBitsAndReallocate	Src/Net/OVR_BitStream.cpp	/^void BitStream::AddBitsAndReallocate( const BitSize_t numberOfBitsToWrite )$/;"	f	class:OVR::Net::BitStream
AddBoolItem	Src/OVR_JSON.h	/^    void            AddBoolItem(const char* name, bool b)            { AddItem(name, CreateBool(b)); }$/;"	f	class:OVR::JSON
AddDistortionTimeMeasurement	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void  FrameTimeManager::AddDistortionTimeMeasurement(double distortionTimeSeconds)$/;"	f	class:OVR::CAPI::FrameTimeManager
AddIntItem	Src/OVR_JSON.h	/^    void            AddIntItem(const char* name, int n)              { AddItem(name, CreateInt(n)); }$/;"	f	class:OVR::JSON
AddItem	Src/OVR_JSON.cpp	/^void JSON::AddItem(const char *string, JSON *item)$/;"	f	class:OVR::JSON
AddLogObserver	Src/Kernel/OVR_Log.cpp	/^void Log::AddLogObserver(ObserverScope<LogHandler> *logObserver)$/;"	f	class:OVR::Log
AddNullItem	Src/OVR_JSON.h	/^    void            AddNullItem(const char* name)                    { AddItem(name, CreateNull()); }$/;"	f	class:OVR::JSON
AddNumberItem	Src/OVR_JSON.h	/^    void            AddNumberItem(const char* name, double n)        { AddItem(name, CreateNumber(n)); }$/;"	f	class:OVR::JSON
AddObserverToSubject	Src/Kernel/OVR_Observer.h	/^	void AddObserverToSubject(OVR::String key, Observer<DelegateT> *observer)$/;"	f	class:OVR::ObserverHash
AddPoint	Src/Kernel/OVR_Math.h	/^	void AddPoint( const Vector3<T> & v )$/;"	f	class:OVR::Bounds3
AddRef	Src/Kernel/OVR_RefCount.cpp	/^void    RefCountImpl::AddRef()$/;"	f	class:OVR::RefCountImpl
AddRef	Src/Kernel/OVR_RefCount.cpp	/^void    RefCountVImpl::AddRef()$/;"	f	class:OVR::RefCountVImpl
AddRef	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE void    AddRef() const { RefCount++; }$/;"	f	class:OVR::RefCountNTSImpl
AddRef	Src/Kernel/OVR_String.h	/^        void    AddRef()$/;"	f	struct:OVR::String::DataDesc
AddResultsObserver	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::AddResultsObserver(ObserverScope<LatencyStatisticsSlot> *calculateResultsObserver)$/;"	f	class:OVR::CAPI::LagStatsCalculator
AddRunningThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^    static void AddRunningThread(Thread *pthread)$/;"	f	class:OVR::ThreadList
AddSessionListener	Src/Net/OVR_Session.cpp	/^void Session::AddSessionListener(SessionListener* se)$/;"	f	class:OVR::Net::Session
AddStringItem	Src/OVR_JSON.h	/^    void            AddStringItem(const char* name, const char* s)   { AddItem(name, CreateString(s)); }$/;"	f	class:OVR::JSON
AddTimeDelta	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void TimeDeltaCollector::AddTimeDelta(double timeSeconds)$/;"	f	class:OVR::CAPI::TimeDeltaCollector
AddValue	Src/Util/Util_LatencyTest2Reader.cpp	/^void FrameTimeRecordSet::AddValue(int readValue, double timeSeconds)$/;"	f	class:OVR::Util::FrameTimeRecordSet
Addr6	Src/Net/OVR_Unix_Socket.h	/^	sockaddr_in6 Addr6;$/;"	m	class:OVR::Net::SockAddr
Address	Src/Net/OVR_Session.h	/^	SockAddr      Address;$/;"	m	class:OVR::Net::NetworkConnection
Address	Src/Net/OVR_Socket.h	/^	String Address;$/;"	m	struct:OVR::Net::BerkleyBindParameters
Adjugated	Src/Kernel/OVR_Math.h	/^    Matrix4 Adjugated() const$/;"	f	class:OVR::Matrix4
AfterPresentAndFlush	Src/Util/Util_Render_Stereo.cpp	/^void TimewarpMachine::AfterPresentAndFlush(double timeNow)$/;"	f	class:OVR::Util::Render::TimewarpMachine
Alg	Src/Kernel/OVR_Alg.cpp	/^namespace OVR { namespace Alg {$/;"	n	namespace:OVR	file:
Alg	Src/Kernel/OVR_Alg.h	/^namespace OVR { namespace Alg {$/;"	n	namespace:OVR
Align	Src/Kernel/OVR_ThreadCommandQueue.h	/^            size_t Align;$/;"	m	union:OVR::ThreadCommand::PopBuffer::__anon22
AlignMask	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        AlignMask = AlignSize - 1$/;"	e	enum:OVR::CircularBuffer::__anon31	file:
AlignReadToByteBoundary	Src/Net/OVR_BitStream.h	/^	inline void AlignReadToByteBoundary( void ) {readOffset += 8 - ( (( readOffset - 1 ) & 7 ) + 1 );}$/;"	f	class:OVR::Net::BitStream
AlignSize	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        AlignSize = 16,$/;"	e	enum:OVR::CircularBuffer::__anon31	file:
AlignWriteToByteBoundary	Src/Net/OVR_BitStream.h	/^	inline void AlignWriteToByteBoundary( void ) {numberOfBitsUsed += 8 - ( (( numberOfBitsUsed - 1 ) & 7) + 1 );}$/;"	f	class:OVR::Net::BitStream
AllConnections	Src/Net/OVR_Session.h	/^    Array< Ptr<Connection> >  AllConnections;      \/\/ List of active connections stuck at the versioning handshake$/;"	m	class:OVR::Net::Session
Alloc	Src/Kernel/OVR_Allocator.cpp	/^void* DefaultAllocator::Alloc(size_t size)$/;"	f	class:OVR::DefaultAllocator
Alloc	Src/Kernel/OVR_ContainerAllocator.h	/^    static void* Alloc(size_t size)                { return OVR_ALLOC(size); }$/;"	f	class:OVR::ContainerAllocatorBase
AllocAligned	Src/Kernel/OVR_Allocator.cpp	/^void* Allocator::AllocAligned(size_t size, size_t align)$/;"	f	class:OVR::Allocator
AllocConnection	Src/Net/OVR_Session.cpp	/^Ptr<Connection> Session::AllocConnection(TransportType transport)$/;"	f	class:OVR::Net::Session
AllocContainer	Src/Kernel/OVR_Allocator.h	/^        AllocContainer() : Initialized(0) { }$/;"	f	struct:OVR::Allocator_SingletonSupport::AllocContainer
AllocContainer	Src/Kernel/OVR_Allocator.h	/^    struct AllocContainer$/;"	s	class:OVR::Allocator_SingletonSupport
AllocData	Src/Kernel/OVR_String.cpp	/^String::DataDesc* String::AllocData(size_t size, size_t lengthIsSize)$/;"	f	class:OVR::String
AllocDataCopy1	Src/Kernel/OVR_String.cpp	/^String::DataDesc* String::AllocDataCopy1(size_t size, size_t lengthIsSize,$/;"	f	class:OVR::String
AllocDataCopy2	Src/Kernel/OVR_String.cpp	/^String::DataDesc* String::AllocDataCopy2(size_t size, size_t lengthIsSize,$/;"	f	class:OVR::String
AllocDebug	Src/Kernel/OVR_Allocator.cpp	/^void* DefaultAllocator::AllocDebug(size_t size, const char* file, unsigned line)$/;"	f	class:OVR::DefaultAllocator
AllocDebug	Src/Kernel/OVR_Allocator.h	/^    virtual void*   AllocDebug(size_t size, const char* file, unsigned line)$/;"	f	class:OVR::Allocator
AllocNotifyEvent_NTS	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    NotifyEvent* AllocNotifyEvent_NTS()$/;"	f	class:OVR::ThreadCommandQueueImpl
Alloc_MoveTo	Src/Kernel/OVR_List.h	/^    void    Alloc_MoveTo(List<T>* pdest)$/;"	f	class:OVR::List
Alloc_MoveTo	Src/Kernel/OVR_List.h	/^    void    Alloc_MoveTo(ListNode<T>* pdest)$/;"	f	struct:OVR::ListNode
Allocator	Src/Kernel/OVR_Allocator.h	/^class Allocator$/;"	c	namespace:OVR
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef Allocator                                   AllocatorType;$/;"	t	struct:OVR::ArrayData
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef Allocator                                   AllocatorType;$/;"	t	struct:OVR::ArrayDataBase
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef Allocator                                   AllocatorType;$/;"	t	struct:OVR::ArrayDataCC
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef ContainerAllocator<T>                                           AllocatorType;$/;"	t	class:OVR::ArrayCC
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef ContainerAllocator<T>                                       AllocatorType;$/;"	t	class:OVR::Array
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef ContainerAllocator_CPP<T>                                       AllocatorType;$/;"	t	class:OVR::ArrayCPP
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef ContainerAllocator_POD<T>                                       AllocatorType;$/;"	t	class:OVR::ArrayPOD
AllocatorType	Src/Kernel/OVR_Array.h	/^    typedef typename ArrayData::AllocatorType   AllocatorType;$/;"	t	class:OVR::ArrayBase
Allocator_SingletonSupport	Src/Kernel/OVR_Allocator.h	/^    Allocator_SingletonSupport() : pContainer(0) { }$/;"	f	class:OVR::Allocator_SingletonSupport
Allocator_SingletonSupport	Src/Kernel/OVR_Allocator.h	/^class Allocator_SingletonSupport : public Allocator$/;"	c	namespace:OVR
Angle	Src/Kernel/OVR_Math.h	/^	Angle(T a_, AngularUnits u = Radians) : a((u == Radians) ? a_ : a_*((T)MATH_DOUBLE_DEGREETORADFACTOR)) { FixRange(); }$/;"	f	class:OVR::Angle
Angle	Src/Kernel/OVR_Math.h	/^    Angle() : a(0) {}$/;"	f	class:OVR::Angle
Angle	Src/Kernel/OVR_Math.h	/^    T       Angle(const Quat& q) const$/;"	f	class:OVR::Quat
Angle	Src/Kernel/OVR_Math.h	/^    T       Angle(const Vector2& b) const        $/;"	f	class:OVR::Vector2
Angle	Src/Kernel/OVR_Math.h	/^    T       Angle(const Vector3& b) const $/;"	f	class:OVR::Vector3
Angle	Src/Kernel/OVR_Math.h	/^class Angle$/;"	c	namespace:OVR
Angled	Src/Kernel/OVR_Math.h	/^typedef Angle<double> Angled;$/;"	t	namespace:OVR
Anglef	Src/Kernel/OVR_Math.h	/^typedef Angle<float>  Anglef;$/;"	t	namespace:OVR
AngularAcceleration	Src/OVR_CAPI.h	/^    ovrVector3f  AngularAcceleration;$/;"	m	struct:ovrPoseStatef_
AngularAcceleration	Src/Tracking/Tracking_PoseState.h	/^	Vector3<T>  AngularAcceleration;$/;"	m	class:OVR::PoseState
AngularUnits	Src/Kernel/OVR_Math.h	/^	enum AngularUnits$/;"	g	class:OVR::Angle
AngularVelocity	Src/OVR_CAPI.h	/^    ovrVector3f  AngularVelocity;$/;"	m	struct:ovrPoseStatef_
AngularVelocity	Src/Tracking/Tracking_PoseState.h	/^	Vector3<T>  AngularVelocity;$/;"	m	class:OVR::PoseState
Append	Src/Kernel/OVR_Array.h	/^    void    Append(const SelfType& other)$/;"	f	class:OVR::ArrayBase
Append	Src/Kernel/OVR_Array.h	/^    void    Append(const ValueType other[], size_t count)$/;"	f	class:OVR::ArrayBase
Append	Src/Kernel/OVR_Array.h	/^    void Append(const ValueType other[], size_t count)$/;"	f	struct:OVR::ArrayData
Append	Src/Kernel/OVR_Array.h	/^    void Append(const ValueType other[], size_t count)$/;"	f	struct:OVR::ArrayDataCC
AppendArray	Src/Kernel/OVR_Alg.h	/^void AppendArray(CDst& dst, const CSrc& src)$/;"	f	namespace:OVR::Alg
AppendChar	Src/Kernel/OVR_String.cpp	/^void     StringBuffer::AppendChar(uint32_t ch)$/;"	f	class:OVR::StringBuffer
AppendChar	Src/Kernel/OVR_String.cpp	/^void String::AppendChar(uint32_t ch)$/;"	f	class:OVR::String
AppendFormat	Src/Kernel/OVR_String_FormatUtil.cpp	/^void StringBuffer::AppendFormat(const char* format, ...)$/;"	f	class:OVR::StringBuffer
AppendString	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::AppendString(const char* putf8str, intptr_t utf8StrSz)$/;"	f	class:OVR::StringBuffer
AppendString	Src/Kernel/OVR_String.cpp	/^void     StringBuffer::AppendString(const wchar_t* pstr, intptr_t len)$/;"	f	class:OVR::StringBuffer
AppendString	Src/Kernel/OVR_String.cpp	/^void String::AppendString(const char* putf8str, intptr_t utf8StrSz)$/;"	f	class:OVR::String
AppendString	Src/Kernel/OVR_String.cpp	/^void String::AppendString(const wchar_t* pstr, intptr_t len)$/;"	f	class:OVR::String
ApplicationExclusive	Src/Displays/OVR_Display.h	/^	const bool			ApplicationExclusive;$/;"	m	class:OVR::Display
Apply	Src/Kernel/OVR_Math.h	/^    Vector3<T> Apply(const Vector3<T>& v) const$/;"	f	class:OVR::Pose
ApplyBool	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::GraphicsState::ApplyBool(GLenum Name, GLint Value, GLint index)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Area	Src/Kernel/OVR_Math.h	/^    T       Area() const                    { return w * h; }$/;"	f	class:OVR::Size
Area2DFov	Src/Util/Util_Render_Stereo.h	/^    float              Area2DFov;           \/\/ FOV range mapping to the 2D area.$/;"	m	class:OVR::Util::Render::StereoConfig
Array	Src/Kernel/OVR_Array.h	/^    Array() : BaseType() {}$/;"	f	class:OVR::Array
Array	Src/Kernel/OVR_Array.h	/^    Array(const SelfType& a) : BaseType(a) {}$/;"	f	class:OVR::Array
Array	Src/Kernel/OVR_Array.h	/^    Array(const SizePolicyType& p) : BaseType() { SetSizePolicy(p); }$/;"	f	class:OVR::Array
Array	Src/Kernel/OVR_Array.h	/^    Array(size_t size) : BaseType(size) {}$/;"	f	class:OVR::Array
Array	Src/Kernel/OVR_Array.h	/^class Array : public ArrayBase<ArrayData<T, ContainerAllocator<T>, SizePolicy> >$/;"	c	namespace:OVR
ArrayAdaptor	Src/Kernel/OVR_Alg.h	/^    ArrayAdaptor() : Data(0), Size(0) {}$/;"	f	class:OVR::Alg::ArrayAdaptor
ArrayAdaptor	Src/Kernel/OVR_Alg.h	/^    ArrayAdaptor(T* ptr, size_t size) : Data(ptr), Size(size) {}$/;"	f	class:OVR::Alg::ArrayAdaptor
ArrayAdaptor	Src/Kernel/OVR_Alg.h	/^template<class T> class ArrayAdaptor$/;"	c	namespace:OVR::Alg
ArrayBase	Src/Kernel/OVR_Array.h	/^    ArrayBase()$/;"	f	class:OVR::ArrayBase
ArrayBase	Src/Kernel/OVR_Array.h	/^    ArrayBase(const SelfType& a)$/;"	f	class:OVR::ArrayBase
ArrayBase	Src/Kernel/OVR_Array.h	/^    ArrayBase(const ValueType& defval)$/;"	f	class:OVR::ArrayBase
ArrayBase	Src/Kernel/OVR_Array.h	/^    ArrayBase(const ValueType& defval, size_t size)$/;"	f	class:OVR::ArrayBase
ArrayBase	Src/Kernel/OVR_Array.h	/^    ArrayBase(size_t size)$/;"	f	class:OVR::ArrayBase
ArrayBase	Src/Kernel/OVR_Array.h	/^class ArrayBase$/;"	c	namespace:OVR
ArrayBufferBinding	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint ArrayBufferBinding;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
ArrayCC	Src/Kernel/OVR_Array.h	/^    ArrayCC(const SelfType& a) : BaseType(a) {}$/;"	f	class:OVR::ArrayCC
ArrayCC	Src/Kernel/OVR_Array.h	/^    ArrayCC(const ValueType& defval) : BaseType(defval) {}$/;"	f	class:OVR::ArrayCC
ArrayCC	Src/Kernel/OVR_Array.h	/^    ArrayCC(const ValueType& defval, const SizePolicyType& p) : BaseType(defval) { SetSizePolicy(p); }$/;"	f	class:OVR::ArrayCC
ArrayCC	Src/Kernel/OVR_Array.h	/^    ArrayCC(const ValueType& defval, size_t size) : BaseType(defval, size) {}$/;"	f	class:OVR::ArrayCC
ArrayCC	Src/Kernel/OVR_Array.h	/^class ArrayCC : public ArrayBase<ArrayDataCC<T, ContainerAllocator<T>, SizePolicy> >$/;"	c	namespace:OVR
ArrayCPP	Src/Kernel/OVR_Array.h	/^    ArrayCPP() : BaseType() {}$/;"	f	class:OVR::ArrayCPP
ArrayCPP	Src/Kernel/OVR_Array.h	/^    ArrayCPP(const SelfType& a) : BaseType(a) {}$/;"	f	class:OVR::ArrayCPP
ArrayCPP	Src/Kernel/OVR_Array.h	/^    ArrayCPP(const SizePolicyType& p) : BaseType() { SetSizePolicy(p); }$/;"	f	class:OVR::ArrayCPP
ArrayCPP	Src/Kernel/OVR_Array.h	/^    ArrayCPP(size_t size) : BaseType(size) {}$/;"	f	class:OVR::ArrayCPP
ArrayCPP	Src/Kernel/OVR_Array.h	/^class ArrayCPP : public ArrayBase<ArrayData<T, ContainerAllocator_CPP<T>, SizePolicy> >$/;"	c	namespace:OVR
ArrayConstPolicy	Src/Kernel/OVR_Array.h	/^    ArrayConstPolicy() : Capacity(0) {}$/;"	f	struct:OVR::ArrayConstPolicy
ArrayConstPolicy	Src/Kernel/OVR_Array.h	/^    ArrayConstPolicy(const SelfType&) : Capacity(0) {}$/;"	f	struct:OVR::ArrayConstPolicy
ArrayConstPolicy	Src/Kernel/OVR_Array.h	/^struct ArrayConstPolicy$/;"	s	namespace:OVR
ArrayData	Src/Kernel/OVR_Array.h	/^    ArrayData()$/;"	f	struct:OVR::ArrayData
ArrayData	Src/Kernel/OVR_Array.h	/^    ArrayData(const SelfType& a)$/;"	f	struct:OVR::ArrayData
ArrayData	Src/Kernel/OVR_Array.h	/^    ArrayData(size_t size)$/;"	f	struct:OVR::ArrayData
ArrayData	Src/Kernel/OVR_Array.h	/^struct ArrayData : ArrayDataBase<T, Allocator, SizePolicy>$/;"	s	namespace:OVR
ArrayDataBase	Src/Kernel/OVR_Array.h	/^    ArrayDataBase()$/;"	f	struct:OVR::ArrayDataBase
ArrayDataBase	Src/Kernel/OVR_Array.h	/^    ArrayDataBase(const SizePolicy& p)$/;"	f	struct:OVR::ArrayDataBase
ArrayDataBase	Src/Kernel/OVR_Array.h	/^struct ArrayDataBase$/;"	s	namespace:OVR
ArrayDataCC	Src/Kernel/OVR_Array.h	/^    ArrayDataCC(const SelfType& a)$/;"	f	struct:OVR::ArrayDataCC
ArrayDataCC	Src/Kernel/OVR_Array.h	/^    ArrayDataCC(const ValueType& defval)$/;"	f	struct:OVR::ArrayDataCC
ArrayDataCC	Src/Kernel/OVR_Array.h	/^    ArrayDataCC(const ValueType& defval, size_t size)$/;"	f	struct:OVR::ArrayDataCC
ArrayDataCC	Src/Kernel/OVR_Array.h	/^struct ArrayDataCC : ArrayDataBase<T, Allocator, SizePolicy>$/;"	s	namespace:OVR
ArrayDefaultPolicy	Src/Kernel/OVR_Array.h	/^    ArrayDefaultPolicy() : Capacity(0) {}$/;"	f	struct:OVR::ArrayDefaultPolicy
ArrayDefaultPolicy	Src/Kernel/OVR_Array.h	/^    ArrayDefaultPolicy(const ArrayDefaultPolicy&) : Capacity(0) {}$/;"	f	struct:OVR::ArrayDefaultPolicy
ArrayDefaultPolicy	Src/Kernel/OVR_Array.h	/^struct ArrayDefaultPolicy$/;"	s	namespace:OVR
ArrayNoShrinkPolicy	Src/Net/OVR_Session.h	/^	struct ArrayNoShrinkPolicy : ArrayDefaultPolicy$/;"	s	class:OVR::Net::Session
ArrayPOD	Src/Kernel/OVR_Array.h	/^    ArrayPOD() : BaseType() {}$/;"	f	class:OVR::ArrayPOD
ArrayPOD	Src/Kernel/OVR_Array.h	/^    ArrayPOD(const SelfType& a) : BaseType(a) {}$/;"	f	class:OVR::ArrayPOD
ArrayPOD	Src/Kernel/OVR_Array.h	/^    ArrayPOD(const SizePolicyType& p) : BaseType() { SetSizePolicy(p); }$/;"	f	class:OVR::ArrayPOD
ArrayPOD	Src/Kernel/OVR_Array.h	/^    ArrayPOD(size_t size) : BaseType(size) {}$/;"	f	class:OVR::ArrayPOD
ArrayPOD	Src/Kernel/OVR_Array.h	/^class ArrayPOD : public ArrayBase<ArrayData<T, ContainerAllocator_POD<T>, SizePolicy> >$/;"	c	namespace:OVR
Asin	Src/Kernel/OVR_Math.h	/^T Asin(T val) { $/;"	f	namespace:OVR
AssertCopyData	Src/Net/OVR_BitStream.cpp	/^void BitStream::AssertCopyData( void )$/;"	f	class:OVR::Net::BitStream
AssertStreamEmpty	Src/Net/OVR_BitStream.cpp	/^void BitStream::AssertStreamEmpty( void )$/;"	f	class:OVR::Net::BitStream
Assign	Src/Kernel/OVR_Hash.h	/^    void Assign(const SelfType& src)$/;"	f	class:OVR::HashSetBase
AssignError	Src/OVR_JSON.cpp	/^const char* AssignError(const char** perror, const char *errorMessage)$/;"	f	namespace:OVR
AssignString	Src/Kernel/OVR_String.cpp	/^void    String::AssignString(const InitStruct& src, size_t size)$/;"	f	class:OVR::String
AssignString	Src/Kernel/OVR_String.cpp	/^void    String::AssignString(const char* putf8str, size_t size)$/;"	f	class:OVR::String
AssociateSurface	Src/Util/Util_ImageWindow.h	/^	void AssociateSurface( void* surface ) { OVR_UNUSED(surface); }$/;"	f	class:OVR::Util::ImageWindow
At	Src/Kernel/OVR_Array.h	/^    ValueType& At(size_t index)$/;"	f	class:OVR::ArrayBase
At	Src/Kernel/OVR_Array.h	/^    const ValueType& At(size_t index) const$/;"	f	class:OVR::ArrayBase
AtomicInt	Src/Kernel/OVR_Atomic.h	/^    explicit inline AtomicInt(T val) : AtomicValueBase<T>(val)    { }$/;"	f	class:OVR::AtomicInt
AtomicInt	Src/Kernel/OVR_Atomic.h	/^    inline AtomicInt() : AtomicValueBase<T>()                     { }$/;"	f	class:OVR::AtomicInt
AtomicInt	Src/Kernel/OVR_Atomic.h	/^class AtomicInt : public AtomicValueBase<T>$/;"	c	namespace:OVR
AtomicOps	Src/Kernel/OVR_Atomic.h	/^class AtomicOps$/;"	c	namespace:OVR
AtomicOpsRaw	Src/Kernel/OVR_Atomic.h	/^    AtomicOpsRaw()$/;"	f	struct:OVR::AtomicOpsRaw
AtomicOpsRaw	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw : public AtomicOpsRawBase { };$/;"	s	namespace:OVR
AtomicOpsRaw	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw<4> : public AtomicOpsRaw_DefImpl<AtomicOpsRaw_4ByteImpl>$/;"	s	namespace:OVR
AtomicOpsRaw	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw<8> : public AtomicOpsRaw_DefImpl<AtomicOpsRaw_8ByteImpl>$/;"	s	namespace:OVR
AtomicOpsRawBase	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRawBase$/;"	s	namespace:OVR
AtomicOpsRaw_4ByteImpl	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw_4ByteImpl : public AtomicOpsRawBase$/;"	s	namespace:OVR
AtomicOpsRaw_8ByteImpl	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw_8ByteImpl : public AtomicOpsRawBase$/;"	s	namespace:OVR
AtomicOpsRaw_DefImpl	Src/Kernel/OVR_Atomic.h	/^struct AtomicOpsRaw_DefImpl : public O$/;"	s	namespace:OVR
AtomicPtr	Src/Kernel/OVR_Atomic.h	/^    explicit inline AtomicPtr(T* val) : AtomicValueBase<T*>(val)   { }$/;"	f	class:OVR::AtomicPtr
AtomicPtr	Src/Kernel/OVR_Atomic.h	/^    inline AtomicPtr() : AtomicValueBase<T*>()                     { this->Value = 0; }$/;"	f	class:OVR::AtomicPtr
AtomicPtr	Src/Kernel/OVR_Atomic.h	/^class AtomicPtr : public AtomicValueBase<T*>$/;"	c	namespace:OVR
AtomicValueBase	Src/Kernel/OVR_Atomic.h	/^    explicit inline AtomicValueBase(T val)    { Ops::Store_Release(&Value, val); }$/;"	f	class:OVR::AtomicValueBase
AtomicValueBase	Src/Kernel/OVR_Atomic.h	/^    inline AtomicValueBase()                  { }$/;"	f	class:OVR::AtomicValueBase
AtomicValueBase	Src/Kernel/OVR_Atomic.h	/^class AtomicValueBase$/;"	c	namespace:OVR
AttemptCreateSharedMemory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryInternal* SharedMemoryInternal::AttemptCreateSharedMemory(const char* fileName, int minSize, bool openReadOnly, bool allowRemoteWrite)$/;"	f	class:OVR::SharedMemoryInternal
AttemptOpenSharedMemory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryInternal* SharedMemoryInternal::AttemptOpenSharedMemory(const char* fileName, int minSize, bool openReadOnly)$/;"	f	class:OVR::SharedMemoryInternal
Attr	Src/Kernel/OVR_Threads.h	/^    static pthread_attr_t Attr;$/;"	m	class:OVR::Thread
Attr	Src/Kernel/OVR_ThreadsPthread.cpp	/^pthread_attr_t Thread::Attr; $/;"	m	class:OVR::Thread	file:
AuthString	Src/Net/OVR_Session.h	/^    String AuthString;$/;"	m	struct:OVR::Net::RPC_S2C_Authorization
AvailableEvents	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    List<NotifyEvent>   AvailableEvents;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
Axis	Src/Kernel/OVR_Math.h	/^enum Axis$/;"	g	namespace:OVR
AxisConversion	Src/Kernel/OVR_Math.h	/^    static Matrix4 AxisConversion(const WorldAxes& to, const WorldAxes& from)$/;"	f	class:OVR::Matrix4
AxisDirection	Src/Kernel/OVR_Math.h	/^enum AxisDirection$/;"	g	namespace:OVR
Axis_Down	Src/Kernel/OVR_Math.h	/^    Axis_Down  = -2,$/;"	e	enum:OVR::AxisDirection
Axis_In	Src/Kernel/OVR_Math.h	/^    Axis_In    =  3,$/;"	e	enum:OVR::AxisDirection
Axis_Left	Src/Kernel/OVR_Math.h	/^    Axis_Left  = -1,$/;"	e	enum:OVR::AxisDirection
Axis_Out	Src/Kernel/OVR_Math.h	/^    Axis_Out   = -3$/;"	e	enum:OVR::AxisDirection
Axis_Right	Src/Kernel/OVR_Math.h	/^    Axis_Right =  1,$/;"	e	enum:OVR::AxisDirection
Axis_Up	Src/Kernel/OVR_Math.h	/^    Axis_Up    =  2,$/;"	e	enum:OVR::AxisDirection
Axis_X	Src/Kernel/OVR_Math.h	/^    Axis_X = 0, Axis_Y = 1, Axis_Z = 2$/;"	e	enum:OVR::Axis
Axis_Y	Src/Kernel/OVR_Math.h	/^    Axis_X = 0, Axis_Y = 1, Axis_Z = 2$/;"	e	enum:OVR::Axis
Axis_Z	Src/Kernel/OVR_Math.h	/^    Axis_X = 0, Axis_Y = 1, Axis_Z = 2$/;"	e	enum:OVR::Axis
B	Src/Kernel/OVR_Color.h	/^    uint8_t R,G,B,A;$/;"	m	struct:OVR::Color
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline double   BEToSystem(double v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline double   BEToSystem(double v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline float    BEToSystem(float  v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline float    BEToSystem(float  v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int16_t  BEToSystem(int16_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int16_t  BEToSystem(int16_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int32_t  BEToSystem(int32_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int32_t  BEToSystem(int32_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int64_t  BEToSystem(int64_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int64_t  BEToSystem(int64_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int8_t   BEToSystem(int8_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int8_t   BEToSystem(int8_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint16_t BEToSystem(uint16_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint16_t BEToSystem(uint16_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint32_t BEToSystem(uint32_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint32_t BEToSystem(uint32_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint64_t BEToSystem(uint64_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint64_t BEToSystem(uint64_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  BEToSystem(uint8_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
BEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  BEToSystem(uint8_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
BITSTREAM_STACK_ALLOCATION_SIZE	Src/Net/OVR_BitStream.h	39;"	d
BITS_TO_BYTES	Src/Net/OVR_BitStream.h	40;"	d
BYTES_TO_BITS	Src/Net/OVR_BitStream.h	41;"	d
Back	Src/Kernel/OVR_Array.h	/^    ValueType&          Back()          { return At(Data.Size - 1); }$/;"	f	class:OVR::ArrayBase
Back	Src/Kernel/OVR_Array.h	/^    const ValueType&    Back() const    { return At(Data.Size - 1); }$/;"	f	class:OVR::ArrayBase
Base32FromChar	Src/OVR_SerialFormat.cpp	/^static const char Base32FromChar[256] = {$/;"	m	namespace:OVR	file:
BasePath	Src/OVR_Profile.h	/^    String              BasePath;$/;"	m	class:OVR::Profile
BasePath	Src/OVR_Profile.h	/^    String              BasePath;$/;"	m	class:OVR::ProfileManager
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayBase<ArrayData<T, ContainerAllocator<T>, SizePolicy> > BaseType;$/;"	t	class:OVR::Array
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayBase<ArrayData<T, ContainerAllocator_CPP<T>, SizePolicy> > BaseType;$/;"	t	class:OVR::ArrayCPP
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayBase<ArrayData<T, ContainerAllocator_POD<T>, SizePolicy> > BaseType;$/;"	t	class:OVR::ArrayPOD
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayBase<ArrayDataCC<T, ContainerAllocator<T>, SizePolicy> >   BaseType;$/;"	t	class:OVR::ArrayCC
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayDataBase<T, Allocator, SizePolicy>     BaseType;$/;"	t	struct:OVR::ArrayData
BaseType	Src/Kernel/OVR_Array.h	/^    typedef ArrayDataBase<T, Allocator, SizePolicy>     BaseType;$/;"	t	struct:OVR::ArrayDataCC
BaseType	Src/Kernel/OVR_Deque.h	/^    typedef Deque<Elem, Allocator> BaseType;$/;"	t	class:OVR::InPlaceMutableDeque
BaseType	Src/Kernel/OVR_Deque.h	/^    typedef InPlaceMutableDeque<Elem, Allocator> BaseType;$/;"	t	class:OVR::CircularBuffer
BaseType	Src/Kernel/OVR_Hash.h	/^                 typename HashNode<C,U,HashF>::NodeHashF> >     BaseType;$/;"	t	class:OVR::HashUncached
BaseType	Src/Kernel/OVR_Hash.h	/^    typedef HashSet<C, HashF, AltHashF, Allocator, HashsetEntry<C, HashF> > BaseType;$/;"	t	class:OVR::HashSetUncached
BaseType	Src/Kernel/OVR_Hash.h	/^    typedef HashSetBase<C, HashF, AltHashF, Allocator, Entry> BaseType;$/;"	t	class:OVR::HashSet
BaseType	Src/Kernel/OVR_Hash.h	/^    typedef HashUncached<C, U, HashF, Allocator> BaseType;$/;"	t	class:OVR::HashIdentity
BaseType	Src/Kernel/OVR_StringHash.h	/^    typedef Hash<String, U, String::NoCaseHashFunctor, Allocator>    BaseType;$/;"	t	class:OVR::StringHash
Begin	Src/CAPI/CAPI_HMDState.h	/^    void Begin(const char* functionName)    { OVR_UNUSED1(functionName); }$/;"	f	class:OVR::CAPI::ThreadChecker
Begin	Src/Kernel/OVR_Array.h	/^    ConstIterator Begin() const { return ConstIterator(this); }$/;"	f	class:OVR::ArrayBase
Begin	Src/Kernel/OVR_Array.h	/^    Iterator Begin() { return Iterator(this); }$/;"	f	class:OVR::ArrayBase
Begin	Src/Kernel/OVR_Hash.h	/^    ConstIterator   Begin() const   { return const_cast<SelfType*>(this)->Begin();     }$/;"	f	class:OVR::HashSetBase
Begin	Src/Kernel/OVR_Hash.h	/^    Iterator    Begin()$/;"	f	class:OVR::HashSetBase
Begin	Src/Kernel/OVR_Hash.h	/^    inline ConstIterator   Begin() const        { return mHash.Begin(); }$/;"	f	class:OVR::Hash
Begin	Src/Kernel/OVR_Hash.h	/^    inline Iterator        Begin()              { return mHash.Begin(); }$/;"	f	class:OVR::Hash
Begin	Src/Kernel/OVR_String.h	/^    const char* Begin() const { return ToCStr(); }$/;"	f	class:OVR::StringDataPtr
BeginFrame	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double FrameTimeManager::BeginFrame(unsigned frameIndex)$/;"	f	class:OVR::CAPI::FrameTimeManager
BeginFrameCalled	Src/CAPI/CAPI_HMDState.h	/^    bool                    BeginFrameCalled;$/;"	m	class:OVR::CAPI::HMDState
BeginFrameThreadId	Src/CAPI/CAPI_HMDState.h	/^    ThreadId                BeginFrameThreadId;    $/;"	m	class:OVR::CAPI::HMDState
BeginFrameTimingCalled	Src/CAPI/CAPI_HMDState.h	/^    bool                    BeginFrameTimingCalled;$/;"	m	class:OVR::CAPI::HMDState
Beginning	Src/Kernel/OVR_Deque.h	/^    int         Beginning;      \/\/ Index of the first element$/;"	m	class:OVR::Deque
BelowNormalPriority	Src/Kernel/OVR_Threads.h	/^        BelowNormalPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
BerkleyBindParameters	Src/Net/OVR_Socket.cpp	/^BerkleyBindParameters::BerkleyBindParameters() :$/;"	f	class:OVR::Net::BerkleyBindParameters
BerkleyBindParameters	Src/Net/OVR_Socket.h	/^struct BerkleyBindParameters$/;"	s	namespace:OVR::Net
BerkleyListenerDescription	Src/Net/OVR_Session.h	/^	BerkleyListenerDescription() :$/;"	f	class:OVR::Net::BerkleyListenerDescription
BerkleyListenerDescription	Src/Net/OVR_Session.h	/^class BerkleyListenerDescription : public ListenerDescription$/;"	c	namespace:OVR::Net
BerkleySocket	Src/Net/OVR_Socket.cpp	/^BerkleySocket::BerkleySocket() :$/;"	f	class:OVR::Net::BerkleySocket
BerkleySocket	Src/Net/OVR_Socket.h	/^class BerkleySocket : public Socket$/;"	c	namespace:OVR::Net
BernsteinHashFunction	Src/Kernel/OVR_String.cpp	/^size_t String::BernsteinHashFunction(const void* pdataIn, size_t size, size_t seed)$/;"	f	class:OVR::String
BernsteinHashFunctionCIS	Src/Kernel/OVR_String.cpp	/^size_t String::BernsteinHashFunctionCIS(const void* pdataIn, size_t size, size_t seed)$/;"	f	class:OVR::String
Bind	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::Bind()$/;"	f	class:OVR::CAPI::GL::Context
Bind	Src/Net/OVR_Unix_Socket.cpp	/^SocketHandle TCPSocket::Bind(BerkleyBindParameters* pBindParameters)$/;"	f	class:OVR::Net::TCPSocket
Bind	Src/Net/OVR_Unix_Socket.cpp	/^SocketHandle UDPSocket::Bind(BerkleyBindParameters *pBindParameters)$/;"	f	class:OVR::Net::UDPSocket
BindShared	Src/Net/OVR_Unix_Socket.cpp	/^static SocketHandle BindShared(int ai_family, int ai_socktype, BerkleyBindParameters *pBindParameters)$/;"	f	namespace:OVR::Net
BitSize_t	Src/Net/OVR_BitStream.h	/^typedef uint32_t BitSize_t;$/;"	t	namespace:OVR::Net
BitStream	Src/Net/OVR_BitStream.cpp	/^BitStream::BitStream( char* _data, const unsigned int lengthInBytes, bool _copyData )$/;"	f	class:OVR::Net::BitStream
BitStream	Src/Net/OVR_BitStream.cpp	/^BitStream::BitStream( const unsigned int initialBytesToAllocate )$/;"	f	class:OVR::Net::BitStream
BitStream	Src/Net/OVR_BitStream.cpp	/^BitStream::BitStream()$/;"	f	class:OVR::Net::BitStream
BitStream	Src/Net/OVR_BitStream.h	/^	BitStream( const BitStream & \/*invalid*\/) : numberOfBitsUsed(0), numberOfBitsAllocated(0), readOffset(0),data(NULL), copyData(false) {$/;"	f	class:OVR::Net::BitStream
BitStream	Src/Net/OVR_BitStream.h	/^class BitStream : public NewOverrideBase$/;"	c	namespace:OVR::Net
Blend	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Blend;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Block	Src/Kernel/OVR_SharedMemory.cpp	/^        Ptr<FakeMemoryBlock> Block;$/;"	m	class:OVR::SharedMemoryInternal	file:
BlockedProducers	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    List<NotifyEvent>   BlockedProducers;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
Blocking	Src/Net/OVR_Session.h	/^    bool               Blocking;$/;"	m	struct:OVR::Net::ConnectParametersBerkleySocket
BoundSocketToConnectWith	Src/Net/OVR_Session.h	/^	Ptr<BerkleySocket> BoundSocketToConnectWith;$/;"	m	struct:OVR::Net::ConnectParametersBerkleySocket
BoundSocketToListenWith	Src/Net/OVR_Session.h	/^	Ptr<BerkleySocket> BoundSocketToListenWith;$/;"	m	class:OVR::Net::BerkleyListenerDescription
Bounds3	Src/Kernel/OVR_Math.h	/^	Bounds3( const Vector3<T> & mins, const Vector3<T> & maxs )$/;"	f	class:OVR::Bounds3
Bounds3	Src/Kernel/OVR_Math.h	/^	Bounds3()$/;"	f	class:OVR::Bounds3
Bounds3	Src/Kernel/OVR_Math.h	/^class Bounds3$/;"	c	namespace:OVR
Bounds3d	Src/Kernel/OVR_Math.h	/^typedef Bounds3<double>	Bounds3d;$/;"	t	namespace:OVR
Bounds3f	Src/Kernel/OVR_Math.h	/^typedef Bounds3<float>	Bounds3f;$/;"	t	namespace:OVR
BringToFront	Src/Kernel/OVR_List.h	/^    void BringToFront(ValueType* p)$/;"	f	class:OVR::List
Broadcast	Src/Net/OVR_Session.cpp	/^void Session::Broadcast(BroadcastParameters *payload)$/;"	f	class:OVR::Net::Session
BroadcastParameters	Src/Net/OVR_Session.h	/^    BroadcastParameters() :$/;"	f	class:OVR::Net::BroadcastParameters
BroadcastParameters	Src/Net/OVR_Session.h	/^    BroadcastParameters(const void* _pData, int _bytes) :$/;"	f	class:OVR::Net::BroadcastParameters
BroadcastParameters	Src/Net/OVR_Session.h	/^class BroadcastParameters$/;"	c	namespace:OVR::Net
BroadcastSignal	Src/Net/OVR_RPC1.cpp	/^void RPC1::BroadcastSignal(OVR::String sharedIdentifier, OVR::Net::BitStream* bitStream)$/;"	f	class:OVR::Net::Plugins::RPC1
Buffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^Buffer::Buffer(RenderParams* rp) : pParams(rp), Size(0), Use(0), GLBuffer(0)$/;"	f	class:OVR::CAPI::GL::Buffer
Buffer	Src/CAPI/GL/CAPI_GL_Util.h	/^class Buffer : public RefCountBase<Buffer>$/;"	c	namespace:OVR::CAPI::GL
Buffer	Src/Kernel/OVR_Atomic.h	/^    uint64_t        Buffer[(sizeof(Lock)+sizeof(uint64_t)-1)\/sizeof(uint64_t)];$/;"	m	class:OVR::SharedLock
Buffer	Src/Kernel/OVR_ThreadCommandQueue.h	/^            uint8_t Buffer[MaxSize];$/;"	m	union:OVR::ThreadCommand::PopBuffer::__anon22
BufferMode	Src/Kernel/OVR_File.h	/^    BufferModeType  BufferMode;$/;"	m	class:OVR::BufferedFile
BufferModeType	Src/Kernel/OVR_File.h	/^    enum BufferModeType$/;"	g	class:OVR::BufferedFile
BufferSize	Src/Kernel/OVR_String.h	/^    size_t          BufferSize;$/;"	m	class:OVR::StringBuffer
BufferUsage	Src/CAPI/GL/CAPI_GL_Util.h	/^enum BufferUsage$/;"	g	namespace:OVR::CAPI::GL
Buffer_Index	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_Index    = 2,$/;"	e	enum:OVR::CAPI::GL::BufferUsage
Buffer_ReadOnly	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_ReadOnly = 0x100, \/\/ Buffer must be created with Data().$/;"	e	enum:OVR::CAPI::GL::BufferUsage
Buffer_TypeMask	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_TypeMask = 0xff,$/;"	e	enum:OVR::CAPI::GL::BufferUsage
Buffer_Uniform	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_Uniform  = 4,$/;"	e	enum:OVR::CAPI::GL::BufferUsage
Buffer_Unknown	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_Unknown  = 0,$/;"	e	enum:OVR::CAPI::GL::BufferUsage
Buffer_Vertex	Src/CAPI/GL/CAPI_GL_Util.h	/^    Buffer_Vertex   = 1,$/;"	e	enum:OVR::CAPI::GL::BufferUsage
BufferedFile	Src/Kernel/OVR_File.cpp	/^BufferedFile::BufferedFile() : DelegatedFile(0)$/;"	f	class:OVR::BufferedFile
BufferedFile	Src/Kernel/OVR_File.cpp	/^BufferedFile::BufferedFile(File *pfile) : DelegatedFile(pfile)$/;"	f	class:OVR::BufferedFile
BufferedFile	Src/Kernel/OVR_File.h	/^    BufferedFile(const BufferedFile &) : DelegatedFile(), pBuffer(NULL), BufferMode(NoBuffer), Pos(0), DataSize(0), FilePos(0) { }$/;"	f	class:OVR::BufferedFile
BufferedFile	Src/Kernel/OVR_File.h	/^class BufferedFile : public DelegatedFile$/;"	c	namespace:OVR
BypassPrefix	Src/Service/Service_NetSessionCommon.cpp	/^static const char* BypassPrefix = "server:";$/;"	m	namespace:OVR::Service	file:
ByteUtil	Src/Kernel/OVR_Alg.h	/^namespace ByteUtil {$/;"	n	namespace:OVR::Alg
Bytes	Src/Net/OVR_Session.h	/^	int             Bytes;       \/\/ Number of bytes of data received$/;"	m	class:OVR::Net::SendParameters
Bytes	Src/Net/OVR_Session.h	/^	int         Bytes;       \/\/ Number of bytes of data received$/;"	m	struct:OVR::Net::ReceivePayload
Bytes	Src/Net/OVR_Session.h	/^    int             Bytes;       \/\/ Number of bytes of data received$/;"	m	class:OVR::Net::BroadcastParameters
BytesAvailable	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::BytesAvailable()$/;"	f	class:OVR::BufferedFile
BytesAvailable	Src/Kernel/OVR_File.h	/^    int         BytesAvailable()$/;"	f	class:OVR::MemoryFile
BytesAvailable	Src/Kernel/OVR_File.h	/^    virtual int         BytesAvailable()                            { return pFile->BytesAvailable(); } $/;"	f	class:OVR::DelegatedFile
BytesAvailable	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::BytesAvailable()$/;"	f	class:OVR::FILEFile
BytesAvailable	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         BytesAvailable()                                     { return  0; }$/;"	f	class:OVR::UnopenedFile
BytesFromStream	Src/Net/OVR_PacketizedTCPSocket.cpp	/^int PacketizedTCPSocket::BytesFromStream(uint8_t* pData, int bytesRead)$/;"	f	class:OVR::Net::PacketizedTCPSocket
C	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    Color     C;$/;"	m	struct:OVR::CAPI::GL::HASWVertex	file:
C2T_union	Src/Kernel/OVR_Atomic.h	/^    union C2T_union { C c; T t; };$/;"	u	class:OVR::AtomicOps
CALL_BLOCKING	Src/Net/OVR_RPC1.cpp	/^	CALL_BLOCKING,$/;"	e	enum:OVR::Net::Plugins::__anon5	file:
CAPI	Src/CAPI/CAPI_DistortionRenderer.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_DistortionRenderer.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/CAPI_FrameTimeManager.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_FrameTimeManager.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/CAPI_HMDRenderState.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_HMDRenderState.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/CAPI_HMDState.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_HMDState.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/CAPI_HSWDisplay.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_HSWDisplay.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/CAPI_LatencyStatistics.cpp	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/CAPI_LatencyStatistics.h	/^namespace OVR { namespace CAPI {$/;"	n	namespace:OVR
CAPI	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR
CAPI	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR
CAPI	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^namespace OVR { namespace CAPI { $/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR
CAPI	Src/CAPI/GL/CAPI_GL_Util.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR	file:
CAPI	Src/CAPI/GL/CAPI_GL_Util.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR
CAPI_SystemInitCalled	Src/OVR_CAPI.cpp	/^static ovrBool CAPI_SystemInitCalled = 0;$/;"	v	file:
CAPI_ovrInitializeCalled	Src/OVR_CAPI.cpp	/^static ovrBool CAPI_ovrInitializeCalled = 0;$/;"	v	file:
CAPI_pNetClient	Src/OVR_CAPI.cpp	/^static OVR::Service::NetClient* CAPI_pNetClient = 0;$/;"	v	file:
CGSConnectionID	Src/CAPI/GL/CAPI_GL_Util.cpp	/^typedef void *CGSConnectionID;$/;"	t	file:
CGSSurfaceID	Src/CAPI/GL/CAPI_GL_Util.cpp	/^typedef int32_t CGSSurfaceID;$/;"	t	file:
CGSWindowID	Src/CAPI/GL/CAPI_GL_Util.cpp	/^typedef int32_t CGSWindowID;$/;"	t	file:
COMMONFLAGS	Makefile	/^COMMONFLAGS   = -Wall -Wextra -pipe -fPIC -msse2$/;"	m
CRC32_Calculate	Src/Kernel/OVR_CRC32.cpp	/^uint32_t CRC32_Calculate(const void* data, int bytes, uint32_t accumulator)$/;"	f	namespace:OVR
CRC_Table	Src/Kernel/OVR_CRC32.cpp	/^static const uint32_t CRC_Table[256] = {$/;"	m	namespace:OVR	file:
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS 			?=$/;"	m
CalcHash	Src/Kernel/OVR_Hash.h	/^    static size_t CalcHash(const K& data)   { return HashF()(data); }$/;"	f	struct:OVR::HashNode
CalcRenderDesc	Src/CAPI/CAPI_HMDRenderState.cpp	/^ovrEyeRenderDesc HMDRenderState::CalcRenderDesc(ovrEyeType eyeType, const ovrFovPort& fov) const$/;"	f	class:OVR::CAPI::HMDRenderState
CalculateDistortionAndFovInternal	Src/Util/Util_Render_Stereo.cpp	/^static DistortionAndFov CalculateDistortionAndFovInternal ( StereoEye eyeType, HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateDistortionRenderDesc	Src/OVR_Stereo.cpp	/^DistortionRenderDesc CalculateDistortionRenderDesc ( StereoEye eyeType, HmdRenderInfo const &hmd,$/;"	f	namespace:OVR
CalculateEyeVirtualCameraOffset	Src/Util/Util_Render_Stereo.cpp	/^Vector3f CalculateEyeVirtualCameraOffset(HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateFovFromEyePosition	Src/OVR_Stereo.cpp	/^FovPort CalculateFovFromEyePosition ( float eyeReliefInMeters,$/;"	f	namespace:OVR
CalculateFovFromHmdInfo	Src/OVR_Stereo.cpp	/^FovPort CalculateFovFromHmdInfo ( StereoEye eyeType,$/;"	f	namespace:OVR
CalculateIdealPixelSize	Src/OVR_Stereo.cpp	/^Sizei CalculateIdealPixelSize ( StereoEye eyeType, DistortionRenderDesc const &distortion,$/;"	f	namespace:OVR
CalculateListMedianRecursive	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double CalculateListMedianRecursive(const double inputList[TimeDeltaCollector::Capacity], int inputListLength, int lessThanSum, int greaterThanSum)$/;"	f	namespace:OVR::CAPI
CalculateRecommendedFov	Src/Util/Util_Render_Stereo.cpp	/^FovPort CalculateRecommendedFov ( HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateRecommendedTextureSize	Src/Util/Util_Render_Stereo.cpp	/^Sizei CalculateRecommendedTextureSize ( HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateRecommendedTextureSize	Src/Util/Util_Render_Stereo.cpp	/^Sizei StereoConfig::CalculateRecommendedTextureSize ( bool rendertargetSharedByBothEyes,$/;"	f	class:OVR::Util::Render::StereoConfig
CalculateStereoEyeParams	Src/Util/Util_Render_Stereo.cpp	/^StereoEyeParams CalculateStereoEyeParams ( HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateStereoEyeParamsInternal	Src/Util/Util_Render_Stereo.cpp	/^static StereoEyeParams CalculateStereoEyeParamsInternal ( StereoEye eyeType, HmdRenderInfo const &hmd,$/;"	f	namespace:OVR::Util::Render
CalculateViewportDensityInternal	Src/Util/Util_Render_Stereo.cpp	/^static Recti CalculateViewportDensityInternal ( StereoEye eyeType,$/;"	f	namespace:OVR::Util::Render
CalculateViewportInternal	Src/Util/Util_Render_Stereo.cpp	/^static Recti CalculateViewportInternal ( StereoEye eyeType,$/;"	f	namespace:OVR::Util::Render
CalculateViewportScaleAndOffsetInternal	Src/Util/Util_Render_Stereo.cpp	/^static ViewportScaleAndOffset CalculateViewportScaleAndOffsetInternal ($/;"	f	namespace:OVR::Util::Render
Call	Src/Kernel/OVR_Observer.h	/^	bool Call()$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1& p1)$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1& p1, Param2& p2)$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1& p1, Param2& p2, Param3& p3)$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1* p1)$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1* p1, Param2* p2)$/;"	f	class:OVR::Observer
Call	Src/Kernel/OVR_Observer.h	/^    bool Call(Param1* p1, Param2* p2, Param3* p3)$/;"	f	class:OVR::Observer
CallBlocking	Src/Net/OVR_RPC1.cpp	/^bool RPC1::CallBlocking( OVR::String uniqueID, OVR::Net::BitStream* bitStream, Ptr<Connection> pConnection, OVR::Net::BitStream* returnData )$/;"	f	class:OVR::Net::Plugins::RPC1
CameraDriverVersion	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
CameraFrustumFarZInMeters	Src/OVR_CAPI.h	/^    float       CameraFrustumFarZInMeters;$/;"	m	struct:ovrHmdDesc_
CameraFrustumFarZInMeters	Src/OVR_Stereo.h	/^    float   CameraFrustumFarZInMeters;$/;"	m	class:OVR::HMDInfo
CameraFrustumHFovInRadians	Src/OVR_CAPI.h	/^    float       CameraFrustumHFovInRadians;$/;"	m	struct:ovrHmdDesc_
CameraFrustumHFovInRadians	Src/OVR_Stereo.h	/^    float   CameraFrustumHFovInRadians;$/;"	m	class:OVR::HMDInfo
CameraFrustumNearZInMeters	Src/OVR_CAPI.h	/^    float       CameraFrustumNearZInMeters;$/;"	m	struct:ovrHmdDesc_
CameraFrustumNearZInMeters	Src/OVR_Stereo.h	/^    float   CameraFrustumNearZInMeters;$/;"	m	class:OVR::HMDInfo
CameraFrustumVFovInRadians	Src/OVR_CAPI.h	/^    float       CameraFrustumVFovInRadians;$/;"	m	struct:ovrHmdDesc_
CameraFrustumVFovInRadians	Src/OVR_Stereo.h	/^    float   CameraFrustumVFovInRadians;$/;"	m	class:OVR::HMDInfo
CameraPose	Src/OVR_CAPI.h	/^    ovrPosef       CameraPose;$/;"	m	struct:ovrTrackingState_
CameraPose	Src/Tracking/Tracking_SensorState.h	/^    Posef        CameraPose;$/;"	m	class:OVR::Tracking::TrackingState
Capacity	Src/CAPI/CAPI_FrameTimeManager.h	/^    enum { Capacity = 12 };$/;"	e	enum:OVR::CAPI::TimeDeltaCollector::__anon3
Capacity	Src/Kernel/OVR_Array.h	/^    size_t Capacity;$/;"	m	struct:OVR::ArrayConstPolicy
Capacity	Src/Kernel/OVR_Array.h	/^    size_t Capacity;$/;"	m	struct:OVR::ArrayDefaultPolicy
Capacity	Src/Kernel/OVR_Deque.h	/^    const int   Capacity;       \/\/ Deque capacity$/;"	m	class:OVR::Deque
CastTo	Src/Kernel/OVR_Math.h	/^	inline SymMat3<U> CastTo() const$/;"	f	class:OVR::SymMat3
CenterFromTopInMeters	Src/OVR_Stereo.h	/^	float       CenterFromTopInMeters;$/;"	m	class:OVR::HMDInfo
CenterFromTopInMeters	Src/OVR_Stereo.h	/^    float       CenterFromTopInMeters;$/;"	m	struct:OVR::HmdRenderInfo
CenteredFromWorld	Src/Tracking/Tracking_SensorStateReader.h	/^    Posed CenteredFromWorld; $/;"	m	class:OVR::Tracking::SensorStateReader
CgDisplayId	Src/CAPI/GL/CAPI_GL_Util.h	/^    long   CgDisplayId; \/\/ CGDirectDisplayID$/;"	m	struct:OVR::CAPI::GL::DisplayId
Changed	Src/OVR_Profile.h	/^    bool                Changed;$/;"	m	class:OVR::ProfileManager
Char	Src/Kernel/OVR_Types.h	/^typedef char            Char;$/;"	t	namespace:OVR
CharFromBase32	Src/OVR_SerialFormat.cpp	/^static const char* CharFromBase32 = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";$/;"	m	namespace:OVR	file:
CheckExpand	Src/Kernel/OVR_Hash.h	/^    void CheckExpand()$/;"	f	class:OVR::HashSetBase
CheckExtensions	Src/CAPI/GL/CAPI_GLE.cpp	/^    static void CheckExtensions(ValueStringPair* pValueStringPairArray, size_t arrayCount, const char* extensions)$/;"	f	file:
Children	Src/OVR_JSON.h	/^    List<JSON>      Children;$/;"	m	class:OVR::JSON
Chop	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE int     Chop(T f)$/;"	f	namespace:OVR::Alg
ChromaticAberration	Src/OVR_Stereo.cpp	/^    uint16_t    ChromaticAberration[4];$/;"	m	struct:OVR::LensConfigStored_CatmullRom10Version1	file:
ChromaticAberration	Src/OVR_Stereo.h	/^    float               ChromaticAberration[4];$/;"	m	struct:OVR::LensConfig
CirclePlot	Src/Util/Util_ImageWindow.h	/^	} CirclePlot;$/;"	t	namespace:OVR::Util	typeref:struct:OVR::Util::__anon16
CircularBuffer	Src/Kernel/OVR_Deque.h	/^    CircularBuffer(int MaxSize = BaseType::DefaultCapacity) : BaseType(MaxSize) { };$/;"	f	class:OVR::CircularBuffer
CircularBuffer	Src/Kernel/OVR_Deque.h	/^class CircularBuffer : public InPlaceMutableDeque<Elem, Allocator>$/;"	c	namespace:OVR
CircularBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    CircularBuffer(size_t size)$/;"	f	class:OVR::CircularBuffer
CircularBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^class CircularBuffer$/;"	c	namespace:OVR	file:
Clamp	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE const T Clamp(const T v, const T minVal, const T maxVal)$/;"	f	namespace:OVR::Alg
ClampToPhysicalScreenFov	Src/OVR_Stereo.cpp	/^FovPort ClampToPhysicalScreenFov( StereoEye eyeType, DistortionRenderDesc const &distortion,$/;"	f	namespace:OVR
CleanType	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType           { typedef T Type; };$/;"	s	namespace:OVR
CleanType	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<T&>       { typedef T Type; };$/;"	s	namespace:OVR
CleanType	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<const T&> { typedef T Type; };$/;"	s	namespace:OVR
CleanType	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<const T>  { typedef T Type; };$/;"	s	namespace:OVR
Clear	Src/CAPI/CAPI_FrameTimeManager.h	/^    void    Clear() { Count = 0; }$/;"	f	struct:OVR::CAPI::TimeDeltaCollector
Clear	Src/Kernel/OVR_Array.h	/^    void    Clear()                     { Data.Resize(0); }$/;"	f	class:OVR::ArrayBase
Clear	Src/Kernel/OVR_Deque.h	/^void Deque<Elem, Allocator>::Clear()$/;"	f	class:OVR::Deque
Clear	Src/Kernel/OVR_Hash.h	/^    inline void    Clear() { mHash.Clear(); }$/;"	f	class:OVR::Hash
Clear	Src/Kernel/OVR_Hash.h	/^    void    Clear()$/;"	f	class:OVR::HashsetCachedEntry
Clear	Src/Kernel/OVR_Hash.h	/^    void    Clear()$/;"	f	class:OVR::HashsetCachedNodeEntry
Clear	Src/Kernel/OVR_Hash.h	/^    void    Clear()$/;"	f	class:OVR::HashsetEntry
Clear	Src/Kernel/OVR_Hash.h	/^    void    Clear()$/;"	f	class:OVR::HashsetNodeEntry
Clear	Src/Kernel/OVR_Hash.h	/^    void Clear() $/;"	f	class:OVR::HashSetBase
Clear	Src/Kernel/OVR_List.h	/^    void Clear()$/;"	f	class:OVR::List
Clear	Src/Kernel/OVR_Math.h	/^	void Clear()$/;"	f	class:OVR::Bounds3
Clear	Src/Kernel/OVR_Observer.h	/^	void Clear()$/;"	f	class:OVR::ObserverHash
Clear	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE void    Clear()$/;"	f	class:OVR::Ptr
Clear	Src/Kernel/OVR_String.cpp	/^void String::Clear()$/;"	f	class:OVR::String
Clear	Src/Kernel/OVR_String.cpp	/^void StringBuffer::Clear()$/;"	f	class:OVR::StringBuffer
ClearAndRelease	Src/Kernel/OVR_Array.h	/^    void    ClearAndRelease()           { Data.ClearAndRelease(); }$/;"	f	class:OVR::ArrayBase
ClearAndRelease	Src/Kernel/OVR_Array.h	/^    void ClearAndRelease()$/;"	f	struct:OVR::ArrayDataBase
ClearColor	Src/CAPI/CAPI_HMDRenderState.h	/^    float                   ClearColor[4];$/;"	m	struct:OVR::CAPI::HMDRenderState
ClearColor	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLfloat ClearColor[4];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
ClearProfileData	Src/OVR_Profile.cpp	/^void ProfileManager::ClearProfileData()$/;"	f	class:OVR::ProfileManager
Client_ConnectedWait	Src/Net/OVR_Session.h	/^    Client_ConnectedWait,  \/\/ Connected! Waiting for server to authorize$/;"	e	enum:OVR::Net::EConnectionState
Client_Connecting	Src/Net/OVR_Session.h	/^    Client_Connecting,     \/\/ Waiting for TCP connection$/;"	e	enum:OVR::Net::EConnectionState
Close	Src/Kernel/OVR_File.cpp	/^bool    BufferedFile::Close()$/;"	f	class:OVR::BufferedFile
Close	Src/Kernel/OVR_File.h	/^    bool        Close()$/;"	f	class:OVR::MemoryFile
Close	Src/Kernel/OVR_File.h	/^    virtual bool        Close()                                     { return pFile->Close(); }    $/;"	f	class:OVR::DelegatedFile
Close	Src/Kernel/OVR_FileFILE.cpp	/^bool FILEFile::Close()$/;"	f	class:OVR::FILEFile
Close	Src/Kernel/OVR_SharedMemory.cpp	/^void SharedMemory::Close()$/;"	f	class:OVR::SharedMemory
Close	Src/Kernel/OVR_SharedMemory.cpp	/^void SharedMemoryInternal::Close()$/;"	f	class:OVR::SharedMemoryInternal
Close	Src/Kernel/OVR_SysFile.cpp	/^    virtual bool        Close()                                              { return  0; }$/;"	f	class:OVR::UnopenedFile
Close	Src/Kernel/OVR_SysFile.cpp	/^bool SysFile::Close()$/;"	f	class:OVR::SysFile
Close	Src/Net/OVR_Unix_Socket.cpp	/^void BerkleySocket::Close()$/;"	f	class:OVR::Net::BerkleySocket
Close	Src/OVR_Profile.cpp	/^bool Profile::Close()$/;"	f	class:OVR::Profile
Cmp	Src/Kernel/OVR_Alg.h	/^    static int      Cmp  (const void* p1, const void* p2, size_t byteCount)      { return memcmp(p1, p2, byteCount); }$/;"	f	class:OVR::Alg::MemUtil
Cmp16	Src/Kernel/OVR_Alg.h	/^inline int MemUtil::Cmp16(const void* p1, const void* p2, size_t int16Count)$/;"	f	class:OVR::Alg::MemUtil
Cmp32	Src/Kernel/OVR_Alg.h	/^inline int MemUtil::Cmp32(const void* p1, const void* p2, size_t int32Count)$/;"	f	class:OVR::Alg::MemUtil
Cmp64	Src/Kernel/OVR_Alg.h	/^inline int MemUtil::Cmp64(const void* p1, const void* p2, size_t int64Count)$/;"	f	class:OVR::Alg::MemUtil
CmpUnicodeKey	Src/Kernel/OVR_Std.cpp	/^static inline bool CmpUnicodeKey(const GUnicodePairType& a, uint16_t key)$/;"	f	namespace:OVR
Cofactor	Src/Kernel/OVR_Math.h	/^    T Cofactor(size_t I, size_t J) const$/;"	f	class:OVR::Matrix4
Col	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Color    Col;$/;"	m	struct:OVR::CAPI::GL::DistortionVertex	file:
Col	Src/Kernel/OVR_Math.h	/^	inline Vector3<T> Col(int c) const$/;"	f	class:OVR::Matrix3
Color	Src/Kernel/OVR_Color.h	/^    Color()$/;"	f	struct:OVR::Color
Color	Src/Kernel/OVR_Color.h	/^    Color(unsigned c)$/;"	f	struct:OVR::Color
Color	Src/Kernel/OVR_Color.h	/^    Color(unsigned char r,unsigned char g,unsigned char b, unsigned char a = 0xFF)$/;"	f	struct:OVR::Color
Color	Src/Kernel/OVR_Color.h	/^struct Color$/;"	s	namespace:OVR
ColorToReadbackIndex	Src/Util/Util_LatencyTest2Reader.cpp	/^bool FrameTimeRecord::ColorToReadbackIndex(int *readbackIndex, unsigned char color)$/;"	f	class:OVR::Util::FrameTimeRecord
ColorWritemask	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint ColorWritemask[4];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
CombinedSharedStateReader	Src/Tracking/Tracking_SensorState.h	/^typedef SharedObjectReader< CombinedSharedStateUpdater > CombinedSharedStateReader;$/;"	t	namespace:OVR::Tracking
CombinedSharedStateUpdater	Src/Tracking/Tracking_SensorState.h	/^struct CombinedSharedStateUpdater$/;"	s	namespace:OVR::Tracking
CombinedSharedStateWriter	Src/Tracking/Tracking_SensorState.h	/^typedef SharedObjectWriter< CombinedSharedStateUpdater > CombinedSharedStateWriter;$/;"	t	namespace:OVR::Tracking
CommandBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    CircularBuffer      CommandBuffer;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
Compare	Src/Kernel/OVR_Alg.h	/^    static bool Compare(const T& a, const T& b)$/;"	f	struct:OVR::Alg::OperatorLess
Compare	Src/Kernel/OVR_Math.h	/^    bool	Compare(const Vector2&b, T tolerance = ((T)MATH_DOUBLE_TOLERANCE))  $/;"	f	class:OVR::Vector2
Compare	Src/Kernel/OVR_Math.h	/^    bool      Compare(const Vector3&b, T tolerance = ((T)MATH_DOUBLE_TOLERANCE)) $/;"	f	class:OVR::Vector3
Compare	Src/Kernel/OVR_Math.h	/^    bool      Compare(const Vector4&b, T tolerance = ((T)MATH_DOUBLE_TOLERANCE))$/;"	f	class:OVR::Vector4
CompareAndSet_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline bool  CompareAndSet_Acquire(T c, T val)  { return Ops::CompareAndSet_Relse(&Value, c, val); }$/;"	f	class:OVR::AtomicValueBase
CompareAndSet_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Acquire(volatile O_T* p, O_T c, O_T val) { O_AcquireSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::CompareAndSet_NoSync(p,c,val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
CompareAndSet_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline bool  CompareAndSet_NoSync(T c, T val)   { return Ops::CompareAndSet_NoSync(&Value, c, val); }$/;"	f	class:OVR::AtomicValueBase
CompareAndSet_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_NoSync(volatile C* p, C c, C val) { C2T_union u,cu; u.c = val; cu.c = c; return Ops::CompareAndSet_NoSync((PT)p, cu.t, u.t); }$/;"	f	class:OVR::AtomicOps
CompareAndSet_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_NoSync(volatile O_T* p, O_T c, O_T val) { if (*p==c) { *p = val; return 1; } return 0; }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
CompareAndSet_Release	Src/Kernel/OVR_Atomic.h	/^    inline bool  CompareAndSet_Release(T c, T val)  { return Ops::CompareAndSet_Release(&Value, c, val); }$/;"	f	class:OVR::AtomicValueBase
CompareAndSet_Release	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Release(volatile C* p, C c, C val){ C2T_union u,cu; u.c = val; cu.c = c; return Ops::CompareAndSet_Release((PT)p, cu.t, u.t); }$/;"	f	class:OVR::AtomicOps
CompareAndSet_Release	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Release(volatile O_T* p, O_T c, O_T val) { O_ReleaseSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::CompareAndSet_NoSync(p,c,val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
CompareAndSet_Relse	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Relse(volatile C* p, C c, C val){ C2T_union u,cu; u.c = val; cu.c = c; return Ops::CompareAndSet_Acquire((PT)p, cu.t, u.t); }$/;"	f	class:OVR::AtomicOps
CompareAndSet_Sync	Src/Kernel/OVR_Atomic.h	/^    inline bool  CompareAndSet_Sync(T c, T val)     { return Ops::CompareAndSet_Sync(&Value, c, val); }$/;"	f	class:OVR::AtomicValueBase
CompareAndSet_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Sync(volatile C* p, C c, C val)   { C2T_union u,cu; u.c = val; cu.c = c; return Ops::CompareAndSet_Sync((PT)p, cu.t, u.t); }$/;"	f	class:OVR::AtomicOps
CompareAndSet_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static bool  CompareAndSet_Sync(volatile O_T* p, O_T c, O_T val)    { O_FullSync    sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::CompareAndSet_NoSync(p,c,val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
CompareNoCase	Src/Kernel/OVR_String.cpp	/^int String::CompareNoCase(const char* a, const char* b)$/;"	f	class:OVR::String
CompareNoCase	Src/Kernel/OVR_String.cpp	/^int String::CompareNoCase(const char* a, const char* b, intptr_t len)$/;"	f	class:OVR::String
CompareNoCase	Src/Kernel/OVR_String.h	/^    int CompareNoCase(const String& str) const$/;"	f	class:OVR::String
CompareNoCase	Src/Kernel/OVR_String.h	/^    int CompareNoCase(const char* pstr) const$/;"	f	class:OVR::String
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes< Vector4<T> >::Type CompatibleType;$/;"	t	class:OVR::Vector4
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes<Quat<T> >::Type CompatibleType;$/;"	t	class:OVR::Quat
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes<Rect<T> >::Type CompatibleType;$/;"	t	class:OVR::Rect
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes<Size<T> >::Type CompatibleType;$/;"	t	class:OVR::Size
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes<Vector2<T> >::Type CompatibleType;$/;"	t	class:OVR::Vector2
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef  typename CompatibleTypes<Vector3<T> >::Type CompatibleType;$/;"	t	class:OVR::Vector3
CompatibleType	Src/Kernel/OVR_Math.h	/^    typedef typename CompatibleTypes<Pose<T> >::Type CompatibleType;$/;"	t	class:OVR::Pose
CompatibleType	Src/Tracking/Tracking_PoseState.h	/^	typedef typename CompatibleTypes<Pose<T> >::Type CompatibleType;$/;"	t	class:OVR::PoseState
CompatibleTypes	Src/Kernel/OVR_Math.h	/^struct CompatibleTypes$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Matrix3<double> > { typedef ovrMatrix3d Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Matrix4<float> >  { typedef ovrMatrix4f Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Pose<double> > { typedef ovrPosed Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Pose<float> > { typedef ovrPosef Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Quat<double> >    { typedef ovrQuatd Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Quat<float> >     { typedef ovrQuatf Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Rect<int> >       { typedef ovrRecti Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Size<float> >     { typedef ovrSizef Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Size<int> >       { typedef ovrSizei Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector2<float> >  { typedef ovrVector2f Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector2<int> >    { typedef ovrVector2i Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector3<double> > { typedef ovrVector3d Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector3<float> >  { typedef ovrVector3f Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Tracking/Tracking_PoseState.h	/^	template<> struct CompatibleTypes<OVR::PoseState<double> > { typedef ovrPoseStated Type; };$/;"	s	namespace:OVR
CompatibleTypes	Src/Tracking/Tracking_PoseState.h	/^	template<> struct CompatibleTypes<OVR::PoseState<float> > { typedef ovrPoseStatef Type; };$/;"	s	namespace:OVR
Compile	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool Compile(const char* src)$/;"	f	class:OVR::CAPI::GL::ShaderImpl
Complete	Src/Util/Util_ImageWindow.h	/^	void Complete() { }$/;"	f	class:OVR::Util::ImageWindow
Condv	Src/Kernel/OVR_ThreadsPthread.cpp	/^    pthread_cond_t      Condv;$/;"	m	class:OVR::WaitConditionImpl	file:
Config	Src/OVR_CAPI_GL.h	/^    ovrRenderAPIConfig Config;$/;"	m	union:ovrGLConfig
ConfigureDefaultLog	Src/Kernel/OVR_Log.h	/^    static Log*     ConfigureDefaultLog(unsigned logMask = LogMask_Debug)$/;"	f	class:OVR::Log
ConfigureRendering	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::ConfigureRendering(ovrEyeRenderDesc eyeRenderDescOut[2],$/;"	f	class:OVR::CAPI::HMDState
ConfigureTracking	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::ConfigureTracking(unsigned supportedCaps, unsigned requiredCaps)$/;"	f	class:OVR::CAPI::HMDState
Conj	Src/Kernel/OVR_Math.h	/^    Quat    Conj() const                    { return Quat(-x, -y, -z, w); }$/;"	f	class:OVR::Quat
Connect	Src/Net/OVR_Session.cpp	/^SessionResult Session::Connect(ConnectParameters *cp)$/;"	f	class:OVR::Net::Session
Connect	Src/Net/OVR_Unix_Socket.cpp	/^int TCPSocket::Connect(SockAddr* address)$/;"	f	class:OVR::Net::TCPSocket
Connect	Src/Service/Service_NetClient.cpp	/^bool NetClient::Connect(bool blocking)$/;"	f	class:OVR::Service::NetClient
ConnectPTCP	Src/Net/OVR_Session.cpp	/^SessionResult Session::ConnectPTCP(OVR::Net::BerkleyBindParameters* bbp, SockAddr* remoteAddress, bool blocking)$/;"	f	class:OVR::Net::Session
ConnectParameters	Src/Net/OVR_Session.h	/^	ConnectParameters() :$/;"	f	struct:OVR::Net::ConnectParameters
ConnectParameters	Src/Net/OVR_Session.h	/^struct ConnectParameters$/;"	s	namespace:OVR::Net
ConnectParametersBerkleySocket	Src/Net/OVR_Session.h	/^    ConnectParametersBerkleySocket(BerkleySocket* s, SockAddr* addr, bool blocking,$/;"	f	struct:OVR::Net::ConnectParametersBerkleySocket
ConnectParametersBerkleySocket	Src/Net/OVR_Session.h	/^struct ConnectParametersBerkleySocket : public ConnectParameters$/;"	s	namespace:OVR::Net
ConnectingWait	Src/Net/OVR_Session.h	/^    WaitCondition ConnectingWait;$/;"	m	class:OVR::Net::NetworkConnection
Connection	Src/Net/OVR_Session.h	/^    Connection() :$/;"	f	class:OVR::Net::Connection
Connection	Src/Net/OVR_Session.h	/^class Connection : public RefCountBase<Connection>$/;"	c	namespace:OVR::Net
ConnectionsLock	Src/Net/OVR_Session.h	/^    Lock SocketListenersLock, ConnectionsLock, SessionListenersLock;$/;"	m	class:OVR::Net::Session
ConstArrayAdaptor	Src/Kernel/OVR_Alg.h	/^    ConstArrayAdaptor() : Data(0), Size(0) {}$/;"	f	class:OVR::Alg::ConstArrayAdaptor
ConstArrayAdaptor	Src/Kernel/OVR_Alg.h	/^    ConstArrayAdaptor(const T* ptr, size_t size) : Data(ptr), Size(size) {}$/;"	f	class:OVR::Alg::ConstArrayAdaptor
ConstArrayAdaptor	Src/Kernel/OVR_Alg.h	/^template<class T> class ConstArrayAdaptor$/;"	c	namespace:OVR::Alg
ConstIterator	Src/Kernel/OVR_Array.h	/^        ConstIterator() : pArray(0), CurIndex(-1) {}$/;"	f	class:OVR::ArrayBase::ConstIterator
ConstIterator	Src/Kernel/OVR_Array.h	/^        ConstIterator(const SelfType* parr, intptr_t idx = 0) : pArray(parr), CurIndex(idx) {}$/;"	f	class:OVR::ArrayBase::ConstIterator
ConstIterator	Src/Kernel/OVR_Array.h	/^    class ConstIterator$/;"	c	class:OVR::ArrayBase
ConstIterator	Src/Kernel/OVR_Hash.h	/^        ConstIterator()$/;"	f	struct:OVR::HashSetBase::ConstIterator
ConstIterator	Src/Kernel/OVR_Hash.h	/^        ConstIterator(const SelfType* h, intptr_t index)$/;"	f	struct:OVR::HashSetBase::ConstIterator
ConstIterator	Src/Kernel/OVR_Hash.h	/^    struct ConstIterator$/;"	s	class:OVR::HashSetBase
ConstIterator	Src/Kernel/OVR_Hash.h	/^    typedef typename Container::ConstIterator   ConstIterator;$/;"	t	class:OVR::Hash
ConstMemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type ConstMemberStub(void *object)$/;"	f	class:OVR::Delegate0
ConstMemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type ConstMemberStub(void *object, arg1_type a1)$/;"	f	class:OVR::Delegate1
ConstMemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type ConstMemberStub(void *object, arg1_type a1, arg2_type a2)$/;"	f	class:OVR::Delegate2
ConstMemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type ConstMemberStub(void *object, arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:OVR::Delegate3
Construct	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE T*  Construct(void *p)$/;"	f	namespace:OVR
Construct	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE T*  Construct(void *p, const T& source)$/;"	f	namespace:OVR
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void *) {}$/;"	f	class:OVR::ConstructorPOD
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void *p, const T& source) $/;"	f	class:OVR::ConstructorPOD
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void* p) $/;"	f	class:OVR::ConstructorCPP
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void* p) $/;"	f	class:OVR::ConstructorMov
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void* p, const T& source) $/;"	f	class:OVR::ConstructorCPP
Construct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Construct(void* p, const T& source) $/;"	f	class:OVR::ConstructorMov
ConstructAlt	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE T*  ConstructAlt(void *p, const S& source)$/;"	f	namespace:OVR
ConstructAlt	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE T*  ConstructAlt(void *p, const S1& src1, const S2& src2)$/;"	f	namespace:OVR
ConstructAlt	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructAlt(void *p, const S& source)$/;"	f	class:OVR::ConstructorPOD
ConstructAlt	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructAlt(void* p, const S& source)$/;"	f	class:OVR::ConstructorCPP
ConstructAlt	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructAlt(void* p, const S& source)$/;"	f	class:OVR::ConstructorMov
ConstructArray	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE void ConstructArray(void *p, size_t count)$/;"	f	namespace:OVR
ConstructArray	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE void ConstructArray(void *p, size_t count, const T& source)$/;"	f	namespace:OVR
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count)$/;"	f	class:OVR::ConstructorCPP
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count)$/;"	f	class:OVR::ConstructorMov
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T& source)$/;"	f	class:OVR::ConstructorCPP
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T& source)$/;"	f	class:OVR::ConstructorMov
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T& source)$/;"	f	class:OVR::ConstructorPOD
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T* psource)$/;"	f	class:OVR::ConstructorCPP
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T* psource)$/;"	f	class:OVR::ConstructorMov
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void* p, size_t count, const T* psource)$/;"	f	class:OVR::ConstructorPOD
ConstructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void ConstructArray(void*, size_t) {}$/;"	f	class:OVR::ConstructorPOD
ConstructorCPP	Src/Kernel/OVR_ContainerAllocator.h	/^class ConstructorCPP$/;"	c	namespace:OVR
ConstructorMov	Src/Kernel/OVR_ContainerAllocator.h	/^class ConstructorMov$/;"	c	namespace:OVR
ConstructorPOD	Src/Kernel/OVR_ContainerAllocator.h	/^class ConstructorPOD$/;"	c	namespace:OVR
Consumer	Src/Kernel/OVR_Lockless.cpp	/^class Consumer : public Thread$/;"	c	namespace:OVR::LocklessTest	file:
ContainerAllocator	Src/Kernel/OVR_ContainerAllocator.h	/^template<class T> struct ContainerAllocator     : ContainerAllocatorBase, ConstructorMov<T> {};$/;"	s	namespace:OVR
ContainerAllocatorBase	Src/Kernel/OVR_ContainerAllocator.h	/^class ContainerAllocatorBase$/;"	c	namespace:OVR
ContainerAllocator_CPP	Src/Kernel/OVR_ContainerAllocator.h	/^template<class T> struct ContainerAllocator_CPP : ContainerAllocatorBase, ConstructorCPP<T> {};$/;"	s	namespace:OVR
ContainerAllocator_POD	Src/Kernel/OVR_ContainerAllocator.h	/^template<class T> struct ContainerAllocator_POD : ContainerAllocatorBase, ConstructorPOD<T> {};$/;"	s	namespace:OVR
Context	Src/CAPI/GL/CAPI_GL_Util.cpp	/^Context::Context() : initialized(false), ownsContext(true), incarnation(0)$/;"	f	class:OVR::CAPI::GL::Context
Context	Src/CAPI/GL/CAPI_GL_Util.h	/^class Context$/;"	c	namespace:OVR::CAPI::GL
Copy	Src/OVR_JSON.cpp	/^JSON* JSON::Copy()$/;"	f	class:OVR::JSON
CopyArrayBackward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayBackward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorCPP
CopyArrayBackward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayBackward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorMov
CopyArrayBackward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayBackward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorPOD
CopyArrayForward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayForward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorCPP
CopyArrayForward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayForward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorMov
CopyArrayForward	Src/Kernel/OVR_ContainerAllocator.h	/^    static void CopyArrayForward(T* dst, const T* src, size_t count)$/;"	f	class:OVR::ConstructorPOD
CopyConstruct	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        virtual ThreadCommand* CopyConstruct(void* p) const $/;"	f	struct:OVR::ThreadCommandQueueImpl::ExitCommand
CopyConstruct	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual ThreadCommand* CopyConstruct(void* p) const $/;"	f	class:OVR::ThreadCommandMF2
CopyConstruct	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual ThreadCommand* CopyConstruct(void* p) const$/;"	f	class:OVR::ThreadCommandMF0
CopyConstruct	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual ThreadCommand* CopyConstruct(void* p) const$/;"	f	class:OVR::ThreadCommandMF1
CopyData	Src/Net/OVR_BitStream.cpp	/^BitSize_t BitStream::CopyData( unsigned char** _data ) const$/;"	f	class:OVR::Net::BitStream
CopyFloatArrayWithLimit	Src/CAPI/CAPI_HMDState.cpp	/^static unsigned CopyFloatArrayWithLimit(float dest[], unsigned destSize,$/;"	f	namespace:OVR::CAPI
CopyFromStream	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::CopyFromStream(File *pstream, int byteSize)$/;"	f	class:OVR::BufferedFile
CopyFromStream	Src/Kernel/OVR_File.h	/^    int         CopyFromStream(File *pstream, int byteSize)$/;"	f	class:OVR::MemoryFile
CopyFromStream	Src/Kernel/OVR_File.h	/^    virtual int         CopyFromStream(File *pstream, int byteSize) { return pFile->CopyFromStream(pstream,byteSize); }$/;"	f	class:OVR::DelegatedFile
CopyFromStream	Src/Kernel/OVR_FileFILE.cpp	/^int FILEFile::CopyFromStream(File *pstream, int byteSize)$/;"	f	class:OVR::FILEFile
CopyFromStream	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         CopyFromStream(File * \/*pstream*\/, int \/*byteSize*\/)  { return -1; }$/;"	f	class:OVR::UnopenedFile
CopyItems	Src/OVR_Profile.cpp	/^void Profile::CopyItems(JSON* root, String prefix)$/;"	f	class:OVR::Profile
Count	Src/CAPI/CAPI_FrameTimeManager.h	/^    int     Count;$/;"	m	struct:OVR::CAPI::TimeDeltaCollector
Create	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^CAPI::DistortionRenderer* DistortionRenderer::Create(ovrHmd hmd,$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
Create	Src/Kernel/OVR_SysFile.h	/^    OVR_FORCE_INLINE bool  Create(const String& path, int mode = Mode_ReadWrite)$/;"	f	class:OVR::SysFile
CreateArray	Src/OVR_JSON.h	/^    static JSON*    CreateArray()  { return new JSON(JSON_Array); }$/;"	f	class:OVR::JSON
CreateBool	Src/OVR_JSON.cpp	/^JSON* JSON::CreateBool(bool b)$/;"	f	class:OVR::JSON
CreateDebugHMDInfo	Src/OVR_Stereo.cpp	/^HMDInfo CreateDebugHMDInfo(HmdTypeEnum hmdType)$/;"	f	namespace:OVR
CreateFromDegrees	Src/OVR_Stereo.h	/^    static FovPort CreateFromDegrees(float horizontalFovDegrees,$/;"	f	struct:OVR::FovPort
CreateFromRadians	Src/OVR_Stereo.h	/^    static FovPort CreateFromRadians(float horizontalFov, float verticalFov)$/;"	f	struct:OVR::FovPort
CreateFunc	Src/CAPI/CAPI_DistortionRenderer.h	/^    typedef DistortionRenderer* (*CreateFunc)(ovrHmd hmd,$/;"	t	class:OVR::CAPI::DistortionRenderer
CreateHMDState	Src/CAPI/CAPI_HMDState.cpp	/^HMDState* HMDState::CreateHMDState(NetClient* client, const HMDNetworkInfo& netInfo)$/;"	f	class:OVR::CAPI::HMDState
CreateHMDState	Src/CAPI/CAPI_HMDState.cpp	/^HMDState* HMDState::CreateHMDState(ovrHmdType hmdType)$/;"	f	class:OVR::CAPI::HMDState
CreateInt	Src/OVR_JSON.cpp	/^JSON* JSON::CreateInt(int num)$/;"	f	class:OVR::JSON
CreateNDCScaleAndOffsetFromFov	Src/OVR_Stereo.cpp	/^ScaleAndOffset2D CreateNDCScaleAndOffsetFromFov ( FovPort tanHalfFov )$/;"	f	namespace:OVR
CreateNull	Src/OVR_JSON.h	/^    static JSON*    CreateNull()   { return new JSON(JSON_Null); }$/;"	f	class:OVR::JSON
CreateNumber	Src/OVR_JSON.cpp	/^JSON* JSON::CreateNumber(double num)$/;"	f	class:OVR::JSON
CreateObject	Src/OVR_JSON.h	/^    static JSON*    CreateObject() { return new JSON(JSON_Object);}$/;"	f	class:OVR::JSON
CreateOrthoSubProjection	Src/OVR_Stereo.cpp	/^Matrix4f CreateOrthoSubProjection ( bool rightHanded, StereoEye eyeType,$/;"	f	namespace:OVR
CreateParams	Src/Kernel/OVR_Threads.h	/^        CreateParams(ThreadFn func = 0, void* hand = 0, size_t ssize = 128 * 1024, $/;"	f	struct:OVR::Thread::CreateParams
CreateParams	Src/Kernel/OVR_Threads.h	/^    struct CreateParams$/;"	s	class:OVR::Thread
CreateProfile	Src/OVR_Profile.cpp	/^Profile* ProfileManager::CreateProfile()$/;"	f	class:OVR::ProfileManager
CreateProjection	Src/OVR_Stereo.cpp	/^Matrix4f CreateProjection( bool rightHanded, FovPort tanHalfFov,$/;"	f	namespace:OVR
CreateShared	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::CreateShared( Context & ctx )$/;"	f	class:OVR::CAPI::GL::Context
CreateSharedMemory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryInternal* SharedMemoryInternal::CreateSharedMemory(const SharedMemory::OpenParameters& params)$/;"	f	class:OVR::SharedMemoryInternal
CreateString	Src/OVR_JSON.cpp	/^JSON* JSON::CreateString(const char *s)$/;"	f	class:OVR::JSON
CreateUVScaleAndOffsetfromNDCScaleandOffset	Src/OVR_Stereo.cpp	/^ScaleAndOffset2D CreateUVScaleAndOffsetfromNDCScaleandOffset ( ScaleAndOffset2D scaleAndOffsetNDC,$/;"	f	namespace:OVR
CreateUser	Src/OVR_Profile.cpp	/^bool ProfileManager::CreateUser(const char* user, const char* name)$/;"	f	class:OVR::ProfileManager
CriticalPriority	Src/Kernel/OVR_Threads.h	/^        CriticalPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
Cross	Src/Kernel/OVR_Math.h	/^    Vector3 Cross(const Vector3& b) const        { return Vector3(y*b.z - z*b.y,$/;"	f	class:OVR::Vector3
CullFace	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint CullFace;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
CurIndex	Src/Kernel/OVR_Array.h	/^        intptr_t        CurIndex;$/;"	m	class:OVR::ArrayBase::ConstIterator
CurIndex	Src/Kernel/OVR_Array.h	/^        intptr_t        CurIndex;$/;"	m	class:OVR::ArrayBase::Iterator
CurrentPredictionValues	Src/Util/Util_Render_Stereo.h	/^    PredictionValues    CurrentPredictionValues;$/;"	m	class:OVR::Util::Render::TimewarpMachine
CustomDistortion	Src/OVR_Stereo.cpp	/^float (*CustomDistortion)(float) = NULL;$/;"	v
CustomDistortionInv	Src/OVR_Stereo.cpp	/^float (*CustomDistortionInv)(float) = NULL;$/;"	v
D	Src/Kernel/OVR_Math.h	/^    T          D;$/;"	m	class:OVR::Plane
DC	Src/CAPI/GL/CAPI_GL_Util.h	/^    HDC    DC;$/;"	m	struct:OVR::CAPI::GL::RenderParams
DC	Src/OVR_CAPI_GL.h	/^    HDC  DC;$/;"	m	struct:ovrGLConfigData_s
DEBUG	Makefile	/^DEBUG         ?= 0$/;"	m
DELETEFILE	Makefile	/^DELETEFILE    = rm -f$/;"	m
DESCRIPTOR_DATA	Src/Displays/OVR_Linux_Display.cpp	/^static const int DESCRIPTOR_DATA       =  5;$/;"	m	namespace:OVR	file:
DETAILED_TIMING_BLOCK	Src/Displays/OVR_Linux_Display.cpp	/^static const int DETAILED_TIMING_BLOCK = -2;$/;"	m	namespace:OVR	file:
DK2BinarySerialFormat	Src/OVR_SerialFormat.h	/^class DK2BinarySerialFormat$/;"	c	namespace:OVR
DK2LabelType	Src/OVR_SerialFormat.h	/^typedef DK2PartId DK2LabelType; \/\/ Printed Serial Number version$/;"	t	namespace:OVR
DK2PartId	Src/OVR_SerialFormat.h	/^enum DK2PartId$/;"	g	namespace:OVR
DK2PartId_Carton	Src/OVR_SerialFormat.h	/^	DK2PartId_Carton = 2, \/\/ Carton: An HMD + PTC combo (should not be stamped on a component) AKA Overpack$/;"	e	enum:OVR::DK2PartId
DK2PartId_HMD	Src/OVR_SerialFormat.h	/^	DK2PartId_HMD    = 0, \/\/ HMD$/;"	e	enum:OVR::DK2PartId
DK2PartId_PTC	Src/OVR_SerialFormat.h	/^	DK2PartId_PTC    = 1, \/\/ PTC(camera)$/;"	e	enum:OVR::DK2PartId
DK2PrintedSerialFormat	Src/OVR_SerialFormat.h	/^class DK2PrintedSerialFormat$/;"	c	namespace:OVR
DK2ProductId	Src/OVR_SerialFormat.h	/^enum DK2ProductId$/;"	g	namespace:OVR
DK2ProductId_DK1	Src/OVR_SerialFormat.h	/^	DK2ProductId_DK1    = 1, \/\/ DK1$/;"	e	enum:OVR::DK2ProductId
DK2ProductId_DK2	Src/OVR_SerialFormat.h	/^	DK2ProductId_DK2    = 2, \/\/ Product Id used for initial DK2 launch$/;"	e	enum:OVR::DK2ProductId
DK2ProductId_Refurb	Src/OVR_SerialFormat.h	/^	DK2ProductId_Refurb = 3, \/\/ Refurbished DK2$/;"	e	enum:OVR::DK2ProductId
DMA_GridSize	Src/Util/Util_Render_Stereo.cpp	/^static const int DMA_GridSize       = 1<<DMA_GridSizeLog2;$/;"	m	namespace:OVR::Util::Render	file:
DMA_GridSizeLog2	Src/Util/Util_Render_Stereo.cpp	/^static const int DMA_GridSizeLog2   = 6;$/;"	m	namespace:OVR::Util::Render	file:
DMA_NumTrisPerEye	Src/Util/Util_Render_Stereo.cpp	/^static const int DMA_NumTrisPerEye  = (DMA_GridSize)*(DMA_GridSize)*2;$/;"	m	namespace:OVR::Util::Render	file:
DMA_NumVertsPerEye	Src/Util/Util_Render_Stereo.cpp	/^static const int DMA_NumVertsPerEye = (DMA_GridSize+1)*(DMA_GridSize+1);$/;"	m	namespace:OVR::Util::Render	file:
Data	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool Buffer::Data(int use, const void* buffer, size_t size)$/;"	f	class:OVR::CAPI::GL::Buffer
Data	Src/Kernel/OVR_Alg.h	/^    T*      Data;$/;"	m	class:OVR::Alg::ArrayAdaptor
Data	Src/Kernel/OVR_Alg.h	/^    const T* Data;$/;"	m	class:OVR::Alg::ConstArrayAdaptor
Data	Src/Kernel/OVR_Allocator.h	/^        size_t Data[(sizeof(D) + sizeof(size_t)-1) \/ sizeof(size_t)];$/;"	m	struct:OVR::Allocator_SingletonSupport::AllocContainer
Data	Src/Kernel/OVR_Array.h	/^    ArrayData   Data;$/;"	m	class:OVR::ArrayBase
Data	Src/Kernel/OVR_Array.h	/^    ValueType*  Data;$/;"	m	struct:OVR::ArrayDataBase
Data	Src/Kernel/OVR_Deque.h	/^    Elem        *Data;          \/\/ The actual Data array$/;"	m	class:OVR::Deque
Data	Src/Kernel/OVR_Lockless.cpp	/^    int Data[ItemCount];$/;"	m	struct:OVR::LocklessTest::TestData	file:
Data	Src/Kernel/OVR_SharedMemory.cpp	/^        char*  Data;$/;"	m	class:OVR::FakeMemoryBlock	file:
Data	Src/Kernel/OVR_SharedMemory.h	/^	void* Data;		\/\/ Pointer to the shared memory region.$/;"	m	class:OVR::SharedMemory
Data	Src/Kernel/OVR_String.h	/^        char    Data[1];$/;"	m	struct:OVR::String::DataDesc
Data1	Src/Kernel/OVR_Types.h	/^	uint32_t Data1;$/;"	m	struct:OVR::OVR_GUID
Data2	Src/Kernel/OVR_Types.h	/^	uint16_t Data2;$/;"	m	struct:OVR::OVR_GUID
Data3	Src/Kernel/OVR_Types.h	/^	uint16_t Data3;$/;"	m	struct:OVR::OVR_GUID
Data4	Src/Kernel/OVR_Types.h	/^	uint8_t  Data4[8];$/;"	m	struct:OVR::OVR_GUID
DataDesc	Src/Kernel/OVR_String.h	/^    struct DataDesc$/;"	s	class:OVR::String
DataDescUnion	Src/Kernel/OVR_String.h	/^    } DataDescUnion;$/;"	t	class:OVR::String	typeref:union:OVR::String::__anon33
DataSize	Src/Kernel/OVR_File.h	/^    unsigned        DataSize;$/;"	m	class:OVR::BufferedFile
DataWords	Src/Tracking/Tracking_SensorState.h	/^    static const int DataWords = (sizeof(LocklessSensorState) + sizeof(uint64_t) - 1) \/ sizeof(uint64_t);$/;"	m	struct:OVR::Tracking::LocklessSensorStatePadding
DecodeBCD	Src/Kernel/OVR_Alg.h	/^inline int8_t DecodeBCD(uint8_t byte)$/;"	f	namespace:OVR::Alg
DecodeBase32	Src/OVR_SerialFormat.cpp	/^int DecodeBase32(char ch)$/;"	f	namespace:OVR
DecodeFixedPointUInt16	Src/OVR_Stereo.cpp	/^float DecodeFixedPointUInt16 ( uint16_t val, uint16_t zeroVal, int fractionalBits )$/;"	f	namespace:OVR
DecodeFloat	Src/Kernel/OVR_Alg.h	/^inline float DecodeFloat(const uint8_t* buffer)$/;"	f	namespace:OVR::Alg
DecodeNextChar	Src/Kernel/OVR_UTF8Util.h	/^inline uint32_t DecodeNextChar(const char** putf8Buffer)$/;"	f	namespace:OVR::UTF8Util
DecodeNextChar_Advance0	Src/Kernel/OVR_UTF8Util.cpp	/^uint32_t OVR_STDCALL DecodeNextChar_Advance0(const char** putf8Buffer)$/;"	f	namespace:OVR::UTF8Util
DecodeSInt16	Src/Kernel/OVR_Alg.h	/^inline int16_t DecodeSInt16(const uint8_t* buffer)$/;"	f	namespace:OVR::Alg
DecodeSInt32	Src/Kernel/OVR_Alg.h	/^inline int32_t DecodeSInt32(const uint8_t* buffer)$/;"	f	namespace:OVR::Alg
DecodeString	Src/Kernel/OVR_UTF8Util.cpp	/^size_t OVR_STDCALL DecodeString(wchar_t *pbuff, const char* putf8str, intptr_t bytesLen)$/;"	f	namespace:OVR::UTF8Util
DecodeUInt16	Src/Kernel/OVR_Alg.h	/^inline uint16_t DecodeUInt16(const uint8_t* buffer)$/;"	f	namespace:OVR::Alg
DecodeUInt32	Src/Kernel/OVR_Alg.h	/^inline uint32_t DecodeUInt32(const uint8_t* buffer)$/;"	f	namespace:OVR::Alg
DecrementReferences	Src/Kernel/OVR_SharedMemory.cpp	/^        bool DecrementReferences()$/;"	f	class:OVR::FakeMemoryBlock
DefaultAllocator	Src/Kernel/OVR_Allocator.h	/^class DefaultAllocator : public Allocator_SingletonSupport<DefaultAllocator>$/;"	c	namespace:OVR
DefaultCapacity	Src/Kernel/OVR_Deque.h	/^        DefaultCapacity = 500$/;"	e	enum:OVR::Deque::__anon26
DefaultEyeFov	Src/OVR_CAPI.h	/^    ovrFovPort  DefaultEyeFov[ovrEye_Count];$/;"	m	struct:ovrHmdDesc_
DefaultLogOutput	Src/Kernel/OVR_Log.cpp	/^void Log::DefaultLogOutput(const char* formattedText, LogMessageType messageType, int bufferSize)$/;"	f	class:OVR::Log
DefaultLogOutputScope	Src/Service/Service_NetClient.h	/^    ObserverScope<Net::Plugins::RPCSlot> DefaultLogOutputScope;$/;"	m	class:OVR::Service::NetClient
DefaultLogOutput_1	Src/Service/Service_NetClient.cpp	/^void NetClient::DefaultLogOutput_1(BitStream* userData, ReceivePayload* pPayload)$/;"	f	class:OVR::Service::NetClient
DefaultMaxConnections	Src/Net/OVR_Session.h	/^	static const int DefaultMaxConnections         = 128;$/;"	m	class:OVR::Net::BerkleyListenerDescription
DefaultMaxIncomingConnections	Src/Net/OVR_Session.h	/^	static const int DefaultMaxIncomingConnections =  64;$/;"	m	class:OVR::Net::BerkleyListenerDescription
DefaultMessageIDTypes	Src/Net/OVR_MessageIDTypes.h	/^enum DefaultMessageIDTypes$/;"	g	namespace:OVR::Net
DefaultValue	Src/Kernel/OVR_Array.h	/^    ValueType   DefaultValue;$/;"	m	struct:OVR::ArrayDataCC
DegreeToRad	Src/Kernel/OVR_Math.h	/^T DegreeToRad(T rads) { return rads * ((T)MATH_DOUBLE_DEGREETORADFACTOR); }$/;"	f	namespace:OVR
Degrees	Src/Kernel/OVR_Math.h	/^		Degrees = 1$/;"	e	enum:OVR::Angle::AngularUnits
Delegate0	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate0() : _object(0), _stub(0){}$/;"	f	class:OVR::Delegate0
Delegate0	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate0(void *object, StubPointer stub)$/;"	f	class:OVR::Delegate0
Delegate0	Src/Kernel/OVR_Delegates.h	/^class Delegate0$/;"	c	namespace:OVR
Delegate1	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate1() : _object(0), _stub(0){}$/;"	f	class:OVR::Delegate1
Delegate1	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate1(void *object, StubPointer stub)$/;"	f	class:OVR::Delegate1
Delegate1	Src/Kernel/OVR_Delegates.h	/^class Delegate1$/;"	c	namespace:OVR
Delegate2	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate2() : _object(0), _stub(0){}$/;"	f	class:OVR::Delegate2
Delegate2	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate2(void *object, StubPointer stub)$/;"	f	class:OVR::Delegate2
Delegate2	Src/Kernel/OVR_Delegates.h	/^class Delegate2$/;"	c	namespace:OVR
Delegate3	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate3() : _object(0), _stub(0){}$/;"	f	class:OVR::Delegate3
Delegate3	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE Delegate3(void *object, StubPointer stub)$/;"	f	class:OVR::Delegate3
Delegate3	Src/Kernel/OVR_Delegates.h	/^class Delegate3$/;"	c	namespace:OVR
DelegatedFile	Src/Kernel/OVR_File.h	/^    DelegatedFile() : pFile(0)                             { }$/;"	f	class:OVR::DelegatedFile
DelegatedFile	Src/Kernel/OVR_File.h	/^    DelegatedFile(File *pfile) : pFile(pfile)     { }$/;"	f	class:OVR::DelegatedFile
DelegatedFile	Src/Kernel/OVR_File.h	/^    DelegatedFile(const DelegatedFile &source) : File()    { OVR_UNUSED(source); }$/;"	f	class:OVR::DelegatedFile
DelegatedFile	Src/Kernel/OVR_File.h	/^class DelegatedFile : public File$/;"	c	namespace:OVR
DeltaSeconds	Src/OVR_CAPI.h	/^    float           DeltaSeconds;$/;"	m	struct:ovrFrameTiming_
DepthTest	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint DepthTest;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Deque	Src/Kernel/OVR_Deque.h	/^Deque<Elem, Allocator>::Deque(int capacity) :$/;"	f	class:OVR::Deque
Deque	Src/Kernel/OVR_Deque.h	/^class Deque$/;"	c	namespace:OVR
DescArraySize	Src/Displays/OVR_Linux_Display.h	/^    static const int DescArraySize = 16;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
Deserialize	Src/Net/OVR_Session.h	/^    bool Deserialize(Net::BitStream* bs)$/;"	f	struct:OVR::Net::RPC_C2S_Hello
Deserialize	Src/Net/OVR_Session.h	/^    bool Deserialize(Net::BitStream* bs)$/;"	f	struct:OVR::Net::RPC_S2C_Authorization
Deserialize	Src/Service/Service_NetSessionCommon.h	/^	bool Deserialize(Net::BitStream* bs)$/;"	f	struct:OVR::Service::HMDNetworkInfo
DeserializeHMDInfo	Src/Service/Service_NetSessionCommon.cpp	/^bool NetSessionCommon::DeserializeHMDInfo(Net::BitStream *bitStream, HMDInfo* hmdInfo)$/;"	f	class:OVR::Service::NetSessionCommon
DesktopDisplayOffset	Src/Displays/OVR_Display.h	/^    const Vector2i      DesktopDisplayOffset;$/;"	m	class:OVR::Display
DesktopDisplayOffset	Src/Displays/OVR_Linux_Display.h	/^    Vector2i    DesktopDisplayOffset;$/;"	m	struct:OVR::Linux::DisplayDesc
DesktopX	Src/OVR_Stereo.h	/^	int         DesktopX;$/;"	m	class:OVR::HMDInfo
DesktopY	Src/OVR_Stereo.h	/^	int         DesktopY;$/;"	m	class:OVR::HMDInfo
Destroy	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::Destroy()$/;"	f	class:OVR::CAPI::GL::Context
Destroy	Src/Kernel/OVR_System.cpp	/^void System::Destroy()$/;"	f	class:OVR::System
Destruct	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE void Destruct(T *pobj)$/;"	f	namespace:OVR
Destruct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Destruct(T* p)$/;"	f	class:OVR::ConstructorCPP
Destruct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Destruct(T* p)$/;"	f	class:OVR::ConstructorMov
Destruct	Src/Kernel/OVR_ContainerAllocator.h	/^    static void Destruct(T*) {}$/;"	f	class:OVR::ConstructorPOD
DestructArray	Src/Kernel/OVR_Allocator.h	/^OVR_FORCE_INLINE void DestructArray(T *pobj, size_t count)$/;"	f	namespace:OVR
DestructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void DestructArray(T* p, size_t count)$/;"	f	class:OVR::ConstructorCPP
DestructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void DestructArray(T* p, size_t count)$/;"	f	class:OVR::ConstructorMov
DestructArray	Src/Kernel/OVR_ContainerAllocator.h	/^    static void DestructArray(T*, size_t) {}$/;"	f	class:OVR::ConstructorPOD
DetectBufferFormat	Src/OVR_SerialFormat.cpp	/^SerialFormatType DetectBufferFormat(uint8_t firstByte, int sizeInBytes)$/;"	f	namespace:OVR
Determinant	Src/Kernel/OVR_Math.h	/^	inline T Determinant() const$/;"	f	class:OVR::Matrix3
Determinant	Src/Kernel/OVR_Math.h	/^	inline T Determinant() const$/;"	f	class:OVR::SymMat3
Determinant	Src/Kernel/OVR_Math.h	/^    T    Determinant() const$/;"	f	class:OVR::Matrix4
DeviceName	Src/CAPI/GL/CAPI_GLE_GL.h	/^            CHAR   DeviceName[32];$/;"	m	struct:_GPU_DEVICE
DeviceNumber	Src/Displays/OVR_Display.h	/^	const uint64_t	    DeviceNumber;$/;"	m	class:OVR::Display
DeviceNumber	Src/OVR_Stereo.h	/^	int DeviceNumber;$/;"	m	struct:OVR::Win32ShimInfo
DeviceString	Src/CAPI/GL/CAPI_GLE_GL.h	/^            CHAR   DeviceString[128];$/;"	m	struct:_GPU_DEVICE
DeviceType	Src/Sensors/OVR_DeviceConstants.h	/^enum DeviceType$/;"	g	namespace:OVR
DeviceTypeGuess	Src/Displays/OVR_Display.h	/^    const HmdTypeEnum   DeviceTypeGuess;$/;"	m	class:OVR::Display
DeviceTypeGuess	Src/Displays/OVR_Linux_Display.h	/^    HmdTypeEnum DeviceTypeGuess;$/;"	m	struct:OVR::Linux::DisplayDesc
Device_All	Src/Sensors/OVR_DeviceConstants.h	/^    Device_All              = 0xFF \/\/ Set for enumeration only, to enumerate all device types.$/;"	e	enum:OVR::DeviceType
Device_BootLoader	Src/Sensors/OVR_DeviceConstants.h	/^    Device_BootLoader,$/;"	e	enum:OVR::DeviceType
Device_LatencyTester	Src/Sensors/OVR_DeviceConstants.h	/^    Device_LatencyTester,$/;"	e	enum:OVR::DeviceType
Device_Manager	Src/Sensors/OVR_DeviceConstants.h	/^    Device_Manager,$/;"	e	enum:OVR::DeviceType
Device_None	Src/Sensors/OVR_DeviceConstants.h	/^    Device_None,$/;"	e	enum:OVR::DeviceType
Device_Sensor	Src/Sensors/OVR_DeviceConstants.h	/^    Device_Sensor,$/;"	e	enum:OVR::DeviceType
DirectDisplayInitialize	Src/Kernel/OVR_System.cpp	/^void System::DirectDisplayInitialize()$/;"	f	class:OVR::System
DirectToRift	Src/CAPI/CAPI_FrameTimeManager.h	/^    bool                DirectToRift;$/;"	m	class:OVR::CAPI::FrameTimeManager
DirtyFlag	Src/Util/Util_Render_Stereo.h	/^    bool               DirtyFlag;   \/\/ Set when any if the modifiable state changed. Does NOT get set by SetRender*()$/;"	m	class:OVR::Util::Render::StereoConfig
Disabled	Src/Kernel/OVR_FileFILE.cpp	/^    BOOL    Disabled;$/;"	m	class:OVR::SysErrorModeDisabler	file:
Disconnect	Src/Service/Service_NetClient.cpp	/^void NetClient::Disconnect()$/;"	f	class:OVR::Service::NetClient
Dismiss	Src/CAPI/CAPI_HSWDisplay.cpp	/^bool HSWDisplay::Dismiss()$/;"	f	class:OVR::CAPI::HSWDisplay
DismissInternal	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void DismissInternal() {}$/;"	f	class:OVR::CAPI::HSWDisplay
DismissInternal	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::DismissInternal()$/;"	f	class:OVR::CAPI::GL::HSWDisplay
DismissRequested	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   DismissRequested;        \/\/ If true then the warning has been requested to be hidden.$/;"	m	class:OVR::CAPI::HSWDisplay
DismissibleTime	Src/CAPI/CAPI_HSWDisplay.h	/^    double                 DismissibleTime;         \/\/ Absolute time when the warning can be dismissed.$/;"	m	class:OVR::CAPI::HSWDisplay
DismissibleTime	Src/OVR_CAPI.h	/^    double  DismissibleTime; \/\/\/ Earliest absolute time when the warning can be dismissed. May be a time in the past.$/;"	m	struct:ovrHSWDisplayState_
Disp	Src/OVR_CAPI_GL.h	/^    _XDisplay* Disp;$/;"	m	struct:ovrGLConfigData_s
Display	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::Display()$/;"	f	class:OVR::CAPI::HSWDisplay
Display	Src/Displays/OVR_Display.h	/^	Display($/;"	f	class:OVR::Display
Display	Src/Displays/OVR_Display.h	/^class Display : public RefCountBase<Display>$/;"	c	namespace:OVR
DisplayDesc	Src/Displays/OVR_Linux_Display.h	/^struct DisplayDesc$/;"	s	namespace:OVR::Linux
DisplayDeviceName	Src/OVR_CAPI.h	/^    const char* DisplayDeviceName;$/;"	m	struct:ovrHmdDesc_
DisplayDeviceName	Src/OVR_Stereo.h	/^	String      DisplayDeviceName;$/;"	m	class:OVR::HMDInfo
DisplayDriverVersion	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
DisplayEDID	Src/Displays/OVR_Linux_Display.h	/^    DisplayEDID() :$/;"	f	struct:OVR::Linux::DisplayEDID
DisplayEDID	Src/Displays/OVR_Linux_Display.h	/^struct DisplayEDID$/;"	s	namespace:OVR::Linux
DisplayID	Src/Displays/OVR_Display.h	/^	const String        DisplayID;$/;"	m	class:OVR::Display
DisplayID	Src/Displays/OVR_Display.h	/^    const uint32_t      DisplayID; $/;"	m	class:OVR::Display
DisplayID	Src/Displays/OVR_Linux_Display.h	/^    String      DisplayID; \/\/ This is the device identifier string from MONITORINFO (for app usage)$/;"	m	struct:OVR::Linux::DisplayDesc
DisplayId	Src/CAPI/GL/CAPI_GL_Util.h	/^    DisplayId() : CgDisplayId(0) {}$/;"	f	struct:OVR::CAPI::GL::DisplayId
DisplayId	Src/CAPI/GL/CAPI_GL_Util.h	/^    DisplayId(String m, long id=0) : MonitorName(m), CgDisplayId(id) {}$/;"	f	struct:OVR::CAPI::GL::DisplayId
DisplayId	Src/CAPI/GL/CAPI_GL_Util.h	/^    DisplayId(long id) : CgDisplayId(id) {}$/;"	f	struct:OVR::CAPI::GL::DisplayId
DisplayId	Src/CAPI/GL/CAPI_GL_Util.h	/^struct DisplayId$/;"	s	namespace:OVR::CAPI::GL
DisplayId	Src/OVR_CAPI.h	/^    int         DisplayId;$/;"	m	struct:ovrHmdDesc_
DisplayId	Src/OVR_Stereo.h	/^	int         DisplayId;$/;"	m	class:OVR::HMDInfo
DisplayInternal	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void DisplayInternal() {}$/;"	f	class:OVR::CAPI::HSWDisplay
DisplayInternal	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::DisplayInternal()$/;"	f	class:OVR::CAPI::GL::HSWDisplay
DisplaySearchHandle	Src/Displays/OVR_Display.h	/^	DisplaySearchHandle() {}$/;"	f	class:OVR::DisplaySearchHandle
DisplaySearchHandle	Src/Displays/OVR_Display.h	/^class DisplaySearchHandle : virtual public RefCountBaseV<DisplaySearchHandle>$/;"	c	namespace:OVR
Displayed	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   Displayed;               \/\/ If true then the warning is currently visible and the following variables have meaning. Else there is no warning being displayed for this application on the given HMD.$/;"	m	class:OVR::CAPI::HSWDisplay
Displayed	Src/OVR_CAPI.h	/^    ovrBool Displayed;$/;"	m	struct:ovrHSWDisplayState_
DistRotateCCW90	Src/Displays/OVR_Linux_SDKWindow.h	/^    DistRotateCCW90$/;"	e	enum:OVR::DistortionRotation
DistRotateNone	Src/Displays/OVR_Linux_SDKWindow.h	/^    DistRotateNone,$/;"	e	enum:OVR::DistortionRotation
Distance	Src/Kernel/OVR_Math.h	/^	T   Distance(const Angle& b)              { T c = fabs(a - b.a); return (c <= ((T)MATH_DOUBLE_PI)) ? c : ((T)MATH_DOUBLE_TWOPI) - c; }$/;"	f	class:OVR::Angle
Distance	Src/Kernel/OVR_Math.h	/^	T Distance(const Matrix4& m2) const           $/;"	f	class:OVR::Matrix4
Distance	Src/Kernel/OVR_Math.h	/^    T       Distance(Vector3 const& b) const     { return (*this - b).Length(); }$/;"	f	class:OVR::Vector3
Distance	Src/Kernel/OVR_Math.h	/^    T       Distance(const Quat& q) const	$/;"	f	class:OVR::Quat
Distance	Src/Kernel/OVR_Math.h	/^    T       Distance(const Vector2& b) const     { return (*this - b).Length(); }$/;"	f	class:OVR::Vector2
DistanceSq	Src/Kernel/OVR_Math.h	/^    T       DistanceSq(Vector3 const& b) const         { return (*this - b).LengthSq(); }$/;"	f	class:OVR::Vector3
DistanceSq	Src/Kernel/OVR_Math.h	/^    T       DistanceSq(const Quat& q) const$/;"	f	class:OVR::Quat
DistanceSq	Src/Kernel/OVR_Math.h	/^    T       DistanceSq(const Vector2& b) const   { return (*this - b).LengthSq(); }$/;"	f	class:OVR::Vector2
DistortedViewport	Src/OVR_CAPI.h	/^	ovrRecti    DistortedViewport;          \/\/\/ Distortion viewport.$/;"	m	struct:ovrEyeRenderDesc_
Distortion	Src/CAPI/CAPI_HMDRenderState.h	/^    DistortionRenderDesc    Distortion[2];$/;"	m	struct:OVR::CAPI::HMDRenderState
Distortion	Src/OVR_Stereo.h	/^        LensConfig          Distortion;$/;"	m	struct:OVR::HmdRenderInfo::EyeConfig
Distortion	Src/OVR_Stereo.h	/^    DistortionRenderDesc    Distortion;$/;"	m	struct:OVR::StereoEyeParams
Distortion	Src/Util/Util_Render_Stereo.cpp	/^    DistortionRenderDesc    Distortion;$/;"	m	struct:OVR::Util::Render::DistortionAndFov	file:
DistortionAndFov	Src/Util/Util_Render_Stereo.cpp	/^struct DistortionAndFov$/;"	s	namespace:OVR::Util::Render	file:
DistortionCaps	Src/CAPI/CAPI_HMDRenderState.h	/^    unsigned                DistortionCaps;$/;"	m	struct:OVR::CAPI::HMDRenderState
DistortionCaps	Src/OVR_CAPI.h	/^    unsigned int DistortionCaps;$/;"	m	struct:ovrHmdDesc_
DistortionChroma_fs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char DistortionChroma_fs[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionChroma_ps_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform DistortionChroma_ps_refl[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionChroma_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char DistortionChroma_vs[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionChroma_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform DistortionChroma_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionEqnType	Src/Sensors/OVR_DeviceConstants.h	/^enum DistortionEqnType$/;"	g	namespace:OVR
DistortionFn	Src/OVR_Stereo.h	/^    float DistortionFn(float r) const$/;"	f	struct:OVR::LensConfig
DistortionFnInverse	Src/OVR_Stereo.cpp	/^float LensConfig::DistortionFnInverse(float r) const$/;"	f	class:OVR::LensConfig
DistortionFnInverseApprox	Src/OVR_Stereo.cpp	/^float LensConfig::DistortionFnInverseApprox(float r) const$/;"	f	class:OVR::LensConfig
DistortionFnScaleRadiusSquared	Src/OVR_Stereo.cpp	/^float LensConfig::DistortionFnScaleRadiusSquared (float rsq) const$/;"	f	class:OVR::LensConfig
DistortionFnScaleRadiusSquaredChroma	Src/OVR_Stereo.cpp	/^Vector3f LensConfig::DistortionFnScaleRadiusSquaredChroma (float rsq) const$/;"	f	class:OVR::LensConfig
DistortionMeshCreate	Src/Util/Util_Render_Stereo.cpp	/^void DistortionMeshCreate ( DistortionMeshVertexData **ppVertices, uint16_t **ppTriangleListIndices,$/;"	f	namespace:OVR::Util::Render
DistortionMeshCreate	Src/Util/Util_Render_Stereo.cpp	/^void DistortionMeshCreate( DistortionMeshVertexData **ppVertices, uint16_t **ppTriangleListIndices,$/;"	f	namespace:OVR::Util::Render
DistortionMeshDestroy	Src/Util/Util_Render_Stereo.cpp	/^void DistortionMeshDestroy ( DistortionMeshVertexData *pVertices, uint16_t *pTriangleMeshIndices )$/;"	f	namespace:OVR::Util::Render
DistortionMeshIBs	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	Ptr<Buffer>         DistortionMeshIBs[2];    \/\/ one per-eye$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
DistortionMeshMakeVertex	Src/Util/Util_Render_Stereo.cpp	/^DistortionMeshVertexData DistortionMeshMakeVertex ( Vector2f screenNDC,$/;"	f	namespace:OVR::Util::Render
DistortionMeshVAOs	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLuint              DistortionMeshVAOs[2];   \/\/ one per-eye$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
DistortionMeshVBs	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	Ptr<Buffer>         DistortionMeshVBs[2];    \/\/ one per-eye$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
DistortionMeshVertexData	Src/Util/Util_Render_Stereo.h	/^struct DistortionMeshVertexData$/;"	s	namespace:OVR::Util::Render
DistortionPixelShaderBitMask	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    DistortionPixelShaderBitMask  = 1,$/;"	e	enum:OVR::CAPI::GL::__anon2	file:
DistortionPixelShaderCount	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    DistortionPixelShaderCount    = DistortionPixelShaderBitMask + 1$/;"	e	enum:OVR::CAPI::GL::__anon2	file:
DistortionPixelShaderLookup	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^static ShaderInfo DistortionPixelShaderLookup[DistortionPixelShaderCount] =$/;"	m	namespace:OVR::CAPI::GL	file:
DistortionRenderDesc	Src/OVR_Stereo.h	/^struct DistortionRenderDesc$/;"	s	namespace:OVR
DistortionRenderTimes	Src/CAPI/CAPI_FrameTimeManager.h	/^    TimeDeltaCollector  DistortionRenderTimes;$/;"	m	class:OVR::CAPI::FrameTimeManager
DistortionRenderer	Src/CAPI/CAPI_DistortionRenderer.h	/^    DistortionRenderer(ovrRenderAPIType api, ovrHmd hmd,$/;"	f	class:OVR::CAPI::DistortionRenderer
DistortionRenderer	Src/CAPI/CAPI_DistortionRenderer.h	/^class  DistortionRenderer : public RefCountBase<DistortionRenderer>$/;"	c	namespace:OVR::CAPI
DistortionRenderer	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^DistortionRenderer::DistortionRenderer(ovrHmd hmd, FrameTimeManager& timeManager,$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
DistortionRenderer	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^class DistortionRenderer : public CAPI::DistortionRenderer$/;"	c	namespace:OVR::CAPI::GL
DistortionRotation	Src/Displays/OVR_Linux_SDKWindow.h	/^enum DistortionRotation$/;"	g	namespace:OVR
DistortionShader	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	Ptr<ShaderSet>      DistortionShader;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
DistortionShaderBitIndexCheck	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionShaderBitIndexCheck()$/;"	f	namespace:OVR::CAPI::GL
DistortionTimeAverage	Src/Util/Util_Render_Stereo.h	/^    float               DistortionTimeAverage;$/;"	m	class:OVR::Util::Render::TimewarpMachine
DistortionTimeCount	Src/Util/Util_Render_Stereo.h	/^    int                 DistortionTimeCount;$/;"	m	class:OVR::Util::Render::TimewarpMachine
DistortionTimeCurrentStart	Src/Util/Util_Render_Stereo.h	/^    double              DistortionTimeCurrentStart;$/;"	m	class:OVR::Util::Render::TimewarpMachine
DistortionTimes	Src/Util/Util_Render_Stereo.h	/^    float               DistortionTimes[NumDistortionTimes];$/;"	m	class:OVR::Util::Render::TimewarpMachine
DistortionTimewarpChroma_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char DistortionTimewarpChroma_vs[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionTimewarpChroma_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform DistortionTimewarpChroma_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionTimewarp_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char DistortionTimewarp_vs[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionTimewarp_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform DistortionTimewarp_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
DistortionVertex	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^struct DistortionVertex$/;"	s	namespace:OVR::CAPI::GL	file:
DistortionVertexShaderBitMask	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    DistortionVertexShaderBitMask = 3,$/;"	e	enum:OVR::CAPI::GL::__anon2	file:
DistortionVertexShaderCount	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    DistortionVertexShaderCount   = DistortionVertexShaderBitMask + 1,$/;"	e	enum:OVR::CAPI::GL::__anon2	file:
DistortionVertexShaderLookup	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^static ShaderInfo DistortionVertexShaderLookup[DistortionVertexShaderCount] =$/;"	m	namespace:OVR::CAPI::GL	file:
DistortionViewport	Src/OVR_Stereo.h	/^    Recti                   DistortionViewport;$/;"	m	struct:OVR::StereoEyeParams
Distortion_CatmullRom10	Src/Sensors/OVR_DeviceConstants.h	/^    Distortion_CatmullRom10 = 2,    \/\/ scale = Catmull-Rom spline through points (1.0, K[1]...K[9])$/;"	e	enum:OVR::DistortionEqnType
Distortion_LAST	Src/Sensors/OVR_DeviceConstants.h	/^    Distortion_LAST                 \/\/ For ease of enumeration.$/;"	e	enum:OVR::DistortionEqnType
Distortion_No_Override	Src/Sensors/OVR_DeviceConstants.h	/^    Distortion_No_Override  = -1,    $/;"	e	enum:OVR::DistortionEqnType
Distortion_Poly4	Src/Sensors/OVR_DeviceConstants.h	/^    Distortion_Poly4        = 0,    \/\/ scale = (K0 + K1*r^2 + K2*r^4 + K3*r^6)$/;"	e	enum:OVR::DistortionEqnType
Distortion_RecipPoly4	Src/Sensors/OVR_DeviceConstants.h	/^    Distortion_RecipPoly4   = 1,    \/\/ scale = 1\/(K0 + K1*r^2 + K2*r^4 + K3*r^6)$/;"	e	enum:OVR::DistortionEqnType
Distortion_fs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char Distortion_fs[] =$/;"	m	namespace:OVR::CAPI::GL
Distortion_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char Distortion_vs[] =$/;"	m	namespace:OVR::CAPI::GL
Distortion_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform Distortion_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
Dither	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Dither;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
DoEndianSwap	Src/Net/OVR_BitStream.h	/^	inline static bool DoEndianSwap(void) {$/;"	f	class:OVR::Net::BitStream
DoFileMap	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryInternal* SharedMemoryInternal::DoFileMap(HANDLE hFileMapping, const char* fileName, bool openReadOnly, int minSize)$/;"	f	class:OVR::SharedMemoryInternal
DoFileMap	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryInternal* SharedMemoryInternal::DoFileMap(int hFileMapping, const char* fileName, bool openReadOnly, int minSize)$/;"	f	class:OVR::SharedMemoryInternal
DoLock	Src/Kernel/OVR_Atomic.h	/^    inline void DoLock()    { ::EnterCriticalSection(&cs); }$/;"	f	class:OVR::Lock
DoLock	Src/Kernel/OVR_Atomic.h	/^    inline void DoLock()    { pthread_mutex_lock(&mutex); }$/;"	f	class:OVR::Lock
DoLock	Src/Kernel/OVR_Atomic.h	/^    inline void DoLock() { }$/;"	f	class:OVR::Lock
DoLock	Src/Kernel/OVR_ThreadsPthread.cpp	/^void Mutex::DoLock()$/;"	f	class:OVR::Mutex
DoLock	Src/Kernel/OVR_ThreadsPthread.cpp	/^void MutexImpl::DoLock()$/;"	f	class:OVR::MutexImpl
Dot	Src/Kernel/OVR_Math.h	/^     T      Dot(const Vector3& b) const          { return x*b.x + y*b.y + z*b.z; }$/;"	f	class:OVR::Vector3
Dot	Src/Kernel/OVR_Math.h	/^    T		Dot(const Vector2& b) const                 { return x*b.x + y*b.y; }$/;"	f	class:OVR::Vector2
Dot	Src/Kernel/OVR_Math.h	/^    T       Dot(const Quat& q) const$/;"	f	class:OVR::Quat
Dot	Src/Kernel/OVR_Math.h	/^    T       Dot(const Vector4& b) const          { return x*b.x + y*b.y + z*b.z + w*b.w; }$/;"	f	class:OVR::Vector4
DownTan	Src/OVR_CAPI.h	/^    float DownTan;$/;"	m	struct:ovrFovPort_
DownTan	Src/OVR_Stereo.h	/^    float DownTan;$/;"	m	struct:OVR::FovPort
Dummy1	Src/Kernel/OVR_Lockless.cpp	/^volatile int Dummy1;$/;"	m	namespace:OVR::LocklessTest	file:
Dummy2	Src/Kernel/OVR_Lockless.cpp	/^volatile int Dummy2;$/;"	m	namespace:OVR::LocklessTest	file:
Dummy3	Src/Kernel/OVR_Lockless.cpp	/^volatile int Dummy3;$/;"	m	namespace:OVR::LocklessTest	file:
DynamicPrediction	Src/CAPI/CAPI_FrameTimeManager.h	/^    bool                DynamicPrediction;$/;"	m	class:OVR::CAPI::FrameTimeManager
E	Src/Kernel/OVR_Hash.h	/^    Entry& E(size_t index)$/;"	f	class:OVR::HashSetBase
E	Src/Kernel/OVR_Hash.h	/^    const Entry& E(size_t index) const$/;"	f	class:OVR::HashSetBase
E	Src/Kernel/OVR_ThreadCommandQueue.h	/^        Event E;$/;"	m	class:OVR::ThreadCommand::NotifyEvent
EConnectionState	Src/Net/OVR_Session.h	/^enum EConnectionState$/;"	g	namespace:OVR::Net
EGetBoolValue	Src/Service/Service_NetSessionCommon.h	/^        EGetBoolValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EGetIntValue	Src/Service/Service_NetSessionCommon.h	/^        EGetIntValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EGetNumberValue	Src/Service/Service_NetSessionCommon.h	/^        EGetNumberValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EGetNumberValues	Src/Service/Service_NetSessionCommon.h	/^        EGetNumberValues,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EGetStringValue	Src/Service/Service_NetSessionCommon.h	/^        EGetStringValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EGetterSetters	Src/Service/Service_NetSessionCommon.h	/^    enum EGetterSetters$/;"	g	class:OVR::Service::NetSessionCommon
ENumTypes	Src/Service/Service_NetSessionCommon.h	/^        ENumTypes$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3950;"	d
ERROR_INVALID_PIXEL_TYPE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3949;"	d
ERROR_INVALID_PROFILE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4098;"	d
ERROR_INVALID_VERSION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4082;"	d
ESetBoolValue	Src/Service/Service_NetSessionCommon.h	/^        ESetBoolValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
ESetIntValue	Src/Service/Service_NetSessionCommon.h	/^        ESetIntValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
ESetNumberValue	Src/Service/Service_NetSessionCommon.h	/^        ESetNumberValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
ESetNumberValues	Src/Service/Service_NetSessionCommon.h	/^        ESetNumberValues,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
ESetStringValue	Src/Service/Service_NetSessionCommon.h	/^        ESetStringValue,$/;"	e	enum:OVR::Service::NetSessionCommon::EGetterSetters
EdgeTriggeredHMDCount	Src/Service/Service_NetClient.h	/^    bool          EdgeTriggeredHMDCount;$/;"	m	class:OVR::Service::NetClient
EdidSerialNumber	Src/Displays/OVR_Display.h	/^    const String        EdidSerialNumber;$/;"	m	class:OVR::Display
EdidSerialNumber	Src/Displays/OVR_Linux_Display.h	/^    String      EdidSerialNumber;$/;"	m	struct:OVR::Linux::DisplayDesc
ElemCount	Src/Kernel/OVR_Deque.h	/^    int         ElemCount;$/;"	m	class:OVR::Deque
ElementArrayBufferBinding	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint ElementArrayBufferBinding;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Enable	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::Enable(bool enable)$/;"	f	class:OVR::CAPI::HSWDisplay
EnableRender	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::EnableRender(bool enable)$/;"	f	class:OVR::CAPI::HSWDisplay
Enabled	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   Enabled;                 \/\/ If true then the HSW display system is enabled. True by default.$/;"	m	class:OVR::CAPI::HSWDisplay
EnabledHmdCaps	Src/CAPI/CAPI_HMDRenderState.h	/^    unsigned                EnabledHmdCaps;$/;"	m	struct:OVR::CAPI::HMDRenderState
EnabledHmdCaps	Src/CAPI/CAPI_HMDState.h	/^    unsigned                EnabledHmdCaps;$/;"	m	class:OVR::CAPI::HMDState
EnabledServiceHmdCaps	Src/CAPI/CAPI_HMDState.h	/^    unsigned                EnabledServiceHmdCaps;$/;"	m	class:OVR::CAPI::HMDState
EncodeChar	Src/Kernel/OVR_UTF8Util.cpp	/^void OVR_STDCALL EncodeChar(char* pbuffer, intptr_t* pindex, uint32_t ucs_character)$/;"	f	namespace:OVR::UTF8Util
EncodeFixedPointUInt16	Src/OVR_Stereo.cpp	/^uint16_t EncodeFixedPointUInt16 ( float val, uint16_t zeroVal, int fractionalBits )$/;"	f	namespace:OVR
EncodeFloat	Src/Kernel/OVR_Alg.h	/^inline void EncodeFloat(uint8_t* buffer, float val)$/;"	f	namespace:OVR::Alg
EncodeSInt16	Src/Kernel/OVR_Alg.h	/^inline void EncodeSInt16(uint8_t* buffer, int16_t val)$/;"	f	namespace:OVR::Alg
EncodeSInt32	Src/Kernel/OVR_Alg.h	/^inline void EncodeSInt32(uint8_t* buffer, int32_t val)$/;"	f	namespace:OVR::Alg
EncodeString	Src/Kernel/OVR_UTF8Util.cpp	/^void OVR_STDCALL EncodeString(char *pbuff, const wchar_t* pchar, intptr_t length)$/;"	f	namespace:OVR::UTF8Util
EncodeUInt16	Src/Kernel/OVR_Alg.h	/^inline void EncodeUInt16(uint8_t* buffer, uint16_t val)$/;"	f	namespace:OVR::Alg
EncodeUInt32	Src/Kernel/OVR_Alg.h	/^inline void EncodeUInt32(uint8_t* buffer, uint32_t val)$/;"	f	namespace:OVR::Alg
End	Src/CAPI/CAPI_HMDState.h	/^    void End()                              {  }$/;"	f	class:OVR::CAPI::ThreadChecker
End	Src/Kernel/OVR_Array.h	/^    ConstIterator End() const   { return ConstIterator(this, (intptr_t)GetSize()); }$/;"	f	class:OVR::ArrayBase
End	Src/Kernel/OVR_Array.h	/^    Iterator End()   { return Iterator(this, (intptr_t)GetSize()); }$/;"	f	class:OVR::ArrayBase
End	Src/Kernel/OVR_Deque.h	/^    int         End;            \/\/ Index of the next after last element$/;"	m	class:OVR::Deque
End	Src/Kernel/OVR_Hash.h	/^    ConstIterator   End() const     { return const_cast<SelfType*>(this)->End();   }$/;"	f	class:OVR::HashSetBase
End	Src/Kernel/OVR_Hash.h	/^    Iterator        End()           { return Iterator(NULL, 0); }$/;"	f	class:OVR::HashSetBase
End	Src/Kernel/OVR_Hash.h	/^    inline ConstIterator   End() const          { return mHash.End();   }$/;"	f	class:OVR::Hash
End	Src/Kernel/OVR_Hash.h	/^    inline Iterator        End()                { return mHash.End(); }$/;"	f	class:OVR::Hash
End	Src/Kernel/OVR_String.h	/^    const char* End() const { return ToCStr() + GetSize(); }$/;"	f	class:OVR::StringDataPtr
End	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    size_t  End;    \/\/ When Head < Tail, this is used instead of Size.    $/;"	m	class:OVR::CircularBuffer	file:
EndFrame	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::EndFrame()$/;"	f	class:OVR::CAPI::FrameTimeManager
EndFrame	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::EndFrame(bool swapBuffers)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
EndFrameEndTime	Src/CAPI/CAPI_LatencyStatistics.h	/^    double              EndFrameEndTime;$/;"	m	class:OVR::CAPI::LagStatsCalculator
EndFrameExecutionTime	Src/CAPI/CAPI_LatencyStatistics.h	/^    double EndFrameExecutionTime;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
EndFrameStartTime	Src/CAPI/CAPI_LatencyStatistics.h	/^    double              EndFrameStartTime;$/;"	m	class:OVR::CAPI::LagStatsCalculator
EndianSwapBytes	Src/Net/OVR_BitStream.cpp	/^void BitStream::EndianSwapBytes( int byteOffset, int length )$/;"	f	class:OVR::Net::BitStream
EntryCount	Src/Kernel/OVR_Hash.h	/^        size_t EntryCount;$/;"	m	struct:OVR::HashSetBase::TableType
EntrywiseMultiply	Src/Kernel/OVR_Math.h	/^    Vector2	EntrywiseMultiply(const Vector2& b) const	{ return Vector2(x * b.x, y * b.y);}$/;"	f	class:OVR::Vector2
EntrywiseMultiply	Src/Kernel/OVR_Math.h	/^    Vector3	EntrywiseMultiply(const Vector3& b) const	{ return Vector3(x * b.x, $/;"	f	class:OVR::Vector3
EntrywiseMultiply	Src/Kernel/OVR_Math.h	/^    Vector4	EntrywiseMultiply(const Vector4& b) const	{ return Vector4(x * b.x, $/;"	f	class:OVR::Vector4
EpochBegin	Src/CAPI/CAPI_LatencyStatistics.h	/^    double              EpochBegin;$/;"	m	class:OVR::CAPI::LagStatsCalculator
Eqn	Src/OVR_Stereo.h	/^    DistortionEqnType   Eqn;$/;"	m	struct:OVR::LensConfig
ErrorCode	Src/Kernel/OVR_FileFILE.cpp	/^    int         ErrorCode;$/;"	m	class:OVR::FILEFile	file:
Error_Access	Src/Kernel/OVR_File.h	/^        Error_Access        = 0x1002,$/;"	e	enum:OVR::FileConstants::Errors
Error_DiskFull	Src/Kernel/OVR_File.h	/^        Error_DiskFull      = 0x1004$/;"	e	enum:OVR::FileConstants::Errors
Error_FileNotFound	Src/Kernel/OVR_File.h	/^        Error_FileNotFound  = 0x1001,$/;"	e	enum:OVR::FileConstants::Errors
Error_IOError	Src/Kernel/OVR_File.h	/^        Error_IOError       = 0x1003,$/;"	e	enum:OVR::FileConstants::Errors
Errors	Src/Kernel/OVR_File.h	/^    enum Errors$/;"	g	class:OVR::FileConstants
EvalCatmullRom10Spline	Src/OVR_Stereo.cpp	/^float EvalCatmullRom10Spline ( float const *K, float scaledVal )$/;"	f	namespace:OVR
Event	Src/Kernel/OVR_Threads.h	/^    Event(bool setInitially = 0) : State(setInitially), Temporary(false) { }$/;"	f	class:OVR::Event
Event	Src/Kernel/OVR_Threads.h	/^class Event$/;"	c	namespace:OVR
ExchangeAdd_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline T     ExchangeAdd_Acquire(T val)         { return Ops::ExchangeAdd_Acquire(&this->Value, val); }$/;"	f	class:OVR::AtomicInt
ExchangeAdd_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline T*     ExchangeAdd_Acquire(I incr)   { return Ops::ExchangeAdd_Acquire(&this->Value, ((T*)0) + incr); }$/;"	f	class:OVR::AtomicPtr
ExchangeAdd_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static C     ExchangeAdd_Acquire(volatile C* p, C val)       { C2T_union u; u.c = val; u.t = Ops::ExchangeAdd_Acquire((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
ExchangeAdd_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   ExchangeAdd_Acquire(volatile O_T* p, O_T val)          { O_AcquireSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::ExchangeAdd_NoSync(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
ExchangeAdd_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline T     ExchangeAdd_NoSync(T val)          { return Ops::ExchangeAdd_NoSync(&this->Value, val); }$/;"	f	class:OVR::AtomicInt
ExchangeAdd_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline T*     ExchangeAdd_NoSync(I incr)    { return Ops::ExchangeAdd_NoSync(&this->Value, ((T*)0) + incr); }$/;"	f	class:OVR::AtomicPtr
ExchangeAdd_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static C     ExchangeAdd_NoSync(volatile C* p, C val)        { C2T_union u; u.c = val; u.t = Ops::ExchangeAdd_NoSync((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
ExchangeAdd_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   ExchangeAdd_NoSync(volatile O_T* p, O_T val)        { O_T old = *p; *p += val; return old; }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
ExchangeAdd_Release	Src/Kernel/OVR_Atomic.h	/^    inline T     ExchangeAdd_Release(T val)         { return Ops::ExchangeAdd_Release(&this->Value, val); }$/;"	f	class:OVR::AtomicInt
ExchangeAdd_Release	Src/Kernel/OVR_Atomic.h	/^    inline T*     ExchangeAdd_Release(I incr)   { return Ops::ExchangeAdd_Release(&this->Value, ((T*)0) + incr); }$/;"	f	class:OVR::AtomicPtr
ExchangeAdd_Release	Src/Kernel/OVR_Atomic.h	/^    inline static C     ExchangeAdd_Release(volatile C* p, C val)       { C2T_union u; u.c = val; u.t = Ops::ExchangeAdd_Release((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
ExchangeAdd_Release	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   ExchangeAdd_Release(volatile O_T* p, O_T val)          { O_ReleaseSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::ExchangeAdd_NoSync(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
ExchangeAdd_Sync	Src/Kernel/OVR_Atomic.h	/^    inline T     ExchangeAdd_Sync(T val)            { return Ops::ExchangeAdd_Sync(&this->Value, val); }$/;"	f	class:OVR::AtomicInt
ExchangeAdd_Sync	Src/Kernel/OVR_Atomic.h	/^    inline T*     ExchangeAdd_Sync(I incr)      { return Ops::ExchangeAdd_Sync(&this->Value, ((T*)0) + incr); }$/;"	f	class:OVR::AtomicPtr
ExchangeAdd_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static C     ExchangeAdd_Sync(volatile C* p, C val)          { C2T_union u; u.c = val; u.t = Ops::ExchangeAdd_Sync((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
ExchangeAdd_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   ExchangeAdd_Sync(volatile O_T* p, O_T val)             { O_FullSync    sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::ExchangeAdd_NoSync(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Exchange_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline T     Exchange_Acquire(T val)            { return Ops::Exchange_Acquire(&Value, val); }$/;"	f	class:OVR::AtomicValueBase
Exchange_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static C     Exchange_Acquire(volatile C* p, C val)          { C2T_union u; u.c = val; u.t = Ops::Exchange_Acquire((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
Exchange_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   Exchange_Acquire(volatile O_T* p, O_T val)             { O_AcquireSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::Exchange_NoSync(p, val); }  $/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Exchange_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline T     Exchange_NoSync(T val)             { return Ops::Exchange_NoSync(&Value, val); }$/;"	f	class:OVR::AtomicValueBase
Exchange_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static C     Exchange_NoSync(volatile C* p, C val)           { C2T_union u; u.c = val; u.t = Ops::Exchange_NoSync((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
Exchange_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   Exchange_NoSync(volatile O_T* p, O_T val)           { O_T old = *p; *p = val; return old; }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Exchange_Release	Src/Kernel/OVR_Atomic.h	/^    inline T     Exchange_Release(T val)            { return Ops::Exchange_Release(&Value, val); }$/;"	f	class:OVR::AtomicValueBase
Exchange_Release	Src/Kernel/OVR_Atomic.h	/^    inline static C     Exchange_Release(volatile C* p, C val)          { C2T_union u; u.c = val; u.t = Ops::Exchange_Release((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
Exchange_Release	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   Exchange_Release(volatile O_T* p, O_T val)             { O_ReleaseSync sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::Exchange_NoSync(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Exchange_Sync	Src/Kernel/OVR_Atomic.h	/^    inline T     Exchange_Sync(T val)               { return Ops::Exchange_Sync(&Value,  val); }$/;"	f	class:OVR::AtomicValueBase
Exchange_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static C     Exchange_Sync(volatile C* p, C val)             { C2T_union u; u.c = val; u.t = Ops::Exchange_Sync((PT)p, u.t); return u.c; }$/;"	f	class:OVR::AtomicOps
Exchange_Sync	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   Exchange_Sync(volatile O_T* p, O_T val)                { O_FullSync    sync; OVR_UNUSED(sync); return AtomicOpsRaw_DefImpl<O>::Exchange_NoSync(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Execute	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        virtual void Execute() const$/;"	f	struct:OVR::ThreadCommandQueueImpl::ExitCommand
Execute	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^void ThreadCommand::PopBuffer::Execute()$/;"	f	class:OVR::ThreadCommand::PopBuffer
Execute	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual void           Execute() const { executeImpl(); }$/;"	f	class:OVR::ThreadCommandMF0
Execute	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual void           Execute() const { executeImpl(); }$/;"	f	class:OVR::ThreadCommandMF1
Execute	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual void           Execute() const { executeImpl(); }$/;"	f	class:OVR::ThreadCommandMF2
Exit	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    Thread::Exit(int exitCode)$/;"	f	class:OVR::Thread
ExitCode	Src/Kernel/OVR_Threads.h	/^    int                 ExitCode;$/;"	m	class:OVR::Thread
ExitCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        ExitCommand(ThreadCommandQueueImpl* impl, bool wait)$/;"	f	struct:OVR::ThreadCommandQueueImpl::ExitCommand
ExitCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    struct ExitCommand : public ThreadCommand$/;"	s	class:OVR::ThreadCommandQueueImpl	file:
ExitEnqueued	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    volatile bool       ExitEnqueued;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
ExitFlag	Src/Kernel/OVR_ThreadCommandQueue.h	/^    bool         ExitFlag; \/\/ Marks the last exit command. $/;"	m	class:OVR::ThreadCommand
ExitProcessed	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    volatile bool       ExitProcessed;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
ExtEvalCatmullRom10Spline	Src/OVR_Stereo.cpp	/^float ExtEvalCatmullRom10Spline ( float const *K, float scaledVal )$/;"	f
ExtensionName	Src/CAPI/GL/CAPI_GLE.cpp	/^        const char* ExtensionName;$/;"	m	struct:ValueStringPair	file:
Extensions	Src/CAPI/GL/CAPI_GL_Util.h	/^    const char* Extensions;          \/\/ Other extensions string (will not be null)$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
ExtraEyeRotationInRadians	Src/Util/Util_Render_Stereo.h	/^    float              ExtraEyeRotationInRadians;$/;"	m	class:OVR::Util::Render::StereoConfig
Eye	Src/OVR_CAPI.h	/^    ovrEyeType  Eye;$/;"	m	struct:ovrEyeRenderDesc_
Eye	Src/OVR_Stereo.h	/^    StereoEye               Eye;$/;"	m	struct:OVR::StereoEyeParams
EyeConfig	Src/OVR_Stereo.h	/^    struct EyeConfig$/;"	s	struct:OVR::HmdRenderInfo
EyeCupType	Src/Sensors/OVR_DeviceConstants.h	/^enum EyeCupType$/;"	g	namespace:OVR
EyeCup_BlueA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_BlueA,$/;"	e	enum:OVR::EyeCupType
EyeCup_DK1A	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_DK1A = 0,$/;"	e	enum:OVR::EyeCupType
EyeCup_DK1B	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_DK1B = 1,$/;"	e	enum:OVR::EyeCupType
EyeCup_DK1C	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_DK1C = 2,$/;"	e	enum:OVR::EyeCupType
EyeCup_DK2A	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_DK2A = 3,$/;"	e	enum:OVR::EyeCupType
EyeCup_DKHD2A	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_DKHD2A,$/;"	e	enum:OVR::EyeCupType
EyeCup_Delilah1A	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_Delilah1A,$/;"	e	enum:OVR::EyeCupType
EyeCup_Delilah2A	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_Delilah2A,$/;"	e	enum:OVR::EyeCupType
EyeCup_JamesA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_JamesA,$/;"	e	enum:OVR::EyeCupType
EyeCup_LAST	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_LAST$/;"	e	enum:OVR::EyeCupType
EyeCup_OrangeA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_OrangeA,$/;"	e	enum:OVR::EyeCupType
EyeCup_PinkA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_PinkA,$/;"	e	enum:OVR::EyeCupType
EyeCup_RedA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_RedA,$/;"	e	enum:OVR::EyeCupType
EyeCup_SunMandalaA	Src/Sensors/OVR_DeviceConstants.h	/^    EyeCup_SunMandalaA,$/;"	e	enum:OVR::EyeCupType
EyeCups	Src/OVR_Stereo.h	/^    EyeCupType  EyeCups;$/;"	m	struct:OVR::HmdRenderInfo
EyeLeft	Src/OVR_Stereo.h	/^    } EyeLeft, EyeRight;$/;"	m	struct:OVR::HmdRenderInfo	typeref:struct:OVR::HmdRenderInfo::EyeConfig
EyeRenderDesc	Src/CAPI/CAPI_HMDRenderState.h	/^    ovrEyeRenderDesc        EyeRenderDesc[2]; $/;"	m	struct:OVR::CAPI::HMDRenderState
EyeRenderOrder	Src/OVR_CAPI.h	/^    ovrEyeType  EyeRenderOrder[ovrEye_Count];$/;"	m	struct:ovrHmdDesc_
EyeRenderParams	Src/Util/Util_Render_Stereo.h	/^    StereoEyeParamsWithOrtho    EyeRenderParams[2];$/;"	m	class:OVR::Util::Render::StereoConfig
EyeRenderPoses	Src/CAPI/CAPI_HMDRenderState.h	/^    ovrPosef                EyeRenderPoses[2];$/;"	m	struct:OVR::CAPI::HMDRenderState
EyeRenderPoses	Src/Util/Util_Render_Stereo.h	/^    Posef               EyeRenderPoses[2];$/;"	m	class:OVR::Util::Render::TimewarpMachine
EyeRenderTimes	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              EyeRenderTimes[2];$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
EyeRight	Src/OVR_Stereo.h	/^    } EyeLeft, EyeRight;$/;"	m	struct:OVR::HmdRenderInfo	typeref:struct:OVR::HmdRenderInfo::EyeConfig
EyeScanoutSeconds	Src/OVR_CAPI.h	/^    double          EyeScanoutSeconds[2];$/;"	m	struct:ovrFrameTiming_
EyeToSourceNDC	Src/OVR_Stereo.h	/^    ScaleAndOffset2D        EyeToSourceNDC;         \/\/ Mapping from TanEyeAngle space to [-1,+1] on the rendered image.$/;"	m	struct:OVR::StereoEyeParams
EyeToSourceUV	Src/OVR_Stereo.h	/^    ScaleAndOffset2D        EyeToSourceUV;          \/\/ Mapping from TanEyeAngle space to actual texture UV coords.$/;"	m	struct:OVR::StereoEyeParams
EyeToSourceUV	Src/Util/Util_Render_Stereo.h	/^    ScaleAndOffset2D    EyeToSourceUV;$/;"	m	struct:OVR::Util::Render::ViewportScaleAndOffset
FBConfig	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  FBConfig() :$/;"	f	struct:OVR::FBConfig
FBConfig	Src/Displays/OVR_Linux_SDKWindow.cpp	/^struct FBConfig$/;"	s	namespace:OVR	file:
FILEBUFFER_SIZE	Src/Kernel/OVR_File.cpp	40;"	d	file:
FILEBUFFER_TOLERANCE	Src/Kernel/OVR_File.cpp	41;"	d	file:
FILEFile	Src/Kernel/OVR_FileFILE.cpp	/^    FILEFile() :$/;"	f	class:OVR::FILEFile
FILEFile	Src/Kernel/OVR_FileFILE.cpp	/^FILEFile::FILEFile(const String& fileName, int flags, int mode)$/;"	f	class:OVR::FILEFile
FILEFile	Src/Kernel/OVR_FileFILE.cpp	/^FILEFile::FILEFile(const char* pfileName, int flags, int mode)$/;"	f	class:OVR::FILEFile
FILEFile	Src/Kernel/OVR_FileFILE.cpp	/^class FILEFile : public File$/;"	c	namespace:OVR	file:
FIRST_BYTE	Src/Kernel/OVR_UTF8Util.cpp	159;"	d	file:
FOR_EACH_EYE	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	struct FOR_EACH_EYE$/;"	s	class:OVR::CAPI::GL::DistortionRenderer
FOR_EACH_EYE	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        FOR_EACH_EYE() : TextureSize(0), RenderViewport(Sizei(0)) { }$/;"	f	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
FPS	Src/CAPI/CAPI_LatencyStatistics.h	/^    double FPS;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
Factory	Src/CAPI/CAPI_HSWDisplay.cpp	/^OVR::CAPI::HSWDisplay* OVR::CAPI::HSWDisplay::Factory(ovrRenderAPIType apiType, ovrHmd hmd, const OVR::CAPI::HMDRenderState& renderState)$/;"	f	class:OVR::CAPI::HSWDisplay
FakeArray	Src/Kernel/OVR_SharedMemory.cpp	/^        Array< Ptr<FakeMemoryBlock> > FakeArray;$/;"	m	class:OVR::FakeMemoryManager	file:
FakeLock	Src/Kernel/OVR_SharedMemory.cpp	/^        Lock FakeLock;$/;"	m	class:OVR::FakeMemoryManager	file:
FakeMemoryBlock	Src/Kernel/OVR_SharedMemory.cpp	/^        FakeMemoryBlock(const String& name, int size) :$/;"	f	class:OVR::FakeMemoryBlock
FakeMemoryBlock	Src/Kernel/OVR_SharedMemory.cpp	/^    class FakeMemoryBlock : public RefCountBase<FakeMemoryBlock>$/;"	c	namespace:OVR	file:
FakeMemoryManager	Src/Kernel/OVR_SharedMemory.cpp	/^    FakeMemoryManager::FakeMemoryManager()$/;"	f	class:OVR::FakeMemoryManager
FakeMemoryManager	Src/Kernel/OVR_SharedMemory.cpp	/^    class FakeMemoryManager : public NewOverrideBase, public SystemSingletonBase<FakeMemoryManager>$/;"	c	namespace:OVR	file:
FakeSeconds	Src/Kernel/OVR_Timer.cpp	/^double Timer::FakeSeconds    = 0;$/;"	m	class:OVR::Timer	file:
FakeSeconds	Src/Kernel/OVR_Timer.h	/^    static double FakeSeconds;$/;"	m	class:OVR::Timer
FastFixRange	Src/Kernel/OVR_Math.h	/^	inline void FastFixRange()$/;"	f	class:OVR::Angle
File	Src/Kernel/OVR_File.h	/^    File() { }$/;"	f	class:OVR::File
File	Src/Kernel/OVR_File.h	/^class File : public RefCountBase<File>, public FileConstants$/;"	c	namespace:OVR
FileConstants	Src/Kernel/OVR_File.h	/^class FileConstants$/;"	c	namespace:OVR
FileData	Src/Kernel/OVR_File.h	/^    const uint8_t *FileData;$/;"	m	class:OVR::MemoryFile
FileFILEOpen	Src/Kernel/OVR_FileFILE.cpp	/^Ptr<File> FileFILEOpen(const String& path, int flags, int mode)$/;"	f	namespace:OVR
FileIndex	Src/Kernel/OVR_File.h	/^    int          FileIndex;$/;"	m	class:OVR::MemoryFile
FileMapping	Src/Kernel/OVR_SharedMemory.cpp	/^	HANDLE FileMapping;$/;"	m	class:OVR::SharedMemoryInternal	file:
FileMapping	Src/Kernel/OVR_SharedMemory.cpp	/^	int   FileMapping;$/;"	m	class:OVR::SharedMemoryInternal	file:
FileName	Src/CAPI/CAPI_LatencyStatistics.h	/^    String FileName;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
FileName	Src/Kernel/OVR_FileFILE.cpp	/^    String      FileName;$/;"	m	class:OVR::FILEFile	file:
FilePath	Src/Kernel/OVR_File.h	/^    String       FilePath;$/;"	m	class:OVR::MemoryFile
FilePos	Src/Kernel/OVR_File.h	/^    uint64_t        FilePos;$/;"	m	class:OVR::BufferedFile
FileSize	Src/Kernel/OVR_File.h	/^    int          FileSize;$/;"	m	class:OVR::MemoryFile
FileSize	Src/Kernel/OVR_SharedMemory.cpp	/^    int   FileSize;$/;"	m	class:OVR::SharedMemoryInternal	file:
FileSize	Src/Kernel/OVR_SysFile.h	/^    int64_t FileSize;$/;"	m	struct:OVR::FileStat
FileStat	Src/Kernel/OVR_SysFile.h	/^struct FileStat$/;"	s	namespace:OVR
FileTestLength	Src/Kernel/OVR_FileFILE.cpp	/^    unsigned    FileTestLength;$/;"	m	class:OVR::FILEFile	file:
FileView	Src/Kernel/OVR_SharedMemory.cpp	/^	void* FileView;$/;"	m	class:OVR::SharedMemoryInternal	file:
FileView	Src/Kernel/OVR_SharedMemory.cpp	/^        void* FileView;$/;"	m	class:OVR::SharedMemoryInternal	file:
FilterKeyPrefix	Src/Service/Service_NetSessionCommon.cpp	/^const char *NetSessionCommon::FilterKeyPrefix(const char* key)$/;"	f	class:OVR::Service::NetSessionCommon
FilterTaggedData	Src/OVR_Profile.cpp	/^static void FilterTaggedData(JSON* data, const char* tag_name, const char* qtag, Array<JSON*>& items)$/;"	f	namespace:OVR
Find	Src/Kernel/OVR_Hash.h	/^    ConstIterator   Find(const C& key) const    { return mHash.FindAlt(key);  }$/;"	f	class:OVR::Hash
Find	Src/Kernel/OVR_Hash.h	/^    ConstIterator Find(const K& key) const       { return const_cast<SelfType*>(this)->Find(key); }$/;"	f	class:OVR::HashSetBase
Find	Src/Kernel/OVR_Hash.h	/^    Iterator        Find(const C& key)          { return mHash.FindAlt(key);  }$/;"	f	class:OVR::Hash
Find	Src/Kernel/OVR_Hash.h	/^    Iterator Find(const K& key)$/;"	f	class:OVR::HashSetBase
FindAlt	Src/Kernel/OVR_Hash.h	/^    ConstIterator   FindAlt(const K& key) const { return mHash.FindAlt(key);  }$/;"	f	class:OVR::Hash
FindAlt	Src/Kernel/OVR_Hash.h	/^    ConstIterator FindAlt(const K& key) const    { return const_cast<SelfType*>(this)->FindAlt(key); }$/;"	f	class:OVR::HashSetBase
FindAlt	Src/Kernel/OVR_Hash.h	/^    Iterator        FindAlt(const K& key)       { return mHash.FindAlt(key);  }$/;"	f	class:OVR::Hash
FindAlt	Src/Kernel/OVR_Hash.h	/^    Iterator FindAlt(const K& key)$/;"	f	class:OVR::HashSetBase
FindCaseInsensitive	Src/Kernel/OVR_StringHash.h	/^    base_iterator    FindCaseInsensitive(const String& key)$/;"	f	class:OVR::StringHash
FindChar	Src/Kernel/OVR_String.h	/^    intptr_t    FindChar(char c, size_t init_ind = 0) const $/;"	f	class:OVR::StringDataPtr
FindLastChar	Src/Kernel/OVR_String.h	/^    intptr_t    FindLastChar(char c, size_t init_ind = ~0) const $/;"	f	class:OVR::StringDataPtr
FindReadbackIndex	Src/Util/Util_LatencyTest2Reader.cpp	/^bool FrameTimeRecordSet::FindReadbackIndex(int* i, int readbackIndex) const$/;"	f	class:OVR::Util::FrameTimeRecordSet
FindTaggedData	Src/OVR_Profile.cpp	/^static JSON* FindTaggedData(JSON* data, const char** tag_names, const char** qtags, int num_qtags)$/;"	f	namespace:OVR
FinishAllThreads	Src/Kernel/OVR_ThreadsPthread.cpp	/^    static void FinishAllThreads()$/;"	f	class:OVR::ThreadList
FinishAllThreads	Src/Kernel/OVR_ThreadsPthread.cpp	/^void Thread::FinishAllThreads()$/;"	f	class:OVR::Thread
FinishAndRelease	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    Thread::FinishAndRelease()$/;"	f	class:OVR::Thread
FirmwareMajor	Src/OVR_CAPI.h	/^    short       FirmwareMajor;$/;"	m	struct:ovrHmdDesc_
FirmwareMajor	Src/OVR_Stereo.h	/^    int         FirmwareMajor;$/;"	m	class:OVR::HMDInfo
FirmwareMinor	Src/OVR_CAPI.h	/^    short       FirmwareMinor;$/;"	m	struct:ovrHmdDesc_
FirmwareMinor	Src/OVR_Stereo.h	/^    int         FirmwareMinor;$/;"	m	class:OVR::HMDInfo
First	Src/Kernel/OVR_Hash.h	/^    C   First;$/;"	m	struct:OVR::HashNode
FirstItemWritten	Src/Kernel/OVR_Lockless.cpp	/^volatile bool              FirstItemWritten = false;$/;"	m	namespace:OVR::LocklessTest	file:
FirstScanlineToLastScanline	Src/OVR_Stereo.h	/^		float   FirstScanlineToLastScanline;     \/\/ for global shutter, will be zero.$/;"	m	struct:OVR::HMDInfo::ShutterInfo
FirstScanlineToLastScanline	Src/OVR_Stereo.h	/^        float               FirstScanlineToLastScanline;     \/\/ for global shutter, will be zero.$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
FirstType	Src/Kernel/OVR_Hash.h	/^    typedef C                       FirstType;$/;"	t	struct:OVR::HashNode
FitCubicPolynomial	Src/OVR_Stereo.cpp	/^bool FitCubicPolynomial ( float *pResult, const float *pFitX, const float *pFitY )$/;"	f	namespace:OVR
FixRange	Src/Kernel/OVR_Math.h	/^	inline void FixRange()$/;"	f	class:OVR::Angle
FixedSizeHash	Src/Kernel/OVR_Hash.h	/^class FixedSizeHash$/;"	c	namespace:OVR
FlagConstants	Src/Kernel/OVR_String.h	/^    enum FlagConstants$/;"	g	class:OVR::String
Flag_LengthIsSizeShift	Src/Kernel/OVR_String.h	/^        Flag_LengthIsSizeShift   = (sizeof(size_t)*8 - 1)$/;"	e	enum:OVR::String::FlagConstants
Flags	Src/CAPI/GL/CAPI_GLE_GL.h	/^            DWORD  Flags;$/;"	m	struct:_GPU_DEVICE
Flip	Src/Kernel/OVR_Math.h	/^    void Flip()$/;"	f	class:OVR::Plane
Flipped	Src/Kernel/OVR_Math.h	/^    Plane<T> Flipped() const$/;"	f	class:OVR::Plane
Flush	Src/Kernel/OVR_File.cpp	/^bool    BufferedFile::Flush()$/;"	f	class:OVR::BufferedFile
Flush	Src/Kernel/OVR_File.h	/^    bool        Flush()             { return true; }$/;"	f	class:OVR::MemoryFile
Flush	Src/Kernel/OVR_File.h	/^    virtual bool        Flush()                                     { return pFile->Flush(); }$/;"	f	class:OVR::DelegatedFile
Flush	Src/Kernel/OVR_FileFILE.cpp	/^bool    FILEFile::Flush()$/;"	f	class:OVR::FILEFile
Flush	Src/Kernel/OVR_SysFile.cpp	/^    virtual bool        Flush()                                              { return  0; }$/;"	f	class:OVR::UnopenedFile
FlushBuffer	Src/Kernel/OVR_File.cpp	/^void    BufferedFile::FlushBuffer()$/;"	f	class:OVR::BufferedFile
FlushGpuAndWaitTillTime	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^double DistortionRenderer::FlushGpuAndWaitTillTime(double absTime)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
FnPtr	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typedef R (C::*FnPtr)();$/;"	t	class:OVR::ThreadCommandMF0
FnPtr	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typedef R (C::*FnPtr)(A0);$/;"	t	class:OVR::ThreadCommandMF1
FnPtr	Src/Kernel/OVR_ThreadCommandQueue.h	/^    typedef R (C::*FnPtr)(A0, A1);$/;"	t	class:OVR::ThreadCommandMF2
Fog	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Fog;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
FormatLog	Src/Kernel/OVR_Log.cpp	/^int Log::FormatLog(char* buffer, size_t bufferSize, LogMessageType messageType,$/;"	f	class:OVR::Log
FormatType	Src/OVR_SerialFormat.h	/^	static const SerialFormatType FormatType = SerialFormatType_DK2; \/\/ first byte$/;"	m	class:OVR::DK2BinarySerialFormat
Fov	Src/OVR_CAPI.h	/^    ovrFovPort  Fov;$/;"	m	struct:ovrEyeRenderDesc_
Fov	Src/OVR_Stereo.h	/^    FovPort                 Fov;                    \/\/ The FOVs of this scene.$/;"	m	struct:OVR::StereoEyeParams
Fov	Src/Util/Util_Render_Stereo.cpp	/^    FovPort                 Fov; $/;"	m	struct:OVR::Util::Render::DistortionAndFov	file:
FovOverrideLeft	Src/Util/Util_Render_Stereo.h	/^    FovPort            FovOverrideLeft;$/;"	m	class:OVR::Util::Render::StereoConfig
FovOverrideRight	Src/Util/Util_Render_Stereo.h	/^    FovPort            FovOverrideRight;$/;"	m	class:OVR::Util::Render::StereoConfig
FovPort	Src/OVR_CAPI.cpp	/^FovPort::FovPort(const ovrFovPort &src)$/;"	f	class:OVR::FovPort
FovPort	Src/OVR_Stereo.h	/^    FovPort ( float sideTan = 0.0f ) :$/;"	f	struct:OVR::FovPort
FovPort	Src/OVR_Stereo.h	/^    FovPort ( float u, float d, float l, float r ) :$/;"	f	struct:OVR::FovPort
FovPort	Src/OVR_Stereo.h	/^struct FovPort$/;"	s	namespace:OVR
FragmentShader	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef ShaderImpl<Shader_Fragment, GL_FRAGMENT_SHADER> FragmentShader;$/;"	t	namespace:OVR::CAPI::GL
Frame	Src/Util/Util_ImageWindow.h	/^	Frame( int frame ) :$/;"	f	class:OVR::Util::Frame
Frame	Src/Util/Util_ImageWindow.h	/^class Frame : virtual public RefCountBaseV<Frame>$/;"	c	namespace:OVR::Util
FrameBuffer	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        GLuint                             FrameBuffer;         \/\/ This is a container for a texture, depth buffer, stencil buffer to be rendered to. To consider: Make a wrapper class, like the OculusWorldDemo RBuffer class. $/;"	m	class:OVR::CAPI::GL::HSWDisplay
FrameBufferBinding	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint FrameBufferBinding;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
FrameCount	Src/CAPI/CAPI_LatencyStatistics.h	/^    int                 FrameCount;$/;"	m	class:OVR::CAPI::LagStatsCalculator
FrameDelta	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              FrameDelta;$/;"	m	struct:OVR::CAPI::FrameTimeManager::TimingInputs
FrameDeltas	Src/CAPI/CAPI_FrameTimeManager.h	/^    TimeDeltaCollector    FrameDeltas;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
FrameEndTimes	Src/CAPI/CAPI_FrameTimeManager.h	/^    FrameTimeRecordEx     FrameEndTimes[FramesTracked];$/;"	m	class:OVR::CAPI::FrameLatencyTracker
FrameIndex	Src/CAPI/CAPI_FrameTimeManager.h	/^        unsigned int        FrameIndex;$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
FrameIndex	Src/CAPI/CAPI_FrameTimeManager.h	/^    int                   FrameIndex;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
FrameLatencyTracker	Src/CAPI/CAPI_FrameTimeManager.cpp	/^FrameLatencyTracker::FrameLatencyTracker()$/;"	f	class:OVR::CAPI::FrameLatencyTracker
FrameLatencyTracker	Src/CAPI/CAPI_FrameTimeManager.h	/^class FrameLatencyTracker$/;"	c	namespace:OVR::CAPI
FrameTimeDeltas	Src/CAPI/CAPI_FrameTimeManager.h	/^    TimeDeltaCollector  FrameTimeDeltas;$/;"	m	class:OVR::CAPI::FrameTimeManager
FrameTimeManager	Src/CAPI/CAPI_FrameTimeManager.cpp	/^FrameTimeManager::FrameTimeManager(bool vsyncEnabled) :$/;"	f	class:OVR::CAPI::FrameTimeManager
FrameTimeManager	Src/CAPI/CAPI_FrameTimeManager.h	/^class FrameTimeManager$/;"	c	namespace:OVR::CAPI
FrameTimeRecord	Src/Util/Util_LatencyTest2State.h	/^struct FrameTimeRecord$/;"	s	namespace:OVR::Util
FrameTimeRecordEx	Src/CAPI/CAPI_FrameTimeManager.h	/^    struct FrameTimeRecordEx : public Util::FrameTimeRecord$/;"	s	class:OVR::CAPI::FrameLatencyTracker
FrameTimeRecordSet	Src/Util/Util_LatencyTest2Reader.cpp	/^FrameTimeRecordSet::FrameTimeRecordSet()$/;"	f	class:OVR::Util::FrameTimeRecordSet
FrameTimeRecordSet	Src/Util/Util_LatencyTest2State.h	/^struct FrameTimeRecordSet$/;"	s	namespace:OVR::Util
FrameTiming	Src/CAPI/CAPI_FrameTimeManager.h	/^    Timing                  FrameTiming;$/;"	m	class:OVR::CAPI::FrameTimeManager
FramesTracked	Src/CAPI/CAPI_FrameTimeManager.h	/^    enum { FramesTracked = Util::LT2_IncrementCount-1 };$/;"	e	enum:OVR::CAPI::FrameLatencyTracker::__anon4
Free	Src/Kernel/OVR_Allocator.cpp	/^void DefaultAllocator::Free(void *p)$/;"	f	class:OVR::DefaultAllocator
Free	Src/Kernel/OVR_ContainerAllocator.h	/^    static void  Free(void *p)                    { OVR_FREE(p); }$/;"	f	class:OVR::ContainerAllocatorBase
Free	Src/Kernel/OVR_Hash.h	/^    void    Free() { Clear(); }$/;"	f	class:OVR::HashsetCachedEntry
Free	Src/Kernel/OVR_Hash.h	/^    void    Free() { Clear(); }$/;"	f	class:OVR::HashsetCachedNodeEntry
Free	Src/Kernel/OVR_Hash.h	/^    void    Free() { Clear(); }$/;"	f	class:OVR::HashsetEntry
Free	Src/Kernel/OVR_Hash.h	/^    void    Free() { Clear(); }$/;"	f	class:OVR::HashsetNodeEntry
Free	Src/Kernel/OVR_SharedMemory.cpp	/^        void Free(FakeMemoryBlock* block)$/;"	f	class:OVR::FakeMemoryManager
FreeAligned	Src/Kernel/OVR_Allocator.cpp	/^void Allocator::FreeAligned(void* p)$/;"	f	class:OVR::Allocator
FreeListElements	Src/Kernel/OVR_List.h	/^void FreeListElements(List& list, Allocator& allocator)$/;"	f	namespace:OVR
FreeNotifyEvent_NTS	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    void         FreeNotifyEvent_NTS(NotifyEvent* p)$/;"	f	class:OVR::ThreadCommandQueueImpl
FreeNotifyEvents_NTS	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    void        FreeNotifyEvents_NTS()$/;"	f	class:OVR::ThreadCommandQueueImpl
FreeStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type FreeStub(void *object)$/;"	f	class:OVR::Delegate0
FreeStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type FreeStub(void *object, arg1_type a1)$/;"	f	class:OVR::Delegate1
FreeStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type FreeStub(void *object, arg1_type a1, arg2_type a2)$/;"	f	class:OVR::Delegate2
FreeStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type FreeStub(void *object, arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:OVR::Delegate3
FromArray	Src/Kernel/OVR_Math.h	/^    static Pose<T> FromArray(const T* v)$/;"	f	class:OVR::Pose
FromBase32	Src/OVR_SerialFormat.cpp	/^bool DK2PrintedSerialFormat::FromBase32(const char* str, bool allowUnknownTypes)$/;"	f	class:OVR::DK2PrintedSerialFormat
FromBinary	Src/OVR_SerialFormat.cpp	/^void DK2PrintedSerialFormat::FromBinary(const DK2BinarySerialFormat& bin)$/;"	f	class:OVR::DK2PrintedSerialFormat
FromBuffer	Src/OVR_SerialFormat.cpp	/^bool DK2BinarySerialFormat::FromBuffer(const uint8_t buffer[12], bool allowUnknownTypes)$/;"	f	class:OVR::DK2BinarySerialFormat
FromConstMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromConstMember(T const *object)$/;"	f	class:OVR::Delegate0
FromConstMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromConstMember(T const *object)$/;"	f	class:OVR::Delegate1
FromConstMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromConstMember(T const *object)$/;"	f	class:OVR::Delegate2
FromConstMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromConstMember(T const *object)$/;"	f	class:OVR::Delegate3
FromFree	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromFree()$/;"	f	class:OVR::Delegate0
FromFree	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromFree()$/;"	f	class:OVR::Delegate1
FromFree	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromFree()$/;"	f	class:OVR::Delegate2
FromFree	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromFree()$/;"	f	class:OVR::Delegate3
FromMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromMember(T *object)$/;"	f	class:OVR::Delegate0
FromMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromMember(T *object)$/;"	f	class:OVR::Delegate1
FromMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromMember(T *object)$/;"	f	class:OVR::Delegate2
FromMember	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE this_type FromMember(T *object)$/;"	f	class:OVR::Delegate3
FromString	Src/Kernel/OVR_Math.h	/^	static Matrix3 FromString(const char* src)$/;"	f	class:OVR::Matrix3
FromString	Src/Kernel/OVR_Math.h	/^    static Matrix4 FromString(const char* src)$/;"	f	class:OVR::Matrix4
Front	Src/Kernel/OVR_Array.h	/^    ValueType&          Front()         { return At(0); }$/;"	f	class:OVR::ArrayBase
Front	Src/Kernel/OVR_Array.h	/^    const ValueType&    Front() const   { return At(0); }$/;"	f	class:OVR::ArrayBase
FullConnections	Src/Net/OVR_Session.h	/^    Array< Ptr<Connection> >  FullConnections;     \/\/ List of active connections past the versioning handshake$/;"	m	class:OVR::Net::Session
FullSync	Src/Kernel/OVR_Atomic.h	/^    struct FullSync { inline FullSync() { } };$/;"	f	struct:OVR::AtomicOpsRawBase::FullSync
FullSync	Src/Kernel/OVR_Atomic.h	/^    struct FullSync { inline FullSync() { } };$/;"	s	struct:OVR::AtomicOpsRawBase
G	Src/Kernel/OVR_Color.h	/^    uint8_t R,G,B,A;$/;"	m	struct:OVR::Color
GFILE_CXX	Src/Kernel/OVR_File.cpp	28;"	d	file:
GFILE_CXX	Src/Kernel/OVR_FileFILE.cpp	28;"	d	file:
GFILE_CXX	Src/Kernel/OVR_SysFile.cpp	28;"	d	file:
GL	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI	file:
GL	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI
GL	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI
GL	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^namespace GL {$/;"	n	namespace:OVR::CAPI	file:
GL	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI
GL	Src/CAPI/GL/CAPI_GL_Util.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI	file:
GL	Src/CAPI/GL/CAPI_GL_Util.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	namespace:OVR::CAPI
GLAPI	Src/CAPI/GL/CAPI_GLE_GL.h	112;"	d
GLAPI	Src/CAPI/GL/CAPI_GLE_GL.h	114;"	d
GLAPI	Src/CAPI/GL/CAPI_GLE_GL.h	123;"	d
GLAPIENTRY	Src/CAPI/GL/CAPI_GLE_GL.h	118;"	d
GLAPIENTRY	Src/CAPI/GL/CAPI_GLE_GL.h	124;"	d
GLBuffer	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLuint        GLBuffer;$/;"	m	class:OVR::CAPI::GL::Buffer
GLContext	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        OVR::CAPI::GL::Context             GLContext;           \/\/ Our prive OpenGL context for drawing.$/;"	m	class:OVR::CAPI::GL::HSWDisplay
GLDEBUGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);$/;"	t
GLDEBUGPROCAMD	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY *GLDEBUGPROCAMD)(GLuint id, GLenum category, GLenum severity, GLsizei length, const GLchar* message, void* userParam);$/;"	t
GLDEBUGPROCARB	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY *GLDEBUGPROCARB)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);$/;"	t
GLEContext	Src/CAPI/GL/CAPI_GLE.cpp	/^    OVR::GLEContext::GLEContext()$/;"	f	class:OVR::GLEContext
GLEContext	Src/CAPI/GL/CAPI_GLE.h	/^    GLE_CLASS_EXPORT class GLEContext$/;"	c	namespace:OVR
GLECurrentContext	Src/CAPI/GL/CAPI_GLE.cpp	/^    static OVR::GLEContext* GLECurrentContext = NULL;$/;"	v	file:
GLEGetCurrentFunction	Src/CAPI/GL/CAPI_GLE_GL.h	143;"	d
GLEGetCurrentFunction	Src/CAPI/GL/CAPI_GLE_GL.h	146;"	d
GLEGetCurrentVariable	Src/CAPI/GL/CAPI_GLE_GL.h	144;"	d
GLEGetCurrentVariable	Src/CAPI/GL/CAPI_GLE_GL.h	147;"	d
GLEGetProcAddress	Src/CAPI/GL/CAPI_GLE.cpp	/^    void* OVR::GLEGetProcAddress(const char* name)$/;"	f	class:OVR
GLELoadProc	Src/CAPI/GL/CAPI_GLE.cpp	66;"	d	file:
GLE_AMD_debug_output	Src/CAPI/GL/CAPI_GLE_GL.h	2718;"	d
GLE_ANDROID_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	85;"	d
GLE_APPLE_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	83;"	d
GLE_APPLE_aux_depth_stencil	Src/CAPI/GL/CAPI_GLE_GL.h	2772;"	d
GLE_APPLE_client_storage	Src/CAPI/GL/CAPI_GLE_GL.h	2782;"	d
GLE_APPLE_element_array	Src/CAPI/GL/CAPI_GLE_GL.h	2806;"	d
GLE_APPLE_fence	Src/CAPI/GL/CAPI_GLE_GL.h	2835;"	d
GLE_APPLE_float_pixels	Src/CAPI/GL/CAPI_GLE_GL.h	2859;"	d
GLE_APPLE_flush_buffer_range	Src/CAPI/GL/CAPI_GLE_GL.h	2876;"	d
GLE_APPLE_object_purgeable	Src/CAPI/GL/CAPI_GLE_GL.h	2899;"	d
GLE_APPLE_pixel_buffer	Src/CAPI/GL/CAPI_GLE_GL.h	2909;"	d
GLE_APPLE_rgb_422	Src/CAPI/GL/CAPI_GLE_GL.h	2922;"	d
GLE_APPLE_row_bytes	Src/CAPI/GL/CAPI_GLE_GL.h	2933;"	d
GLE_APPLE_specular_vector	Src/CAPI/GL/CAPI_GLE_GL.h	2943;"	d
GLE_APPLE_texture_range	Src/CAPI/GL/CAPI_GLE_GL.h	2964;"	d
GLE_APPLE_transform_hint	Src/CAPI/GL/CAPI_GLE_GL.h	2973;"	d
GLE_APPLE_vertex_array_object	Src/CAPI/GL/CAPI_GLE_GL.h	2998;"	d
GLE_APPLE_vertex_array_range	Src/CAPI/GL/CAPI_GLE_GL.h	3023;"	d
GLE_APPLE_vertex_program_evaluators	Src/CAPI/GL/CAPI_GLE_GL.h	3058;"	d
GLE_ARB_ES2_compatibility	Src/CAPI/GL/CAPI_GLE_GL.h	3345;"	d
GLE_ARB_debug_output	Src/CAPI/GL/CAPI_GLE_GL.h	3102;"	d
GLE_ARB_framebuffer_object	Src/CAPI/GL/CAPI_GLE_GL.h	3471;"	d
GLE_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	3483;"	d
GLE_ARB_texture_multisample	Src/CAPI/GL/CAPI_GLE_GL.h	3523;"	d
GLE_ARB_texture_non_power_of_two	Src/CAPI/GL/CAPI_GLE_GL.h	3532;"	d
GLE_ARB_timer_query	Src/CAPI/GL/CAPI_GLE_GL.h	3551;"	d
GLE_ARB_vertex_array_object	Src/CAPI/GL/CAPI_GLE_GL.h	3571;"	d
GLE_CLASS_EXPORT	Src/CAPI/GL/CAPI_GLE_GL.h	130;"	d
GLE_EXT_draw_buffers2	Src/CAPI/GL/CAPI_GLE_GL.h	3637;"	d
GLE_EXT_texture_filter_anisotropic	Src/CAPI/GL/CAPI_GLE_GL.h	3648;"	d
GLE_GLX_EXT_swap_control	Src/CAPI/GL/CAPI_GLE_GL.h	4556;"	d
GLE_GLX_OML_sync_control	Src/CAPI/GL/CAPI_GLE_GL.h	4575;"	d
GLE_HOOKING_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	138;"	d
GLE_KHR_debug	Src/CAPI/GL/CAPI_GLE_GL.h	3731;"	d
GLE_KHR_robust_buffer_access_behavior	Src/CAPI/GL/CAPI_GLE_GL.h	3739;"	d
GLE_UNIX_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	87;"	d
GLE_VERSION_3_1	Src/CAPI/GL/CAPI_GLE_GL.h	2552;"	d
GLE_VERSION_3_2	Src/CAPI/GL/CAPI_GLE_GL.h	2592;"	d
GLE_WGL_ARB_buffer_region	Src/CAPI/GL/CAPI_GLE_GL.h	3866;"	d
GLE_WGL_ARB_create_context	Src/CAPI/GL/CAPI_GLE_GL.h	4088;"	d
GLE_WGL_ARB_create_context_profile	Src/CAPI/GL/CAPI_GLE_GL.h	4100;"	d
GLE_WGL_ARB_create_context_robustness	Src/CAPI/GL/CAPI_GLE_GL.h	4112;"	d
GLE_WGL_ARB_extensions_string	Src/CAPI/GL/CAPI_GLE_GL.h	3877;"	d
GLE_WGL_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	4052;"	d
GLE_WGL_ARB_make_current_read	Src/CAPI/GL/CAPI_GLE_GL.h	3958;"	d
GLE_WGL_ARB_pbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3985;"	d
GLE_WGL_ARB_pixel_format	Src/CAPI/GL/CAPI_GLE_GL.h	3942;"	d
GLE_WGL_ARB_render_texture	Src/CAPI/GL/CAPI_GLE_GL.h	4034;"	d
GLE_WGL_EXT_extensions_string	Src/CAPI/GL/CAPI_GLE_GL.h	4123;"	d
GLE_WGL_EXT_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	4166;"	d
GLE_WGL_EXT_swap_control	Src/CAPI/GL/CAPI_GLE_GL.h	4136;"	d
GLE_WGL_NV_DX_interop	Src/CAPI/GL/CAPI_GLE_GL.h	4281;"	d
GLE_WGL_NV_copy_image	Src/CAPI/GL/CAPI_GLE_GL.h	4252;"	d
GLE_WGL_NV_present_video	Src/CAPI/GL/CAPI_GLE_GL.h	4069;"	d
GLE_WGL_NV_swap_group	Src/CAPI/GL/CAPI_GLE_GL.h	4210;"	d
GLE_WGL_NV_video_capture	Src/CAPI/GL/CAPI_GLE_GL.h	4241;"	d
GLE_WGL_NV_video_output	Src/CAPI/GL/CAPI_GLE_GL.h	4189;"	d
GLE_WGL_OML_sync_control	Src/CAPI/GL/CAPI_GLE_GL.h	4157;"	d
GLE_WGL_TYPE_RGBA_FLOAT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4043;"	d
GLE_WINDOWS_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	81;"	d
GLE_WINGDIAPI_DEFINED	Src/CAPI/GL/CAPI_GLE_GL.h	107;"	d
GLE_WIN_swap_hint	Src/CAPI/GL/CAPI_GLE_GL.h	3781;"	d
GLShader	Src/CAPI/GL/CAPI_GL_Util.h	/^	GLuint GLShader;$/;"	m	class:OVR::CAPI::GL::ShaderImpl
GLStage	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLenum GLStage() const$/;"	f	class:OVR::CAPI::GL::ShaderImpl
GLVersionAndExtensions	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLVersionAndExtensions()$/;"	f	struct:OVR::CAPI::GL::GLVersionAndExtensions
GLVersionAndExtensions	Src/CAPI/GL/CAPI_GL_Util.h	/^struct GLVersionAndExtensions$/;"	s	namespace:OVR::CAPI::GL
GLVersionInfo	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLVersionAndExtensions GLVersionInfo;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
GLVersionInfo	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        GLVersionAndExtensions             GLVersionInfo;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
GLXContext	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef struct __GLXcontextRec *GLXContext;$/;"	t	typeref:struct:__GLXcontextRec
GLXDrawable	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XID GLXDrawable;$/;"	t
GLXEvent	Src/CAPI/GL/CAPI_GLE_GL.h	/^        } GLXEvent;$/;"	t	typeref:union:__GLXEvent
GLXFBConfig	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef struct __GLXFBConfigRec *GLXFBConfig;$/;"	t	typeref:struct:__GLXFBConfigRec
GLXFBConfigID	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XID GLXFBConfigID;$/;"	t
GLXPbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XID GLXPbuffer;$/;"	t
GLXPbufferClobberEvent	Src/CAPI/GL/CAPI_GLE_GL.h	/^        } GLXPbufferClobberEvent;$/;"	t	typeref:struct:__anon1
GLXPixmap	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XID GLXPixmap;$/;"	t
GLXVideoDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef unsigned int GLXVideoDeviceNV; $/;"	t
GLXWindow	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XID GLXWindow;$/;"	t
GLX_ACCUM_ALPHA_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4341;"	d
GLX_ACCUM_BLUE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4340;"	d
GLX_ACCUM_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4432;"	d
GLX_ACCUM_GREEN_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4339;"	d
GLX_ACCUM_RED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4338;"	d
GLX_ALPHA_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4335;"	d
GLX_AUX_BUFFERS	Src/CAPI/GL/CAPI_GLE_GL.h	4331;"	d
GLX_AUX_BUFFERS_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4421;"	d
GLX_BACK_LEFT_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4418;"	d
GLX_BACK_RIGHT_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4420;"	d
GLX_BAD_ATTRIBUTE	Src/CAPI/GL/CAPI_GLE_GL.h	4343;"	d
GLX_BAD_CONTEXT	Src/CAPI/GL/CAPI_GLE_GL.h	4346;"	d
GLX_BAD_ENUM	Src/CAPI/GL/CAPI_GLE_GL.h	4348;"	d
GLX_BAD_SCREEN	Src/CAPI/GL/CAPI_GLE_GL.h	4342;"	d
GLX_BAD_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4347;"	d
GLX_BAD_VISUAL	Src/CAPI/GL/CAPI_GLE_GL.h	4345;"	d
GLX_BLUE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4334;"	d
GLX_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4326;"	d
GLX_COLOR_INDEX_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4415;"	d
GLX_COLOR_INDEX_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4451;"	d
GLX_CONFIG_CAVEAT	Src/CAPI/GL/CAPI_GLE_GL.h	4422;"	d
GLX_DAMAGED	Src/CAPI/GL/CAPI_GLE_GL.h	4460;"	d
GLX_DEPTH_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4423;"	d
GLX_DEPTH_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4336;"	d
GLX_DIRECT_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	4436;"	d
GLX_DONT_CARE	Src/CAPI/GL/CAPI_GLE_GL.h	4467;"	d
GLX_DOUBLEBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	4329;"	d
GLX_DRAWABLE_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4446;"	d
GLX_EVENT_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	4459;"	d
GLX_EXTENSIONS	Src/CAPI/GL/CAPI_GLE_GL.h	4390;"	d
GLX_EXT_swap_control	Src/CAPI/GL/CAPI_GLE_GL.h	4547;"	d
GLX_FBCONFIG_ID	Src/CAPI/GL/CAPI_GLE_GL.h	4449;"	d
GLX_FRONT_LEFT_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4412;"	d
GLX_FRONT_RIGHT_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4416;"	d
GLX_GRAY_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	4439;"	d
GLX_GREEN_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4333;"	d
GLX_H	Src/CAPI/GL/CAPI_GLE_GL.h	4313;"	d
GLX_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	4458;"	d
GLX_LARGEST_PBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	4456;"	d
GLX_LEVEL	Src/CAPI/GL/CAPI_GLE_GL.h	4327;"	d
GLX_MAX_PBUFFER_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	4453;"	d
GLX_MAX_PBUFFER_PIXELS	Src/CAPI/GL/CAPI_GLE_GL.h	4454;"	d
GLX_MAX_PBUFFER_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	4452;"	d
GLX_MAX_SWAP_INTERVAL_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	4550;"	d
GLX_NONE	Src/CAPI/GL/CAPI_GLE_GL.h	4433;"	d
GLX_NON_CONFORMANT_CONFIG	Src/CAPI/GL/CAPI_GLE_GL.h	4445;"	d
GLX_NO_EXTENSION	Src/CAPI/GL/CAPI_GLE_GL.h	4344;"	d
GLX_OML_sync_control	Src/CAPI/GL/CAPI_GLE_GL.h	4561;"	d
GLX_PBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	4463;"	d
GLX_PBUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4419;"	d
GLX_PBUFFER_CLOBBER_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	4466;"	d
GLX_PBUFFER_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	4464;"	d
GLX_PBUFFER_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	4465;"	d
GLX_PIXMAP_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4417;"	d
GLX_PRESERVED_CONTENTS	Src/CAPI/GL/CAPI_GLE_GL.h	4455;"	d
GLX_PSEUDO_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	4437;"	d
GLX_RED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4332;"	d
GLX_RENDER_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4447;"	d
GLX_RGBA	Src/CAPI/GL/CAPI_GLE_GL.h	4328;"	d
GLX_RGBA_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4413;"	d
GLX_RGBA_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4450;"	d
GLX_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	4537;"	d
GLX_SAMPLE_BUFFERS	Src/CAPI/GL/CAPI_GLE_GL.h	4536;"	d
GLX_SAVED	Src/CAPI/GL/CAPI_GLE_GL.h	4461;"	d
GLX_SCREEN	Src/CAPI/GL/CAPI_GLE_GL.h	4444;"	d
GLX_SLOW_CONFIG	Src/CAPI/GL/CAPI_GLE_GL.h	4434;"	d
GLX_STATIC_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	4438;"	d
GLX_STATIC_GRAY	Src/CAPI/GL/CAPI_GLE_GL.h	4440;"	d
GLX_STENCIL_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4431;"	d
GLX_STENCIL_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	4337;"	d
GLX_STEREO	Src/CAPI/GL/CAPI_GLE_GL.h	4330;"	d
GLX_SWAP_INTERVAL_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	4549;"	d
GLX_TRANSPARENT_ALPHA_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4430;"	d
GLX_TRANSPARENT_BLUE_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4429;"	d
GLX_TRANSPARENT_GREEN_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4428;"	d
GLX_TRANSPARENT_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	4442;"	d
GLX_TRANSPARENT_INDEX_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4426;"	d
GLX_TRANSPARENT_RED_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	4427;"	d
GLX_TRANSPARENT_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	4441;"	d
GLX_TRANSPARENT_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4425;"	d
GLX_TRUE_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	4435;"	d
GLX_USE_GL	Src/CAPI/GL/CAPI_GLE_GL.h	4325;"	d
GLX_VENDOR	Src/CAPI/GL/CAPI_GLE_GL.h	4388;"	d
GLX_VERSION	Src/CAPI/GL/CAPI_GLE_GL.h	4389;"	d
GLX_VERSION_1_0	Src/CAPI/GL/CAPI_GLE_GL.h	4323;"	d
GLX_VERSION_1_1	Src/CAPI/GL/CAPI_GLE_GL.h	4386;"	d
GLX_VERSION_1_2	Src/CAPI/GL/CAPI_GLE_GL.h	4400;"	d
GLX_VERSION_1_3	Src/CAPI/GL/CAPI_GLE_GL.h	4410;"	d
GLX_VERSION_1_4	Src/CAPI/GL/CAPI_GLE_GL.h	4534;"	d
GLX_VISUAL_ID	Src/CAPI/GL/CAPI_GLE_GL.h	4443;"	d
GLX_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	4457;"	d
GLX_WINDOW	Src/CAPI/GL/CAPI_GLE_GL.h	4462;"	d
GLX_WINDOW_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	4414;"	d
GLX_X_RENDERABLE	Src/CAPI/GL/CAPI_GLE_GL.h	4448;"	d
GLX_X_VISUAL_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	4424;"	d
GL_2D	Src/CAPI/GL/CAPI_GLE_GL.h	260;"	d
GL_2_BYTES	Src/CAPI/GL/CAPI_GLE_GL.h	518;"	d
GL_3D	Src/CAPI/GL/CAPI_GLE_GL.h	261;"	d
GL_3D_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	262;"	d
GL_3D_COLOR_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	263;"	d
GL_3_BYTES	Src/CAPI/GL/CAPI_GLE_GL.h	519;"	d
GL_4D_COLOR_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	264;"	d
GL_4_BYTES	Src/CAPI/GL/CAPI_GLE_GL.h	520;"	d
GL_ACCUM	Src/CAPI/GL/CAPI_GLE_GL.h	217;"	d
GL_ACCUM_ALPHA_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	458;"	d
GL_ACCUM_BLUE_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	457;"	d
GL_ACCUM_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	223;"	d
GL_ACCUM_CLEAR_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	333;"	d
GL_ACCUM_GREEN_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	456;"	d
GL_ACCUM_RED_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	455;"	d
GL_ACTIVE_ATTRIBUTES	Src/CAPI/GL/CAPI_GLE_GL.h	2024;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2025;"	d
GL_ACTIVE_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	1549;"	d
GL_ACTIVE_UNIFORMS	Src/CAPI/GL/CAPI_GLE_GL.h	2021;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2022;"	d
GL_ADD	Src/CAPI/GL/CAPI_GLE_GL.h	221;"	d
GL_ADD_SIGNED	Src/CAPI/GL/CAPI_GLE_GL.h	1580;"	d
GL_ALIASED_LINE_WIDTH_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	1452;"	d
GL_ALIASED_POINT_SIZE_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	1451;"	d
GL_ALL_ATTRIB_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	720;"	d
GL_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	554;"	d
GL_ALPHA12	Src/CAPI/GL/CAPI_GLE_GL.h	642;"	d
GL_ALPHA16	Src/CAPI/GL/CAPI_GLE_GL.h	643;"	d
GL_ALPHA4	Src/CAPI/GL/CAPI_GLE_GL.h	640;"	d
GL_ALPHA8	Src/CAPI/GL/CAPI_GLE_GL.h	641;"	d
GL_ALPHA_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	432;"	d
GL_ALPHA_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	452;"	d
GL_ALPHA_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2853;"	d
GL_ALPHA_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2847;"	d
GL_ALPHA_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2353;"	d
GL_ALPHA_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	431;"	d
GL_ALPHA_TEST	Src/CAPI/GL/CAPI_GLE_GL.h	354;"	d
GL_ALPHA_TEST_FUNC	Src/CAPI/GL/CAPI_GLE_GL.h	355;"	d
GL_ALPHA_TEST_REF	Src/CAPI/GL/CAPI_GLE_GL.h	356;"	d
GL_ALWAYS	Src/CAPI/GL/CAPI_GLE_GL.h	230;"	d
GL_AMBIENT	Src/CAPI/GL/CAPI_GLE_GL.h	499;"	d
GL_AMBIENT_AND_DIFFUSE	Src/CAPI/GL/CAPI_GLE_GL.h	540;"	d
GL_AMD_debug_output	Src/CAPI/GL/CAPI_GLE_GL.h	2689;"	d
GL_AND	Src/CAPI/GL/CAPI_GLE_GL.h	523;"	d
GL_AND_INVERTED	Src/CAPI/GL/CAPI_GLE_GL.h	526;"	d
GL_AND_REVERSE	Src/CAPI/GL/CAPI_GLE_GL.h	524;"	d
GL_APPLE_aux_depth_stencil	Src/CAPI/GL/CAPI_GLE_GL.h	2768;"	d
GL_APPLE_client_storage	Src/CAPI/GL/CAPI_GLE_GL.h	2778;"	d
GL_APPLE_element_array	Src/CAPI/GL/CAPI_GLE_GL.h	2788;"	d
GL_APPLE_fence	Src/CAPI/GL/CAPI_GLE_GL.h	2812;"	d
GL_APPLE_float_pixels	Src/CAPI/GL/CAPI_GLE_GL.h	2842;"	d
GL_APPLE_flush_buffer_range	Src/CAPI/GL/CAPI_GLE_GL.h	2865;"	d
GL_APPLE_object_purgeable	Src/CAPI/GL/CAPI_GLE_GL.h	2882;"	d
GL_APPLE_pixel_buffer	Src/CAPI/GL/CAPI_GLE_GL.h	2905;"	d
GL_APPLE_rgb_422	Src/CAPI/GL/CAPI_GLE_GL.h	2915;"	d
GL_APPLE_row_bytes	Src/CAPI/GL/CAPI_GLE_GL.h	2928;"	d
GL_APPLE_specular_vector	Src/CAPI/GL/CAPI_GLE_GL.h	2939;"	d
GL_APPLE_texture_range	Src/CAPI/GL/CAPI_GLE_GL.h	2949;"	d
GL_APPLE_transform_hint	Src/CAPI/GL/CAPI_GLE_GL.h	2969;"	d
GL_APPLE_vertex_array_object	Src/CAPI/GL/CAPI_GLE_GL.h	2979;"	d
GL_APPLE_vertex_array_range	Src/CAPI/GL/CAPI_GLE_GL.h	3004;"	d
GL_APPLE_vertex_program_evaluators	Src/CAPI/GL/CAPI_GLE_GL.h	3029;"	d
GL_ARB_ES2_compatibility	Src/CAPI/GL/CAPI_GLE_GL.h	3311;"	d
GL_ARB_debug_output	Src/CAPI/GL/CAPI_GLE_GL.h	3065;"	d
GL_ARB_framebuffer_object	Src/CAPI/GL/CAPI_GLE_GL.h	3351;"	d
GL_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	3478;"	d
GL_ARB_texture_multisample	Src/CAPI/GL/CAPI_GLE_GL.h	3489;"	d
GL_ARB_texture_non_power_of_two	Src/CAPI/GL/CAPI_GLE_GL.h	3530;"	d
GL_ARB_timer_query	Src/CAPI/GL/CAPI_GLE_GL.h	3538;"	d
GL_ARB_vertex_array_object	Src/CAPI/GL/CAPI_GLE_GL.h	3557;"	d
GL_ARRAY_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	1869;"	d
GL_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1871;"	d
GL_ATTACHED_SHADERS	Src/CAPI/GL/CAPI_GLE_GL.h	2020;"	d
GL_ATTRIB_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	352;"	d
GL_AUTO_NORMAL	Src/CAPI/GL/CAPI_GLE_GL.h	460;"	d
GL_AUX0	Src/CAPI/GL/CAPI_GLE_GL.h	250;"	d
GL_AUX1	Src/CAPI/GL/CAPI_GLE_GL.h	251;"	d
GL_AUX2	Src/CAPI/GL/CAPI_GLE_GL.h	252;"	d
GL_AUX3	Src/CAPI/GL/CAPI_GLE_GL.h	253;"	d
GL_AUX_BUFFERS	Src/CAPI/GL/CAPI_GLE_GL.h	364;"	d
GL_AUX_DEPTH_STENCIL_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2770;"	d
GL_BACK	Src/CAPI/GL/CAPI_GLE_GL.h	246;"	d
GL_BACK_LEFT	Src/CAPI/GL/CAPI_GLE_GL.h	243;"	d
GL_BACK_RIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	244;"	d
GL_BGR	Src/CAPI/GL/CAPI_GLE_GL.h	1433;"	d
GL_BGRA	Src/CAPI/GL/CAPI_GLE_GL.h	1434;"	d
GL_BGRA_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2357;"	d
GL_BGR_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2356;"	d
GL_BITMAP	Src/CAPI/GL/CAPI_GLE_GL.h	559;"	d
GL_BITMAP_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	269;"	d
GL_BLEND	Src/CAPI/GL/CAPI_GLE_GL.h	360;"	d
GL_BLEND_DST	Src/CAPI/GL/CAPI_GLE_GL.h	358;"	d
GL_BLEND_DST_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1708;"	d
GL_BLEND_DST_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1706;"	d
GL_BLEND_EQUATION_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1981;"	d
GL_BLEND_EQUATION_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1951;"	d
GL_BLEND_SRC	Src/CAPI/GL/CAPI_GLE_GL.h	359;"	d
GL_BLEND_SRC_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1709;"	d
GL_BLEND_SRC_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1707;"	d
GL_BLUE	Src/CAPI/GL/CAPI_GLE_GL.h	553;"	d
GL_BLUE_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	430;"	d
GL_BLUE_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	451;"	d
GL_BLUE_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2352;"	d
GL_BLUE_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	429;"	d
GL_BOOL	Src/CAPI/GL/CAPI_GLE_GL.h	2002;"	d
GL_BOOL_VEC2	Src/CAPI/GL/CAPI_GLE_GL.h	2003;"	d
GL_BOOL_VEC3	Src/CAPI/GL/CAPI_GLE_GL.h	2004;"	d
GL_BOOL_VEC4	Src/CAPI/GL/CAPI_GLE_GL.h	2005;"	d
GL_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3691;"	d
GL_BUFFER_ACCESS	Src/CAPI/GL/CAPI_GLE_GL.h	1886;"	d
GL_BUFFER_ACCESS_FLAGS	Src/CAPI/GL/CAPI_GLE_GL.h	2538;"	d
GL_BUFFER_FLUSHING_UNMAP_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2868;"	d
GL_BUFFER_MAPPED	Src/CAPI/GL/CAPI_GLE_GL.h	1887;"	d
GL_BUFFER_MAP_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2539;"	d
GL_BUFFER_MAP_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	2540;"	d
GL_BUFFER_MAP_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	1888;"	d
GL_BUFFER_OBJECT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2884;"	d
GL_BUFFER_SERIALIZED_MODIFY_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2867;"	d
GL_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1863;"	d
GL_BUFFER_USAGE	Src/CAPI/GL/CAPI_GLE_GL.h	1864;"	d
GL_BYTE	Src/CAPI/GL/CAPI_GLE_GL.h	511;"	d
GL_C3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	612;"	d
GL_C4F_N3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	614;"	d
GL_C4UB_V2F	Src/CAPI/GL/CAPI_GLE_GL.h	610;"	d
GL_C4UB_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	611;"	d
GL_CCW	Src/CAPI/GL/CAPI_GLE_GL.h	277;"	d
GL_CLAMP	Src/CAPI/GL/CAPI_GLE_GL.h	602;"	d
GL_CLAMP_FRAGMENT_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	2302;"	d
GL_CLAMP_READ_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	2303;"	d
GL_CLAMP_TO_BORDER	Src/CAPI/GL/CAPI_GLE_GL.h	1516;"	d
GL_CLAMP_TO_EDGE	Src/CAPI/GL/CAPI_GLE_GL.h	1437;"	d
GL_CLAMP_VERTEX_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	2301;"	d
GL_CLEAR	Src/CAPI/GL/CAPI_GLE_GL.h	522;"	d
GL_CLIENT_ACTIVE_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	1550;"	d
GL_CLIENT_ALL_ATTRIB_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	721;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	353;"	d
GL_CLIENT_PIXEL_STORE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	198;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	202;"	d
GL_CLIP_DISTANCE0	Src/CAPI/GL/CAPI_GLE_GL.h	2277;"	d
GL_CLIP_DISTANCE1	Src/CAPI/GL/CAPI_GLE_GL.h	2278;"	d
GL_CLIP_DISTANCE2	Src/CAPI/GL/CAPI_GLE_GL.h	2279;"	d
GL_CLIP_DISTANCE3	Src/CAPI/GL/CAPI_GLE_GL.h	2280;"	d
GL_CLIP_DISTANCE4	Src/CAPI/GL/CAPI_GLE_GL.h	2281;"	d
GL_CLIP_DISTANCE5	Src/CAPI/GL/CAPI_GLE_GL.h	2282;"	d
GL_CLIP_PLANE0	Src/CAPI/GL/CAPI_GLE_GL.h	622;"	d
GL_CLIP_PLANE1	Src/CAPI/GL/CAPI_GLE_GL.h	623;"	d
GL_CLIP_PLANE2	Src/CAPI/GL/CAPI_GLE_GL.h	624;"	d
GL_CLIP_PLANE3	Src/CAPI/GL/CAPI_GLE_GL.h	625;"	d
GL_CLIP_PLANE4	Src/CAPI/GL/CAPI_GLE_GL.h	626;"	d
GL_CLIP_PLANE5	Src/CAPI/GL/CAPI_GLE_GL.h	627;"	d
GL_COEFF	Src/CAPI/GL/CAPI_GLE_GL.h	278;"	d
GL_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	545;"	d
GL_COLOR_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	686;"	d
GL_COLOR_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1875;"	d
GL_COLOR_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	706;"	d
GL_COLOR_ARRAY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	695;"	d
GL_COLOR_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	697;"	d
GL_COLOR_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	696;"	d
GL_COLOR_ATTACHMENT0	Src/CAPI/GL/CAPI_GLE_GL.h	3393;"	d
GL_COLOR_ATTACHMENT1	Src/CAPI/GL/CAPI_GLE_GL.h	3394;"	d
GL_COLOR_ATTACHMENT10	Src/CAPI/GL/CAPI_GLE_GL.h	3403;"	d
GL_COLOR_ATTACHMENT11	Src/CAPI/GL/CAPI_GLE_GL.h	3404;"	d
GL_COLOR_ATTACHMENT12	Src/CAPI/GL/CAPI_GLE_GL.h	3405;"	d
GL_COLOR_ATTACHMENT13	Src/CAPI/GL/CAPI_GLE_GL.h	3406;"	d
GL_COLOR_ATTACHMENT14	Src/CAPI/GL/CAPI_GLE_GL.h	3407;"	d
GL_COLOR_ATTACHMENT15	Src/CAPI/GL/CAPI_GLE_GL.h	3408;"	d
GL_COLOR_ATTACHMENT2	Src/CAPI/GL/CAPI_GLE_GL.h	3395;"	d
GL_COLOR_ATTACHMENT3	Src/CAPI/GL/CAPI_GLE_GL.h	3396;"	d
GL_COLOR_ATTACHMENT4	Src/CAPI/GL/CAPI_GLE_GL.h	3397;"	d
GL_COLOR_ATTACHMENT5	Src/CAPI/GL/CAPI_GLE_GL.h	3398;"	d
GL_COLOR_ATTACHMENT6	Src/CAPI/GL/CAPI_GLE_GL.h	3399;"	d
GL_COLOR_ATTACHMENT7	Src/CAPI/GL/CAPI_GLE_GL.h	3400;"	d
GL_COLOR_ATTACHMENT8	Src/CAPI/GL/CAPI_GLE_GL.h	3401;"	d
GL_COLOR_ATTACHMENT9	Src/CAPI/GL/CAPI_GLE_GL.h	3402;"	d
GL_COLOR_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	629;"	d
GL_COLOR_CLEAR_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	371;"	d
GL_COLOR_FLOAT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2857;"	d
GL_COLOR_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	548;"	d
GL_COLOR_INDEX12_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	714;"	d
GL_COLOR_INDEX16_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	715;"	d
GL_COLOR_INDEX1_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	710;"	d
GL_COLOR_INDEX2_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	711;"	d
GL_COLOR_INDEX4_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	712;"	d
GL_COLOR_INDEX8_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	713;"	d
GL_COLOR_INDEXES	Src/CAPI/GL/CAPI_GLE_GL.h	541;"	d
GL_COLOR_LOGIC_OP	Src/CAPI/GL/CAPI_GLE_GL.h	363;"	d
GL_COLOR_MATERIAL	Src/CAPI/GL/CAPI_GLE_GL.h	320;"	d
GL_COLOR_MATERIAL_FACE	Src/CAPI/GL/CAPI_GLE_GL.h	318;"	d
GL_COLOR_MATERIAL_PARAMETER	Src/CAPI/GL/CAPI_GLE_GL.h	319;"	d
GL_COLOR_SUM	Src/CAPI/GL/CAPI_GLE_GL.h	1728;"	d
GL_COLOR_WRITEMASK	Src/CAPI/GL/CAPI_GLE_GL.h	372;"	d
GL_COMBINE	Src/CAPI/GL/CAPI_GLE_GL.h	1576;"	d
GL_COMBINE_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1578;"	d
GL_COMBINE_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1577;"	d
GL_COMPARE_REF_TO_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	2283;"	d
GL_COMPARE_R_TO_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	1744;"	d
GL_COMPILE	Src/CAPI/GL/CAPI_GLE_GL.h	509;"	d
GL_COMPILE_AND_EXECUTE	Src/CAPI/GL/CAPI_GLE_GL.h	510;"	d
GL_COMPILE_STATUS	Src/CAPI/GL/CAPI_GLE_GL.h	2016;"	d
GL_COMPRESSED_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1557;"	d
GL_COMPRESSED_INTENSITY	Src/CAPI/GL/CAPI_GLE_GL.h	1560;"	d
GL_COMPRESSED_LUMINANCE	Src/CAPI/GL/CAPI_GLE_GL.h	1558;"	d
GL_COMPRESSED_LUMINANCE_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1559;"	d
GL_COMPRESSED_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1561;"	d
GL_COMPRESSED_RGBA	Src/CAPI/GL/CAPI_GLE_GL.h	1562;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2654;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	2656;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	2657;"	d
GL_COMPRESSED_SLUMINANCE	Src/CAPI/GL/CAPI_GLE_GL.h	2252;"	d
GL_COMPRESSED_SLUMINANCE_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	2253;"	d
GL_COMPRESSED_SRGB	Src/CAPI/GL/CAPI_GLE_GL.h	2250;"	d
GL_COMPRESSED_SRGB_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	2251;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2655;"	d
GL_COMPRESSED_TEXTURE_FORMATS	Src/CAPI/GL/CAPI_GLE_GL.h	1600;"	d
GL_CONSTANT	Src/CAPI/GL/CAPI_GLE_GL.h	1582;"	d
GL_CONSTANT_ATTENUATION	Src/CAPI/GL/CAPI_GLE_GL.h	506;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	2562;"	d
GL_CONTEXT_CORE_PROFILE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	2561;"	d
GL_CONTEXT_FLAGS	Src/CAPI/GL/CAPI_GLE_GL.h	2290;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	3666;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	2286;"	d
GL_CONTEXT_PROFILE_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	2582;"	d
GL_COORD_REPLACE	Src/CAPI/GL/CAPI_GLE_GL.h	1983;"	d
GL_COPY	Src/CAPI/GL/CAPI_GLE_GL.h	525;"	d
GL_COPY_INVERTED	Src/CAPI/GL/CAPI_GLE_GL.h	534;"	d
GL_COPY_PIXEL_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	271;"	d
GL_CULL_FACE	Src/CAPI/GL/CAPI_GLE_GL.h	310;"	d
GL_CULL_FACE_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	311;"	d
GL_CURRENT_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	195;"	d
GL_CURRENT_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	281;"	d
GL_CURRENT_FOG_COORD	Src/CAPI/GL/CAPI_GLE_GL.h	1849;"	d
GL_CURRENT_FOG_COORDINATE	Src/CAPI/GL/CAPI_GLE_GL.h	1723;"	d
GL_CURRENT_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	282;"	d
GL_CURRENT_NORMAL	Src/CAPI/GL/CAPI_GLE_GL.h	283;"	d
GL_CURRENT_PROGRAM	Src/CAPI/GL/CAPI_GLE_GL.h	2028;"	d
GL_CURRENT_QUERY	Src/CAPI/GL/CAPI_GLE_GL.h	1866;"	d
GL_CURRENT_RASTER_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	285;"	d
GL_CURRENT_RASTER_DISTANCE	Src/CAPI/GL/CAPI_GLE_GL.h	290;"	d
GL_CURRENT_RASTER_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	286;"	d
GL_CURRENT_RASTER_POSITION	Src/CAPI/GL/CAPI_GLE_GL.h	288;"	d
GL_CURRENT_RASTER_POSITION_VALID	Src/CAPI/GL/CAPI_GLE_GL.h	289;"	d
GL_CURRENT_RASTER_SECONDARY_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	2231;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	Src/CAPI/GL/CAPI_GLE_GL.h	287;"	d
GL_CURRENT_SECONDARY_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	1729;"	d
GL_CURRENT_TEXTURE_COORDS	Src/CAPI/GL/CAPI_GLE_GL.h	284;"	d
GL_CURRENT_VERTEX_ATTRIB	Src/CAPI/GL/CAPI_GLE_GL.h	1956;"	d
GL_CW	Src/CAPI/GL/CAPI_GLE_GL.h	276;"	d
GL_DEBUG_CALLBACK_FUNCTION	Src/CAPI/GL/CAPI_GLE_GL.h	3671;"	d
GL_DEBUG_CALLBACK_FUNCTION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3069;"	d
GL_DEBUG_CALLBACK_USER_PARAM	Src/CAPI/GL/CAPI_GLE_GL.h	3672;"	d
GL_DEBUG_CALLBACK_USER_PARAM_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3070;"	d
GL_DEBUG_CATEGORY_API_ERROR_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2697;"	d
GL_DEBUG_CATEGORY_APPLICATION_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2703;"	d
GL_DEBUG_CATEGORY_DEPRECATION_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2699;"	d
GL_DEBUG_CATEGORY_OTHER_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2704;"	d
GL_DEBUG_CATEGORY_PERFORMANCE_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2701;"	d
GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2702;"	d
GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2700;"	d
GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2698;"	d
GL_DEBUG_GROUP_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	3690;"	d
GL_DEBUG_LOGGED_MESSAGES	Src/CAPI/GL/CAPI_GLE_GL.h	3701;"	d
GL_DEBUG_LOGGED_MESSAGES_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2693;"	d
GL_DEBUG_LOGGED_MESSAGES_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3085;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	3670;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3068;"	d
GL_DEBUG_OUTPUT	Src/CAPI/GL/CAPI_GLE_GL.h	3705;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	Src/CAPI/GL/CAPI_GLE_GL.h	3669;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3067;"	d
GL_DEBUG_SEVERITY_HIGH	Src/CAPI/GL/CAPI_GLE_GL.h	3702;"	d
GL_DEBUG_SEVERITY_HIGH_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2694;"	d
GL_DEBUG_SEVERITY_HIGH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3086;"	d
GL_DEBUG_SEVERITY_LOW	Src/CAPI/GL/CAPI_GLE_GL.h	3704;"	d
GL_DEBUG_SEVERITY_LOW_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2696;"	d
GL_DEBUG_SEVERITY_LOW_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3088;"	d
GL_DEBUG_SEVERITY_MEDIUM	Src/CAPI/GL/CAPI_GLE_GL.h	3703;"	d
GL_DEBUG_SEVERITY_MEDIUM_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2695;"	d
GL_DEBUG_SEVERITY_MEDIUM_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3087;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	Src/CAPI/GL/CAPI_GLE_GL.h	3688;"	d
GL_DEBUG_SOURCE_API	Src/CAPI/GL/CAPI_GLE_GL.h	3673;"	d
GL_DEBUG_SOURCE_API_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3071;"	d
GL_DEBUG_SOURCE_APPLICATION	Src/CAPI/GL/CAPI_GLE_GL.h	3677;"	d
GL_DEBUG_SOURCE_APPLICATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3075;"	d
GL_DEBUG_SOURCE_OTHER	Src/CAPI/GL/CAPI_GLE_GL.h	3678;"	d
GL_DEBUG_SOURCE_OTHER_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3076;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	Src/CAPI/GL/CAPI_GLE_GL.h	3675;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3073;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	Src/CAPI/GL/CAPI_GLE_GL.h	3676;"	d
GL_DEBUG_SOURCE_THIRD_PARTY_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3074;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	Src/CAPI/GL/CAPI_GLE_GL.h	3674;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3072;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	Src/CAPI/GL/CAPI_GLE_GL.h	3680;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3078;"	d
GL_DEBUG_TYPE_ERROR	Src/CAPI/GL/CAPI_GLE_GL.h	3679;"	d
GL_DEBUG_TYPE_ERROR_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3077;"	d
GL_DEBUG_TYPE_MARKER	Src/CAPI/GL/CAPI_GLE_GL.h	3685;"	d
GL_DEBUG_TYPE_OTHER	Src/CAPI/GL/CAPI_GLE_GL.h	3684;"	d
GL_DEBUG_TYPE_OTHER_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3082;"	d
GL_DEBUG_TYPE_PERFORMANCE	Src/CAPI/GL/CAPI_GLE_GL.h	3683;"	d
GL_DEBUG_TYPE_PERFORMANCE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3081;"	d
GL_DEBUG_TYPE_POP_GROUP	Src/CAPI/GL/CAPI_GLE_GL.h	3687;"	d
GL_DEBUG_TYPE_PORTABILITY	Src/CAPI/GL/CAPI_GLE_GL.h	3682;"	d
GL_DEBUG_TYPE_PORTABILITY_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3080;"	d
GL_DEBUG_TYPE_PUSH_GROUP	Src/CAPI/GL/CAPI_GLE_GL.h	3686;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	Src/CAPI/GL/CAPI_GLE_GL.h	3681;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3079;"	d
GL_DECAL	Src/CAPI/GL/CAPI_GLE_GL.h	582;"	d
GL_DECR	Src/CAPI/GL/CAPI_GLE_GL.h	571;"	d
GL_DECR_WRAP	Src/CAPI/GL/CAPI_GLE_GL.h	1739;"	d
GL_DELETE_STATUS	Src/CAPI/GL/CAPI_GLE_GL.h	2015;"	d
GL_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	546;"	d
GL_DEPTH24_STENCIL8	Src/CAPI/GL/CAPI_GLE_GL.h	3370;"	d
GL_DEPTH_ATTACHMENT	Src/CAPI/GL/CAPI_GLE_GL.h	3409;"	d
GL_DEPTH_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	434;"	d
GL_DEPTH_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	453;"	d
GL_DEPTH_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2291;"	d
GL_DEPTH_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	216;"	d
GL_DEPTH_CLEAR_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	331;"	d
GL_DEPTH_COMPONENT	Src/CAPI/GL/CAPI_GLE_GL.h	550;"	d
GL_DEPTH_COMPONENT16	Src/CAPI/GL/CAPI_GLE_GL.h	1716;"	d
GL_DEPTH_COMPONENT24	Src/CAPI/GL/CAPI_GLE_GL.h	1717;"	d
GL_DEPTH_COMPONENT32	Src/CAPI/GL/CAPI_GLE_GL.h	1718;"	d
GL_DEPTH_FUNC	Src/CAPI/GL/CAPI_GLE_GL.h	332;"	d
GL_DEPTH_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	328;"	d
GL_DEPTH_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	433;"	d
GL_DEPTH_STENCIL	Src/CAPI/GL/CAPI_GLE_GL.h	3368;"	d
GL_DEPTH_STENCIL_ATTACHMENT	Src/CAPI/GL/CAPI_GLE_GL.h	3365;"	d
GL_DEPTH_TEST	Src/CAPI/GL/CAPI_GLE_GL.h	329;"	d
GL_DEPTH_TEXTURE_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	1741;"	d
GL_DEPTH_WRITEMASK	Src/CAPI/GL/CAPI_GLE_GL.h	330;"	d
GL_DIFFUSE	Src/CAPI/GL/CAPI_GLE_GL.h	500;"	d
GL_DISPLAY_LIST	Src/CAPI/GL/CAPI_GLE_GL.h	3697;"	d
GL_DITHER	Src/CAPI/GL/CAPI_GLE_GL.h	357;"	d
GL_DOMAIN	Src/CAPI/GL/CAPI_GLE_GL.h	280;"	d
GL_DONT_CARE	Src/CAPI/GL/CAPI_GLE_GL.h	496;"	d
GL_DOT3_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1601;"	d
GL_DOT3_RGBA	Src/CAPI/GL/CAPI_GLE_GL.h	1602;"	d
GL_DOUBLE	Src/CAPI/GL/CAPI_GLE_GL.h	521;"	d
GL_DOUBLEBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	375;"	d
GL_DO_NOT_WARN_IF_MULTI_GL_VERSION_HEADERS_INCLUDED	Src/CAPI/GL/CAPI_GL_Util.h	44;"	d
GL_DRAW_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	365;"	d
GL_DRAW_BUFFER0	Src/CAPI/GL/CAPI_GLE_GL.h	1965;"	d
GL_DRAW_BUFFER1	Src/CAPI/GL/CAPI_GLE_GL.h	1966;"	d
GL_DRAW_BUFFER10	Src/CAPI/GL/CAPI_GLE_GL.h	1975;"	d
GL_DRAW_BUFFER11	Src/CAPI/GL/CAPI_GLE_GL.h	1976;"	d
GL_DRAW_BUFFER12	Src/CAPI/GL/CAPI_GLE_GL.h	1977;"	d
GL_DRAW_BUFFER13	Src/CAPI/GL/CAPI_GLE_GL.h	1978;"	d
GL_DRAW_BUFFER14	Src/CAPI/GL/CAPI_GLE_GL.h	1979;"	d
GL_DRAW_BUFFER15	Src/CAPI/GL/CAPI_GLE_GL.h	1980;"	d
GL_DRAW_BUFFER2	Src/CAPI/GL/CAPI_GLE_GL.h	1967;"	d
GL_DRAW_BUFFER3	Src/CAPI/GL/CAPI_GLE_GL.h	1968;"	d
GL_DRAW_BUFFER4	Src/CAPI/GL/CAPI_GLE_GL.h	1969;"	d
GL_DRAW_BUFFER5	Src/CAPI/GL/CAPI_GLE_GL.h	1970;"	d
GL_DRAW_BUFFER6	Src/CAPI/GL/CAPI_GLE_GL.h	1971;"	d
GL_DRAW_BUFFER7	Src/CAPI/GL/CAPI_GLE_GL.h	1972;"	d
GL_DRAW_BUFFER8	Src/CAPI/GL/CAPI_GLE_GL.h	1973;"	d
GL_DRAW_BUFFER9	Src/CAPI/GL/CAPI_GLE_GL.h	1974;"	d
GL_DRAW_FRAMEBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3378;"	d
GL_DRAW_FRAMEBUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	3374;"	d
GL_DRAW_PIXELS_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2814;"	d
GL_DRAW_PIXEL_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	270;"	d
GL_DST_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	235;"	d
GL_DST_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	237;"	d
GL_DYNAMIC_COPY	Src/CAPI/GL/CAPI_GLE_GL.h	1897;"	d
GL_DYNAMIC_DRAW	Src/CAPI/GL/CAPI_GLE_GL.h	1895;"	d
GL_DYNAMIC_READ	Src/CAPI/GL/CAPI_GLE_GL.h	1896;"	d
GL_EDGE_FLAG	Src/CAPI/GL/CAPI_GLE_GL.h	309;"	d
GL_EDGE_FLAG_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	689;"	d
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1878;"	d
GL_EDGE_FLAG_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	709;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	703;"	d
GL_ELEMENT_ARRAY_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2790;"	d
GL_ELEMENT_ARRAY_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	1870;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1872;"	d
GL_ELEMENT_ARRAY_POINTER_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2792;"	d
GL_ELEMENT_ARRAY_TYPE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2791;"	d
GL_EMISSION	Src/CAPI/GL/CAPI_GLE_GL.h	538;"	d
GL_ENABLE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	577;"	d
GL_EQUAL	Src/CAPI/GL/CAPI_GLE_GL.h	225;"	d
GL_EQUIV	Src/CAPI/GL/CAPI_GLE_GL.h	531;"	d
GL_EVAL_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	716;"	d
GL_EXP	Src/CAPI/GL/CAPI_GLE_GL.h	273;"	d
GL_EXP2	Src/CAPI/GL/CAPI_GLE_GL.h	275;"	d
GL_EXTENSIONS	Src/CAPI/GL/CAPI_GLE_GL.h	575;"	d
GL_EXT_draw_buffers2	Src/CAPI/GL/CAPI_GLE_GL.h	3621;"	d
GL_EXT_texture_filter_anisotropic	Src/CAPI/GL/CAPI_GLE_GL.h	3643;"	d
GL_EYE_LINEAR	Src/CAPI/GL/CAPI_GLE_GL.h	586;"	d
GL_EYE_PLANE	Src/CAPI/GL/CAPI_GLE_GL.h	591;"	d
GL_FALSE	Src/CAPI/GL/CAPI_GLE_GL.h	189;"	d
GL_FASTEST	Src/CAPI/GL/CAPI_GLE_GL.h	497;"	d
GL_FEEDBACK	Src/CAPI/GL/CAPI_GLE_GL.h	564;"	d
GL_FEEDBACK_BUFFER_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	485;"	d
GL_FEEDBACK_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	486;"	d
GL_FEEDBACK_BUFFER_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	487;"	d
GL_FENCE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2815;"	d
GL_FILL	Src/CAPI/GL/CAPI_GLE_GL.h	562;"	d
GL_FIXED	Src/CAPI/GL/CAPI_GLE_GL.h	3314;"	d
GL_FIXED_ONLY	Src/CAPI/GL/CAPI_GLE_GL.h	2304;"	d
GL_FLAT	Src/CAPI/GL/CAPI_GLE_GL.h	566;"	d
GL_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	517;"	d
GL_FLOAT_MAT2	Src/CAPI/GL/CAPI_GLE_GL.h	2006;"	d
GL_FLOAT_MAT2x3	Src/CAPI/GL/CAPI_GLE_GL.h	2236;"	d
GL_FLOAT_MAT2x4	Src/CAPI/GL/CAPI_GLE_GL.h	2237;"	d
GL_FLOAT_MAT3	Src/CAPI/GL/CAPI_GLE_GL.h	2007;"	d
GL_FLOAT_MAT3x2	Src/CAPI/GL/CAPI_GLE_GL.h	2238;"	d
GL_FLOAT_MAT3x4	Src/CAPI/GL/CAPI_GLE_GL.h	2239;"	d
GL_FLOAT_MAT4	Src/CAPI/GL/CAPI_GLE_GL.h	2008;"	d
GL_FLOAT_MAT4x2	Src/CAPI/GL/CAPI_GLE_GL.h	2240;"	d
GL_FLOAT_MAT4x3	Src/CAPI/GL/CAPI_GLE_GL.h	2241;"	d
GL_FLOAT_VEC2	Src/CAPI/GL/CAPI_GLE_GL.h	1996;"	d
GL_FLOAT_VEC3	Src/CAPI/GL/CAPI_GLE_GL.h	1997;"	d
GL_FLOAT_VEC4	Src/CAPI/GL/CAPI_GLE_GL.h	1998;"	d
GL_FOG	Src/CAPI/GL/CAPI_GLE_GL.h	321;"	d
GL_FOG_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	215;"	d
GL_FOG_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	327;"	d
GL_FOG_COORD	Src/CAPI/GL/CAPI_GLE_GL.h	1850;"	d
GL_FOG_COORDINATE	Src/CAPI/GL/CAPI_GLE_GL.h	1721;"	d
GL_FOG_COORDINATE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	1727;"	d
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1880;"	d
GL_FOG_COORDINATE_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	1726;"	d
GL_FOG_COORDINATE_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	1725;"	d
GL_FOG_COORDINATE_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	1724;"	d
GL_FOG_COORDINATE_SOURCE	Src/CAPI/GL/CAPI_GLE_GL.h	1720;"	d
GL_FOG_COORD_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	1851;"	d
GL_FOG_COORD_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1852;"	d
GL_FOG_COORD_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	1853;"	d
GL_FOG_COORD_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	1854;"	d
GL_FOG_COORD_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	1855;"	d
GL_FOG_COORD_SRC	Src/CAPI/GL/CAPI_GLE_GL.h	1856;"	d
GL_FOG_DENSITY	Src/CAPI/GL/CAPI_GLE_GL.h	323;"	d
GL_FOG_END	Src/CAPI/GL/CAPI_GLE_GL.h	325;"	d
GL_FOG_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	382;"	d
GL_FOG_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	322;"	d
GL_FOG_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	326;"	d
GL_FOG_START	Src/CAPI/GL/CAPI_GLE_GL.h	324;"	d
GL_FRAGMENT_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	1722;"	d
GL_FRAGMENT_SHADER	Src/CAPI/GL/CAPI_GLE_GL.h	1988;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	2026;"	d
GL_FRAMEBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3411;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3360;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3359;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	Src/CAPI/GL/CAPI_GLE_GL.h	3355;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	3356;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3361;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3358;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	Src/CAPI/GL/CAPI_GLE_GL.h	2572;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	Src/CAPI/GL/CAPI_GLE_GL.h	3382;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	3381;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3357;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3362;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	Src/CAPI/GL/CAPI_GLE_GL.h	3384;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	Src/CAPI/GL/CAPI_GLE_GL.h	3385;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	Src/CAPI/GL/CAPI_GLE_GL.h	3383;"	d
GL_FRAMEBUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	3375;"	d
GL_FRAMEBUFFER_COMPLETE	Src/CAPI/GL/CAPI_GLE_GL.h	3386;"	d
GL_FRAMEBUFFER_DEFAULT	Src/CAPI/GL/CAPI_GLE_GL.h	3363;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	Src/CAPI/GL/CAPI_GLE_GL.h	3387;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3389;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	Src/CAPI/GL/CAPI_GLE_GL.h	2573;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	Src/CAPI/GL/CAPI_GLE_GL.h	3388;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3426;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3390;"	d
GL_FRAMEBUFFER_SRGB	Src/CAPI/GL/CAPI_GLE_GL.h	3481;"	d
GL_FRAMEBUFFER_UNDEFINED	Src/CAPI/GL/CAPI_GLE_GL.h	3364;"	d
GL_FRAMEBUFFER_UNSUPPORTED	Src/CAPI/GL/CAPI_GLE_GL.h	3391;"	d
GL_FRONT	Src/CAPI/GL/CAPI_GLE_GL.h	245;"	d
GL_FRONT_AND_BACK	Src/CAPI/GL/CAPI_GLE_GL.h	249;"	d
GL_FRONT_FACE	Src/CAPI/GL/CAPI_GLE_GL.h	312;"	d
GL_FRONT_LEFT	Src/CAPI/GL/CAPI_GLE_GL.h	241;"	d
GL_FRONT_RIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	242;"	d
GL_GENERATE_MIPMAP	Src/CAPI/GL/CAPI_GLE_GL.h	1714;"	d
GL_GENERATE_MIPMAP_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	1715;"	d
GL_GEOMETRY_INPUT_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2569;"	d
GL_GEOMETRY_OUTPUT_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2570;"	d
GL_GEOMETRY_SHADER	Src/CAPI/GL/CAPI_GLE_GL.h	2574;"	d
GL_GEOMETRY_VERTICES_OUT	Src/CAPI/GL/CAPI_GLE_GL.h	2568;"	d
GL_GEQUAL	Src/CAPI/GL/CAPI_GLE_GL.h	229;"	d
GL_GLEXT_PROTOTYPES	Src/CAPI/GL/CAPI_GL_Util.h	53;"	d
GL_GREATER	Src/CAPI/GL/CAPI_GLE_GL.h	227;"	d
GL_GREEN	Src/CAPI/GL/CAPI_GLE_GL.h	552;"	d
GL_GREEN_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	428;"	d
GL_GREEN_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	450;"	d
GL_GREEN_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2351;"	d
GL_GREEN_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	427;"	d
GL_HALF_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2844;"	d
GL_HIGH_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	3320;"	d
GL_HIGH_INT	Src/CAPI/GL/CAPI_GLE_GL.h	3323;"	d
GL_HINT_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	637;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	Src/CAPI/GL/CAPI_GLE_GL.h	3316;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	3315;"	d
GL_INCR	Src/CAPI/GL/CAPI_GLE_GL.h	570;"	d
GL_INCR_WRAP	Src/CAPI/GL/CAPI_GLE_GL.h	1738;"	d
GL_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	3366;"	d
GL_INDEX_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	687;"	d
GL_INDEX_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1876;"	d
GL_INDEX_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	707;"	d
GL_INDEX_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	699;"	d
GL_INDEX_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	698;"	d
GL_INDEX_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	448;"	d
GL_INDEX_CLEAR_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	369;"	d
GL_INDEX_LOGIC_OP	Src/CAPI/GL/CAPI_GLE_GL.h	362;"	d
GL_INDEX_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	373;"	d
GL_INDEX_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	422;"	d
GL_INDEX_SHIFT	Src/CAPI/GL/CAPI_GLE_GL.h	421;"	d
GL_INDEX_WRITEMASK	Src/CAPI/GL/CAPI_GLE_GL.h	370;"	d
GL_INFO_LOG_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2019;"	d
GL_INT	Src/CAPI/GL/CAPI_GLE_GL.h	515;"	d
GL_INTENSITY	Src/CAPI/GL/CAPI_GLE_GL.h	654;"	d
GL_INTENSITY12	Src/CAPI/GL/CAPI_GLE_GL.h	657;"	d
GL_INTENSITY16	Src/CAPI/GL/CAPI_GLE_GL.h	658;"	d
GL_INTENSITY4	Src/CAPI/GL/CAPI_GLE_GL.h	655;"	d
GL_INTENSITY8	Src/CAPI/GL/CAPI_GLE_GL.h	656;"	d
GL_INTENSITY_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2854;"	d
GL_INTENSITY_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2848;"	d
GL_INTERLEAVED_ATTRIBS	Src/CAPI/GL/CAPI_GLE_GL.h	2334;"	d
GL_INTERPOLATE	Src/CAPI/GL/CAPI_GLE_GL.h	1581;"	d
GL_INT_SAMPLER_1D	Src/CAPI/GL/CAPI_GLE_GL.h	2366;"	d
GL_INT_SAMPLER_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2370;"	d
GL_INT_SAMPLER_2D	Src/CAPI/GL/CAPI_GLE_GL.h	2367;"	d
GL_INT_SAMPLER_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2371;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3504;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3507;"	d
GL_INT_SAMPLER_2D_RECT	Src/CAPI/GL/CAPI_GLE_GL.h	2519;"	d
GL_INT_SAMPLER_3D	Src/CAPI/GL/CAPI_GLE_GL.h	2368;"	d
GL_INT_SAMPLER_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2520;"	d
GL_INT_SAMPLER_CUBE	Src/CAPI/GL/CAPI_GLE_GL.h	2369;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2624;"	d
GL_INT_VEC2	Src/CAPI/GL/CAPI_GLE_GL.h	1999;"	d
GL_INT_VEC3	Src/CAPI/GL/CAPI_GLE_GL.h	2000;"	d
GL_INT_VEC4	Src/CAPI/GL/CAPI_GLE_GL.h	2001;"	d
GL_INVALID_ENUM	Src/CAPI/GL/CAPI_GLE_GL.h	254;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	Src/CAPI/GL/CAPI_GLE_GL.h	3354;"	d
GL_INVALID_OPERATION	Src/CAPI/GL/CAPI_GLE_GL.h	256;"	d
GL_INVALID_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	255;"	d
GL_INVERT	Src/CAPI/GL/CAPI_GLE_GL.h	532;"	d
GL_KEEP	Src/CAPI/GL/CAPI_GLE_GL.h	568;"	d
GL_KHR_debug	Src/CAPI/GL/CAPI_GLE_GL.h	3664;"	d
GL_KHR_robust_buffer_access_behavior	Src/CAPI/GL/CAPI_GLE_GL.h	3737;"	d
GL_LEFT	Src/CAPI/GL/CAPI_GLE_GL.h	247;"	d
GL_LEQUAL	Src/CAPI/GL/CAPI_GLE_GL.h	226;"	d
GL_LESS	Src/CAPI/GL/CAPI_GLE_GL.h	224;"	d
GL_LIGHT0	Src/CAPI/GL/CAPI_GLE_GL.h	628;"	d
GL_LIGHT1	Src/CAPI/GL/CAPI_GLE_GL.h	630;"	d
GL_LIGHT2	Src/CAPI/GL/CAPI_GLE_GL.h	631;"	d
GL_LIGHT3	Src/CAPI/GL/CAPI_GLE_GL.h	632;"	d
GL_LIGHT4	Src/CAPI/GL/CAPI_GLE_GL.h	633;"	d
GL_LIGHT5	Src/CAPI/GL/CAPI_GLE_GL.h	634;"	d
GL_LIGHT6	Src/CAPI/GL/CAPI_GLE_GL.h	635;"	d
GL_LIGHT7	Src/CAPI/GL/CAPI_GLE_GL.h	636;"	d
GL_LIGHTING	Src/CAPI/GL/CAPI_GLE_GL.h	313;"	d
GL_LIGHTING_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	214;"	d
GL_LIGHT_MODEL_AMBIENT	Src/CAPI/GL/CAPI_GLE_GL.h	316;"	d
GL_LIGHT_MODEL_COLOR_CONTROL	Src/CAPI/GL/CAPI_GLE_GL.h	1442;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	Src/CAPI/GL/CAPI_GLE_GL.h	314;"	d
GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2941;"	d
GL_LIGHT_MODEL_TWO_SIDE	Src/CAPI/GL/CAPI_GLE_GL.h	315;"	d
GL_LINE	Src/CAPI/GL/CAPI_GLE_GL.h	561;"	d
GL_LINEAR	Src/CAPI/GL/CAPI_GLE_GL.h	593;"	d
GL_LINEAR_ATTENUATION	Src/CAPI/GL/CAPI_GLE_GL.h	507;"	d
GL_LINEAR_MIPMAP_LINEAR	Src/CAPI/GL/CAPI_GLE_GL.h	597;"	d
GL_LINEAR_MIPMAP_NEAREST	Src/CAPI/GL/CAPI_GLE_GL.h	595;"	d
GL_LINES	Src/CAPI/GL/CAPI_GLE_GL.h	199;"	d
GL_LINES_ADJACENCY	Src/CAPI/GL/CAPI_GLE_GL.h	2563;"	d
GL_LINE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	204;"	d
GL_LINE_LOOP	Src/CAPI/GL/CAPI_GLE_GL.h	200;"	d
GL_LINE_RESET_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	272;"	d
GL_LINE_SMOOTH	Src/CAPI/GL/CAPI_GLE_GL.h	295;"	d
GL_LINE_SMOOTH_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	380;"	d
GL_LINE_STIPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	299;"	d
GL_LINE_STIPPLE_PATTERN	Src/CAPI/GL/CAPI_GLE_GL.h	300;"	d
GL_LINE_STIPPLE_REPEAT	Src/CAPI/GL/CAPI_GLE_GL.h	301;"	d
GL_LINE_STRIP	Src/CAPI/GL/CAPI_GLE_GL.h	203;"	d
GL_LINE_STRIP_ADJACENCY	Src/CAPI/GL/CAPI_GLE_GL.h	2564;"	d
GL_LINE_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	267;"	d
GL_LINE_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	296;"	d
GL_LINE_WIDTH_GRANULARITY	Src/CAPI/GL/CAPI_GLE_GL.h	298;"	d
GL_LINE_WIDTH_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	297;"	d
GL_LINK_STATUS	Src/CAPI/GL/CAPI_GLE_GL.h	2017;"	d
GL_LIST_BASE	Src/CAPI/GL/CAPI_GLE_GL.h	304;"	d
GL_LIST_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	717;"	d
GL_LIST_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	305;"	d
GL_LIST_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	302;"	d
GL_LOAD	Src/CAPI/GL/CAPI_GLE_GL.h	218;"	d
GL_LOGIC_OP	Src/CAPI/GL/CAPI_GLE_GL.h	190;"	d
GL_LOGIC_OP_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	361;"	d
GL_LOWER_LEFT	Src/CAPI/GL/CAPI_GLE_GL.h	2030;"	d
GL_LOW_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	3318;"	d
GL_LOW_INT	Src/CAPI/GL/CAPI_GLE_GL.h	3321;"	d
GL_LUMINANCE	Src/CAPI/GL/CAPI_GLE_GL.h	557;"	d
GL_LUMINANCE12	Src/CAPI/GL/CAPI_GLE_GL.h	646;"	d
GL_LUMINANCE12_ALPHA12	Src/CAPI/GL/CAPI_GLE_GL.h	652;"	d
GL_LUMINANCE12_ALPHA4	Src/CAPI/GL/CAPI_GLE_GL.h	651;"	d
GL_LUMINANCE16	Src/CAPI/GL/CAPI_GLE_GL.h	647;"	d
GL_LUMINANCE16_ALPHA16	Src/CAPI/GL/CAPI_GLE_GL.h	653;"	d
GL_LUMINANCE4	Src/CAPI/GL/CAPI_GLE_GL.h	644;"	d
GL_LUMINANCE4_ALPHA4	Src/CAPI/GL/CAPI_GLE_GL.h	648;"	d
GL_LUMINANCE6_ALPHA2	Src/CAPI/GL/CAPI_GLE_GL.h	649;"	d
GL_LUMINANCE8	Src/CAPI/GL/CAPI_GLE_GL.h	645;"	d
GL_LUMINANCE8_ALPHA8	Src/CAPI/GL/CAPI_GLE_GL.h	650;"	d
GL_LUMINANCE_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	558;"	d
GL_LUMINANCE_ALPHA_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2856;"	d
GL_LUMINANCE_ALPHA_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2850;"	d
GL_LUMINANCE_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2855;"	d
GL_LUMINANCE_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2849;"	d
GL_MAJOR_VERSION	Src/CAPI/GL/CAPI_GLE_GL.h	2287;"	d
GL_MAP1_COLOR_4	Src/CAPI/GL/CAPI_GLE_GL.h	461;"	d
GL_MAP1_GRID_DOMAIN	Src/CAPI/GL/CAPI_GLE_GL.h	479;"	d
GL_MAP1_GRID_SEGMENTS	Src/CAPI/GL/CAPI_GLE_GL.h	480;"	d
GL_MAP1_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	462;"	d
GL_MAP1_NORMAL	Src/CAPI/GL/CAPI_GLE_GL.h	463;"	d
GL_MAP1_TEXTURE_COORD_1	Src/CAPI/GL/CAPI_GLE_GL.h	464;"	d
GL_MAP1_TEXTURE_COORD_2	Src/CAPI/GL/CAPI_GLE_GL.h	465;"	d
GL_MAP1_TEXTURE_COORD_3	Src/CAPI/GL/CAPI_GLE_GL.h	466;"	d
GL_MAP1_TEXTURE_COORD_4	Src/CAPI/GL/CAPI_GLE_GL.h	467;"	d
GL_MAP1_VERTEX_3	Src/CAPI/GL/CAPI_GLE_GL.h	468;"	d
GL_MAP1_VERTEX_4	Src/CAPI/GL/CAPI_GLE_GL.h	469;"	d
GL_MAP2_COLOR_4	Src/CAPI/GL/CAPI_GLE_GL.h	470;"	d
GL_MAP2_GRID_DOMAIN	Src/CAPI/GL/CAPI_GLE_GL.h	481;"	d
GL_MAP2_GRID_SEGMENTS	Src/CAPI/GL/CAPI_GLE_GL.h	482;"	d
GL_MAP2_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	471;"	d
GL_MAP2_NORMAL	Src/CAPI/GL/CAPI_GLE_GL.h	472;"	d
GL_MAP2_TEXTURE_COORD_1	Src/CAPI/GL/CAPI_GLE_GL.h	473;"	d
GL_MAP2_TEXTURE_COORD_2	Src/CAPI/GL/CAPI_GLE_GL.h	474;"	d
GL_MAP2_TEXTURE_COORD_3	Src/CAPI/GL/CAPI_GLE_GL.h	475;"	d
GL_MAP2_TEXTURE_COORD_4	Src/CAPI/GL/CAPI_GLE_GL.h	476;"	d
GL_MAP2_VERTEX_3	Src/CAPI/GL/CAPI_GLE_GL.h	477;"	d
GL_MAP2_VERTEX_4	Src/CAPI/GL/CAPI_GLE_GL.h	478;"	d
GL_MAP_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	419;"	d
GL_MAP_STENCIL	Src/CAPI/GL/CAPI_GLE_GL.h	420;"	d
GL_MATRIX_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	343;"	d
GL_MAX_3D_TEXTURE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1432;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	Src/CAPI/GL/CAPI_GLE_GL.h	2298;"	d
GL_MAX_ATTRIB_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	440;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	446;"	d
GL_MAX_CLIP_DISTANCES	Src/CAPI/GL/CAPI_GLE_GL.h	2284;"	d
GL_MAX_CLIP_PLANES	Src/CAPI/GL/CAPI_GLE_GL.h	437;"	d
GL_MAX_COLOR_ATTACHMENTS	Src/CAPI/GL/CAPI_GLE_GL.h	3392;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3509;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	1994;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1575;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	3689;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	Src/CAPI/GL/CAPI_GLE_GL.h	3700;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2692;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3084;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	3699;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_AMD	Src/CAPI/GL/CAPI_GLE_GL.h	2691;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3083;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3510;"	d
GL_MAX_DRAW_BUFFERS	Src/CAPI/GL/CAPI_GLE_GL.h	1964;"	d
GL_MAX_ELEMENTS_INDICES	Src/CAPI/GL/CAPI_GLE_GL.h	1436;"	d
GL_MAX_ELEMENTS_VERTICES	Src/CAPI/GL/CAPI_GLE_GL.h	1435;"	d
GL_MAX_EVAL_ORDER	Src/CAPI/GL/CAPI_GLE_GL.h	435;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2581;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	1990;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	Src/CAPI/GL/CAPI_GLE_GL.h	3329;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2579;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2580;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	Src/CAPI/GL/CAPI_GLE_GL.h	2576;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	2571;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2577;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2575;"	d
GL_MAX_INTEGER_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3511;"	d
GL_MAX_LABEL_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	3698;"	d
GL_MAX_LIGHTS	Src/CAPI/GL/CAPI_GLE_GL.h	436;"	d
GL_MAX_LIST_NESTING	Src/CAPI/GL/CAPI_GLE_GL.h	303;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	441;"	d
GL_MAX_NAME_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	442;"	d
GL_MAX_PIXEL_MAP_TABLE	Src/CAPI/GL/CAPI_GLE_GL.h	439;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	2300;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2618;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	2617;"	d
GL_MAX_PROJECTION_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	443;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	2510;"	d
GL_MAX_RENDERBUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3367;"	d
GL_MAX_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3427;"	d
GL_MAX_SAMPLE_MASK_WORDS	Src/CAPI/GL/CAPI_GLE_GL.h	3494;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	2514;"	d
GL_MAX_TEXTURE_COORDS	Src/CAPI/GL/CAPI_GLE_GL.h	1986;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	1987;"	d
GL_MAX_TEXTURE_LOD_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	1735;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	3646;"	d
GL_MAX_TEXTURE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	438;"	d
GL_MAX_TEXTURE_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	444;"	d
GL_MAX_TEXTURE_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	1551;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2332;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	Src/CAPI/GL/CAPI_GLE_GL.h	2333;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2325;"	d
GL_MAX_VARYING_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2285;"	d
GL_MAX_VARYING_FLOATS	Src/CAPI/GL/CAPI_GLE_GL.h	1992;"	d
GL_MAX_VARYING_VECTORS	Src/CAPI/GL/CAPI_GLE_GL.h	3328;"	d
GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3009;"	d
GL_MAX_VERTEX_ATTRIBS	Src/CAPI/GL/CAPI_GLE_GL.h	1984;"	d
GL_MAX_VERTEX_ATTRIB_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	2675;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	2578;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	1993;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	1991;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	Src/CAPI/GL/CAPI_GLE_GL.h	3327;"	d
GL_MAX_VIEWPORT_DIMS	Src/CAPI/GL/CAPI_GLE_GL.h	445;"	d
GL_MEDIUM_FLOAT	Src/CAPI/GL/CAPI_GLE_GL.h	3319;"	d
GL_MEDIUM_INT	Src/CAPI/GL/CAPI_GLE_GL.h	3322;"	d
GL_MINOR_VERSION	Src/CAPI/GL/CAPI_GLE_GL.h	2288;"	d
GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2907;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	2299;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	Src/CAPI/GL/CAPI_GLE_GL.h	2616;"	d
GL_MIN_SAMPLE_SHADING_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	2615;"	d
GL_MIRRORED_REPEAT	Src/CAPI/GL/CAPI_GLE_GL.h	1719;"	d
GL_MODELVIEW	Src/CAPI/GL/CAPI_GLE_GL.h	542;"	d
GL_MODELVIEW_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	349;"	d
GL_MODELVIEW_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	346;"	d
GL_MODULATE	Src/CAPI/GL/CAPI_GLE_GL.h	581;"	d
GL_MULT	Src/CAPI/GL/CAPI_GLE_GL.h	220;"	d
GL_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	1508;"	d
GL_MULTISAMPLE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	1603;"	d
GL_N3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	613;"	d
GL_NAME_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	459;"	d
GL_NAND	Src/CAPI/GL/CAPI_GLE_GL.h	536;"	d
GL_NEAREST	Src/CAPI/GL/CAPI_GLE_GL.h	592;"	d
GL_NEAREST_MIPMAP_LINEAR	Src/CAPI/GL/CAPI_GLE_GL.h	596;"	d
GL_NEAREST_MIPMAP_NEAREST	Src/CAPI/GL/CAPI_GLE_GL.h	594;"	d
GL_NEVER	Src/CAPI/GL/CAPI_GLE_GL.h	222;"	d
GL_NICEST	Src/CAPI/GL/CAPI_GLE_GL.h	498;"	d
GL_NONE	Src/CAPI/GL/CAPI_GLE_GL.h	191;"	d
GL_NOOP	Src/CAPI/GL/CAPI_GLE_GL.h	527;"	d
GL_NOR	Src/CAPI/GL/CAPI_GLE_GL.h	530;"	d
GL_NORMALIZE	Src/CAPI/GL/CAPI_GLE_GL.h	344;"	d
GL_NORMAL_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	685;"	d
GL_NORMAL_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1874;"	d
GL_NORMAL_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	705;"	d
GL_NORMAL_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	694;"	d
GL_NORMAL_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	693;"	d
GL_NORMAL_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	1564;"	d
GL_NOTEQUAL	Src/CAPI/GL/CAPI_GLE_GL.h	228;"	d
GL_NO_ERROR	Src/CAPI/GL/CAPI_GLE_GL.h	193;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	Src/CAPI/GL/CAPI_GLE_GL.h	1599;"	d
GL_NUM_EXTENSIONS	Src/CAPI/GL/CAPI_GLE_GL.h	2289;"	d
GL_NUM_SHADER_BINARY_FORMATS	Src/CAPI/GL/CAPI_GLE_GL.h	3325;"	d
GL_NUM_SHADING_LANGUAGE_VERSIONS	Src/CAPI/GL/CAPI_GLE_GL.h	2665;"	d
GL_OBJECT_LINEAR	Src/CAPI/GL/CAPI_GLE_GL.h	587;"	d
GL_OBJECT_PLANE	Src/CAPI/GL/CAPI_GLE_GL.h	590;"	d
GL_ONE	Src/CAPI/GL/CAPI_GLE_GL.h	197;"	d
GL_ONE_MINUS_DST_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	236;"	d
GL_ONE_MINUS_DST_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	238;"	d
GL_ONE_MINUS_SRC_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	234;"	d
GL_ONE_MINUS_SRC_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	232;"	d
GL_OPERAND0_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1594;"	d
GL_OPERAND0_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1591;"	d
GL_OPERAND1_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1595;"	d
GL_OPERAND1_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1592;"	d
GL_OPERAND2_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1596;"	d
GL_OPERAND2_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1593;"	d
GL_OR	Src/CAPI/GL/CAPI_GLE_GL.h	529;"	d
GL_ORDER	Src/CAPI/GL/CAPI_GLE_GL.h	279;"	d
GL_OR_INVERTED	Src/CAPI/GL/CAPI_GLE_GL.h	535;"	d
GL_OR_REVERSE	Src/CAPI/GL/CAPI_GLE_GL.h	533;"	d
GL_OUT_OF_MEMORY	Src/CAPI/GL/CAPI_GLE_GL.h	259;"	d
GL_PACK_ALIGNMENT	Src/CAPI/GL/CAPI_GLE_GL.h	418;"	d
GL_PACK_IMAGE_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	1425;"	d
GL_PACK_LSB_FIRST	Src/CAPI/GL/CAPI_GLE_GL.h	414;"	d
GL_PACK_ROW_BYTES_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2930;"	d
GL_PACK_ROW_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	415;"	d
GL_PACK_SKIP_IMAGES	Src/CAPI/GL/CAPI_GLE_GL.h	1424;"	d
GL_PACK_SKIP_PIXELS	Src/CAPI/GL/CAPI_GLE_GL.h	417;"	d
GL_PACK_SKIP_ROWS	Src/CAPI/GL/CAPI_GLE_GL.h	416;"	d
GL_PACK_SWAP_BYTES	Src/CAPI/GL/CAPI_GLE_GL.h	413;"	d
GL_PASS_THROUGH_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	265;"	d
GL_PERSPECTIVE_CORRECTION_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	378;"	d
GL_PIXEL_MAP_A_TO_A	Src/CAPI/GL/CAPI_GLE_GL.h	396;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	406;"	d
GL_PIXEL_MAP_B_TO_B	Src/CAPI/GL/CAPI_GLE_GL.h	395;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	405;"	d
GL_PIXEL_MAP_G_TO_G	Src/CAPI/GL/CAPI_GLE_GL.h	394;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	404;"	d
GL_PIXEL_MAP_I_TO_A	Src/CAPI/GL/CAPI_GLE_GL.h	392;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	402;"	d
GL_PIXEL_MAP_I_TO_B	Src/CAPI/GL/CAPI_GLE_GL.h	391;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	401;"	d
GL_PIXEL_MAP_I_TO_G	Src/CAPI/GL/CAPI_GLE_GL.h	390;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	400;"	d
GL_PIXEL_MAP_I_TO_I	Src/CAPI/GL/CAPI_GLE_GL.h	387;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	397;"	d
GL_PIXEL_MAP_I_TO_R	Src/CAPI/GL/CAPI_GLE_GL.h	389;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	399;"	d
GL_PIXEL_MAP_R_TO_R	Src/CAPI/GL/CAPI_GLE_GL.h	393;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	403;"	d
GL_PIXEL_MAP_S_TO_S	Src/CAPI/GL/CAPI_GLE_GL.h	388;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	398;"	d
GL_PIXEL_MODE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	213;"	d
GL_PIXEL_PACK_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2232;"	d
GL_PIXEL_PACK_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	2234;"	d
GL_PIXEL_UNPACK_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2233;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	2235;"	d
GL_POINT	Src/CAPI/GL/CAPI_GLE_GL.h	560;"	d
GL_POINTS	Src/CAPI/GL/CAPI_GLE_GL.h	194;"	d
GL_POINT_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	201;"	d
GL_POINT_DISTANCE_ATTENUATION	Src/CAPI/GL/CAPI_GLE_GL.h	1713;"	d
GL_POINT_FADE_THRESHOLD_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1712;"	d
GL_POINT_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	292;"	d
GL_POINT_SIZE_GRANULARITY	Src/CAPI/GL/CAPI_GLE_GL.h	294;"	d
GL_POINT_SIZE_MAX	Src/CAPI/GL/CAPI_GLE_GL.h	1711;"	d
GL_POINT_SIZE_MIN	Src/CAPI/GL/CAPI_GLE_GL.h	1710;"	d
GL_POINT_SIZE_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	293;"	d
GL_POINT_SMOOTH	Src/CAPI/GL/CAPI_GLE_GL.h	291;"	d
GL_POINT_SMOOTH_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	379;"	d
GL_POINT_SPRITE	Src/CAPI/GL/CAPI_GLE_GL.h	1982;"	d
GL_POINT_SPRITE_COORD_ORIGIN	Src/CAPI/GL/CAPI_GLE_GL.h	2029;"	d
GL_POINT_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	266;"	d
GL_POLYGON	Src/CAPI/GL/CAPI_GLE_GL.h	211;"	d
GL_POLYGON_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	210;"	d
GL_POLYGON_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	306;"	d
GL_POLYGON_OFFSET_FACTOR	Src/CAPI/GL/CAPI_GLE_GL.h	639;"	d
GL_POLYGON_OFFSET_FILL	Src/CAPI/GL/CAPI_GLE_GL.h	638;"	d
GL_POLYGON_OFFSET_LINE	Src/CAPI/GL/CAPI_GLE_GL.h	606;"	d
GL_POLYGON_OFFSET_POINT	Src/CAPI/GL/CAPI_GLE_GL.h	605;"	d
GL_POLYGON_OFFSET_UNITS	Src/CAPI/GL/CAPI_GLE_GL.h	604;"	d
GL_POLYGON_SMOOTH	Src/CAPI/GL/CAPI_GLE_GL.h	307;"	d
GL_POLYGON_SMOOTH_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	381;"	d
GL_POLYGON_STIPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	308;"	d
GL_POLYGON_STIPPLE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	212;"	d
GL_POLYGON_TOKEN	Src/CAPI/GL/CAPI_GLE_GL.h	268;"	d
GL_POSITION	Src/CAPI/GL/CAPI_GLE_GL.h	502;"	d
GL_PREVIOUS	Src/CAPI/GL/CAPI_GLE_GL.h	1584;"	d
GL_PRIMARY_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	1583;"	d
GL_PRIMITIVES_GENERATED	Src/CAPI/GL/CAPI_GLE_GL.h	2329;"	d
GL_PRIMITIVE_RESTART	Src/CAPI/GL/CAPI_GLE_GL.h	2536;"	d
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED	Src/CAPI/GL/CAPI_GLE_GL.h	2674;"	d
GL_PRIMITIVE_RESTART_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	2537;"	d
GL_PROGRAM	Src/CAPI/GL/CAPI_GLE_GL.h	3693;"	d
GL_PROGRAM_PIPELINE	Src/CAPI/GL/CAPI_GLE_GL.h	3695;"	d
GL_PROGRAM_POINT_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	2567;"	d
GL_PROJECTION	Src/CAPI/GL/CAPI_GLE_GL.h	543;"	d
GL_PROJECTION_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	350;"	d
GL_PROJECTION_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	347;"	d
GL_PROXY_TEXTURE_1D	Src/CAPI/GL/CAPI_GLE_GL.h	678;"	d
GL_PROXY_TEXTURE_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2313;"	d
GL_PROXY_TEXTURE_2D	Src/CAPI/GL/CAPI_GLE_GL.h	679;"	d
GL_PROXY_TEXTURE_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2315;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3496;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3498;"	d
GL_PROXY_TEXTURE_3D	Src/CAPI/GL/CAPI_GLE_GL.h	1429;"	d
GL_PROXY_TEXTURE_CUBE_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	1574;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2621;"	d
GL_PROXY_TEXTURE_RECTANGLE	Src/CAPI/GL/CAPI_GLE_GL.h	2509;"	d
GL_PURGEABLE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2889;"	d
GL_Q	Src/CAPI/GL/CAPI_GLE_GL.h	580;"	d
GL_QUADRATIC_ATTENUATION	Src/CAPI/GL/CAPI_GLE_GL.h	508;"	d
GL_QUADS	Src/CAPI/GL/CAPI_GLE_GL.h	208;"	d
GL_QUAD_STRIP	Src/CAPI/GL/CAPI_GLE_GL.h	209;"	d
GL_QUERY	Src/CAPI/GL/CAPI_GLE_GL.h	3694;"	d
GL_QUERY_BY_REGION_NO_WAIT	Src/CAPI/GL/CAPI_GLE_GL.h	2381;"	d
GL_QUERY_BY_REGION_WAIT	Src/CAPI/GL/CAPI_GLE_GL.h	2380;"	d
GL_QUERY_COUNTER_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	1865;"	d
GL_QUERY_NO_WAIT	Src/CAPI/GL/CAPI_GLE_GL.h	2379;"	d
GL_QUERY_RESULT	Src/CAPI/GL/CAPI_GLE_GL.h	1867;"	d
GL_QUERY_RESULT_AVAILABLE	Src/CAPI/GL/CAPI_GLE_GL.h	1868;"	d
GL_QUERY_WAIT	Src/CAPI/GL/CAPI_GLE_GL.h	2378;"	d
GL_R	Src/CAPI/GL/CAPI_GLE_GL.h	579;"	d
GL_R11F_G11F_B10F	Src/CAPI/GL/CAPI_GLE_GL.h	2318;"	d
GL_R16_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2531;"	d
GL_R3_G3_B2	Src/CAPI/GL/CAPI_GLE_GL.h	607;"	d
GL_R8_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2527;"	d
GL_RASTERIZER_DISCARD	Src/CAPI/GL/CAPI_GLE_GL.h	2331;"	d
GL_READ_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	366;"	d
GL_READ_FRAMEBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3377;"	d
GL_READ_FRAMEBUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	3379;"	d
GL_READ_ONLY	Src/CAPI/GL/CAPI_GLE_GL.h	1883;"	d
GL_READ_WRITE	Src/CAPI/GL/CAPI_GLE_GL.h	1885;"	d
GL_RED	Src/CAPI/GL/CAPI_GLE_GL.h	551;"	d
GL_RED_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	424;"	d
GL_RED_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	449;"	d
GL_RED_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2350;"	d
GL_RED_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	423;"	d
GL_RED_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2523;"	d
GL_REFLECTION_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	1565;"	d
GL_RELEASED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2885;"	d
GL_RENDER	Src/CAPI/GL/CAPI_GLE_GL.h	563;"	d
GL_RENDERBUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	3412;"	d
GL_RENDERBUFFER_ALPHA_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3423;"	d
GL_RENDERBUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	3376;"	d
GL_RENDERBUFFER_BLUE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3422;"	d
GL_RENDERBUFFER_DEPTH_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3424;"	d
GL_RENDERBUFFER_GREEN_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3421;"	d
GL_RENDERBUFFER_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	3414;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	Src/CAPI/GL/CAPI_GLE_GL.h	3415;"	d
GL_RENDERBUFFER_RED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3420;"	d
GL_RENDERBUFFER_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3380;"	d
GL_RENDERBUFFER_STENCIL_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3425;"	d
GL_RENDERBUFFER_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	3413;"	d
GL_RENDERER	Src/CAPI/GL/CAPI_GLE_GL.h	573;"	d
GL_RENDER_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	377;"	d
GL_REPEAT	Src/CAPI/GL/CAPI_GLE_GL.h	603;"	d
GL_REPLACE	Src/CAPI/GL/CAPI_GLE_GL.h	569;"	d
GL_RESCALE_NORMAL	Src/CAPI/GL/CAPI_GLE_GL.h	1422;"	d
GL_RETAINED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2887;"	d
GL_RETURN	Src/CAPI/GL/CAPI_GLE_GL.h	219;"	d
GL_RG16_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2532;"	d
GL_RG8_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2528;"	d
GL_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	555;"	d
GL_RGB10	Src/CAPI/GL/CAPI_GLE_GL.h	662;"	d
GL_RGB10_A2	Src/CAPI/GL/CAPI_GLE_GL.h	669;"	d
GL_RGB10_A2UI	Src/CAPI/GL/CAPI_GLE_GL.h	2602;"	d
GL_RGB12	Src/CAPI/GL/CAPI_GLE_GL.h	663;"	d
GL_RGB16	Src/CAPI/GL/CAPI_GLE_GL.h	664;"	d
GL_RGB16F	Src/CAPI/GL/CAPI_GLE_GL.h	2296;"	d
GL_RGB16I	Src/CAPI/GL/CAPI_GLE_GL.h	2347;"	d
GL_RGB16UI	Src/CAPI/GL/CAPI_GLE_GL.h	2341;"	d
GL_RGB16_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2533;"	d
GL_RGB32F	Src/CAPI/GL/CAPI_GLE_GL.h	2294;"	d
GL_RGB32I	Src/CAPI/GL/CAPI_GLE_GL.h	2345;"	d
GL_RGB32UI	Src/CAPI/GL/CAPI_GLE_GL.h	2339;"	d
GL_RGB4	Src/CAPI/GL/CAPI_GLE_GL.h	659;"	d
GL_RGB5	Src/CAPI/GL/CAPI_GLE_GL.h	660;"	d
GL_RGB565	Src/CAPI/GL/CAPI_GLE_GL.h	3317;"	d
GL_RGB5_A1	Src/CAPI/GL/CAPI_GLE_GL.h	667;"	d
GL_RGB8	Src/CAPI/GL/CAPI_GLE_GL.h	661;"	d
GL_RGB8I	Src/CAPI/GL/CAPI_GLE_GL.h	2349;"	d
GL_RGB8UI	Src/CAPI/GL/CAPI_GLE_GL.h	2343;"	d
GL_RGB8_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2529;"	d
GL_RGB9_E5	Src/CAPI/GL/CAPI_GLE_GL.h	2320;"	d
GL_RGBA	Src/CAPI/GL/CAPI_GLE_GL.h	556;"	d
GL_RGBA12	Src/CAPI/GL/CAPI_GLE_GL.h	670;"	d
GL_RGBA16	Src/CAPI/GL/CAPI_GLE_GL.h	671;"	d
GL_RGBA16F	Src/CAPI/GL/CAPI_GLE_GL.h	2295;"	d
GL_RGBA16I	Src/CAPI/GL/CAPI_GLE_GL.h	2346;"	d
GL_RGBA16UI	Src/CAPI/GL/CAPI_GLE_GL.h	2340;"	d
GL_RGBA16_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2534;"	d
GL_RGBA2	Src/CAPI/GL/CAPI_GLE_GL.h	665;"	d
GL_RGBA32F	Src/CAPI/GL/CAPI_GLE_GL.h	2293;"	d
GL_RGBA32I	Src/CAPI/GL/CAPI_GLE_GL.h	2344;"	d
GL_RGBA32UI	Src/CAPI/GL/CAPI_GLE_GL.h	2338;"	d
GL_RGBA4	Src/CAPI/GL/CAPI_GLE_GL.h	666;"	d
GL_RGBA8	Src/CAPI/GL/CAPI_GLE_GL.h	668;"	d
GL_RGBA8I	Src/CAPI/GL/CAPI_GLE_GL.h	2348;"	d
GL_RGBA8UI	Src/CAPI/GL/CAPI_GLE_GL.h	2342;"	d
GL_RGBA8_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2530;"	d
GL_RGBA_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2851;"	d
GL_RGBA_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2845;"	d
GL_RGBA_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2355;"	d
GL_RGBA_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	374;"	d
GL_RGBA_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2526;"	d
GL_RGB_422_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2919;"	d
GL_RGB_FLOAT16_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2852;"	d
GL_RGB_FLOAT32_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2846;"	d
GL_RGB_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2354;"	d
GL_RGB_RAW_422_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2920;"	d
GL_RGB_SCALE	Src/CAPI/GL/CAPI_GLE_GL.h	1579;"	d
GL_RGB_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2525;"	d
GL_RG_SNORM	Src/CAPI/GL/CAPI_GLE_GL.h	2524;"	d
GL_RIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	248;"	d
GL_S	Src/CAPI/GL/CAPI_GLE_GL.h	576;"	d
GL_SAMPLER	Src/CAPI/GL/CAPI_GLE_GL.h	3696;"	d
GL_SAMPLER_1D	Src/CAPI/GL/CAPI_GLE_GL.h	2009;"	d
GL_SAMPLER_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2358;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2360;"	d
GL_SAMPLER_1D_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2013;"	d
GL_SAMPLER_2D	Src/CAPI/GL/CAPI_GLE_GL.h	2010;"	d
GL_SAMPLER_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2359;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2361;"	d
GL_SAMPLER_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3503;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3506;"	d
GL_SAMPLER_2D_RECT	Src/CAPI/GL/CAPI_GLE_GL.h	2511;"	d
GL_SAMPLER_2D_RECT_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2512;"	d
GL_SAMPLER_2D_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2014;"	d
GL_SAMPLER_3D	Src/CAPI/GL/CAPI_GLE_GL.h	2011;"	d
GL_SAMPLER_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2518;"	d
GL_SAMPLER_CUBE	Src/CAPI/GL/CAPI_GLE_GL.h	2012;"	d
GL_SAMPLER_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2622;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2623;"	d
GL_SAMPLER_CUBE_SHADOW	Src/CAPI/GL/CAPI_GLE_GL.h	2362;"	d
GL_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	1513;"	d
GL_SAMPLES_PASSED	Src/CAPI/GL/CAPI_GLE_GL.h	1898;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	Src/CAPI/GL/CAPI_GLE_GL.h	1509;"	d
GL_SAMPLE_ALPHA_TO_ONE	Src/CAPI/GL/CAPI_GLE_GL.h	1510;"	d
GL_SAMPLE_BUFFERS	Src/CAPI/GL/CAPI_GLE_GL.h	1512;"	d
GL_SAMPLE_COVERAGE	Src/CAPI/GL/CAPI_GLE_GL.h	1511;"	d
GL_SAMPLE_COVERAGE_INVERT	Src/CAPI/GL/CAPI_GLE_GL.h	1515;"	d
GL_SAMPLE_COVERAGE_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	1514;"	d
GL_SAMPLE_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	3492;"	d
GL_SAMPLE_MASK_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	3493;"	d
GL_SAMPLE_POSITION	Src/CAPI/GL/CAPI_GLE_GL.h	3491;"	d
GL_SAMPLE_SHADING	Src/CAPI/GL/CAPI_GLE_GL.h	2614;"	d
GL_SCISSOR_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	719;"	d
GL_SCISSOR_BOX	Src/CAPI/GL/CAPI_GLE_GL.h	367;"	d
GL_SCISSOR_TEST	Src/CAPI/GL/CAPI_GLE_GL.h	368;"	d
GL_SECONDARY_COLOR_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	1734;"	d
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1879;"	d
GL_SECONDARY_COLOR_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	1733;"	d
GL_SECONDARY_COLOR_ARRAY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1730;"	d
GL_SECONDARY_COLOR_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	1732;"	d
GL_SECONDARY_COLOR_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	1731;"	d
GL_SELECT	Src/CAPI/GL/CAPI_GLE_GL.h	565;"	d
GL_SELECTION_BUFFER_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	488;"	d
GL_SELECTION_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	489;"	d
GL_SEPARATE_ATTRIBS	Src/CAPI/GL/CAPI_GLE_GL.h	2335;"	d
GL_SEPARATE_SPECULAR_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	1444;"	d
GL_SET	Src/CAPI/GL/CAPI_GLE_GL.h	537;"	d
GL_SHADER	Src/CAPI/GL/CAPI_GLE_GL.h	3692;"	d
GL_SHADER_BINARY_FORMATS	Src/CAPI/GL/CAPI_GLE_GL.h	3324;"	d
GL_SHADER_COMPILER	Src/CAPI/GL/CAPI_GLE_GL.h	3326;"	d
GL_SHADER_SOURCE_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2023;"	d
GL_SHADER_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	1995;"	d
GL_SHADE_MODEL	Src/CAPI/GL/CAPI_GLE_GL.h	317;"	d
GL_SHADING_LANGUAGE_VERSION	Src/CAPI/GL/CAPI_GLE_GL.h	2027;"	d
GL_SHININESS	Src/CAPI/GL/CAPI_GLE_GL.h	539;"	d
GL_SHORT	Src/CAPI/GL/CAPI_GLE_GL.h	513;"	d
GL_SIGNED_NORMALIZED	Src/CAPI/GL/CAPI_GLE_GL.h	2535;"	d
GL_SINGLE_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	1443;"	d
GL_SLUMINANCE	Src/CAPI/GL/CAPI_GLE_GL.h	2248;"	d
GL_SLUMINANCE8	Src/CAPI/GL/CAPI_GLE_GL.h	2249;"	d
GL_SLUMINANCE8_ALPHA8	Src/CAPI/GL/CAPI_GLE_GL.h	2247;"	d
GL_SLUMINANCE_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	2246;"	d
GL_SMOOTH	Src/CAPI/GL/CAPI_GLE_GL.h	567;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	Src/CAPI/GL/CAPI_GLE_GL.h	1416;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	1415;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	Src/CAPI/GL/CAPI_GLE_GL.h	1414;"	d
GL_SMOOTH_POINT_SIZE_RANGE	Src/CAPI/GL/CAPI_GLE_GL.h	1413;"	d
GL_SOURCE0_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1588;"	d
GL_SOURCE0_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1585;"	d
GL_SOURCE1_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1589;"	d
GL_SOURCE1_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1586;"	d
GL_SOURCE2_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1590;"	d
GL_SOURCE2_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1587;"	d
GL_SPECULAR	Src/CAPI/GL/CAPI_GLE_GL.h	501;"	d
GL_SPHERE_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	588;"	d
GL_SPOT_CUTOFF	Src/CAPI/GL/CAPI_GLE_GL.h	505;"	d
GL_SPOT_DIRECTION	Src/CAPI/GL/CAPI_GLE_GL.h	503;"	d
GL_SPOT_EXPONENT	Src/CAPI/GL/CAPI_GLE_GL.h	504;"	d
GL_SRC0_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1857;"	d
GL_SRC0_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1858;"	d
GL_SRC1_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1859;"	d
GL_SRC1_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1860;"	d
GL_SRC2_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	1861;"	d
GL_SRC2_RGB	Src/CAPI/GL/CAPI_GLE_GL.h	1862;"	d
GL_SRC_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	233;"	d
GL_SRC_ALPHA_SATURATE	Src/CAPI/GL/CAPI_GLE_GL.h	239;"	d
GL_SRC_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	231;"	d
GL_SRGB	Src/CAPI/GL/CAPI_GLE_GL.h	2242;"	d
GL_SRGB	Src/CAPI/GL/CAPI_GLE_GL.h	3373;"	d
GL_SRGB8	Src/CAPI/GL/CAPI_GLE_GL.h	2243;"	d
GL_SRGB8_ALPHA8	Src/CAPI/GL/CAPI_GLE_GL.h	2245;"	d
GL_SRGB_ALPHA	Src/CAPI/GL/CAPI_GLE_GL.h	2244;"	d
GL_STACK_OVERFLOW	Src/CAPI/GL/CAPI_GLE_GL.h	257;"	d
GL_STACK_OVERFLOW	Src/CAPI/GL/CAPI_GLE_GL.h	3667;"	d
GL_STACK_UNDERFLOW	Src/CAPI/GL/CAPI_GLE_GL.h	258;"	d
GL_STACK_UNDERFLOW	Src/CAPI/GL/CAPI_GLE_GL.h	3668;"	d
GL_STATIC_COPY	Src/CAPI/GL/CAPI_GLE_GL.h	1894;"	d
GL_STATIC_DRAW	Src/CAPI/GL/CAPI_GLE_GL.h	1892;"	d
GL_STATIC_READ	Src/CAPI/GL/CAPI_GLE_GL.h	1893;"	d
GL_STENCIL	Src/CAPI/GL/CAPI_GLE_GL.h	547;"	d
GL_STENCIL_ATTACHMENT	Src/CAPI/GL/CAPI_GLE_GL.h	3410;"	d
GL_STENCIL_BACK_FAIL	Src/CAPI/GL/CAPI_GLE_GL.h	1961;"	d
GL_STENCIL_BACK_FUNC	Src/CAPI/GL/CAPI_GLE_GL.h	1960;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	Src/CAPI/GL/CAPI_GLE_GL.h	1962;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	Src/CAPI/GL/CAPI_GLE_GL.h	1963;"	d
GL_STENCIL_BACK_REF	Src/CAPI/GL/CAPI_GLE_GL.h	2032;"	d
GL_STENCIL_BACK_VALUE_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	2033;"	d
GL_STENCIL_BACK_WRITEMASK	Src/CAPI/GL/CAPI_GLE_GL.h	2034;"	d
GL_STENCIL_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	454;"	d
GL_STENCIL_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2292;"	d
GL_STENCIL_BUFFER_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	240;"	d
GL_STENCIL_CLEAR_VALUE	Src/CAPI/GL/CAPI_GLE_GL.h	335;"	d
GL_STENCIL_FAIL	Src/CAPI/GL/CAPI_GLE_GL.h	338;"	d
GL_STENCIL_FUNC	Src/CAPI/GL/CAPI_GLE_GL.h	336;"	d
GL_STENCIL_INDEX	Src/CAPI/GL/CAPI_GLE_GL.h	549;"	d
GL_STENCIL_INDEX1	Src/CAPI/GL/CAPI_GLE_GL.h	3416;"	d
GL_STENCIL_INDEX16	Src/CAPI/GL/CAPI_GLE_GL.h	3419;"	d
GL_STENCIL_INDEX4	Src/CAPI/GL/CAPI_GLE_GL.h	3417;"	d
GL_STENCIL_INDEX8	Src/CAPI/GL/CAPI_GLE_GL.h	3418;"	d
GL_STENCIL_PASS_DEPTH_FAIL	Src/CAPI/GL/CAPI_GLE_GL.h	339;"	d
GL_STENCIL_PASS_DEPTH_PASS	Src/CAPI/GL/CAPI_GLE_GL.h	340;"	d
GL_STENCIL_REF	Src/CAPI/GL/CAPI_GLE_GL.h	341;"	d
GL_STENCIL_TEST	Src/CAPI/GL/CAPI_GLE_GL.h	334;"	d
GL_STENCIL_VALUE_MASK	Src/CAPI/GL/CAPI_GLE_GL.h	337;"	d
GL_STENCIL_WRITEMASK	Src/CAPI/GL/CAPI_GLE_GL.h	342;"	d
GL_STEREO	Src/CAPI/GL/CAPI_GLE_GL.h	376;"	d
GL_STORAGE_CACHED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2955;"	d
GL_STORAGE_CACHED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3012;"	d
GL_STORAGE_CLIENT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3011;"	d
GL_STORAGE_PRIVATE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2954;"	d
GL_STORAGE_SHARED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2956;"	d
GL_STORAGE_SHARED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3013;"	d
GL_STREAM_COPY	Src/CAPI/GL/CAPI_GLE_GL.h	1891;"	d
GL_STREAM_DRAW	Src/CAPI/GL/CAPI_GLE_GL.h	1889;"	d
GL_STREAM_READ	Src/CAPI/GL/CAPI_GLE_GL.h	1890;"	d
GL_SUBPIXEL_BITS	Src/CAPI/GL/CAPI_GLE_GL.h	447;"	d
GL_SUBTRACT	Src/CAPI/GL/CAPI_GLE_GL.h	1556;"	d
GL_T	Src/CAPI/GL/CAPI_GLE_GL.h	578;"	d
GL_T2F_C3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	618;"	d
GL_T2F_C4F_N3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	620;"	d
GL_T2F_C4UB_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	617;"	d
GL_T2F_N3F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	619;"	d
GL_T2F_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	615;"	d
GL_T4F_C4F_N3F_V4F	Src/CAPI/GL/CAPI_GLE_GL.h	621;"	d
GL_T4F_V4F	Src/CAPI/GL/CAPI_GLE_GL.h	616;"	d
GL_TEXTURE	Src/CAPI/GL/CAPI_GLE_GL.h	544;"	d
GL_TEXTURE0	Src/CAPI/GL/CAPI_GLE_GL.h	1517;"	d
GL_TEXTURE1	Src/CAPI/GL/CAPI_GLE_GL.h	1518;"	d
GL_TEXTURE10	Src/CAPI/GL/CAPI_GLE_GL.h	1527;"	d
GL_TEXTURE11	Src/CAPI/GL/CAPI_GLE_GL.h	1528;"	d
GL_TEXTURE12	Src/CAPI/GL/CAPI_GLE_GL.h	1529;"	d
GL_TEXTURE13	Src/CAPI/GL/CAPI_GLE_GL.h	1530;"	d
GL_TEXTURE14	Src/CAPI/GL/CAPI_GLE_GL.h	1531;"	d
GL_TEXTURE15	Src/CAPI/GL/CAPI_GLE_GL.h	1532;"	d
GL_TEXTURE16	Src/CAPI/GL/CAPI_GLE_GL.h	1533;"	d
GL_TEXTURE17	Src/CAPI/GL/CAPI_GLE_GL.h	1534;"	d
GL_TEXTURE18	Src/CAPI/GL/CAPI_GLE_GL.h	1535;"	d
GL_TEXTURE19	Src/CAPI/GL/CAPI_GLE_GL.h	1536;"	d
GL_TEXTURE2	Src/CAPI/GL/CAPI_GLE_GL.h	1519;"	d
GL_TEXTURE20	Src/CAPI/GL/CAPI_GLE_GL.h	1537;"	d
GL_TEXTURE21	Src/CAPI/GL/CAPI_GLE_GL.h	1538;"	d
GL_TEXTURE22	Src/CAPI/GL/CAPI_GLE_GL.h	1539;"	d
GL_TEXTURE23	Src/CAPI/GL/CAPI_GLE_GL.h	1540;"	d
GL_TEXTURE24	Src/CAPI/GL/CAPI_GLE_GL.h	1541;"	d
GL_TEXTURE25	Src/CAPI/GL/CAPI_GLE_GL.h	1542;"	d
GL_TEXTURE26	Src/CAPI/GL/CAPI_GLE_GL.h	1543;"	d
GL_TEXTURE27	Src/CAPI/GL/CAPI_GLE_GL.h	1544;"	d
GL_TEXTURE28	Src/CAPI/GL/CAPI_GLE_GL.h	1545;"	d
GL_TEXTURE29	Src/CAPI/GL/CAPI_GLE_GL.h	1546;"	d
GL_TEXTURE3	Src/CAPI/GL/CAPI_GLE_GL.h	1520;"	d
GL_TEXTURE30	Src/CAPI/GL/CAPI_GLE_GL.h	1547;"	d
GL_TEXTURE31	Src/CAPI/GL/CAPI_GLE_GL.h	1548;"	d
GL_TEXTURE4	Src/CAPI/GL/CAPI_GLE_GL.h	1521;"	d
GL_TEXTURE5	Src/CAPI/GL/CAPI_GLE_GL.h	1522;"	d
GL_TEXTURE6	Src/CAPI/GL/CAPI_GLE_GL.h	1523;"	d
GL_TEXTURE7	Src/CAPI/GL/CAPI_GLE_GL.h	1524;"	d
GL_TEXTURE8	Src/CAPI/GL/CAPI_GLE_GL.h	1525;"	d
GL_TEXTURE9	Src/CAPI/GL/CAPI_GLE_GL.h	1526;"	d
GL_TEXTURE_1D	Src/CAPI/GL/CAPI_GLE_GL.h	483;"	d
GL_TEXTURE_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2312;"	d
GL_TEXTURE_2D	Src/CAPI/GL/CAPI_GLE_GL.h	484;"	d
GL_TEXTURE_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2314;"	d
GL_TEXTURE_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3495;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3497;"	d
GL_TEXTURE_3D	Src/CAPI/GL/CAPI_GLE_GL.h	1428;"	d
GL_TEXTURE_ALPHA_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	675;"	d
GL_TEXTURE_ALPHA_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2308;"	d
GL_TEXTURE_BASE_LEVEL	Src/CAPI/GL/CAPI_GLE_GL.h	1440;"	d
GL_TEXTURE_BINDING_1D	Src/CAPI/GL/CAPI_GLE_GL.h	682;"	d
GL_TEXTURE_BINDING_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2316;"	d
GL_TEXTURE_BINDING_2D	Src/CAPI/GL/CAPI_GLE_GL.h	683;"	d
GL_TEXTURE_BINDING_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2317;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3499;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3500;"	d
GL_TEXTURE_BINDING_3D	Src/CAPI/GL/CAPI_GLE_GL.h	1423;"	d
GL_TEXTURE_BINDING_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2515;"	d
GL_TEXTURE_BINDING_CUBE_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	1567;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2620;"	d
GL_TEXTURE_BINDING_RECTANGLE	Src/CAPI/GL/CAPI_GLE_GL.h	2508;"	d
GL_TEXTURE_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	718;"	d
GL_TEXTURE_BLUE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	674;"	d
GL_TEXTURE_BLUE_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2307;"	d
GL_TEXTURE_BORDER	Src/CAPI/GL/CAPI_GLE_GL.h	495;"	d
GL_TEXTURE_BORDER_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	494;"	d
GL_TEXTURE_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2513;"	d
GL_TEXTURE_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	2676;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	2516;"	d
GL_TEXTURE_BUFFER_FORMAT	Src/CAPI/GL/CAPI_GLE_GL.h	2517;"	d
GL_TEXTURE_COMPARE_FUNC	Src/CAPI/GL/CAPI_GLE_GL.h	1743;"	d
GL_TEXTURE_COMPARE_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	1742;"	d
GL_TEXTURE_COMPONENTS	Src/CAPI/GL/CAPI_GLE_GL.h	192;"	d
GL_TEXTURE_COMPRESSED	Src/CAPI/GL/CAPI_GLE_GL.h	1598;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1597;"	d
GL_TEXTURE_COMPRESSION_HINT	Src/CAPI/GL/CAPI_GLE_GL.h	1563;"	d
GL_TEXTURE_COORD_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	688;"	d
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1877;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	708;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	700;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	702;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	701;"	d
GL_TEXTURE_CUBE_MAP	Src/CAPI/GL/CAPI_GLE_GL.h	1566;"	d
GL_TEXTURE_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2619;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	Src/CAPI/GL/CAPI_GLE_GL.h	1569;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	Src/CAPI/GL/CAPI_GLE_GL.h	1571;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	Src/CAPI/GL/CAPI_GLE_GL.h	1573;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	Src/CAPI/GL/CAPI_GLE_GL.h	1568;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	Src/CAPI/GL/CAPI_GLE_GL.h	1570;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	Src/CAPI/GL/CAPI_GLE_GL.h	1572;"	d
GL_TEXTURE_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	1430;"	d
GL_TEXTURE_DEPTH_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1740;"	d
GL_TEXTURE_DEPTH_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2311;"	d
GL_TEXTURE_ENV	Src/CAPI/GL/CAPI_GLE_GL.h	585;"	d
GL_TEXTURE_ENV_COLOR	Src/CAPI/GL/CAPI_GLE_GL.h	584;"	d
GL_TEXTURE_ENV_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	583;"	d
GL_TEXTURE_FILTER_CONTROL	Src/CAPI/GL/CAPI_GLE_GL.h	1736;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	Src/CAPI/GL/CAPI_GLE_GL.h	3502;"	d
GL_TEXTURE_GEN_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	589;"	d
GL_TEXTURE_GEN_Q	Src/CAPI/GL/CAPI_GLE_GL.h	386;"	d
GL_TEXTURE_GEN_R	Src/CAPI/GL/CAPI_GLE_GL.h	385;"	d
GL_TEXTURE_GEN_S	Src/CAPI/GL/CAPI_GLE_GL.h	383;"	d
GL_TEXTURE_GEN_T	Src/CAPI/GL/CAPI_GLE_GL.h	384;"	d
GL_TEXTURE_GREEN_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	673;"	d
GL_TEXTURE_GREEN_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2306;"	d
GL_TEXTURE_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	492;"	d
GL_TEXTURE_INTENSITY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	677;"	d
GL_TEXTURE_INTENSITY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2310;"	d
GL_TEXTURE_INTERNAL_FORMAT	Src/CAPI/GL/CAPI_GLE_GL.h	493;"	d
GL_TEXTURE_LOD_BIAS	Src/CAPI/GL/CAPI_GLE_GL.h	1737;"	d
GL_TEXTURE_LUMINANCE_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	676;"	d
GL_TEXTURE_LUMINANCE_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2309;"	d
GL_TEXTURE_MAG_FILTER	Src/CAPI/GL/CAPI_GLE_GL.h	598;"	d
GL_TEXTURE_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	351;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	3645;"	d
GL_TEXTURE_MAX_LEVEL	Src/CAPI/GL/CAPI_GLE_GL.h	1441;"	d
GL_TEXTURE_MAX_LOD	Src/CAPI/GL/CAPI_GLE_GL.h	1439;"	d
GL_TEXTURE_MIN_FILTER	Src/CAPI/GL/CAPI_GLE_GL.h	599;"	d
GL_TEXTURE_MIN_LOD	Src/CAPI/GL/CAPI_GLE_GL.h	1438;"	d
GL_TEXTURE_PRIORITY	Src/CAPI/GL/CAPI_GLE_GL.h	680;"	d
GL_TEXTURE_RANGE_LENGTH_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2951;"	d
GL_TEXTURE_RANGE_POINTER_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2952;"	d
GL_TEXTURE_RECTANGLE	Src/CAPI/GL/CAPI_GLE_GL.h	2507;"	d
GL_TEXTURE_RED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	672;"	d
GL_TEXTURE_RED_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	2305;"	d
GL_TEXTURE_RESIDENT	Src/CAPI/GL/CAPI_GLE_GL.h	681;"	d
GL_TEXTURE_SAMPLES	Src/CAPI/GL/CAPI_GLE_GL.h	3501;"	d
GL_TEXTURE_SHARED_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	2322;"	d
GL_TEXTURE_STACK_DEPTH	Src/CAPI/GL/CAPI_GLE_GL.h	348;"	d
GL_TEXTURE_STENCIL_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	3371;"	d
GL_TEXTURE_STORAGE_HINT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2953;"	d
GL_TEXTURE_WIDTH	Src/CAPI/GL/CAPI_GLE_GL.h	490;"	d
GL_TEXTURE_WRAP_R	Src/CAPI/GL/CAPI_GLE_GL.h	1431;"	d
GL_TEXTURE_WRAP_S	Src/CAPI/GL/CAPI_GLE_GL.h	600;"	d
GL_TEXTURE_WRAP_T	Src/CAPI/GL/CAPI_GLE_GL.h	601;"	d
GL_TIMESTAMP	Src/CAPI/GL/CAPI_GLE_GL.h	3541;"	d
GL_TIME_ELAPSED	Src/CAPI/GL/CAPI_GLE_GL.h	3540;"	d
GL_TRANSFORM_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	491;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2336;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	2337;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	Src/CAPI/GL/CAPI_GLE_GL.h	2324;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	2328;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	Src/CAPI/GL/CAPI_GLE_GL.h	2327;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	Src/CAPI/GL/CAPI_GLE_GL.h	2330;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	Src/CAPI/GL/CAPI_GLE_GL.h	2326;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	2323;"	d
GL_TRANSFORM_HINT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2971;"	d
GL_TRANSPOSE_COLOR_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	1555;"	d
GL_TRANSPOSE_MODELVIEW_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	1552;"	d
GL_TRANSPOSE_PROJECTION_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	1553;"	d
GL_TRANSPOSE_TEXTURE_MATRIX	Src/CAPI/GL/CAPI_GLE_GL.h	1554;"	d
GL_TRIANGLES	Src/CAPI/GL/CAPI_GLE_GL.h	205;"	d
GL_TRIANGLES_ADJACENCY	Src/CAPI/GL/CAPI_GLE_GL.h	2565;"	d
GL_TRIANGLE_FAN	Src/CAPI/GL/CAPI_GLE_GL.h	207;"	d
GL_TRIANGLE_STRIP	Src/CAPI/GL/CAPI_GLE_GL.h	206;"	d
GL_TRIANGLE_STRIP_ADJACENCY	Src/CAPI/GL/CAPI_GLE_GL.h	2566;"	d
GL_TRUE	Src/CAPI/GL/CAPI_GLE_GL.h	196;"	d
GL_UNDEFINED_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2888;"	d
GL_UNPACK_ALIGNMENT	Src/CAPI/GL/CAPI_GLE_GL.h	412;"	d
GL_UNPACK_CLIENT_STORAGE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2780;"	d
GL_UNPACK_IMAGE_HEIGHT	Src/CAPI/GL/CAPI_GLE_GL.h	1427;"	d
GL_UNPACK_LSB_FIRST	Src/CAPI/GL/CAPI_GLE_GL.h	408;"	d
GL_UNPACK_ROW_BYTES_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2931;"	d
GL_UNPACK_ROW_LENGTH	Src/CAPI/GL/CAPI_GLE_GL.h	409;"	d
GL_UNPACK_SKIP_IMAGES	Src/CAPI/GL/CAPI_GLE_GL.h	1426;"	d
GL_UNPACK_SKIP_PIXELS	Src/CAPI/GL/CAPI_GLE_GL.h	411;"	d
GL_UNPACK_SKIP_ROWS	Src/CAPI/GL/CAPI_GLE_GL.h	410;"	d
GL_UNPACK_SWAP_BYTES	Src/CAPI/GL/CAPI_GLE_GL.h	407;"	d
GL_UNSIGNED_BYTE	Src/CAPI/GL/CAPI_GLE_GL.h	512;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	Src/CAPI/GL/CAPI_GLE_GL.h	1445;"	d
GL_UNSIGNED_BYTE_3_3_2	Src/CAPI/GL/CAPI_GLE_GL.h	1417;"	d
GL_UNSIGNED_INT	Src/CAPI/GL/CAPI_GLE_GL.h	516;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	Src/CAPI/GL/CAPI_GLE_GL.h	2319;"	d
GL_UNSIGNED_INT_10_10_10_2	Src/CAPI/GL/CAPI_GLE_GL.h	1421;"	d
GL_UNSIGNED_INT_24_8	Src/CAPI/GL/CAPI_GLE_GL.h	3369;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	Src/CAPI/GL/CAPI_GLE_GL.h	2321;"	d
GL_UNSIGNED_INT_8_8_8_8	Src/CAPI/GL/CAPI_GLE_GL.h	1420;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	Src/CAPI/GL/CAPI_GLE_GL.h	1450;"	d
GL_UNSIGNED_INT_SAMPLER_1D	Src/CAPI/GL/CAPI_GLE_GL.h	2372;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2376;"	d
GL_UNSIGNED_INT_SAMPLER_2D	Src/CAPI/GL/CAPI_GLE_GL.h	2373;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2377;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3505;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	3508;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	Src/CAPI/GL/CAPI_GLE_GL.h	2521;"	d
GL_UNSIGNED_INT_SAMPLER_3D	Src/CAPI/GL/CAPI_GLE_GL.h	2374;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	Src/CAPI/GL/CAPI_GLE_GL.h	2522;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	Src/CAPI/GL/CAPI_GLE_GL.h	2375;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	2625;"	d
GL_UNSIGNED_INT_VEC2	Src/CAPI/GL/CAPI_GLE_GL.h	2363;"	d
GL_UNSIGNED_INT_VEC3	Src/CAPI/GL/CAPI_GLE_GL.h	2364;"	d
GL_UNSIGNED_INT_VEC4	Src/CAPI/GL/CAPI_GLE_GL.h	2365;"	d
GL_UNSIGNED_NORMALIZED	Src/CAPI/GL/CAPI_GLE_GL.h	3372;"	d
GL_UNSIGNED_SHORT	Src/CAPI/GL/CAPI_GLE_GL.h	514;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	Src/CAPI/GL/CAPI_GLE_GL.h	1449;"	d
GL_UNSIGNED_SHORT_4_4_4_4	Src/CAPI/GL/CAPI_GLE_GL.h	1418;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	Src/CAPI/GL/CAPI_GLE_GL.h	1448;"	d
GL_UNSIGNED_SHORT_5_5_5_1	Src/CAPI/GL/CAPI_GLE_GL.h	1419;"	d
GL_UNSIGNED_SHORT_5_6_5	Src/CAPI/GL/CAPI_GLE_GL.h	1446;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	Src/CAPI/GL/CAPI_GLE_GL.h	1447;"	d
GL_UNSIGNED_SHORT_8_8_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2917;"	d
GL_UNSIGNED_SHORT_8_8_REV_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2918;"	d
GL_UPPER_LEFT	Src/CAPI/GL/CAPI_GLE_GL.h	2031;"	d
GL_V2F	Src/CAPI/GL/CAPI_GLE_GL.h	608;"	d
GL_V3F	Src/CAPI/GL/CAPI_GLE_GL.h	609;"	d
GL_VALIDATE_STATUS	Src/CAPI/GL/CAPI_GLE_GL.h	2018;"	d
GL_VENDOR	Src/CAPI/GL/CAPI_GLE_GL.h	572;"	d
GL_VERSION	Src/CAPI/GL/CAPI_GLE_GL.h	574;"	d
GL_VERSION_1_1	Src/CAPI/GL/CAPI_GLE_GL.h	163;"	d
GL_VERSION_1_2	Src/CAPI/GL/CAPI_GLE_GL.h	1411;"	d
GL_VERSION_1_3	Src/CAPI/GL/CAPI_GLE_GL.h	1506;"	d
GL_VERSION_1_4	Src/CAPI/GL/CAPI_GLE_GL.h	1704;"	d
GL_VERSION_1_5	Src/CAPI/GL/CAPI_GLE_GL.h	1847;"	d
GL_VERSION_2_0	Src/CAPI/GL/CAPI_GLE_GL.h	1949;"	d
GL_VERSION_2_1	Src/CAPI/GL/CAPI_GLE_GL.h	2229;"	d
GL_VERSION_3_0	Src/CAPI/GL/CAPI_GLE_GL.h	2275;"	d
GL_VERSION_3_1	Src/CAPI/GL/CAPI_GLE_GL.h	2505;"	d
GL_VERSION_3_2	Src/CAPI/GL/CAPI_GLE_GL.h	2559;"	d
GL_VERSION_3_3	Src/CAPI/GL/CAPI_GLE_GL.h	2599;"	d
GL_VERSION_4_0	Src/CAPI/GL/CAPI_GLE_GL.h	2612;"	d
GL_VERSION_4_1	Src/CAPI/GL/CAPI_GLE_GL.h	2645;"	d
GL_VERSION_4_2	Src/CAPI/GL/CAPI_GLE_GL.h	2652;"	d
GL_VERSION_4_3	Src/CAPI/GL/CAPI_GLE_GL.h	2663;"	d
GL_VERSION_4_4	Src/CAPI/GL/CAPI_GLE_GL.h	2672;"	d
GL_VERSION_4_5	Src/CAPI/GL/CAPI_GLE_GL.h	2682;"	d
GL_VERTEX_ARRAY	Src/CAPI/GL/CAPI_GLE_GL.h	684;"	d
GL_VERTEX_ARRAY_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	3559;"	d
GL_VERTEX_ARRAY_BINDING_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2986;"	d
GL_VERTEX_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1873;"	d
GL_VERTEX_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	704;"	d
GL_VERTEX_ARRAY_RANGE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3006;"	d
GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3007;"	d
GL_VERTEX_ARRAY_RANGE_POINTER_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3010;"	d
GL_VERTEX_ARRAY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	690;"	d
GL_VERTEX_ARRAY_STORAGE_HINT_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3008;"	d
GL_VERTEX_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	692;"	d
GL_VERTEX_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	691;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1882;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	Src/CAPI/GL/CAPI_GLE_GL.h	2601;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	Src/CAPI/GL/CAPI_GLE_GL.h	1952;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	Src/CAPI/GL/CAPI_GLE_GL.h	2297;"	d
GL_VERTEX_ATTRIB_ARRAY_LONG	Src/CAPI/GL/CAPI_GLE_GL.h	2666;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	Src/CAPI/GL/CAPI_GLE_GL.h	1985;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	Src/CAPI/GL/CAPI_GLE_GL.h	1959;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1953;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	Src/CAPI/GL/CAPI_GLE_GL.h	1954;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	Src/CAPI/GL/CAPI_GLE_GL.h	1955;"	d
GL_VERTEX_ATTRIB_MAP1_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3031;"	d
GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3034;"	d
GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3036;"	d
GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3035;"	d
GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3033;"	d
GL_VERTEX_ATTRIB_MAP2_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3032;"	d
GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3038;"	d
GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3040;"	d
GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3039;"	d
GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3037;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	Src/CAPI/GL/CAPI_GLE_GL.h	1957;"	d
GL_VERTEX_PROGRAM_TWO_SIDE	Src/CAPI/GL/CAPI_GLE_GL.h	1958;"	d
GL_VERTEX_SHADER	Src/CAPI/GL/CAPI_GLE_GL.h	1989;"	d
GL_VIEWPORT	Src/CAPI/GL/CAPI_GLE_GL.h	345;"	d
GL_VIEWPORT_BIT	Src/CAPI/GL/CAPI_GLE_GL.h	274;"	d
GL_VOLATILE_APPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2886;"	d
GL_WEIGHT_ARRAY_BUFFER_BINDING	Src/CAPI/GL/CAPI_GLE_GL.h	1881;"	d
GL_WIN_swap_hint	Src/CAPI/GL/CAPI_GLE_GL.h	3775;"	d
GL_WRITE_ONLY	Src/CAPI/GL/CAPI_GLE_GL.h	1884;"	d
GL_XOR	Src/CAPI/GL/CAPI_GLE_GL.h	528;"	d
GL_ZERO	Src/CAPI/GL/CAPI_GLE_GL.h	188;"	d
GL_ZOOM_X	Src/CAPI/GL/CAPI_GLE_GL.h	425;"	d
GL_ZOOM_Y	Src/CAPI/GL/CAPI_GLE_GL.h	426;"	d
GLbitfield	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned int GLbitfield;$/;"	t
GLboolean	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned char GLboolean;$/;"	t
GLbyte	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef signed char GLbyte;$/;"	t
GLchar	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef char GLchar;$/;"	t
GLclampd	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef double GLclampd;$/;"	t
GLclampf	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef float GLclampf;$/;"	t
GLdouble	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef double GLdouble;$/;"	t
GLenum	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned int GLenum;$/;"	t
GLfixed	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef int GLfixed;$/;"	t
GLfloat	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef float GLfloat;$/;"	t
GLint	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef int GLint;$/;"	t
GLint64	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLint64EXT  GLint64;$/;"	t
GLint64EXT	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef int64_t GLint64EXT;$/;"	t
GLintptr	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef ptrdiff_t GLintptr;$/;"	t
GLshort	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef short GLshort;$/;"	t
GLsizei	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef int GLsizei;$/;"	t
GLsizeiptr	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsync	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned char GLubyte;$/;"	t
GLuint	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned int GLuint;$/;"	t
GLuint64	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint64EXT GLuint64;$/;"	t
GLuint64EXT	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef uint64_t GLuint64EXT;$/;"	t
GLulong	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned long GLulong;$/;"	t
GLushort	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef unsigned short GLushort;$/;"	t
GLvoid	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void GLvoid;$/;"	t
GPUVersion	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
GPU_DEVICE	Src/CAPI/GL/CAPI_GLE_GL.h	/^        } GPU_DEVICE, *PGPU_DEVICE;$/;"	t	typeref:struct:_GPU_DEVICE
GUICONSOLE_H	Src/Util/GUIConsole.h	28;"	d
GUIConsole	Src/Util/GUIConsole.h	/^class GUIConsole$/;"	c
GUnicodePairType	Src/Kernel/OVR_Std.cpp	/^struct GUnicodePairType$/;"	s	namespace:OVR	file:
Generate	Src/Net/OVR_Session.cpp	/^void RPC_C2S_Hello::Generate(Net::BitStream* bs)$/;"	f	class:OVR::Net::RPC_C2S_Hello
Generate	Src/Net/OVR_Session.cpp	/^void RPC_S2C_Authorization::Generate(Net::BitStream* bs, String errorString)$/;"	f	class:OVR::Net::RPC_S2C_Authorization
GenerateHmdRenderInfoFromHmdInfo	Src/OVR_Stereo.cpp	/^HmdRenderInfo GenerateHmdRenderInfoFromHmdInfo ( HMDInfo const &hmdInfo,$/;"	f	namespace:OVR
GenerateLensConfigFromEyeRelief	Src/OVR_Stereo.cpp	/^LensConfig GenerateLensConfigFromEyeRelief ( float eyeReliefInMeters, HmdRenderInfo const &hmd, DistortionEqnType distortionType \/*= Distortion_CatmullRom10*\/ )$/;"	f	namespace:OVR
Get	Src/Kernel/OVR_Hash.h	/^    C* Get(const K& key)$/;"	f	class:OVR::HashSetBase
Get	Src/Kernel/OVR_Hash.h	/^    bool    Get(const C& key, U* pvalue) const   $/;"	f	class:OVR::Hash
Get	Src/Kernel/OVR_Hash.h	/^    const C* Get(const K& key) const$/;"	f	class:OVR::HashSetBase
Get	Src/Kernel/OVR_Hash.h	/^    inline U*  Get(const C& key)$/;"	f	class:OVR::Hash
Get	Src/Kernel/OVR_Hash.h	/^    inline const U* Get(const C& key) const$/;"	f	class:OVR::Hash
Get	Src/Kernel/OVR_Math.h	/^	T    Get(AngularUnits u = Radians) const       { return (u == Radians) ? a : a*((T)MATH_DOUBLE_RADTODEGREEFACTOR); }$/;"	f	class:OVR::Angle
Get	Src/Kernel/OVR_SharedMemory.h	/^	OVR_FORCE_INLINE SharedType* Get()$/;"	f	class:OVR::SharedObjectWriter
Get	Src/Kernel/OVR_SharedMemory.h	/^	OVR_FORCE_INLINE const SharedType* Get() const$/;"	f	class:OVR::SharedObjectReader
Get	Src/Kernel/OVR_SharedMemory.h	/^	SharedType* Get() const$/;"	f	class:OVR::ISharedObject
GetActiveSocketsCount	Src/Net/OVR_Session.cpp	/^SInt32 Session::GetActiveSocketsCount()$/;"	f	class:OVR::Net::Session
GetAlt	Src/Kernel/OVR_Hash.h	/^    C* GetAlt(const K& key)$/;"	f	class:OVR::HashSetBase
GetAlt	Src/Kernel/OVR_Hash.h	/^    bool    GetAlt(const K& key, U* pvalue) const   $/;"	f	class:OVR::Hash
GetAlt	Src/Kernel/OVR_Hash.h	/^    bool GetAlt(const K& key, C* pval) const$/;"	f	class:OVR::HashSetBase
GetAlt	Src/Kernel/OVR_Hash.h	/^    const C* GetAlt(const K& key) const$/;"	f	class:OVR::HashSetBase
GetAlt	Src/Kernel/OVR_Hash.h	/^    inline U*  GetAlt(const K& key)$/;"	f	class:OVR::Hash
GetAlt	Src/Kernel/OVR_Hash.h	/^    inline const U* GetAlt(const K& key) const$/;"	f	class:OVR::Hash
GetArrayNumber	Src/OVR_JSON.cpp	/^double JSON::GetArrayNumber(int index)$/;"	f	class:OVR::JSON
GetArraySize	Src/OVR_JSON.cpp	/^int JSON::GetArraySize()$/;"	f	class:OVR::JSON
GetArrayString	Src/OVR_JSON.cpp	/^const char* JSON::GetArrayString(int index)$/;"	f	class:OVR::JSON
GetAxisAngle	Src/Kernel/OVR_Math.h	/^    void GetAxisAngle(Vector3<T>* axis, T* angle) const$/;"	f	class:OVR::Quat
GetBaseOVRPath	Src/OVR_Profile.cpp	/^String GetBaseOVRPath(bool create_dir)$/;"	f	namespace:OVR
GetBlockingTimeoutSec	Src/Net/OVR_Socket.h	/^    int            GetBlockingTimeoutSec() const$/;"	f	class:OVR::Net::BerkleySocket
GetBlockingTimeoutUsec	Src/Net/OVR_Socket.h	/^    int            GetBlockingTimeoutUsec() const$/;"	f	class:OVR::Net::BerkleySocket
GetBoolByName	Src/OVR_JSON.cpp	/^bool JSON::GetBoolByName(const char *name, bool defValue)$/;"	f	class:OVR::JSON
GetBoolValue	Src/OVR_Profile.cpp	/^bool Profile::GetBoolValue(const char* key, bool default_val) const$/;"	f	class:OVR::Profile
GetBoolValue	Src/Service/Service_NetClient.cpp	/^bool NetClient::GetBoolValue(VirtualHmdId hmd, const char* key, bool default_val)$/;"	f	class:OVR::Service::NetClient
GetBuffer	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLuint         GetBuffer() { return GLBuffer; }$/;"	f	class:OVR::CAPI::GL::Buffer
GetByteIndex	Src/Kernel/OVR_String.h	/^    size_t      GetByteIndex(size_t index) const { return (size_t)UTF8Util::GetByteIndex(index, GetData()->Data); }$/;"	f	class:OVR::String
GetByteIndex	Src/Kernel/OVR_UTF8Util.cpp	/^intptr_t OVR_STDCALL GetByteIndex(intptr_t index, const char *putf8str, intptr_t length)$/;"	f	namespace:OVR::UTF8Util
GetCPUCount	Src/Kernel/OVR_ThreadsPthread.cpp	/^int     Thread::GetCPUCount()$/;"	f	class:OVR::Thread
GetCachedHash	Src/Kernel/OVR_Hash.h	/^    size_t  GetCachedHash(size_t maskValue) const  { OVR_UNUSED(maskValue); return HashValue; }$/;"	f	class:OVR::HashsetCachedEntry
GetCachedHash	Src/Kernel/OVR_Hash.h	/^    size_t  GetCachedHash(size_t maskValue) const  { OVR_UNUSED(maskValue); return HashValue; }$/;"	f	class:OVR::HashsetCachedNodeEntry
GetCachedHash	Src/Kernel/OVR_Hash.h	/^    size_t  GetCachedHash(size_t maskValue) const  { return HashF()(Value) & maskValue; }$/;"	f	class:OVR::HashsetEntry
GetCachedHash	Src/Kernel/OVR_Hash.h	/^    size_t  GetCachedHash(size_t maskValue) const  { return HashF()(Value) & maskValue; }$/;"	f	class:OVR::HashsetNodeEntry
GetCameraDriverVersion	Src/Util/Util_SystemInfo.cpp	/^String GetCameraDriverVersion()$/;"	f	namespace:OVR::Util
GetCapacity	Src/Kernel/OVR_Array.h	/^    size_t  GetCapacity()   const       { return Data.GetCapacity(); }$/;"	f	class:OVR::ArrayBase
GetCapacity	Src/Kernel/OVR_Array.h	/^    size_t GetCapacity()    const      { return Capacity; }$/;"	f	struct:OVR::ArrayConstPolicy
GetCapacity	Src/Kernel/OVR_Array.h	/^    size_t GetCapacity()    const      { return Capacity; }$/;"	f	struct:OVR::ArrayDefaultPolicy
GetCapacity	Src/Kernel/OVR_Array.h	/^    size_t GetCapacity() const $/;"	f	struct:OVR::ArrayDataBase
GetCapacity	Src/Kernel/OVR_Deque.h	/^inline size_t Deque<Elem, Allocator>::GetCapacity(void) const$/;"	f	class:OVR::Deque
GetCaseInsensitive	Src/Kernel/OVR_StringHash.h	/^    U*  GetCaseInsensitive(const String& key)$/;"	f	class:OVR::StringHash
GetCaseInsensitive	Src/Kernel/OVR_StringHash.h	/^    bool    GetCaseInsensitive(const String& key, U* pvalue) const$/;"	f	class:OVR::StringHash
GetCaseInsensitive	Src/Kernel/OVR_StringHash.h	/^    const U* GetCaseInsensitive(const String& key) const   $/;"	f	class:OVR::StringHash
GetCenterPupilDepthFromRenderInfo	Src/CAPI/CAPI_HMDState.cpp	/^static float GetCenterPupilDepthFromRenderInfo(HmdRenderInfo* hmdRenderInfo)$/;"	f	namespace:OVR::CAPI
GetCharAt	Src/Kernel/OVR_String.cpp	/^uint32_t String::GetCharAt(size_t index) const $/;"	f	class:OVR::String
GetCharAt	Src/Kernel/OVR_UTF8Util.cpp	/^uint32_t OVR_STDCALL GetCharAt(intptr_t index, const char* putf8str, intptr_t length)$/;"	f	namespace:OVR::UTF8Util
GetConnectionAtIndex	Src/Net/OVR_Session.cpp	/^Ptr<Connection> Session::GetConnectionAtIndex(int index)$/;"	f	class:OVR::Net::Session
GetConnectionCount	Src/Net/OVR_Session.h	/^    int             GetConnectionCount() const$/;"	f	class:OVR::Net::Session
GetContainer	Src/Kernel/OVR_Hash.h	/^        const SelfType* GetContainer() const$/;"	f	struct:OVR::HashSetBase::ConstIterator
GetCount	Src/CAPI/CAPI_FrameTimeManager.h	/^    double  GetCount() const { return Count; }$/;"	f	struct:OVR::CAPI::TimeDeltaCollector
GetCurrentContext	Src/CAPI/GL/CAPI_GLE.cpp	/^    OVR::GLEContext* OVR::GLEContext::GetCurrentContext()$/;"	f	class:OVR::GLEContext
GetCurrentPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::ThreadPriority Thread::GetCurrentPriority()$/;"	f	class:OVR::Thread
GetCurrentProcessId	Src/Service/Service_NetClient.cpp	31;"	d	file:
GetCurrentProfileLastHSWTime	Src/CAPI/CAPI_HSWDisplay.cpp	/^time_t HSWDisplay::GetCurrentProfileLastHSWTime() const$/;"	f	class:OVR::CAPI::HSWDisplay
GetCurrentThreadId	Src/Kernel/OVR_ThreadsPthread.cpp	/^ThreadId GetCurrentThreadId()$/;"	f	namespace:OVR
GetData	Src/Kernel/OVR_SharedMemory.cpp	/^        void* GetData()$/;"	f	class:OVR::FakeMemoryBlock
GetData	Src/Kernel/OVR_SharedMemory.h	/^	void* GetData() const$/;"	f	class:OVR::SharedMemory
GetData	Src/Kernel/OVR_String.h	/^    inline DataDesc*   GetData() const$/;"	f	class:OVR::String
GetData	Src/Net/OVR_BitStream.h	/^	inline char* GetData( void ) const {return (char*) data;}$/;"	f	class:OVR::Net::BitStream
GetDataPtr	Src/Kernel/OVR_Array.h	/^          ValueType* GetDataPtr()       { return Data.Data; }$/;"	f	class:OVR::ArrayBase
GetDataPtr	Src/Kernel/OVR_Array.h	/^    const ValueType* GetDataPtr() const { return Data.Data; }$/;"	f	class:OVR::ArrayBase
GetDebugNameEyeCupType	Src/Util/Util_Render_Stereo.cpp	/^char const* GetDebugNameEyeCupType ( EyeCupType eyeCupType )$/;"	f	namespace:OVR::Util::Render
GetDebugNameHmdType	Src/Util/Util_Render_Stereo.cpp	/^char const* GetDebugNameHmdType ( HmdTypeEnum hmdType )$/;"	f	namespace:OVR::Util::Render
GetDefaultLog	Src/Kernel/OVR_Log.cpp	/^Log* Log::GetDefaultLog()$/;"	f	class:OVR::Log
GetDefaultProfile	Src/OVR_Profile.cpp	/^Profile* ProfileManager::GetDefaultProfile(HmdTypeEnum device)$/;"	f	class:OVR::ProfileManager
GetDefaultTexture	Src/CAPI/CAPI_HSWDisplay.cpp	/^const uint8_t* HSWDisplay::GetDefaultTexture(size_t& TextureSize)$/;"	f	class:OVR::CAPI::HSWDisplay
GetDefaultUser	Src/OVR_Profile.cpp	/^const char* ProfileManager::GetDefaultUser(const ProfileDeviceKey& deviceKey)$/;"	f	class:OVR::ProfileManager
GetDefaultUser	Src/OVR_Profile.cpp	/^const char* ProfileManager::GetDefaultUser(const char* product, const char* serial)$/;"	f	class:OVR::ProfileManager
GetDefaultUserProfile	Src/OVR_Profile.cpp	/^Profile* ProfileManager::GetDefaultUserProfile(const ProfileDeviceKey& deviceKey)$/;"	f	class:OVR::ProfileManager
GetDesc	Src/CAPI/CAPI_HMDRenderState.cpp	/^ovrHmdDesc HMDRenderState::GetDesc() const$/;"	f	class:OVR::CAPI::HMDRenderState
GetDisplay	Src/Displays/OVR_Linux_Display.cpp	/^Ptr<Display> Display::GetDisplay( int index, DisplaySearchHandle* handle )$/;"	f	class:OVR::Display
GetDisplay	Src/Displays/OVR_Linux_SDKWindow.h	/^    _XDisplay* GetDisplay()         {return mXDisplay;}$/;"	f	class:OVR::SDKWindow
GetDisplayCount	Src/Displays/OVR_Linux_Display.cpp	/^int Display::GetDisplayCount(DisplaySearchHandle* handle, bool extended, bool applicationOnly, bool edidInfo)$/;"	f	class:OVR::Display
GetDisplayDriverVersion	Src/Util/Util_SystemInfo.cpp	/^String GetDisplayDriverVersion()$/;"	f	namespace:OVR::Util
GetDisplaySearchHandle	Src/Displays/OVR_Linux_Display.cpp	/^DisplaySearchHandle* Display::GetDisplaySearchHandle()$/;"	f	class:OVR::Display
GetDistortionRotation	Src/Displays/OVR_Linux_SDKWindow.h	/^    DistortionRotation GetDistortionRotation() {return mDeviceScreen.rotation;}$/;"	f	class:OVR::SDKWindow
GetDoubleValue	Src/OVR_Profile.cpp	/^double Profile::GetDoubleValue(const char* key, double default_val) const$/;"	f	class:OVR::Profile
GetDoubleValues	Src/OVR_Profile.cpp	/^int Profile::GetDoubleValues(const char* key, double* values, int num_vals) const$/;"	f	class:OVR::Profile
GetDrawable	Src/Displays/OVR_Linux_SDKWindow.h	/^    Window GetDrawable()            {return mXWindow;}$/;"	f	class:OVR::SDKWindow
GetDriverMode	Src/Displays/OVR_Linux_Display.cpp	/^bool Display::GetDriverMode(bool& driverInstalled, bool& compatMode, bool& hideDK1Mode)$/;"	f	class:OVR::Display
GetDriverMode	Src/Service/Service_NetClient.cpp	/^bool NetClient::GetDriverMode(bool& driverInstalled, bool& compatMode, bool& hideDK1Mode)$/;"	f	class:OVR::Service::NetClient
GetEncodeCharSize	Src/Kernel/OVR_UTF8Util.cpp	/^int OVR_STDCALL GetEncodeCharSize(uint32_t ucs_character)$/;"	f	namespace:OVR::UTF8Util
GetEncodeStringSize	Src/Kernel/OVR_UTF8Util.cpp	/^intptr_t OVR_STDCALL GetEncodeStringSize(const wchar_t* pchar, intptr_t length)$/;"	f	namespace:OVR::UTF8Util
GetErrorCode	Src/Kernel/OVR_File.h	/^    int         GetErrorCode()      { return 0; }$/;"	f	class:OVR::MemoryFile
GetErrorCode	Src/Kernel/OVR_File.h	/^    virtual int         GetErrorCode()                              { return pFile->GetErrorCode(); }$/;"	f	class:OVR::DelegatedFile
GetErrorCode	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::GetErrorCode()$/;"	f	class:OVR::FILEFile
GetErrorCode	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         GetErrorCode()              { return Error_FileNotFound; }$/;"	f	class:OVR::UnopenedFile
GetErrorCode	Src/Kernel/OVR_SysFile.cpp	/^int SysFile::GetErrorCode()$/;"	f	class:OVR::SysFile
GetEulerAngles	Src/Kernel/OVR_Math.h	/^    void GetEulerAngles(T *a, T *b, T *c) const $/;"	f	class:OVR::Quat
GetEulerAngles	Src/Kernel/OVR_Math.h	/^    void GetEulerAngles(T *a, T *b, T *c) const$/;"	f	class:OVR::Quat
GetEulerAnglesABA	Src/Kernel/OVR_Math.h	/^    void GetEulerAnglesABA(T *a, T *b, T *c) const$/;"	f	class:OVR::Quat
GetEvent	Src/Kernel/OVR_ThreadCommandQueue.h	/^        NotifyEvent* GetEvent() const   { return toCommand()->pEvent; }$/;"	f	class:OVR::ThreadCommand::PopBuffer
GetExitCode	Src/Kernel/OVR_Threads.h	/^    inline int    GetExitCode() const { return ExitCode; }$/;"	f	class:OVR::Thread
GetExitFlag	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::GetExitFlag() const$/;"	f	class:OVR::Thread
GetExtension	Src/Kernel/OVR_String_PathUtil.cpp	/^String  String::GetExtension() const$/;"	f	class:OVR::String
GetEyeCenter	Src/OVR_Stereo.h	/^    EyeConfig GetEyeCenter() const$/;"	f	struct:OVR::HmdRenderInfo
GetEyePredictionPose	Src/CAPI/CAPI_FrameTimeManager.cpp	/^Posef FrameTimeManager::GetEyePredictionPose(ovrHmd hmd, ovrEyeType eye)$/;"	f	class:OVR::CAPI::FrameTimeManager
GetEyePredictionTime	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double FrameTimeManager::GetEyePredictionTime(ovrEyeType eye, unsigned int frameIndex)$/;"	f	class:OVR::CAPI::FrameTimeManager
GetEyePredictionTracking	Src/CAPI/CAPI_FrameTimeManager.cpp	/^ovrTrackingState FrameTimeManager::GetEyePredictionTracking(ovrHmd hmd, ovrEyeType eye, unsigned int frameIndex)$/;"	f	class:OVR::CAPI::FrameTimeManager
GetEyeRenderParams	Src/Util/Util_Render_Stereo.cpp	/^const StereoEyeParamsWithOrtho& StereoConfig::GetEyeRenderParams(StereoEye eye)$/;"	f	class:OVR::Util::Render::StereoConfig
GetFBConfig	Src/Displays/OVR_Linux_SDKWindow.h	/^    GLXFBConfig GetFBConfig()       {return mFBConfig;}$/;"	f	class:OVR::SDKWindow
GetFOVTextureSize	Src/CAPI/CAPI_HMDRenderState.cpp	/^ovrSizei HMDRenderState::GetFOVTextureSize(int eye, ovrFovPort fov, float pixelsPerDisplayPixel) const$/;"	f	class:OVR::CAPI::HMDRenderState
GetFilePath	Src/Kernel/OVR_File.h	/^    const char* GetFilePath()       { return FilePath.ToCStr(); }$/;"	f	class:OVR::MemoryFile
GetFilePath	Src/Kernel/OVR_File.h	/^    virtual const char* GetFilePath()                               { return pFile->GetFilePath(); }    $/;"	f	class:OVR::DelegatedFile
GetFilePath	Src/Kernel/OVR_FileFILE.cpp	/^const char* FILEFile::GetFilePath()$/;"	f	class:OVR::FILEFile
GetFilePath	Src/Kernel/OVR_SysFile.cpp	/^    virtual const char* GetFilePath()               { return 0; }$/;"	f	class:OVR::UnopenedFile
GetFileStat	Src/Kernel/OVR_FileFILE.cpp	/^bool    SysFile::GetFileStat(FileStat* pfileStat, const String& path)$/;"	f	class:OVR::SysFile
GetFileVersionString	Src/Util/Util_SystemInfo.cpp	/^String GetFileVersionString(String \/*filePath*\/)$/;"	f	namespace:OVR::Util
GetFileVersionString	Src/Util/Util_SystemInfo.cpp	/^String GetFileVersionString(String filePath)$/;"	f	namespace:OVR::Util
GetFilename	Src/Kernel/OVR_String_PathUtil.cpp	/^String  String::GetFilename() const$/;"	f	class:OVR::String
GetFirst	Src/Kernel/OVR_List.h	/^          ValueType* GetFirst()       { return (ValueType*)Root.pNext; }$/;"	f	class:OVR::List
GetFirst	Src/Kernel/OVR_List.h	/^    const ValueType* GetFirst() const { return (const ValueType*)Root.pNext; }$/;"	f	class:OVR::List
GetFirstCharAt	Src/Kernel/OVR_String.cpp	/^uint32_t String::GetFirstCharAt(size_t index, const char** offset) const$/;"	f	class:OVR::String
GetFirstItem	Src/OVR_JSON.h	/^    JSON*           GetFirstItem()           { return (!Children.IsEmpty()) ? Children.GetFirst() : 0; }$/;"	f	class:OVR::JSON
GetFloatValue	Src/OVR_Profile.cpp	/^float Profile::GetFloatValue(const char* key, float default_val) const$/;"	f	class:OVR::Profile
GetFloatValues	Src/OVR_Profile.cpp	/^int Profile::GetFloatValues(const char* key, float* values, int num_vals) const$/;"	f	class:OVR::Profile
GetFrameLatencyTestDrawColor	Src/CAPI/CAPI_FrameTimeManager.h	/^    void GetFrameLatencyTestDrawColor(unsigned char outColor[3])$/;"	f	class:OVR::CAPI::FrameTimeManager
GetFrameTiming	Src/CAPI/CAPI_FrameTimeManager.cpp	/^FrameTimeManager::Timing FrameTimeManager::GetFrameTiming(unsigned frameIndex)$/;"	f	class:OVR::CAPI::FrameTimeManager
GetFrameTiming	Src/CAPI/CAPI_FrameTimeManager.h	/^    const Timing& GetFrameTiming() const { return FrameTiming; }$/;"	f	class:OVR::CAPI::FrameTimeManager
GetFramebufferViewport	Src/OVR_Stereo.cpp	/^Recti GetFramebufferViewport ( StereoEye eyeType, HmdRenderInfo const &hmd )$/;"	f	namespace:OVR
GetFrequencyInverse	Src/Kernel/OVR_Timer.cpp	/^    double GetFrequencyInverse()$/;"	f	struct:OVR::PerformanceTimer
GetFunction	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void (*GetFunction(const char *functionName))( void )$/;"	f	namespace:OVR::CAPI::GL
GetFunction	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void* GetFunction(const char* functionName)$/;"	f	namespace:OVR::CAPI::GL
GetGLShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^GLint ShaderSet::GetGLShader(Shader* s)$/;"	f	class:OVR::CAPI::GL::ShaderSet
GetGLVersionAndExtensions	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void GetGLVersionAndExtensions(GLVersionAndExtensions& versionInfo)$/;"	f	namespace:OVR::CAPI::GL
GetGlobalLog	Src/Kernel/OVR_Log.cpp	/^Log* Log::GetGlobalLog()$/;"	f	class:OVR::Log
GetGranularity	Src/Kernel/OVR_Array.h	/^    size_t GetGranularity() const { return 4; }$/;"	f	struct:OVR::ArrayDefaultPolicy
GetGranularity	Src/Kernel/OVR_Array.h	/^    size_t GetGranularity() const { return Granularity; }$/;"	f	struct:OVR::ArrayConstPolicy
GetGraphicsCardList	Src/Util/Util_SystemInfo.cpp	/^void GetGraphicsCardList( Array< String > &gpus)$/;"	f	namespace:OVR::Util
GetGraphicsCardList	Src/Util/Util_SystemInfo.cpp	/^void GetGraphicsCardList(OVR::Array< OVR::String > &gpus)$/;"	f	namespace:OVR::Util
GetGrowSize	Src/Kernel/OVR_String.h	/^    size_t      GetGrowSize() const         { return GrowSize; }$/;"	f	class:OVR::StringBuffer
GetGuidInt	Src/Util/Util_SystemInfo.cpp	/^uint64_t GetGuidInt()$/;"	f	namespace:OVR::Util
GetGuidString	Src/Util/Util_SystemInfo.cpp	/^String GetGuidString()$/;"	f	namespace:OVR::Util
GetHash	Src/Kernel/OVR_Hash.h	/^        inline size_t GetHash() const            { return HashF()(*pFirst); } $/;"	f	struct:OVR::HashNode::NodeRef
GetHash	Src/Kernel/OVR_Hash.h	/^    inline size_t GetHash() const           { return HashF()(First); }$/;"	f	struct:OVR::HashNode
GetHeapType	Src/Kernel/OVR_String.h	/^    inline HeapType    GetHeapType() const { return (HeapType) (HeapTypeBits & HT_Mask); }$/;"	f	class:OVR::String
GetHeight	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual int GetHeight() const { return Height; }$/;"	f	class:OVR::CAPI::GL::Texture
GetHmdRenderInfo	Src/Util/Util_Render_Stereo.h	/^    const HmdRenderInfo& GetHmdRenderInfo() const { return Hmd; }$/;"	f	class:OVR::Util::Render::StereoConfig
GetHorizontalFovDegrees	Src/OVR_Stereo.h	/^    float GetHorizontalFovDegrees() const   { return RadToDegree(GetHorizontalFovRadians()); }$/;"	f	struct:OVR::FovPort
GetHorizontalFovRadians	Src/OVR_Stereo.h	/^    float GetHorizontalFovRadians() const   { return atanf(LeftTan)  + atanf(RightTan); }$/;"	f	struct:OVR::FovPort
GetIncarnation	Src/CAPI/GL/CAPI_GL_Util.h	/^    int  GetIncarnation() const { return incarnation; }$/;"	f	class:OVR::CAPI::GL::Context
GetIndex	Src/Kernel/OVR_Array.h	/^        intptr_t GetIndex()  const { return CurIndex; }$/;"	f	class:OVR::ArrayBase::ConstIterator
GetIndex	Src/Kernel/OVR_Array.h	/^        intptr_t GetIndex() const { return CurIndex; }$/;"	f	class:OVR::ArrayBase::Iterator
GetIndex	Src/Kernel/OVR_Hash.h	/^        intptr_t GetIndex() const$/;"	f	struct:OVR::HashSetBase::ConstIterator
GetInputLayout	Src/CAPI/GL/CAPI_GL_Util.h	/^    void*       GetInputLayout() const  { return InputLayout; }$/;"	f	class:OVR::CAPI::GL::ShaderFill
GetInstance	Src/Kernel/OVR_Allocator.h	/^    static Allocator* GetInstance() { return pInstance; }$/;"	f	class:OVR::Allocator
GetInstance	Src/Kernel/OVR_System.h	/^    static OVR_FORCE_INLINE T* GetInstance()$/;"	f	class:OVR::SystemSingletonBase
GetIntByName	Src/OVR_JSON.cpp	/^int JSON::GetIntByName(const char *name, int defValue)$/;"	f	class:OVR::JSON
GetIntValue	Src/OVR_Profile.cpp	/^int Profile::GetIntValue(const char* key, int default_val) const$/;"	f	class:OVR::Profile
GetIntValue	Src/Service/Service_NetClient.cpp	/^int NetClient::GetIntValue(VirtualHmdId hmd, const char* key, int default_val)$/;"	f	class:OVR::Service::NetClient
GetItemByIndex	Src/OVR_JSON.cpp	/^JSON* JSON::GetItemByIndex(unsigned index)$/;"	f	class:OVR::JSON
GetItemByName	Src/OVR_JSON.cpp	/^JSON* JSON::GetItemByName(const char* name)$/;"	f	class:OVR::JSON
GetItemCount	Src/OVR_JSON.cpp	/^unsigned JSON::GetItemCount() const$/;"	f	class:OVR::JSON
GetLast	Src/Kernel/OVR_List.h	/^          ValueType* GetLast ()       { return (ValueType*)Root.pPrev; }$/;"	f	class:OVR::List
GetLast	Src/Kernel/OVR_List.h	/^    const ValueType* GetLast () const { return (const ValueType*)Root.pPrev; }$/;"	f	class:OVR::List
GetLastItem	Src/OVR_JSON.h	/^    JSON*           GetLastItem()            { return (!Children.IsEmpty()) ? Children.GetLast() : 0; }$/;"	f	class:OVR::JSON
GetLatencyTimings	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameLatencyTracker::GetLatencyTimings(float& latencyRender, float& latencyTimewarp, float& latencyPostPresent)$/;"	f	class:OVR::CAPI::FrameLatencyTracker
GetLatencyTimings	Src/CAPI/CAPI_FrameTimeManager.h	/^    void    GetLatencyTimings(float& latencyRender, float& latencyTimewarp, float& latencyPostPresent)$/;"	f	class:OVR::CAPI::FrameTimeManager
GetLatestResults	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::GetLatestResults(LatencyStatisticsResults* results)$/;"	f	class:OVR::CAPI::LagStatsCalculator
GetLength	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::GetLength()$/;"	f	class:OVR::BufferedFile
GetLength	Src/Kernel/OVR_File.h	/^    int         GetLength()         { return FileSize; }$/;"	f	class:OVR::MemoryFile
GetLength	Src/Kernel/OVR_File.h	/^    virtual int         GetLength()                                 { return pFile->GetLength(); }$/;"	f	class:OVR::DelegatedFile
GetLength	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::GetLength()$/;"	f	class:OVR::FILEFile
GetLength	Src/Kernel/OVR_String.cpp	/^size_t String::GetLength() const $/;"	f	class:OVR::String
GetLength	Src/Kernel/OVR_String.cpp	/^size_t StringBuffer::GetLength() const$/;"	f	class:OVR::StringBuffer
GetLength	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         GetLength()                 { return 0; }$/;"	f	class:OVR::UnopenedFile
GetLength	Src/Kernel/OVR_UTF8Util.cpp	/^intptr_t OVR_STDCALL GetLength(const char* buf, intptr_t buflen)$/;"	f	namespace:OVR::UTF8Util
GetLengthFlag	Src/Kernel/OVR_String.h	/^        size_t      GetLengthFlag()  const  { return Size & GetLengthFlagBit(); }$/;"	f	struct:OVR::String::DataDesc
GetLengthFlagBit	Src/Kernel/OVR_String.h	/^        static size_t GetLengthFlagBit()     { return size_t(1) << Flag_LengthIsSizeShift; }$/;"	f	struct:OVR::String::DataDesc
GetLengthI	Src/Kernel/OVR_String.h	/^    int         GetLengthI() const      { return (int)GetLength(); }$/;"	f	class:OVR::String
GetLocalProtocolVersion	Src/Service/Service_NetClient.cpp	/^void NetClient::GetLocalProtocolVersion(int& major, int& minor, int& patch)$/;"	f	class:OVR::Service::NetClient
GetLockAddRef	Src/Kernel/OVR_Atomic.cpp	/^Lock* SharedLock::GetLockAddRef()$/;"	f	class:OVR::SharedLock
GetLoggingMask	Src/Kernel/OVR_Log.h	/^    unsigned        GetLoggingMask() const            { return LoggingMask; }$/;"	f	class:OVR::Log
GetMaxSideTan	Src/OVR_Stereo.h	/^    float GetMaxSideTan() const$/;"	f	struct:OVR::FovPort
GetMaxs	Src/Kernel/OVR_Math.h	/^	Vector3<T> & GetMaxs() { return b[1]; }$/;"	f	class:OVR::Bounds3
GetMaxs	Src/Kernel/OVR_Math.h	/^	const Vector3<T> & GetMaxs() const { return b[1]; }$/;"	f	class:OVR::Bounds3
GetMedianTimeDelta	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double TimeDeltaCollector::GetMedianTimeDelta() const$/;"	f	class:OVR::CAPI::TimeDeltaCollector
GetMedianTimeDeltaNoFirmwareHack	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double TimeDeltaCollector::GetMedianTimeDeltaNoFirmwareHack() const$/;"	f	class:OVR::CAPI::TimeDeltaCollector
GetMinCapacity	Src/Kernel/OVR_Array.h	/^    size_t GetMinCapacity() const { return 0; }$/;"	f	struct:OVR::ArrayDefaultPolicy
GetMinCapacity	Src/Kernel/OVR_Array.h	/^    size_t GetMinCapacity() const { return MinCapacity; }$/;"	f	struct:OVR::ArrayConstPolicy
GetMins	Src/Kernel/OVR_Math.h	/^	Vector3<T> & GetMins() { return b[0]; }$/;"	f	class:OVR::Bounds3
GetMins	Src/Kernel/OVR_Math.h	/^	const Vector3<T> & GetMins() const { return b[0]; }$/;"	f	class:OVR::Bounds3
GetMostRecentFrame	Src/Util/Util_LatencyTest2Reader.cpp	/^const FrameTimeRecord& FrameTimeRecordSet::GetMostRecentFrame()$/;"	f	class:OVR::Util::FrameTimeRecordSet
GetNeckModelFromProfile	Src/CAPI/CAPI_HMDState.cpp	/^static Vector3f GetNeckModelFromProfile(Profile* profile)$/;"	f	namespace:OVR::CAPI
GetNetId	Src/CAPI/CAPI_HMDState.h	/^	VirtualHmdId GetNetId() { return NetId; }$/;"	f	class:OVR::CAPI::HMDState
GetNext	Src/Kernel/OVR_List.h	/^    inline static       ValueType* GetNext(      ValueType* p) { return (ValueType*)p->pNext; }$/;"	f	class:OVR::List
GetNext	Src/Kernel/OVR_List.h	/^    inline static const ValueType* GetNext(const ValueType* p) { return (const ValueType*)p->pNext; }$/;"	f	class:OVR::List
GetNextChar	Src/Kernel/OVR_String.cpp	/^uint32_t String::GetNextChar(const char** offset) const$/;"	f	class:OVR::String
GetNextDrawColor	Src/CAPI/CAPI_FrameTimeManager.cpp	/^unsigned char FrameLatencyTracker::GetNextDrawColor()$/;"	f	class:OVR::CAPI::FrameLatencyTracker
GetNextItem	Src/OVR_JSON.h	/^    JSON*           GetNextItem(JSON* item)  { return Children.IsNull(item->pNext) ? 0 : item->pNext; }$/;"	f	class:OVR::JSON
GetNextToken	Src/Kernel/OVR_String.h	/^    StringDataPtr GetNextToken(char separator = ':') const$/;"	f	class:OVR::StringDataPtr
GetNumBytes	Src/Kernel/OVR_Array.h	/^    size_t  GetNumBytes()   const       { return Data.GetCapacity() * sizeof(ValueType); }$/;"	f	class:OVR::ArrayBase
GetNumValues	Src/OVR_Profile.cpp	/^int Profile::GetNumValues(const char* key) const$/;"	f	class:OVR::Profile
GetNumberByName	Src/OVR_JSON.cpp	/^double JSON::GetNumberByName(const char *name, double defValue)$/;"	f	class:OVR::JSON
GetNumberOfBitsAllocated	Src/Net/OVR_BitStream.cpp	/^BitSize_t BitStream::GetNumberOfBitsAllocated(void) const$/;"	f	class:OVR::Net::BitStream
GetNumberOfBitsUsed	Src/Net/OVR_BitStream.h	/^	inline BitSize_t GetNumberOfBitsUsed( void ) const {return GetWriteOffset();}$/;"	f	class:OVR::Net::BitStream
GetNumberOfBytesUsed	Src/Net/OVR_BitStream.h	/^	inline BitSize_t GetNumberOfBytesUsed( void ) const {return BITS_TO_BYTES( numberOfBitsUsed );}$/;"	f	class:OVR::Net::BitStream
GetNumberOfUnreadBits	Src/Net/OVR_BitStream.h	/^	inline BitSize_t GetNumberOfUnreadBits( void ) const {return numberOfBitsUsed - readOffset;}$/;"	f	class:OVR::Net::BitStream
GetNumberValue	Src/Service/Service_NetClient.cpp	/^double NetClient::GetNumberValue(VirtualHmdId hmd, const char* key, double default_val)$/;"	f	class:OVR::Service::NetClient
GetNumberValues	Src/Service/Service_NetClient.cpp	/^int NetClient::GetNumberValues(VirtualHmdId hmd, const char* key, double* values, int num_vals)$/;"	f	class:OVR::Service::NetClient
GetOSHandle	Src/Kernel/OVR_Threads.h	/^    pthread_t      GetOSHandle() const { return ThreadHandle; }$/;"	f	class:OVR::Thread
GetOSHandle	Src/Kernel/OVR_Threads.h	/^    void*          GetOSHandle() const { return ThreadHandle; }$/;"	f	class:OVR::Thread
GetOSPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^int Thread::GetOSPriority(ThreadPriority p)$/;"	f	class:OVR::Thread
GetOVRPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::ThreadPriority Thread::GetOVRPriority(int osPriority)$/;"	f	class:OVR::Thread
GetObserver	Src/CAPI/CAPI_LatencyStatistics.h	/^    ObserverScope<LatencyStatisticsSlot>* GetObserver() { return &_Observer; }$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
GetOrthoProjection	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::GetOrthoProjection(const HMDRenderState& RenderState, Matrix4f OrthoProjection[2])$/;"	f	class:OVR::CAPI::HSWDisplay
GetOverdriveScales	Src/CAPI/CAPI_DistortionRenderer.cpp	/^void DistortionRenderer::GetOverdriveScales(float& outRiseScale, float& outFallScale)$/;"	f	class:OVR::CAPI::DistortionRenderer
GetPath	Src/Kernel/OVR_String_PathUtil.cpp	/^String  String::GetPath() const$/;"	f	class:OVR::String
GetPhysicalScreenFov	Src/OVR_Stereo.cpp	/^FovPort GetPhysicalScreenFov ( StereoEye eyeType, DistortionRenderDesc const &distortion )$/;"	f	namespace:OVR
GetPort	Src/Net/OVR_Unix_Socket.cpp	/^UInt16 SockAddr::GetPort()$/;"	f	class:OVR::Net::SockAddr
GetPos	Src/Kernel/OVR_Math.h	/^    Vector2<T> GetPos() const                { return Vector2<T>(x, y); }$/;"	f	class:OVR::Rect
GetPoseAtTime	Src/Tracking/Tracking_SensorStateReader.cpp	/^bool SensorStateReader::GetPoseAtTime(double absoluteTime, Posef& transform) const$/;"	f	class:OVR::Tracking::SensorStateReader
GetPredictedVisiblePixelPoseEnd	Src/Util/Util_Render_Stereo.cpp	/^bool TimewarpMachine::GetPredictedVisiblePixelPoseEnd(SensorStateReader* reader, Posef& pose)$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetPredictedVisiblePixelPoseStart	Src/Util/Util_Render_Stereo.cpp	/^bool TimewarpMachine::GetPredictedVisiblePixelPoseStart(SensorStateReader* reader, Posef& pose)$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetPrev	Src/Kernel/OVR_List.h	/^    inline static       ValueType* GetPrev(      ValueType* p) { return (ValueType*)p->pPrev; }$/;"	f	class:OVR::List
GetPrev	Src/Kernel/OVR_List.h	/^    inline static const ValueType* GetPrev(const ValueType* p) { return (const ValueType*)p->pPrev; }$/;"	f	class:OVR::List
GetPrevItem	Src/OVR_JSON.h	/^    JSON*           GetPrevItem(JSON* item)  { return Children.IsNull(item->pPrev) ? 0 : item->pPrev; }$/;"	f	class:OVR::JSON
GetPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::ThreadPriority Thread::GetPriority()$/;"	f	class:OVR::Thread
GetProcessInfo	Src/Util/Util_SystemInfo.cpp	/^const char * GetProcessInfo()$/;"	f	namespace:OVR::Util
GetProfile	Src/OVR_Profile.cpp	/^Profile* ProfileManager::GetProfile(const ProfileDeviceKey& deviceKey, const char* user)$/;"	f	class:OVR::ProfileManager
GetProfilePath	Src/OVR_Profile.cpp	/^String ProfileManager::GetProfilePath()$/;"	f	class:OVR::ProfileManager
GetProjectionWithZoom	Src/Util/Util_Render_Stereo.cpp	/^Matrix4f StereoConfig::GetProjectionWithZoom ( StereoEye eye, float fovZoom ) const$/;"	f	class:OVR::Util::Render::StereoConfig
GetProtocol	Src/Kernel/OVR_String_PathUtil.cpp	/^String  String::GetProtocol() const$/;"	f	class:OVR::String
GetPtr	Src/Kernel/OVR_Array.h	/^        ValueType* GetPtr() const       { OVR_ASSERT(pArray); return &(*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::Iterator
GetPtr	Src/Kernel/OVR_Array.h	/^        const ValueType* GetPtr() const     { OVR_ASSERT(pArray); return &(*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::ConstIterator
GetPtr	Src/Kernel/OVR_Observer.h	/^	Observer<DelegateT>* GetPtr()$/;"	f	class:OVR::ObserverScope
GetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE C* GetPtr() const               { return pObject; }$/;"	f	class:OVR::Ptr
GetPtr	Src/Kernel/OVR_RefCount.h	/^    T* GetPtr() const { return pV; }$/;"	f	class:OVR::Pickable
GetRGBA	Src/Kernel/OVR_Color.h	/^    void  GetRGBA(float *r, float *g, float *b, float* a) const$/;"	f	struct:OVR::Color
GetRPC1	Src/Service/Service_NetSessionCommon.h	/^	Net::Plugins::RPC1* GetRPC1() const$/;"	f	class:OVR::Service::NetSessionCommon
GetRawRef	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE C*& GetRawRef()                 { return pObject; }$/;"	f	class:OVR::Ptr
GetReadOffset	Src/Net/OVR_BitStream.h	/^	inline BitSize_t GetReadOffset( void ) const {return readOffset;}$/;"	f	class:OVR::Net::BitStream
GetRecordSet	Src/Util/Util_LatencyTest2Reader.cpp	/^void RecordStateReader::GetRecordSet(FrameTimeRecordSet& recordset)$/;"	f	class:OVR::Util::RecordStateReader
GetRefCount	Src/Kernel/OVR_RefCount.h	/^    int             GetRefCount() const { return RefCount;  }$/;"	f	class:OVR::RefCountNTSImplCore
GetRefCount	Src/Kernel/OVR_RefCount.h	/^    int GetRefCount() const { return RefCount;  }$/;"	f	class:OVR::RefCountImplCore
GetRemoteProtocolVersion	Src/Service/Service_NetClient.cpp	/^bool NetClient::GetRemoteProtocolVersion(int& major, int& minor, int& patch)$/;"	f	class:OVR::Service::NetClient
GetRenderAPI	Src/CAPI/CAPI_DistortionRenderer.h	/^    ovrRenderAPIType GetRenderAPI() const { return RenderAPI; }$/;"	f	class:OVR::CAPI::DistortionRenderer
GetRenderAPIType	Src/CAPI/CAPI_HSWDisplay.h	/^    ovrRenderAPIType GetRenderAPIType() const \/\/ e.g. ovrRenderAPI_D3D11$/;"	f	class:OVR::CAPI::HSWDisplay
GetResolution	Src/Util/Util_ImageWindow.h	/^	void GetResolution( size_t& width, size_t& height ) { width = 0; height = 0; }$/;"	f	class:OVR::Util::ImageWindow
GetResolution	Src/Util/Util_ImageWindow.h	/^	void GetResolution( size_t& width, size_t& height ) { width = resolution.width; height = resolution.height; }$/;"	f	class:OVR::Util::ImageWindow
GetSeconds	Src/Kernel/OVR_Timer.cpp	/^double Timer::GetSeconds()$/;"	f	class:OVR::Timer
GetSensorStateAtTime	Src/Tracking/Tracking_SensorStateReader.cpp	/^bool SensorStateReader::GetSensorStateAtTime(double absoluteTime, TrackingState& ss) const$/;"	f	class:OVR::Tracking::SensorStateReader
GetSession	Src/Service/Service_NetSessionCommon.h	/^	Net::Session* GetSession() const$/;"	f	class:OVR::Service::NetSessionCommon
GetShader	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader* GetShader(int stage) { return Shaders[stage]; }$/;"	f	class:OVR::CAPI::GL::ShaderSet
GetShaders	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderSet*  GetShaders() const      { return Shaders; }$/;"	f	class:OVR::CAPI::GL::ShaderFill
GetShortFilename	Src/Kernel/OVR_File.cpp	/^const char* OVR_CDECL GetShortFilename(const char* purl)$/;"	f	namespace:OVR
GetSize	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual size_t GetSize() { return Size; }$/;"	f	class:OVR::CAPI::GL::Buffer
GetSize	Src/Kernel/OVR_Alg.h	/^    size_t GetSize() const { return Size; }$/;"	f	class:OVR::Alg::ArrayAdaptor
GetSize	Src/Kernel/OVR_Alg.h	/^    size_t GetSize() const { return Size; }$/;"	f	class:OVR::Alg::ConstArrayAdaptor
GetSize	Src/Kernel/OVR_Array.h	/^	size_t  GetSize()       const       { return Data.Size; }$/;"	f	class:OVR::ArrayBase
GetSize	Src/Kernel/OVR_Deque.h	/^inline size_t Deque<Elem, Allocator>::GetSize(void) const$/;"	f	class:OVR::Deque
GetSize	Src/Kernel/OVR_Hash.h	/^    inline size_t  GetSize() const              { return mHash.GetSize(); }    $/;"	f	class:OVR::Hash
GetSize	Src/Kernel/OVR_Hash.h	/^    size_t GetSize() const$/;"	f	class:OVR::HashSetBase
GetSize	Src/Kernel/OVR_Math.h	/^    Size<T>    GetSize() const               { return Size<T>(w, h); }$/;"	f	class:OVR::Rect
GetSize	Src/Kernel/OVR_String.h	/^        size_t      GetSize() const         { return Size & ~GetLengthFlagBit() ; }$/;"	f	struct:OVR::String::DataDesc
GetSize	Src/Kernel/OVR_String.h	/^    size_t      GetSize() const         { return GetData()->GetSize() ; }$/;"	f	class:OVR::String
GetSize	Src/Kernel/OVR_String.h	/^    size_t      GetSize() const         { return Size ; }$/;"	f	class:OVR::StringBuffer
GetSize	Src/Kernel/OVR_String.h	/^    size_t      GetSize() const { return Size; }$/;"	f	class:OVR::StringDataPtr
GetSize	Src/Kernel/OVR_ThreadCommandQueue.h	/^        size_t      GetSize() const     { return Size; }$/;"	f	class:OVR::ThreadCommand::PopBuffer
GetSize	Src/Kernel/OVR_ThreadCommandQueue.h	/^    size_t        GetSize() const   { return Size; }$/;"	f	class:OVR::ThreadCommand
GetSizeI	Src/Kernel/OVR_Alg.h	/^	int GetSizeI() const { return (int)GetSize(); }$/;"	f	class:OVR::Alg::ArrayAdaptor
GetSizeI	Src/Kernel/OVR_Alg.h	/^	int GetSizeI() const { return (int)GetSize(); }$/;"	f	class:OVR::Alg::ConstArrayAdaptor
GetSizeI	Src/Kernel/OVR_Array.h	/^	int     GetSizeI()      const       { return (int)Data.Size; }$/;"	f	class:OVR::ArrayBase
GetSizeI	Src/Kernel/OVR_Deque.h	/^	OVR_FORCE_INLINE int GetSizeI   (void)          const$/;"	f	class:OVR::Deque
GetSizeI	Src/Kernel/OVR_Hash.h	/^	inline int     GetSizeI() const             { return (int)GetSize(); }$/;"	f	class:OVR::Hash
GetSizeI	Src/Kernel/OVR_Hash.h	/^	int GetSizeI() const { return (int)GetSize(); }$/;"	f	class:OVR::HashSetBase
GetSizeI	Src/Kernel/OVR_Observer.h	/^	int GetSizeI() const$/;"	f	class:OVR::Observer
GetSizeI	Src/Kernel/OVR_SharedMemory.cpp	/^        int GetSizeI()$/;"	f	class:OVR::FakeMemoryBlock
GetSizeI	Src/Kernel/OVR_SharedMemory.h	/^	int GetSizeI() const$/;"	f	class:OVR::SharedMemory
GetSizePolicy	Src/Kernel/OVR_Array.h	/^    SizePolicyType* GetSizePolicy() const                  { return Data.Policy; }$/;"	f	class:OVR::ArrayBase
GetSocketHandle	Src/Net/OVR_Socket.h	/^    SocketHandle   GetSocketHandle() const$/;"	f	class:OVR::Net::BerkleySocket
GetSockname	Src/Net/OVR_Unix_Socket.cpp	/^SInt32 BerkleySocket::GetSockname(SockAddr *pSockAddrOut)$/;"	f	class:OVR::Net::BerkleySocket
GetStage	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderStage GetStage() const { return Stage; }$/;"	f	class:OVR::CAPI::GL::Shader
GetState	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::GetState(ovrHSWDisplayState *hswDisplayState) const$/;"	f	class:OVR::CAPI::HSWDisplay
GetState	Src/Kernel/OVR_Lockless.h	/^	T GetState() const$/;"	f	class:OVR::LocklessUpdater
GetStatus	Src/Tracking/Tracking_SensorStateReader.cpp	/^uint32_t SensorStateReader::GetStatus() const$/;"	f	class:OVR::Tracking::SensorStateReader
GetStereoMode	Src/Util/Util_Render_Stereo.h	/^    StereoMode  GetStereoMode() const           { return Mode; }$/;"	f	class:OVR::Util::Render::StereoConfig
GetStringByName	Src/OVR_JSON.cpp	/^String JSON::GetStringByName(const char *name, const String &defValue)$/;"	f	class:OVR::JSON
GetStringValue	Src/Service/Service_NetClient.cpp	/^const char* NetClient::GetStringValue(VirtualHmdId hmd, const char* key, const char* default_val)$/;"	f	class:OVR::Service::NetClient
GetSubject	Src/Kernel/OVR_Observer.h	/^	Ptr<Observer<DelegateT> > GetSubject(OVR::String key)$/;"	f	class:OVR::ObserverHash
GetSystemFileVersionString	Src/Util/Util_SystemInfo.cpp	/^String GetSystemFileVersionString(String \/*filePath*\/)$/;"	f	namespace:OVR::Util
GetSystemFileVersionString	Src/Util/Util_SystemInfo.cpp	/^String GetSystemFileVersionString(String filePath)$/;"	f	namespace:OVR::Util
GetTaggedProfile	Src/OVR_Profile.cpp	/^Profile* ProfileManager::GetTaggedProfile(const char** tag_names, const char** tags, int num_tags)$/;"	f	class:OVR::ProfileManager
GetThreadId	Src/Kernel/OVR_Threads.h	/^    ThreadId       GetThreadId() const { return (ThreadId)GetOSHandle(); }$/;"	f	class:OVR::Thread
GetThreadId	Src/Kernel/OVR_Threads.h	/^    ThreadId       GetThreadId() const { return IdValue; }$/;"	f	class:OVR::Thread
GetThreadState	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::ThreadState Thread::GetThreadState() const$/;"	f	class:OVR::Thread
GetTicksMs	Src/Kernel/OVR_Timer.h	/^    static uint32_t  OVR_STDCALL GetTicksMs()$/;"	f	class:OVR::Timer
GetTicksNanos	Src/Kernel/OVR_Timer.cpp	/^uint64_t Timer::GetTicksNanos()$/;"	f	class:OVR::Timer
GetTimeNanos	Src/Kernel/OVR_Timer.cpp	/^uint64_t PerformanceTimer::GetTimeNanos()$/;"	f	class:OVR::PerformanceTimer
GetTimeSeconds	Src/Kernel/OVR_Timer.cpp	/^uint64_t PerformanceTimer::GetTimeSeconds()$/;"	f	class:OVR::PerformanceTimer
GetTimeSecondsDouble	Src/Kernel/OVR_Timer.cpp	/^double PerformanceTimer::GetTimeSecondsDouble()$/;"	f	class:OVR::PerformanceTimer
GetTimewarpDeltaEnd	Src/Util/Util_Render_Stereo.cpp	/^bool TimewarpMachine::GetTimewarpDeltaEnd(SensorStateReader* reader, Posef const &renderedPose, Matrix4f& transform)$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetTimewarpDeltaStart	Src/Util/Util_Render_Stereo.cpp	/^bool TimewarpMachine::GetTimewarpDeltaStart(SensorStateReader* reader, Posef const &renderedPose, Matrix4f& transform)$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetTimewarpMatrices	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::GetTimewarpMatrices(ovrHmd hmd, ovrEyeType eyeId,$/;"	f	class:OVR::CAPI::FrameTimeManager
GetTimewarpPredictions	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::GetTimewarpPredictions(ovrEyeType eye, double timewarpStartEnd[2])$/;"	f	class:OVR::CAPI::FrameTimeManager
GetTranslation	Src/Kernel/OVR_Math.h	/^    Vector3<T> GetTranslation() const$/;"	f	class:OVR::Matrix4
GetTrimLeft	Src/Kernel/OVR_String.h	/^    StringDataPtr  GetTrimLeft(size_t size) const$/;"	f	class:OVR::StringDataPtr
GetTrimRight	Src/Kernel/OVR_String.h	/^    StringDataPtr  GetTrimRight(size_t size) const$/;"	f	class:OVR::StringDataPtr
GetUser	Src/OVR_Profile.cpp	/^const char* ProfileManager::GetUser(unsigned int index)$/;"	f	class:OVR::ProfileManager
GetUserCount	Src/OVR_Profile.cpp	/^int ProfileManager::GetUserCount()$/;"	f	class:OVR::ProfileManager
GetValue	Src/OVR_Profile.cpp	/^char* Profile::GetValue(const char* key, char* val, int val_length) const$/;"	f	class:OVR::Profile
GetValue	Src/OVR_Profile.cpp	/^const char* Profile::GetValue(const char* key)$/;"	f	class:OVR::Profile
GetVerticalFovDegrees	Src/OVR_Stereo.h	/^    float GetVerticalFovDegrees() const     { return RadToDegree(GetVerticalFovRadians()); }$/;"	f	struct:OVR::FovPort
GetVerticalFovRadians	Src/OVR_Stereo.h	/^    float GetVerticalFovRadians() const     { return atanf(UpTan)    + atanf(DownTan); }$/;"	f	struct:OVR::FovPort
GetViewRenderPredictionPose	Src/Util/Util_Render_Stereo.cpp	/^bool TimewarpMachine::GetViewRenderPredictionPose(SensorStateReader* reader, Posef& pose)$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetViewRenderPredictionTime	Src/Util/Util_Render_Stereo.cpp	/^double TimewarpMachine::GetViewRenderPredictionTime()$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetVisiblePixelTimeEnd	Src/Util/Util_Render_Stereo.cpp	/^double TimewarpMachine::GetVisiblePixelTimeEnd()$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetVisiblePixelTimeStart	Src/Util/Util_Render_Stereo.cpp	/^double TimewarpMachine::GetVisiblePixelTimeStart()$/;"	f	class:OVR::Util::Render::TimewarpMachine
GetVisual	Src/Displays/OVR_Linux_SDKWindow.h	/^    XVisualInfo* GetVisual()        {return mXVisual;}$/;"	f	class:OVR::SDKWindow
GetWidth	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual int GetWidth() const { return Width; }$/;"	f	class:OVR::CAPI::GL::Texture
GetWriteOffset	Src/Net/OVR_BitStream.h	/^	inline BitSize_t GetWriteOffset( void ) const {return numberOfBitsUsed;}$/;"	f	class:OVR::Net::BitStream
GetXBasis	Src/Kernel/OVR_Math.h	/^	Vector3f GetXBasis() const$/;"	f	class:OVR::Matrix4
GetYBasis	Src/Kernel/OVR_Math.h	/^	Vector3f GetYBasis() const$/;"	f	class:OVR::Matrix4
GetZBasis	Src/Kernel/OVR_Math.h	/^	Vector3f GetZBasis() const$/;"	f	class:OVR::Matrix4
GfxState	Src/CAPI/CAPI_DistortionRenderer.h	/^    Ptr<GraphicsState>      GfxState;$/;"	m	class:OVR::CAPI::DistortionRenderer
GlobalWindow	Src/Util/Util_ImageWindow.h	/^	static ImageWindow*			GlobalWindow( int window ) { return globalWindow[window]; }$/;"	f	class:OVR::Util::ImageWindow
GraphicsState	Src/CAPI/CAPI_DistortionRenderer.h	/^        GraphicsState() : IsValid(false) {}$/;"	f	class:OVR::CAPI::DistortionRenderer::GraphicsState
GraphicsState	Src/CAPI/CAPI_DistortionRenderer.h	/^    class GraphicsState : public RefCountBase<GraphicsState>$/;"	c	class:OVR::CAPI::DistortionRenderer
GraphicsState	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^DistortionRenderer::GraphicsState::GraphicsState()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
GraphicsState	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    class GraphicsState : public CAPI::DistortionRenderer::GraphicsState$/;"	c	class:OVR::CAPI::GL::DistortionRenderer
GrowSize	Src/Kernel/OVR_String.h	/^    size_t          GrowSize;    $/;"	m	class:OVR::StringBuffer
Guid	Src/CAPI/CAPI_LatencyStatistics.h	/^    String Guid, UserData1;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
Gyro	Src/OVR_CAPI.h	/^    ovrVector3f    Gyro;             \/\/\/ Rotation rate in rad\/s.$/;"	m	struct:ovrSensorData_
HASWVertex	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    HASWVertex(const Vector3f& p, const Color& c = Color(64,0,0,255), float u = 0, float v = 0)$/;"	f	struct:OVR::CAPI::GL::HASWVertex
HASWVertex	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    HASWVertex(float x, float y, float z, const Color& c = Color(64,0,0,255), float u = 0, float v = 0) $/;"	f	struct:OVR::CAPI::GL::HASWVertex
HASWVertex	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^struct HASWVertex$/;"	s	namespace:OVR::CAPI::GL	file:
HMA_GridSize	Src/Util/Util_Render_Stereo.cpp	/^static const int HMA_GridSize       = 1<<HMA_GridSizeLog2;$/;"	m	namespace:OVR::Util::Render	file:
HMA_GridSizeLog2	Src/Util/Util_Render_Stereo.cpp	/^static const int HMA_GridSizeLog2   = 7;$/;"	m	namespace:OVR::Util::Render	file:
HMA_NumTrisPerEye	Src/Util/Util_Render_Stereo.cpp	/^static const int HMA_NumTrisPerEye  = (HMA_GridSize)*(HMA_GridSize)*2;$/;"	m	namespace:OVR::Util::Render	file:
HMA_NumVertsPerEye	Src/Util/Util_Render_Stereo.cpp	/^static const int HMA_NumVertsPerEye = (HMA_GridSize+1)*(HMA_GridSize+1);$/;"	m	namespace:OVR::Util::Render	file:
HMD	Src/CAPI/CAPI_DistortionRenderer.h	/^    const ovrHmd            HMD;$/;"	m	class:OVR::CAPI::DistortionRenderer
HMD	Src/CAPI/CAPI_HSWDisplay.h	/^    const ovrHmd           HMD;                     \/\/ The HMDState this HSWDisplay instance corresponds to.$/;"	m	class:OVR::CAPI::HSWDisplay
HMDCount	Src/Service/Service_NetClient.h	/^    int           HMDCount;$/;"	m	class:OVR::Service::NetClient
HMDCountUpdateScope	Src/Service/Service_NetClient.h	/^    ObserverScope<Net::Plugins::RPCSlot> HMDCountUpdateScope;$/;"	m	class:OVR::Service::NetClient
HMDCountUpdate_1	Src/Service/Service_NetClient.cpp	/^void NetClient::HMDCountUpdate_1(BitStream* userData, ReceivePayload* pPayload)$/;"	f	class:OVR::Service::NetClient
HMDInfo	Src/OVR_Stereo.h	/^	HMDInfo() :$/;"	f	class:OVR::HMDInfo
HMDInfo	Src/OVR_Stereo.h	/^class HMDInfo$/;"	c	namespace:OVR
HMDMounted	Src/CAPI/CAPI_HSWDisplay.h	/^    mutable bool           HMDMounted;              \/\/ True if the HMD was most recently found to be mounted. We need this in order to maintain HMDNewlyMounted.$/;"	m	class:OVR::CAPI::HSWDisplay
HMDNetworkInfo	Src/Service/Service_NetSessionCommon.h	/^	HMDNetworkInfo() :$/;"	f	struct:OVR::Service::HMDNetworkInfo
HMDNetworkInfo	Src/Service/Service_NetSessionCommon.h	/^struct HMDNetworkInfo$/;"	s	namespace:OVR::Service
HMDNewlyMounted	Src/CAPI/CAPI_HSWDisplay.h	/^    mutable bool           HMDNewlyMounted;         \/\/ True if HMDMounted has transitioned from false to true. We need this in order to tell if the HMD was recently mounted so we can display the HSW display.$/;"	m	class:OVR::CAPI::HSWDisplay
HMDRenderState	Src/CAPI/CAPI_HMDRenderState.h	/^struct HMDRenderState$/;"	s	namespace:OVR::CAPI
HMDState	Src/CAPI/CAPI_HMDState.cpp	/^HMDState::HMDState(const OVR::HMDInfo& hmdInfo, Profile* profile) :$/;"	f	class:OVR::CAPI::HMDState
HMDState	Src/CAPI/CAPI_HMDState.cpp	/^HMDState::HMDState(const OVR::Service::HMDNetworkInfo& netInfo,$/;"	f	class:OVR::CAPI::HMDState
HMDState	Src/CAPI/CAPI_HMDState.h	/^class HMDState : public ListNode<HMDState>,$/;"	c	namespace:OVR::CAPI
HPBUFFERARB	Src/CAPI/GL/CAPI_GLE_GL.h	/^    DECLARE_HANDLE(HPBUFFERARB); \/\/ This type is used by a couple extensions.$/;"	v
HPVIDEODEV	Src/CAPI/GL/CAPI_GLE_GL.h	/^        DECLARE_HANDLE(HPVIDEODEV);$/;"	v
HSWDISPLAY_DEBUGGING	Src/CAPI/CAPI_HSWDisplay.cpp	41;"	d	file:
HSWDISPLAY_DEBUGGING	Src/CAPI/CAPI_HSWDisplay.cpp	43;"	d	file:
HSWDISPLAY_DEFAULT_ENABLED	Src/CAPI/CAPI_HSWDisplay.cpp	64;"	d	file:
HSWDISPLAY_DISTANCE	Src/CAPI/CAPI_HSWDisplay.h	63;"	d
HSWDISPLAY_FIRST_DISMISSAL_TIME	Src/CAPI/CAPI_HSWDisplay.cpp	106;"	d	file:
HSWDISPLAY_FIRST_DISMISSAL_TIME	Src/CAPI/CAPI_HSWDisplay.cpp	109;"	d	file:
HSWDISPLAY_LOG	Src/CAPI/CAPI_HSWDisplay.h	50;"	d
HSWDISPLAY_LOG	Src/CAPI/CAPI_HSWDisplay.h	52;"	d
HSWDISPLAY_LOG_ENABLED	Src/CAPI/CAPI_HSWDisplay.h	43;"	d
HSWDISPLAY_LOG_ENABLED	Src/CAPI/CAPI_HSWDisplay.h	45;"	d
HSWDISPLAY_POLL_INTERVAL	Src/CAPI/CAPI_HSWDisplay.cpp	101;"	d	file:
HSWDISPLAY_REGULAR_DISMISSAL_TIME	Src/CAPI/CAPI_HSWDisplay.cpp	107;"	d	file:
HSWDISPLAY_REGULAR_DISMISSAL_TIME	Src/CAPI/CAPI_HSWDisplay.cpp	110;"	d	file:
HSWDISPLAY_SCALE	Src/CAPI/CAPI_HSWDisplay.h	75;"	d
HSWDisplay	Src/CAPI/CAPI_HSWDisplay.cpp	/^HSWDisplay::HSWDisplay(ovrRenderAPIType renderAPIType, ovrHmd hmd, const HMDRenderState& hmdRenderState)$/;"	f	class:OVR::CAPI::HSWDisplay
HSWDisplay	Src/CAPI/CAPI_HSWDisplay.h	/^class HSWDisplay : public RefCountBase<HSWDisplay>$/;"	c	namespace:OVR::CAPI
HSWDisplay	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^HSWDisplay::HSWDisplay(ovrRenderAPIType api, ovrHmd hmd, const HMDRenderState& renderState)$/;"	f	class:OVR::CAPI::GL::HSWDisplay
HSWDisplay	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^    class HSWDisplay : public CAPI::HSWDisplay$/;"	c	namespace:OVR::CAPI::GL
HSWDisplayTimeNever	Src/CAPI/CAPI_HSWDisplay.cpp	/^static const time_t HSWDisplayTimeNever = (time_t)0; \/\/ Constant which denotes the time of "never", as in the display has never been shown yet.$/;"	m	namespace:OVR::CAPI	file:
HT_Dynamic	Src/Kernel/OVR_String.h	/^        HT_Dynamic  = 2,    \/\/ SF::String_temp: Heap is stored as a part of the class.$/;"	e	enum:OVR::String::HeapType
HT_Global	Src/Kernel/OVR_String.h	/^        HT_Global   = 0,    \/\/ Heap is global.$/;"	e	enum:OVR::String::HeapType
HT_Local	Src/Kernel/OVR_String.h	/^        HT_Local    = 1,    \/\/ SF::String_loc: Heap is determined based on string's address.$/;"	e	enum:OVR::String::HeapType
HT_Mask	Src/Kernel/OVR_String.h	/^        HT_Mask     = 3$/;"	e	enum:OVR::String::HeapType
HVIDEOINPUTDEVICENV	Src/CAPI/GL/CAPI_GLE_GL.h	/^        DECLARE_HANDLE(HVIDEOINPUTDEVICENV);$/;"	v
HVIDEOOUTPUTDEVICENV	Src/CAPI/GL/CAPI_GLE_GL.h	/^        DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);$/;"	v
HandedSystem	Src/Kernel/OVR_Math.h	/^enum HandedSystem$/;"	g	namespace:OVR
Handed_L	Src/Kernel/OVR_Math.h	/^    Handed_R = 1, Handed_L = -1$/;"	e	enum:OVR::HandedSystem
Handed_R	Src/Kernel/OVR_Math.h	/^    Handed_R = 1, Handed_L = -1$/;"	e	enum:OVR::HandedSystem
Handle	Src/OVR_CAPI.h	/^    struct ovrHmdStruct* Handle;$/;"	m	struct:ovrHmdDesc_	typeref:struct:ovrHmdDesc_::ovrHmdStruct
HandleEvent	Src/Net/OVR_Unix_Socket.cpp	/^void TCPSocketPollState::HandleEvent(TCPSocket* tcpSocket, SocketEvent_TCP* eventHandler)$/;"	f	class:OVR::Net::TCPSocketPollState
Handler	Src/Kernel/OVR_Observer.h	/^    typedef DelegateT Handler;$/;"	t	class:OVR::Observer
HasAbsolutePath	Src/Kernel/OVR_String.h	/^    bool    HasAbsolutePath() const { return HasAbsolutePath(ToCStr()); }$/;"	f	class:OVR::String
HasAbsolutePath	Src/Kernel/OVR_String_PathUtil.cpp	/^bool String::HasAbsolutePath(const char* url)$/;"	f	class:OVR::String
HasCommand	Src/Kernel/OVR_ThreadCommandQueue.h	/^        bool        HasCommand() const  { return Size != 0; }$/;"	f	class:OVR::ThreadCommand::PopBuffer
HasExtension	Src/Kernel/OVR_String.h	/^    bool    HasExtension() const    { return HasExtension(ToCStr()); }$/;"	f	class:OVR::String
HasExtension	Src/Kernel/OVR_String_PathUtil.cpp	/^bool String::HasExtension(const char* path)$/;"	f	class:OVR::String
HasGLExtension	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool GLVersionAndExtensions::HasGLExtension(const char* searchKey) const$/;"	f	class:OVR::CAPI::GL::GLVersionAndExtensions
HasItems	Src/OVR_JSON.h	/^    bool            HasItems() const         { return Children.IsEmpty(); }$/;"	f	class:OVR::JSON
HasLoopbackListener	Src/Net/OVR_Session.h	/^    bool                      HasLoopbackListener; \/\/ Has loopback listener installed?$/;"	m	class:OVR::Net::Session
HasProtocol	Src/Kernel/OVR_String.h	/^    bool    HasProtocol() const     { return HasProtocol(ToCStr()); }$/;"	f	class:OVR::String
HasProtocol	Src/Kernel/OVR_String_PathUtil.cpp	/^bool String::HasProtocol(const char* path)$/;"	f	class:OVR::String
HasUser	Src/OVR_Profile.cpp	/^bool ProfileManager::HasUser(const char* user)$/;"	f	class:OVR::ProfileManager
HasValidWindow	Src/Displays/OVR_Linux_SDKWindow.h	/^    bool HasValidWindow()           {return (mXWindow != 0);}$/;"	f	class:OVR::SDKWindow
Hash	Src/Kernel/OVR_Hash.h	/^    Hash()     {  }$/;"	f	class:OVR::Hash
Hash	Src/Kernel/OVR_Hash.h	/^    Hash(const SelfType& src) : mHash(src.mHash)                { }$/;"	f	class:OVR::Hash
Hash	Src/Kernel/OVR_Hash.h	/^    Hash(int sizeHint) : mHash(sizeHint)                        { }$/;"	f	class:OVR::Hash
Hash	Src/Kernel/OVR_Hash.h	/^class Hash$/;"	c	namespace:OVR
HashFunctor	Src/Kernel/OVR_String.h	/^    struct HashFunctor$/;"	s	class:OVR::String
HashFunctor	Src/Kernel/OVR_String.h	/^    struct HashFunctor$/;"	s	class:OVR::StringDataPtr
HashIdentity	Src/Kernel/OVR_Hash.h	/^    HashIdentity()                                        { }$/;"	f	class:OVR::HashIdentity
HashIdentity	Src/Kernel/OVR_Hash.h	/^    HashIdentity(const SelfType& src) : BaseType(src)     { }$/;"	f	class:OVR::HashIdentity
HashIdentity	Src/Kernel/OVR_Hash.h	/^    HashIdentity(int sizeHint) : BaseType(sizeHint)       { }$/;"	f	class:OVR::HashIdentity
HashIdentity	Src/Kernel/OVR_Hash.h	/^class HashIdentity$/;"	c	namespace:OVR
HashMinSize	Src/Kernel/OVR_Hash.h	/^    enum { HashMinSize = 8 };$/;"	e	enum:OVR::HashSetBase::__anon29
HashNode	Src/Kernel/OVR_Hash.h	/^     HashNode(const HashNode& src) : First(src.First), Second(src.Second)    { }$/;"	f	struct:OVR::HashNode
HashNode	Src/Kernel/OVR_Hash.h	/^     HashNode(const NodeRef& src) : First(*src.pFirst), Second(*src.pSecond)  { }$/;"	f	struct:OVR::HashNode
HashNode	Src/Kernel/OVR_Hash.h	/^struct HashNode$/;"	s	namespace:OVR
HashSet	Src/Kernel/OVR_Hash.h	/^    HashSet()                                      {   }$/;"	f	class:OVR::HashSet
HashSet	Src/Kernel/OVR_Hash.h	/^    HashSet(const SelfType& src) : BaseType(src)   {   }$/;"	f	class:OVR::HashSet
HashSet	Src/Kernel/OVR_Hash.h	/^    HashSet(int sizeHint) : BaseType(sizeHint)     {   }$/;"	f	class:OVR::HashSet
HashSet	Src/Kernel/OVR_Hash.h	/^class HashSet : public HashSetBase<C, HashF, AltHashF, Allocator, Entry>$/;"	c	namespace:OVR
HashSetBase	Src/Kernel/OVR_Hash.h	/^    HashSetBase() : pTable(NULL)                       {   }$/;"	f	class:OVR::HashSetBase
HashSetBase	Src/Kernel/OVR_Hash.h	/^    HashSetBase(const SelfType& src) : pTable(NULL)    { Assign(this, src); }$/;"	f	class:OVR::HashSetBase
HashSetBase	Src/Kernel/OVR_Hash.h	/^    HashSetBase(int sizeHint) : pTable(NULL)           { SetCapacity(this, sizeHint);  }$/;"	f	class:OVR::HashSetBase
HashSetBase	Src/Kernel/OVR_Hash.h	/^class HashSetBase$/;"	c	namespace:OVR
HashSetUncached	Src/Kernel/OVR_Hash.h	/^    HashSetUncached()                                        { }$/;"	f	class:OVR::HashSetUncached
HashSetUncached	Src/Kernel/OVR_Hash.h	/^    HashSetUncached(const SelfType& src) : BaseType(src)     { }$/;"	f	class:OVR::HashSetUncached
HashSetUncached	Src/Kernel/OVR_Hash.h	/^    HashSetUncached(int sizeHint) : BaseType(sizeHint)       { }$/;"	f	class:OVR::HashSetUncached
HashSetUncached	Src/Kernel/OVR_Hash.h	/^class HashSetUncached : public HashSet<C, HashF, AltHashF, Allocator, HashsetEntry<C, HashF> >$/;"	c	namespace:OVR
HashUncached	Src/Kernel/OVR_Hash.h	/^    HashUncached()                                        { }$/;"	f	class:OVR::HashUncached
HashUncached	Src/Kernel/OVR_Hash.h	/^    HashUncached(const SelfType& src) : BaseType(src)     { }$/;"	f	class:OVR::HashUncached
HashUncached	Src/Kernel/OVR_Hash.h	/^    HashUncached(int sizeHint) : BaseType(sizeHint)       { }$/;"	f	class:OVR::HashUncached
HashUncached	Src/Kernel/OVR_Hash.h	/^class HashUncached$/;"	c	namespace:OVR
HashValue	Src/Kernel/OVR_Hash.h	/^    size_t      HashValue;$/;"	m	class:OVR::HashsetCachedEntry
HashValue	Src/Kernel/OVR_Hash.h	/^    size_t HashValue;$/;"	m	class:OVR::HashsetCachedNodeEntry
HashsetCachedEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedEntry()$/;"	f	class:OVR::HashsetCachedEntry
HashsetCachedEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedEntry(const C& key, intptr_t next)$/;"	f	class:OVR::HashsetCachedEntry
HashsetCachedEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedEntry(const HashsetCachedEntry& e)$/;"	f	class:OVR::HashsetCachedEntry
HashsetCachedEntry	Src/Kernel/OVR_Hash.h	/^class HashsetCachedEntry$/;"	c	namespace:OVR
HashsetCachedNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedNodeEntry()$/;"	f	class:OVR::HashsetCachedNodeEntry
HashsetCachedNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedNodeEntry(const C& key, intptr_t next)$/;"	f	class:OVR::HashsetCachedNodeEntry
HashsetCachedNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedNodeEntry(const HashsetCachedNodeEntry& e)$/;"	f	class:OVR::HashsetCachedNodeEntry
HashsetCachedNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetCachedNodeEntry(const typename C::NodeRef& keyRef, intptr_t next)$/;"	f	class:OVR::HashsetCachedNodeEntry
HashsetCachedNodeEntry	Src/Kernel/OVR_Hash.h	/^class HashsetCachedNodeEntry$/;"	c	namespace:OVR
HashsetEntry	Src/Kernel/OVR_Hash.h	/^    HashsetEntry()$/;"	f	class:OVR::HashsetEntry
HashsetEntry	Src/Kernel/OVR_Hash.h	/^    HashsetEntry(const C& key, intptr_t next)$/;"	f	class:OVR::HashsetEntry
HashsetEntry	Src/Kernel/OVR_Hash.h	/^    HashsetEntry(const HashsetEntry& e)$/;"	f	class:OVR::HashsetEntry
HashsetEntry	Src/Kernel/OVR_Hash.h	/^class HashsetEntry$/;"	c	namespace:OVR
HashsetNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetNodeEntry()$/;"	f	class:OVR::HashsetNodeEntry
HashsetNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetNodeEntry(const C& key, intptr_t next)$/;"	f	class:OVR::HashsetNodeEntry
HashsetNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetNodeEntry(const HashsetNodeEntry& e)$/;"	f	class:OVR::HashsetNodeEntry
HashsetNodeEntry	Src/Kernel/OVR_Hash.h	/^    HashsetNodeEntry(const typename C::NodeRef& keyRef, intptr_t next)$/;"	f	class:OVR::HashsetNodeEntry
HashsetNodeEntry	Src/Kernel/OVR_Hash.h	/^class HashsetNodeEntry$/;"	c	namespace:OVR
Head	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    size_t  Head;   \/\/ Byte offset of where next push will take place.$/;"	m	class:OVR::CircularBuffer	file:
HeadPose	Src/OVR_CAPI.h	/^    ovrPoseStatef  HeadPose;$/;"	m	struct:ovrTrackingState_
HeadPose	Src/Tracking/Tracking_SensorState.h	/^	PoseStatef   HeadPose;$/;"	m	class:OVR::Tracking::TrackingState
Header	Src/OVR_CAPI.h	/^    ovrRenderAPIConfigHeader Header;$/;"	m	struct:ovrRenderAPIConfig_
Header	Src/OVR_CAPI.h	/^    ovrTextureHeader Header;$/;"	m	struct:ovrTexture_
Header	Src/OVR_CAPI_GL.h	/^    ovrRenderAPIConfigHeader Header;$/;"	m	struct:ovrGLConfigData_s
Header	Src/OVR_CAPI_GL.h	/^    ovrTextureHeader Header;$/;"	m	struct:ovrGLTextureData_s
HeapType	Src/Kernel/OVR_String.h	/^    enum HeapType$/;"	g	class:OVR::String
HeapTypeBits	Src/Kernel/OVR_String.h	/^        size_t    HeapTypeBits;$/;"	m	union:OVR::String::__anon32
HeapTypeBits	Src/Kernel/OVR_String.h	/^        size_t    HeapTypeBits;$/;"	m	union:OVR::String::__anon33
Height	Src/CAPI/GL/CAPI_GL_Util.h	/^    int           Width, Height;$/;"	m	class:OVR::CAPI::GL::Texture
HeightmapMeshCreate	Src/Util/Util_Render_Stereo.cpp	/^void HeightmapMeshCreate ( HeightmapMeshVertexData **ppVertices, uint16_t **ppTriangleListIndices,$/;"	f	namespace:OVR::Util::Render
HeightmapMeshCreate	Src/Util/Util_Render_Stereo.cpp	/^void HeightmapMeshCreate( HeightmapMeshVertexData **ppVertices, uint16_t **ppTriangleListIndices,$/;"	f	namespace:OVR::Util::Render
HeightmapMeshDestroy	Src/Util/Util_Render_Stereo.cpp	/^void HeightmapMeshDestroy ( HeightmapMeshVertexData *pVertices, uint16_t *pTriangleMeshIndices )$/;"	f	namespace:OVR::Util::Render
HeightmapMeshVertexData	Src/Util/Util_Render_Stereo.h	/^struct HeightmapMeshVertexData$/;"	s	namespace:OVR::Util::Render
HelloString	Src/Net/OVR_Session.h	/^    String HelloString;$/;"	m	struct:OVR::Net::RPC_C2S_Hello
HighestPriority	Src/Kernel/OVR_Threads.h	/^        HighestPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
Hmd	Src/Util/Util_Render_Stereo.h	/^    HmdRenderInfo      Hmd;$/;"	m	class:OVR::Util::Render::StereoConfig
HmdCaps	Src/OVR_CAPI.h	/^    unsigned int HmdCaps;$/;"	m	struct:ovrHmdDesc_
HmdRenderInfo	Src/OVR_Stereo.h	/^    HmdRenderInfo()$/;"	f	struct:OVR::HmdRenderInfo
HmdRenderInfo	Src/OVR_Stereo.h	/^struct HmdRenderInfo$/;"	s	namespace:OVR
HmdShutterTypeEnum	Src/Sensors/OVR_DeviceConstants.h	/^enum HmdShutterTypeEnum$/;"	g	namespace:OVR
HmdShutter_Global	Src/Sensors/OVR_DeviceConstants.h	/^    HmdShutter_Global,$/;"	e	enum:OVR::HmdShutterTypeEnum
HmdShutter_LAST	Src/Sensors/OVR_DeviceConstants.h	/^    HmdShutter_LAST$/;"	e	enum:OVR::HmdShutterTypeEnum
HmdShutter_RollingLeftToRight	Src/Sensors/OVR_DeviceConstants.h	/^    HmdShutter_RollingLeftToRight,$/;"	e	enum:OVR::HmdShutterTypeEnum
HmdShutter_RollingRightToLeft	Src/Sensors/OVR_DeviceConstants.h	/^    HmdShutter_RollingRightToLeft,$/;"	e	enum:OVR::HmdShutterTypeEnum
HmdShutter_RollingTopToBottom	Src/Sensors/OVR_DeviceConstants.h	/^    HmdShutter_RollingTopToBottom,$/;"	e	enum:OVR::HmdShutterTypeEnum
HmdToEyeViewOffset	Src/OVR_CAPI.h	/^    ovrVector3f HmdToEyeViewOffset;         \/\/\/ Translation to be applied to view matrix for each eye offset.$/;"	m	struct:ovrEyeRenderDesc_
HmdToEyeViewOffset	Src/OVR_Stereo.h	/^    Matrix4f                HmdToEyeViewOffset;         \/\/ Translation to be applied to view matrix.$/;"	m	struct:OVR::StereoEyeParams
HmdType	Src/OVR_Profile.h	/^    HmdTypeEnum HmdType;$/;"	m	struct:OVR::ProfileDeviceKey
HmdType	Src/OVR_Stereo.h	/^	HmdTypeEnum HmdType;$/;"	m	class:OVR::HMDInfo
HmdType	Src/OVR_Stereo.h	/^    HmdTypeEnum HmdType;$/;"	m	struct:OVR::HmdRenderInfo
HmdTypeEnum	Src/Sensors/OVR_DeviceConstants.h	/^enum HmdTypeEnum$/;"	g	namespace:OVR
HmdType_CrystalCoveProto	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_CrystalCoveProto,   \/\/ Crystal Cove, 5.66-inch panel, shown at shows but never sold.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DK1	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DK1,                \/\/ DevKit1 - on sale to developers.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DK2	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DK2,$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DKHD2Proto	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DKHD2Proto,         \/\/ DKHD2, 5.85-inch panel, never sold.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DKHDProto	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DKHDProto,          \/\/ DKHD - shown at various shows, never sold.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DKHDProto566Mi	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DKHDProto566Mi,     \/\/ DKHD, 5.66-inch panel, never sold.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_DKProto	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_DKProto,            \/\/ First duct-tape model, never sold.$/;"	e	enum:OVR::HmdTypeEnum
HmdType_LAST	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_LAST$/;"	e	enum:OVR::HmdTypeEnum
HmdType_None	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_None,$/;"	e	enum:OVR::HmdTypeEnum
HmdType_Unknown	Src/Sensors/OVR_DeviceConstants.h	/^    HmdType_Unknown,            \/\/ Used for unnamed HW lab experiments.$/;"	e	enum:OVR::HmdTypeEnum
Hmd_AttachToWindow	Src/Service/Service_NetClient.cpp	/^bool NetClient::Hmd_AttachToWindow(VirtualHmdId hmd, void* hWindow)$/;"	f	class:OVR::Service::NetClient
Hmd_ConfigureTracking	Src/Service/Service_NetClient.cpp	/^bool NetClient::Hmd_ConfigureTracking(VirtualHmdId hmd, unsigned supportedCaps, unsigned requiredCaps)$/;"	f	class:OVR::Service::NetClient
Hmd_Create	Src/Service/Service_NetClient.cpp	/^bool NetClient::Hmd_Create(int index, HMDNetworkInfo* netInfo)$/;"	f	class:OVR::Service::NetClient
Hmd_Detect	Src/Service/Service_NetClient.cpp	/^int NetClient::Hmd_Detect()$/;"	f	class:OVR::Service::NetClient
Hmd_GetEnabledCaps	Src/Service/Service_NetClient.cpp	/^unsigned int NetClient::Hmd_GetEnabledCaps(VirtualHmdId hmd)$/;"	f	class:OVR::Service::NetClient
Hmd_GetHmdInfo	Src/Service/Service_NetClient.cpp	/^bool NetClient::Hmd_GetHmdInfo(VirtualHmdId hmd, HMDInfo* hmdInfo)$/;"	f	class:OVR::Service::NetClient
Hmd_GetLastError	Src/Service/Service_NetClient.cpp	/^const char* NetClient::Hmd_GetLastError(VirtualHmdId hmd)$/;"	f	class:OVR::Service::NetClient
Hmd_GetLastError_Str	Src/Service/Service_NetClient.h	/^    String       Hmd_GetLastError_Str;$/;"	m	class:OVR::Service::NetClient
Hmd_Release	Src/Service/Service_NetClient.cpp	/^void NetClient::Hmd_Release(VirtualHmdId hmd)$/;"	f	class:OVR::Service::NetClient
Hmd_ResetTracking	Src/Service/Service_NetClient.cpp	/^void NetClient::Hmd_ResetTracking(VirtualHmdId hmd)$/;"	f	class:OVR::Service::NetClient
Hmd_SetEnabledCaps	Src/Service/Service_NetClient.cpp	/^unsigned int NetClient::Hmd_SetEnabledCaps(VirtualHmdId hmd, unsigned int hmdCaps)$/;"	f	class:OVR::Service::NetClient
ID_RPC4_RETURN	Src/Net/OVR_RPC1.cpp	/^	ID_RPC4_RETURN,$/;"	e	enum:OVR::Net::Plugins::__anon5	file:
ID_RPC4_SIGNAL	Src/Net/OVR_RPC1.cpp	/^	ID_RPC4_SIGNAL,$/;"	e	enum:OVR::Net::Plugins::__anon5	file:
INCPATH	Makefile	/^INCPATH       = -I. -I.. -I$(LIBOVRPATH)\/Include -I$(LIBOVRPATH)\/Src$/;"	m
INC_OVR_CAPI_GLE_GL_h	Src/CAPI/GL/CAPI_GLE_GL.h	26;"	d
INC_OVR_CAPI_GLE_h	Src/CAPI/GL/CAPI_GLE.h	26;"	d
INC_OVR_CAPI_GL_Util_h	Src/CAPI/GL/CAPI_GL_Util.h	28;"	d
INVALID_CHAR	Src/Kernel/OVR_UTF8Util.cpp	157;"	d	file:
INVALID_SOCKET	Src/Net/OVR_Socket.h	/^static const SocketHandle INVALID_SOCKET = -1;$/;"	m	namespace:OVR::Net
ISharedObject	Src/Kernel/OVR_SharedMemory.h	/^class ISharedObject : public NewOverrideBase$/;"	c	namespace:OVR
IdValue	Src/Kernel/OVR_Threads.h	/^    volatile ThreadId   IdValue;$/;"	m	class:OVR::Thread
Identity	Src/Kernel/OVR_Math.h	/^	static const Matrix3& Identity()  { return IdentityValue; }$/;"	f	class:OVR::Matrix3
Identity	Src/Kernel/OVR_Math.h	/^    static const Matrix4& Identity()  { return IdentityValue; }$/;"	f	class:OVR::Matrix4
IdentityHash	Src/Kernel/OVR_Hash.h	/^class IdentityHash$/;"	c	namespace:OVR
IdentityValue	Src/Kernel/OVR_Math.cpp	/^const Matrix4<double> Matrix4<double>::IdentityValue = Matrix4<double>(1.0, 0.0, 0.0, 0.0, $/;"	m	class:OVR::Matrix4	file:
IdentityValue	Src/Kernel/OVR_Math.cpp	/^const Matrix4<float> Matrix4<float>::IdentityValue = Matrix4<float>(1.0f, 0.0f, 0.0f, 0.0f, $/;"	m	class:OVR::Matrix4	file:
IdentityValue	Src/Kernel/OVR_Math.h	/^	static const Matrix3 IdentityValue;$/;"	m	class:OVR::Matrix3
IdentityValue	Src/Kernel/OVR_Math.h	/^    static const Matrix4 IdentityValue;$/;"	m	class:OVR::Matrix4
IdlePriority	Src/Kernel/OVR_Threads.h	/^        IdlePriority,$/;"	e	enum:OVR::Thread::ThreadPriority
IgnoreBits	Src/Net/OVR_BitStream.cpp	/^void BitStream::IgnoreBits( const BitSize_t numberOfBits )$/;"	f	class:OVR::Net::BitStream
IgnoreBytes	Src/Net/OVR_BitStream.cpp	/^void BitStream::IgnoreBytes( const unsigned int numberOfBytes )$/;"	f	class:OVR::Net::BitStream
Imag	Src/Kernel/OVR_Math.h	/^    Vector3<T> Imag() const                 { return Vector3<T>(x,y,z); }$/;"	f	class:OVR::Quat
ImageWindow	Src/Util/Util_ImageWindow.h	/^	ImageWindow( uint32_t width, uint32_t height ) { OVR_UNUSED( width ); OVR_UNUSED( height ); }$/;"	f	class:OVR::Util::ImageWindow
ImageWindow	Src/Util/Util_ImageWindow.h	/^	ImageWindow() {}$/;"	f	class:OVR::Util::ImageWindow
ImageWindow	Src/Util/Util_ImageWindow.h	/^class ImageWindow$/;"	c	namespace:OVR::Util
ImuFromCpf	Src/Tracking/Tracking_SensorState.h	/^	Posed             ImuFromCpf;$/;"	m	struct:OVR::Tracking::LocklessSensorState
InCompatibilityMode	Src/Displays/OVR_Linux_Display.cpp	/^bool Display::InCompatibilityMode( bool displaySearch )$/;"	f	class:OVR::Display
InCompatibilityMode	Src/Displays/OVR_Linux_Display.h	/^    virtual bool InCompatibilityMode() const$/;"	f	class:OVR::Linux::LinuxDisplayGeneric
InCompatibilityMode	Src/OVR_Stereo.h	/^	bool	    InCompatibilityMode;$/;"	m	class:OVR::HMDInfo
InPlaceMutableDeque	Src/Kernel/OVR_Deque.h	/^    InPlaceMutableDeque( int capacity = BaseType::DefaultCapacity ) : BaseType( capacity ) {}$/;"	f	class:OVR::InPlaceMutableDeque
InPlaceMutableDeque	Src/Kernel/OVR_Deque.h	/^class InPlaceMutableDeque : public Deque<Elem, Allocator>$/;"	c	namespace:OVR
IncrementReferences	Src/Kernel/OVR_SharedMemory.cpp	/^        void IncrementReferences()$/;"	f	class:OVR::FakeMemoryBlock
Increment_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline void  Increment_Acquire()                { ExchangeAdd_Acquire((T)1); }    $/;"	f	class:OVR::AtomicInt
Increment_NoSync	Src/Kernel/OVR_Atomic.h	/^    inline void  Increment_NoSync()                 { ExchangeAdd_NoSync((T)1); }$/;"	f	class:OVR::AtomicInt
Increment_Release	Src/Kernel/OVR_Atomic.h	/^    inline void  Increment_Release()                { ExchangeAdd_Release((T)1); }$/;"	f	class:OVR::AtomicInt
Increment_Sync	Src/Kernel/OVR_Atomic.h	/^    inline void  Increment_Sync()                   { ExchangeAdd_Sync((T)1); }$/;"	f	class:OVR::AtomicInt
Index	Src/Kernel/OVR_Hash.h	/^        intptr_t        Index;$/;"	m	struct:OVR::HashSetBase::ConstIterator
Index	Src/Kernel/OVR_Math.h	/^	static inline int Index(unsigned int i, unsigned int j)$/;"	f	class:OVR::SymMat3
IndexCount	Src/OVR_CAPI.h	/^    unsigned int         IndexCount;$/;"	m	struct:ovrDistortionMesh_
Init	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::Init(HmdRenderInfo& renderInfo)$/;"	f	class:OVR::CAPI::FrameTimeManager
Init	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::Init()$/;"	f	class:OVR::GLEContext
Init	Src/Kernel/OVR_System.cpp	/^void System::Init(Log* log, Allocator *palloc)$/;"	f	class:OVR::System
Init	Src/Kernel/OVR_ThreadsPthread.cpp	/^void Thread::Init(const CreateParams& params)$/;"	f	class:OVR::Thread
InitAttr	Src/Kernel/OVR_Threads.h	/^    static int            InitAttr;$/;"	m	class:OVR::Thread
InitAttr	Src/Kernel/OVR_ThreadsPthread.cpp	/^int Thread::InitAttr = 0;$/;"	m	class:OVR::Thread	file:
InitExtensionLoad	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::InitExtensionLoad()$/;"	f	class:OVR::GLEContext
InitExtensionSupport	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::InitExtensionSupport()$/;"	f	class:OVR::GLEContext
InitFromBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^void ThreadCommand::PopBuffer::InitFromBuffer(void* data)$/;"	f	class:OVR::ThreadCommand::PopBuffer
InitFromCurrent	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::InitFromCurrent()$/;"	f	class:OVR::CAPI::GL::Context
InitGLExtensions	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void InitGLExtensions()$/;"	f	namespace:OVR::CAPI::GL
InitStruct	Src/Kernel/OVR_String.h	/^    struct InitStruct$/;"	s	class:OVR::String
InitSystemSingleton	Src/Kernel/OVR_Allocator.h	/^    static  D*  InitSystemSingleton()$/;"	f	class:OVR::Allocator_SingletonSupport
InitTimingFromInputs	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::Timing::InitTimingFromInputs(const FrameTimeManager::TimingInputs& inputs,$/;"	f	class:OVR::CAPI::FrameTimeManager::Timing
InitUniforms	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void ShaderBase::InitUniforms(const Uniform* refl, size_t reflSize)$/;"	f	class:OVR::CAPI::GL::ShaderBase
InitVersion	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::InitVersion()$/;"	f	class:OVR::GLEContext
InitialServerStateScope	Src/Service/Service_NetClient.h	/^    ObserverScope<Net::Plugins::RPCSlot> InitialServerStateScope;$/;"	m	class:OVR::Service::NetClient
InitialServerState_1	Src/Service/Service_NetClient.cpp	/^void NetClient::InitialServerState_1(BitStream* userData, ReceivePayload* pPayload)$/;"	f	class:OVR::Service::NetClient
Initialize	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual bool Initialize(const ovrRenderAPIConfig*)$/;"	f	class:OVR::CAPI::HSWDisplay
Initialize	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^bool DistortionRenderer::Initialize(const ovrRenderAPIConfig* apiConfig)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
Initialize	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^bool HSWDisplay::Initialize(const ovrRenderAPIConfig* apiConfig)$/;"	f	class:OVR::CAPI::GL::HSWDisplay
Initialize	Src/Displays/OVR_Linux_Display.cpp	/^bool Display::Initialize()$/;"	f	class:OVR::Display
Initialize	Src/Kernel/OVR_Timer.cpp	/^void PerformanceTimer::Initialize()$/;"	f	class:OVR::PerformanceTimer
Initialized	Src/Kernel/OVR_Allocator.h	/^        bool  Initialized;$/;"	m	struct:OVR::Allocator_SingletonSupport::AllocContainer
Initialized_Bit	Src/Kernel/OVR_KeyCodes.h	/^        Initialized_Bit     = 0x80,$/;"	e	enum:OVR::KeyModifiers::__anon30
Initialized_Mask	Src/Kernel/OVR_KeyCodes.h	/^        Initialized_Mask    = 0xFF$/;"	e	enum:OVR::KeyModifiers::__anon30
InputLayout	Src/CAPI/GL/CAPI_GL_Util.h	/^    void*              InputLayout; \/\/ HACK this should be abstracted$/;"	m	class:OVR::CAPI::GL::ShaderFill
Inputs	Src/CAPI/CAPI_FrameTimeManager.h	/^        TimingInputs        Inputs;$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
Insert	Src/Kernel/OVR_String.cpp	/^String& String::Insert(const char* substr, size_t posAt, intptr_t strSize)$/;"	f	class:OVR::String
Insert	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::Insert(const char* substr, size_t posAt, intptr_t len)$/;"	f	class:OVR::StringBuffer
InsertArrayElement	Src/OVR_JSON.cpp	/^void JSON::InsertArrayElement(int index, JSON *item)$/;"	f	class:OVR::JSON
InsertAt	Src/Kernel/OVR_Array.h	/^    void    InsertAt(size_t index, const ValueType& val = ValueType())$/;"	f	class:OVR::ArrayBase
InsertCharAt	Src/Kernel/OVR_String.cpp	/^size_t    StringBuffer::InsertCharAt(uint32_t c, size_t posAt)$/;"	f	class:OVR::StringBuffer
InsertCharAt	Src/Kernel/OVR_String.cpp	/^size_t String::InsertCharAt(uint32_t c, size_t posAt)$/;"	f	class:OVR::String
InsertMultipleAt	Src/Kernel/OVR_Array.h	/^    void    InsertMultipleAt(size_t index, size_t num, const ValueType& val = ValueType())$/;"	f	class:OVR::ArrayBase
InsertNodeAfter	Src/Kernel/OVR_List.h	/^    void    InsertNodeAfter(T* p)$/;"	f	struct:OVR::ListNode
InsertNodeBefore	Src/Kernel/OVR_List.h	/^    void    InsertNodeBefore(T* p)$/;"	f	struct:OVR::ListNode
InsertionSort	Src/Kernel/OVR_Alg.h	/^void InsertionSort(Array& arr)$/;"	f	namespace:OVR::Alg
InsertionSort	Src/Kernel/OVR_Alg.h	/^void InsertionSort(Array& arr, Less less)$/;"	f	namespace:OVR::Alg
InsertionSortSliced	Src/Kernel/OVR_Alg.h	/^void InsertionSortSliced(Array& arr, size_t start, size_t end)$/;"	f	namespace:OVR::Alg
InsertionSortSliced	Src/Kernel/OVR_Alg.h	/^void InsertionSortSliced(Array& arr, size_t start, size_t end, Less less)$/;"	f	namespace:OVR::Alg
InstrumentEndFrameEnd	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::InstrumentEndFrameEnd(double timestamp)$/;"	f	class:OVR::CAPI::LagStatsCalculator
InstrumentEndFrameStart	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::InstrumentEndFrameStart(double timestamp)$/;"	f	class:OVR::CAPI::LagStatsCalculator
InstrumentEyePose	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::InstrumentEyePose(const ovrTrackingState& state)$/;"	f	class:OVR::CAPI::LagStatsCalculator
InstrumentLatencyTimings	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::InstrumentLatencyTimings(FrameTimeManager& ftm)$/;"	f	class:OVR::CAPI::LagStatsCalculator
Internal	Src/Kernel/OVR_SharedMemory.h	/^	SharedMemoryInternal* Internal;$/;"	m	class:OVR::SharedMemory
IntervalSeconds	Src/CAPI/CAPI_LatencyStatistics.h	/^    double IntervalSeconds;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
InvK	Src/OVR_Stereo.h	/^    float               InvK[NumCoefficients];$/;"	m	struct:OVR::LensConfig
InvalidNetworkID	Src/Net/OVR_NetworkTypes.h	/^const NetworkID InvalidNetworkID = ~((NetworkID)0);$/;"	m	namespace:OVR::Net
InvalidVirtualHmdId	Src/Service/Service_NetSessionCommon.h	/^static const int32_t InvalidVirtualHmdId = -1;$/;"	m	namespace:OVR::Service
Invalidate	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void Invalidate()$/;"	f	class:OVR::Delegate0
Invalidate	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void Invalidate()$/;"	f	class:OVR::Delegate1
Invalidate	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void Invalidate()$/;"	f	class:OVR::Delegate2
Invalidate	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void Invalidate()$/;"	f	class:OVR::Delegate3
Inverse	Src/Kernel/OVR_Math.h	/^	inline Matrix3<T> Inverse() const$/;"	f	class:OVR::Matrix3
Inverse	Src/Kernel/OVR_Math.h	/^	inline this_type Inverse() const$/;"	f	class:OVR::SymMat3
Invert	Src/Kernel/OVR_Math.h	/^    void        Invert()$/;"	f	class:OVR::Quat
Invert	Src/Kernel/OVR_Math.h	/^    void Invert()$/;"	f	class:OVR::Matrix4
InvertHomogeneousTransform	Src/Kernel/OVR_Math.h	/^	void InvertHomogeneousTransform()$/;"	f	class:OVR::Matrix4
Inverted	Src/Kernel/OVR_Math.h	/^    Matrix4 Inverted() const$/;"	f	class:OVR::Matrix4
Inverted	Src/Kernel/OVR_Math.h	/^    Pose Inverted() const   $/;"	f	class:OVR::Pose
Inverted	Src/Kernel/OVR_Math.h	/^    Quat        Inverted() const$/;"	f	class:OVR::Quat
InvertedHomogeneousTransform	Src/Kernel/OVR_Math.h	/^	Matrix4 InvertedHomogeneousTransform() const$/;"	f	class:OVR::Matrix4
Is64BitWindows	Src/Util/Util_SystemInfo.cpp	/^BOOL Is64BitWindows()$/;"	f	namespace:OVR::Util
IsAllZeroes	Src/Util/Util_LatencyTest2Reader.cpp	/^bool FrameTimeRecordSet::IsAllZeroes() const$/;"	f	class:OVR::Util::FrameTimeRecordSet
IsAltPressed	Src/Kernel/OVR_KeyCodes.h	/^    bool IsAltPressed() const   { return (States & Key_AltPressed) != 0; }$/;"	f	class:OVR::KeyModifiers
IsBigEndian	Src/Net/OVR_BitStream.h	/^	inline static bool IsBigEndian(void)$/;"	f	class:OVR::Net::BitStream
IsCapsToggled	Src/Kernel/OVR_KeyCodes.h	/^    bool IsCapsToggled() const  { return (States & Key_CapsToggled) != 0; }$/;"	f	class:OVR::KeyModifiers
IsConnected	Src/Service/Service_NetClient.cpp	/^bool NetClient::IsConnected(bool attemptReconnect, bool blockOnReconnect)$/;"	f	class:OVR::Service::NetClient
IsConnecting	Src/Net/OVR_Unix_Socket.h	/^	bool IsConnecting; \/\/ Is in the process of connecting?$/;"	m	class:OVR::Net::TCPSocket
IsCoreProfile	Src/CAPI/GL/CAPI_GLE.h	/^        bool  IsCoreProfile;            \/\/ Is the current OpenGL context a core profile context? Its trueness may be a false positive but will never be a false negative.$/;"	m	class:OVR::GLEContext
IsCoreProfile	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool        IsCoreProfile;       \/\/ Is the current OpenGL context a core profile context? Its trueness may be a false positive but will never be a false negative.$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
IsCtrlPressed	Src/Kernel/OVR_KeyCodes.h	/^    bool IsCtrlPressed() const  { return (States & Key_CtrlPressed) != 0; }$/;"	f	class:OVR::KeyModifiers
IsDebugMessage	Src/Kernel/OVR_Log.h	/^    static bool     IsDebugMessage(LogMessageType messageType)$/;"	f	class:OVR::Log
IsDefaultProfile	Src/OVR_Profile.cpp	/^bool Profile::IsDefaultProfile()$/;"	f	class:OVR::Profile
IsDirty	Src/Util/Util_Render_Stereo.h	/^    bool        IsDirty() { return DirtyFlag; }$/;"	f	class:OVR::Util::Render::StereoConfig
IsDisplayViewable	Src/CAPI/CAPI_HSWDisplay.cpp	/^bool HSWDisplay::IsDisplayViewable() const$/;"	f	class:OVR::CAPI::HSWDisplay
IsEOF	Src/Kernel/OVR_File.h	/^    inline bool         IsEOF() { return !BytesAvailable(); }$/;"	f	class:OVR::File
IsEmpty	Src/Kernel/OVR_Array.h	/^	bool    IsEmpty()       const       { return Data.Size == 0; }$/;"	f	class:OVR::ArrayBase
IsEmpty	Src/Kernel/OVR_Deque.h	/^inline bool Deque<Elem, Allocator>::IsEmpty(void) const$/;"	f	class:OVR::Deque
IsEmpty	Src/Kernel/OVR_Hash.h	/^    bool    IsEmpty() const             { return NextInChain == -2;  }$/;"	f	class:OVR::HashsetNodeEntry
IsEmpty	Src/Kernel/OVR_Hash.h	/^    bool    IsEmpty() const            { return NextInChain == -2;  }$/;"	f	class:OVR::HashsetCachedNodeEntry
IsEmpty	Src/Kernel/OVR_Hash.h	/^    bool    IsEmpty() const          { return NextInChain == -2;  }$/;"	f	class:OVR::HashsetCachedEntry
IsEmpty	Src/Kernel/OVR_Hash.h	/^    bool    IsEmpty() const          { return NextInChain == -2;  }$/;"	f	class:OVR::HashsetEntry
IsEmpty	Src/Kernel/OVR_Hash.h	/^    bool IsEmpty() const$/;"	f	class:OVR::HashSetBase
IsEmpty	Src/Kernel/OVR_Hash.h	/^    inline bool    IsEmpty() const { return mHash.IsEmpty(); }$/;"	f	class:OVR::Hash
IsEmpty	Src/Kernel/OVR_List.h	/^    bool IsEmpty()                   const { return Root.pVoidNext == (const T*)(const B*)&Root; }$/;"	f	class:OVR::List
IsEmpty	Src/Kernel/OVR_String.h	/^    bool        IsEmpty() const         { return GetSize() == 0; }$/;"	f	class:OVR::String
IsEmpty	Src/Kernel/OVR_String.h	/^    bool        IsEmpty() const         { return GetSize() == 0; }$/;"	f	class:OVR::StringBuffer
IsEmpty	Src/Kernel/OVR_String.h	/^    bool        IsEmpty() const { return GetSize() == 0; }$/;"	f	class:OVR::StringDataPtr
IsEmpty	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    bool    IsEmpty() const { return (Head == Tail); }$/;"	f	class:OVR::CircularBuffer
IsEnd	Src/Kernel/OVR_Hash.h	/^        bool    IsEnd() const$/;"	f	struct:OVR::HashSetBase::ConstIterator
IsEndOfChain	Src/Kernel/OVR_Hash.h	/^    bool    IsEndOfChain() const        { return NextInChain == -1;  }$/;"	f	class:OVR::HashsetNodeEntry
IsEndOfChain	Src/Kernel/OVR_Hash.h	/^    bool    IsEndOfChain() const       { return NextInChain == -1;  }$/;"	f	class:OVR::HashsetCachedNodeEntry
IsEndOfChain	Src/Kernel/OVR_Hash.h	/^    bool    IsEndOfChain() const     { return NextInChain == -1;  }$/;"	f	class:OVR::HashsetCachedEntry
IsEndOfChain	Src/Kernel/OVR_Hash.h	/^    bool    IsEndOfChain() const     { return NextInChain == -1;  }$/;"	f	class:OVR::HashsetEntry
IsExiting	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^bool ThreadCommandQueue::IsExiting() const$/;"	f	class:OVR::ThreadCommandQueue
IsFinished	Src/Kernel/OVR_Array.h	/^        bool IsFinished() const { return !pArray || CurIndex < 0 || CurIndex >= (int)pArray->GetSize(); }$/;"	f	class:OVR::ArrayBase::ConstIterator
IsFinished	Src/Kernel/OVR_Array.h	/^        bool IsFinished() const { return !pArray || CurIndex < 0 || CurIndex >= (int)pArray->GetSize(); }$/;"	f	class:OVR::ArrayBase::Iterator
IsFinished	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::IsFinished() const$/;"	f	class:OVR::Thread
IsFirst	Src/Kernel/OVR_List.h	/^    bool IsFirst(const ValueType* p) const { return p == Root.pNext; }$/;"	f	class:OVR::List
IsFull	Src/Kernel/OVR_Deque.h	/^inline bool Deque<Elem, Allocator>::IsFull(void) const$/;"	f	class:OVR::Deque
IsGLES	Src/CAPI/GL/CAPI_GLE.h	/^        bool  IsGLES;                   \/\/ Open GL ES?$/;"	m	class:OVR::GLEContext
IsGLES	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool        IsGLES;              \/\/ Open GL ES?$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
IsInStringArray	Src/Service/Service_NetSessionCommon.cpp	/^bool IsInStringArray(const char* a[], const char* key)$/;"	f	namespace:OVR::Service
IsInitialized	Src/Kernel/OVR_KeyCodes.h	/^    bool IsInitialized() const { return (States & Initialized_Mask) != 0; }$/;"	f	class:OVR::KeyModifiers
IsInitialized	Src/Kernel/OVR_System.cpp	/^bool System::IsInitialized()$/;"	f	class:OVR::System
IsLast	Src/Kernel/OVR_List.h	/^    bool IsLast (const ValueType* p) const { return p == Root.pPrev; }$/;"	f	class:OVR::List
IsLatencyTimingAvailable	Src/CAPI/CAPI_FrameTimeManager.cpp	/^bool FrameLatencyTracker::IsLatencyTimingAvailable()$/;"	f	class:OVR::CAPI::FrameLatencyTracker
IsListenSocket	Src/Net/OVR_Socket.h	/^	bool IsListenSocket; \/\/ Is the socket listening (acting as a server)?$/;"	m	class:OVR::Net::TCPSocketBase
IsLocalhost	Src/Net/OVR_Unix_Socket.cpp	/^bool SockAddr::IsLocalhost() const$/;"	f	class:OVR::Net::SockAddr
IsLockedByAnotherThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Mutex::IsLockedByAnotherThread()$/;"	f	class:OVR::Mutex
IsLockedByAnotherThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    MutexImpl::IsLockedByAnotherThread(Mutex* pmutex)$/;"	f	class:OVR::MutexImpl
IsMetaPressed	Src/Kernel/OVR_KeyCodes.h	/^    bool IsMetaPressed() const  { return (States & Key_MetaPressed) != 0; }$/;"	f	class:OVR::KeyModifiers
IsMovable	Src/Kernel/OVR_ContainerAllocator.h	/^    static bool IsMovable() { return false; }$/;"	f	class:OVR::ConstructorCPP
IsMovable	Src/Kernel/OVR_ContainerAllocator.h	/^    static bool IsMovable() { return true; }$/;"	f	class:OVR::ConstructorMov
IsMovable	Src/Kernel/OVR_ContainerAllocator.h	/^    static bool IsMovable() { return true; }$/;"	f	class:OVR::ConstructorPOD
IsNamed	Src/Kernel/OVR_SharedMemory.cpp	/^        bool IsNamed(const String& name)$/;"	f	class:OVR::FakeMemoryBlock
IsNetworkOrder	Src/Net/OVR_BitStream.h	/^	inline static bool IsNetworkOrder(void) {bool r = IsNetworkOrderInternal(); return r;}$/;"	f	class:OVR::Net::BitStream
IsNetworkOrderInternal	Src/Net/OVR_BitStream.cpp	/^bool BitStream::IsNetworkOrderInternal(void)$/;"	f	class:OVR::Net::BitStream
IsNormalized	Src/Kernel/OVR_Math.h	/^    bool    IsNormalized() const                 { return fabs(LengthSq() - T(1)) < ((T)MATH_DOUBLE_TOLERANCE); }$/;"	f	class:OVR::Vector2
IsNormalized	Src/Kernel/OVR_Math.h	/^    bool    IsNormalized() const                 { return fabs(LengthSq() - T(1)) < ((T)MATH_DOUBLE_TOLERANCE); }$/;"	f	class:OVR::Vector3
IsNormalized	Src/Kernel/OVR_Math.h	/^    bool    IsNormalized() const                 { return fabs(LengthSq() - T(1)) < Math<T>::Tolerance; }$/;"	f	class:OVR::Vector4
IsNormalized	Src/Kernel/OVR_Math.h	/^    bool    IsNormalized() const            { return fabs(LengthSq() - T(1)) < ((T)MATH_DOUBLE_TOLERANCE); }$/;"	f	class:OVR::Quat
IsNull	Src/Kernel/OVR_List.h	/^    bool IsNull (const ValueType* p) const { return p == (const T*)(const B*)&Root; }$/;"	f	class:OVR::List
IsNumToggled	Src/Kernel/OVR_KeyCodes.h	/^    bool IsNumToggled() const   { return (States & Key_NumToggled) != 0; }$/;"	f	class:OVR::KeyModifiers
IsOverdriveActive	Src/CAPI/CAPI_DistortionRenderer.h	/^    bool IsOverdriveActive()$/;"	f	class:OVR::CAPI::DistortionRenderer
IsPrefix	Src/Kernel/OVR_String.h	/^    bool        IsPrefix(const StringDataPtr& value) const$/;"	f	class:OVR::StringDataPtr
IsPresent	Src/CAPI/GL/CAPI_GLE.cpp	/^        bool& IsPresent;$/;"	m	struct:ValueStringPair	file:
IsRendertargetSharedByBothEyes	Src/Util/Util_Render_Stereo.h	/^    bool               IsRendertargetSharedByBothEyes;$/;"	m	class:OVR::Util::Render::StereoConfig
IsSameDisplay	Src/OVR_Stereo.h	/^	bool IsSameDisplay(const HMDInfo& o) const$/;"	f	class:OVR::HMDInfo
IsScrollToggled	Src/Kernel/OVR_KeyCodes.h	/^    bool IsScrollToggled() const{ return (States & Key_ScrollToggled) != 0; }$/;"	f	class:OVR::KeyModifiers
IsServiceProperty	Src/Service/Service_NetSessionCommon.cpp	/^bool NetSessionCommon::IsServiceProperty(EGetterSetters e, const char* key)$/;"	f	class:OVR::Service::NetSessionCommon
IsShiftPressed	Src/Kernel/OVR_KeyCodes.h	/^    bool IsShiftPressed() const { return (States & Key_ShiftPressed) != 0; }$/;"	f	class:OVR::KeyModifiers
IsShutdown	Src/Kernel/OVR_Observer.h	/^	bool                     IsShutdown; \/\/ Flag to indicate that the object went out of scope$/;"	m	class:OVR::Observer
IsSignaled	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    MutexImpl::IsSignaled() const$/;"	f	class:OVR::MutexImpl
IsSuffix	Src/Kernel/OVR_String.h	/^    bool        IsSuffix(const StringDataPtr& value) const$/;"	f	class:OVR::StringDataPtr
IsSuspended	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::IsSuspended() const$/;"	f	class:OVR::Thread
IsUserAllocated	Src/CAPI/GL/CAPI_GL_Util.h	/^	bool IsUserAllocated;$/;"	m	class:OVR::CAPI::GL::Texture
IsValid	Src/CAPI/CAPI_DistortionRenderer.h	/^        bool IsValid;$/;"	m	class:OVR::CAPI::DistortionRenderer::GraphicsState
IsValid	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool IsValid() const$/;"	f	class:OVR::Delegate0
IsValid	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool IsValid() const$/;"	f	class:OVR::Delegate1
IsValid	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool IsValid() const$/;"	f	class:OVR::Delegate2
IsValid	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool IsValid() const$/;"	f	class:OVR::Delegate3
IsValid	Src/Kernel/OVR_File.h	/^    bool        IsValid()           { return Valid; }$/;"	f	class:OVR::MemoryFile
IsValid	Src/Kernel/OVR_File.h	/^    virtual bool        IsValid()                                   { return pFile && pFile->IsValid(); }   $/;"	f	class:OVR::DelegatedFile
IsValid	Src/Kernel/OVR_FileFILE.cpp	/^bool    FILEFile::IsValid()$/;"	f	class:OVR::FILEFile
IsValid	Src/Kernel/OVR_Log.cpp	/^    static bool IsValid() {$/;"	f	class:LogSubject
IsValid	Src/Kernel/OVR_SysFile.cpp	/^    virtual bool        IsValid()                   { return 0; }$/;"	f	class:OVR::UnopenedFile
IsValid	Src/Kernel/OVR_SysFile.cpp	/^bool SysFile::IsValid()$/;"	f	class:OVR::SysFile
IsValid	Src/Net/OVR_Unix_Socket.cpp	/^bool TCPSocketPollState::IsValid() const$/;"	f	class:OVR::Net::TCPSocketPollState
IsWritable	Src/Kernel/OVR_File.h	/^    bool        IsWritable()        { return false; }$/;"	f	class:OVR::MemoryFile
IsWritable	Src/Kernel/OVR_File.h	/^    virtual bool        IsWritable()                                { return pFile->IsWritable(); }$/;"	f	class:OVR::DelegatedFile
IsWritable	Src/Kernel/OVR_FileFILE.cpp	/^bool    FILEFile::IsWritable()$/;"	f	class:OVR::FILEFile
IsWritable	Src/Kernel/OVR_SysFile.cpp	/^    virtual bool        IsWritable()                { return 0; }$/;"	f	class:OVR::UnopenedFile
ItemCount	Src/Kernel/OVR_Lockless.cpp	/^    enum { ItemCount = 20 };$/;"	e	enum:OVR::LocklessTest::TestData::__anon28	file:
Iterator	Src/Kernel/OVR_Array.h	/^        Iterator() : pArray(0), CurIndex(-1) {}$/;"	f	class:OVR::ArrayBase::Iterator
Iterator	Src/Kernel/OVR_Array.h	/^        Iterator(SelfType* parr, intptr_t idx = 0) : pArray(parr), CurIndex(idx) {}$/;"	f	class:OVR::ArrayBase::Iterator
Iterator	Src/Kernel/OVR_Array.h	/^    class Iterator$/;"	c	class:OVR::ArrayBase
Iterator	Src/Kernel/OVR_Hash.h	/^        Iterator()$/;"	f	struct:OVR::HashSetBase::Iterator
Iterator	Src/Kernel/OVR_Hash.h	/^        Iterator(SelfType* h, intptr_t i0)$/;"	f	struct:OVR::HashSetBase::Iterator
Iterator	Src/Kernel/OVR_Hash.h	/^    struct Iterator : public ConstIterator$/;"	s	class:OVR::HashSetBase
Iterator	Src/Kernel/OVR_Hash.h	/^    typedef typename Container::Iterator        Iterator;$/;"	t	class:OVR::Hash
JSON	Src/OVR_JSON.cpp	/^JSON::JSON(JSONItemType itemType) :$/;"	f	class:OVR::JSON
JSON	Src/OVR_JSON.h	/^class JSON : public RefCountBase<JSON>, public ListNode<JSON>$/;"	c	namespace:OVR
JSONItemType	Src/OVR_JSON.h	/^enum JSONItemType$/;"	g	namespace:OVR
JSON_Array	Src/OVR_JSON.h	/^    JSON_Array     = 5,$/;"	e	enum:OVR::JSONItemType
JSON_Bool	Src/OVR_JSON.h	/^    JSON_Bool      = 2,$/;"	e	enum:OVR::JSONItemType
JSON_None	Src/OVR_JSON.h	/^    JSON_None      = 0,$/;"	e	enum:OVR::JSONItemType
JSON_Null	Src/OVR_JSON.h	/^    JSON_Null      = 1,$/;"	e	enum:OVR::JSONItemType
JSON_Number	Src/OVR_JSON.h	/^    JSON_Number    = 3,$/;"	e	enum:OVR::JSONItemType
JSON_Object	Src/OVR_JSON.h	/^    JSON_Object    = 6$/;"	e	enum:OVR::JSONItemType
JSON_String	Src/OVR_JSON.h	/^    JSON_String    = 4,$/;"	e	enum:OVR::JSONItemType
JSON_strdup	Src/OVR_JSON.cpp	/^static char* JSON_strdup(const char* str)$/;"	f	namespace:OVR
Join	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Thread::Join(int maxWaitMs) const$/;"	f	class:OVR::Thread
JustInTime_AfterDistortionTimeMeasurement	Src/Util/Util_Render_Stereo.cpp	/^void    TimewarpMachine::JustInTime_AfterDistortionTimeMeasurement(double timeNow)$/;"	f	class:OVR::Util::Render::TimewarpMachine
JustInTime_AverageDistortionTime	Src/Util/Util_Render_Stereo.cpp	/^double TimewarpMachine::JustInTime_AverageDistortionTime()$/;"	f	class:OVR::Util::Render::TimewarpMachine
JustInTime_BeforeDistortionTimeMeasurement	Src/Util/Util_Render_Stereo.cpp	/^void    TimewarpMachine::JustInTime_BeforeDistortionTimeMeasurement(double timeNow)$/;"	f	class:OVR::Util::Render::TimewarpMachine
JustInTime_GetDistortionWaitUntilTime	Src/Util/Util_Render_Stereo.cpp	/^double  TimewarpMachine::JustInTime_GetDistortionWaitUntilTime()$/;"	f	class:OVR::Util::Render::TimewarpMachine
JustInTime_NeedDistortionTimeMeasurement	Src/Util/Util_Render_Stereo.cpp	/^bool    TimewarpMachine::JustInTime_NeedDistortionTimeMeasurement() const$/;"	f	class:OVR::Util::Render::TimewarpMachine
K	Src/OVR_Stereo.cpp	/^    uint16_t    K[11];$/;"	m	struct:OVR::LensConfigStored_CatmullRom10Version1	file:
K	Src/OVR_Stereo.h	/^    float               K[NumCoefficients];$/;"	m	struct:OVR::LensConfig
Key	Src/Kernel/OVR_Std.cpp	/^    uint16_t Key, Value;$/;"	m	struct:OVR::GUnicodePairType	file:
KeyCode	Src/Kernel/OVR_KeyCodes.h	/^enum KeyCode$/;"	g	namespace:OVR
KeyModifiers	Src/Kernel/OVR_KeyCodes.h	/^        KeyModifiers(unsigned char st) : States((unsigned char)(st | Initialized_Bit)) { }$/;"	f	class:OVR::KeyModifiers
KeyModifiers	Src/Kernel/OVR_KeyCodes.h	/^    KeyModifiers() : States(0) { }$/;"	f	class:OVR::KeyModifiers
KeyModifiers	Src/Kernel/OVR_KeyCodes.h	/^class KeyModifiers $/;"	c	namespace:OVR
KeyNames	Src/Service/Service_NetSessionCommon.cpp	/^static const char* KeyNames[][NetSessionCommon::ENumTypes] = {$/;"	m	namespace:OVR::Service	file:
Key_A	Src/Kernel/OVR_KeyCodes.h	/^    Key_A               = 65,$/;"	e	enum:OVR::KeyCode
Key_Alt	Src/Kernel/OVR_KeyCodes.h	/^    Key_Alt,$/;"	e	enum:OVR::KeyCode
Key_AltPressed	Src/Kernel/OVR_KeyCodes.h	/^        Key_AltPressed      = 0x04,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_B	Src/Kernel/OVR_KeyCodes.h	/^    Key_B,$/;"	e	enum:OVR::KeyCode
Key_Backslash	Src/Kernel/OVR_KeyCodes.h	/^    Key_Backslash,$/;"	e	enum:OVR::KeyCode
Key_Backspace	Src/Kernel/OVR_KeyCodes.h	/^    Key_Backspace       = 8,$/;"	e	enum:OVR::KeyCode
Key_Backtick	Src/Kernel/OVR_KeyCodes.h	/^    Key_Backtick        = 96,   \/\/ ` and tilda~ when shifted (US keyboard)$/;"	e	enum:OVR::KeyCode
Key_BracketLeft	Src/Kernel/OVR_KeyCodes.h	/^    Key_BracketLeft     = 91,$/;"	e	enum:OVR::KeyCode
Key_BracketRight	Src/Kernel/OVR_KeyCodes.h	/^    Key_BracketRight,$/;"	e	enum:OVR::KeyCode
Key_C	Src/Kernel/OVR_KeyCodes.h	/^    Key_C,$/;"	e	enum:OVR::KeyCode
Key_CapsLock	Src/Kernel/OVR_KeyCodes.h	/^    Key_CapsLock        = 20, \/\/ Toggle$/;"	e	enum:OVR::KeyCode
Key_CapsToggled	Src/Kernel/OVR_KeyCodes.h	/^        Key_CapsToggled     = 0x10,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_Clear	Src/Kernel/OVR_KeyCodes.h	/^    Key_Clear           = 12,$/;"	e	enum:OVR::KeyCode
Key_CodeCount	Src/Kernel/OVR_KeyCodes.h	/^    Key_CodeCount$/;"	e	enum:OVR::KeyCode
Key_Comma	Src/Kernel/OVR_KeyCodes.h	/^    Key_Comma           = 44,$/;"	e	enum:OVR::KeyCode
Key_Control	Src/Kernel/OVR_KeyCodes.h	/^    Key_Control,$/;"	e	enum:OVR::KeyCode
Key_CtrlPressed	Src/Kernel/OVR_KeyCodes.h	/^        Key_CtrlPressed     = 0x02,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_D	Src/Kernel/OVR_KeyCodes.h	/^    Key_D,$/;"	e	enum:OVR::KeyCode
Key_Delete	Src/Kernel/OVR_KeyCodes.h	/^    Key_Delete,$/;"	e	enum:OVR::KeyCode
Key_Down	Src/Kernel/OVR_KeyCodes.h	/^    Key_Down,$/;"	e	enum:OVR::KeyCode
Key_E	Src/Kernel/OVR_KeyCodes.h	/^    Key_E,$/;"	e	enum:OVR::KeyCode
Key_End	Src/Kernel/OVR_KeyCodes.h	/^    Key_End,$/;"	e	enum:OVR::KeyCode
Key_Equal	Src/Kernel/OVR_KeyCodes.h	/^    Key_Equal           = 61,$/;"	e	enum:OVR::KeyCode
Key_Escape	Src/Kernel/OVR_KeyCodes.h	/^    Key_Escape          = 27,$/;"	e	enum:OVR::KeyCode
Key_F	Src/Kernel/OVR_KeyCodes.h	/^    Key_F,$/;"	e	enum:OVR::KeyCode
Key_F1	Src/Kernel/OVR_KeyCodes.h	/^    Key_F1              = 0xb0,$/;"	e	enum:OVR::KeyCode
Key_F10	Src/Kernel/OVR_KeyCodes.h	/^    Key_F10,$/;"	e	enum:OVR::KeyCode
Key_F11	Src/Kernel/OVR_KeyCodes.h	/^    Key_F11,$/;"	e	enum:OVR::KeyCode
Key_F12	Src/Kernel/OVR_KeyCodes.h	/^    Key_F12,$/;"	e	enum:OVR::KeyCode
Key_F13	Src/Kernel/OVR_KeyCodes.h	/^    Key_F13,$/;"	e	enum:OVR::KeyCode
Key_F14	Src/Kernel/OVR_KeyCodes.h	/^    Key_F14,$/;"	e	enum:OVR::KeyCode
Key_F15	Src/Kernel/OVR_KeyCodes.h	/^    Key_F15,$/;"	e	enum:OVR::KeyCode
Key_F2	Src/Kernel/OVR_KeyCodes.h	/^    Key_F2,$/;"	e	enum:OVR::KeyCode
Key_F3	Src/Kernel/OVR_KeyCodes.h	/^    Key_F3,$/;"	e	enum:OVR::KeyCode
Key_F4	Src/Kernel/OVR_KeyCodes.h	/^    Key_F4,$/;"	e	enum:OVR::KeyCode
Key_F5	Src/Kernel/OVR_KeyCodes.h	/^    Key_F5,$/;"	e	enum:OVR::KeyCode
Key_F6	Src/Kernel/OVR_KeyCodes.h	/^    Key_F6,$/;"	e	enum:OVR::KeyCode
Key_F7	Src/Kernel/OVR_KeyCodes.h	/^    Key_F7,$/;"	e	enum:OVR::KeyCode
Key_F8	Src/Kernel/OVR_KeyCodes.h	/^    Key_F8,$/;"	e	enum:OVR::KeyCode
Key_F9	Src/Kernel/OVR_KeyCodes.h	/^    Key_F9,$/;"	e	enum:OVR::KeyCode
Key_G	Src/Kernel/OVR_KeyCodes.h	/^    Key_G,$/;"	e	enum:OVR::KeyCode
Key_H	Src/Kernel/OVR_KeyCodes.h	/^    Key_H,$/;"	e	enum:OVR::KeyCode
Key_Help	Src/Kernel/OVR_KeyCodes.h	/^    Key_Help,$/;"	e	enum:OVR::KeyCode
Key_Home	Src/Kernel/OVR_KeyCodes.h	/^    Key_Home,$/;"	e	enum:OVR::KeyCode
Key_I	Src/Kernel/OVR_KeyCodes.h	/^    Key_I,$/;"	e	enum:OVR::KeyCode
Key_ICO_00	Src/Kernel/OVR_KeyCodes.h	/^    Key_ICO_00          = 0xE4,  \/\/  00 key on ICO$/;"	e	enum:OVR::KeyCode
Key_ICO_HELP	Src/Kernel/OVR_KeyCodes.h	/^    Key_ICO_HELP        = 0xE3,  \/\/  Help key on ICO$/;"	e	enum:OVR::KeyCode
Key_Insert	Src/Kernel/OVR_KeyCodes.h	/^    Key_Insert,$/;"	e	enum:OVR::KeyCode
Key_J	Src/Kernel/OVR_KeyCodes.h	/^    Key_J,$/;"	e	enum:OVR::KeyCode
Key_K	Src/Kernel/OVR_KeyCodes.h	/^    Key_K,$/;"	e	enum:OVR::KeyCode
Key_KP_0	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_0            = 0xa0,$/;"	e	enum:OVR::KeyCode
Key_KP_1	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_1,$/;"	e	enum:OVR::KeyCode
Key_KP_2	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_2,$/;"	e	enum:OVR::KeyCode
Key_KP_3	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_3,$/;"	e	enum:OVR::KeyCode
Key_KP_4	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_4,$/;"	e	enum:OVR::KeyCode
Key_KP_5	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_5,$/;"	e	enum:OVR::KeyCode
Key_KP_6	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_6,$/;"	e	enum:OVR::KeyCode
Key_KP_7	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_7,$/;"	e	enum:OVR::KeyCode
Key_KP_8	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_8,$/;"	e	enum:OVR::KeyCode
Key_KP_9	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_9,$/;"	e	enum:OVR::KeyCode
Key_KP_Add	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Add,$/;"	e	enum:OVR::KeyCode
Key_KP_Decimal	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Decimal,$/;"	e	enum:OVR::KeyCode
Key_KP_Divide	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Divide,$/;"	e	enum:OVR::KeyCode
Key_KP_Enter	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Enter,$/;"	e	enum:OVR::KeyCode
Key_KP_Multiply	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Multiply,$/;"	e	enum:OVR::KeyCode
Key_KP_Subtract	Src/Kernel/OVR_KeyCodes.h	/^    Key_KP_Subtract,$/;"	e	enum:OVR::KeyCode
Key_L	Src/Kernel/OVR_KeyCodes.h	/^    Key_L,$/;"	e	enum:OVR::KeyCode
Key_Left	Src/Kernel/OVR_KeyCodes.h	/^    Key_Left,$/;"	e	enum:OVR::KeyCode
Key_M	Src/Kernel/OVR_KeyCodes.h	/^    Key_M,$/;"	e	enum:OVR::KeyCode
Key_Meta	Src/Kernel/OVR_KeyCodes.h	/^    Key_Meta,$/;"	e	enum:OVR::KeyCode
Key_MetaPressed	Src/Kernel/OVR_KeyCodes.h	/^        Key_MetaPressed     = 0x08,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_Minus	Src/Kernel/OVR_KeyCodes.h	/^    Key_Minus,$/;"	e	enum:OVR::KeyCode
Key_N	Src/Kernel/OVR_KeyCodes.h	/^    Key_N,$/;"	e	enum:OVR::KeyCode
Key_None	Src/Kernel/OVR_KeyCodes.h	/^    Key_None            = 0, $/;"	e	enum:OVR::KeyCode
Key_Num0	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num0            = 48,$/;"	e	enum:OVR::KeyCode
Key_Num1	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num1,$/;"	e	enum:OVR::KeyCode
Key_Num2	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num2,$/;"	e	enum:OVR::KeyCode
Key_Num3	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num3,$/;"	e	enum:OVR::KeyCode
Key_Num4	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num4,$/;"	e	enum:OVR::KeyCode
Key_Num5	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num5,$/;"	e	enum:OVR::KeyCode
Key_Num6	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num6,$/;"	e	enum:OVR::KeyCode
Key_Num7	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num7,$/;"	e	enum:OVR::KeyCode
Key_Num8	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num8,$/;"	e	enum:OVR::KeyCode
Key_Num9	Src/Kernel/OVR_KeyCodes.h	/^    Key_Num9,$/;"	e	enum:OVR::KeyCode
Key_NumLock	Src/Kernel/OVR_KeyCodes.h	/^    Key_NumLock         = 144, \/\/ Toggle$/;"	e	enum:OVR::KeyCode
Key_NumToggled	Src/Kernel/OVR_KeyCodes.h	/^        Key_NumToggled      = 0x20,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_O	Src/Kernel/OVR_KeyCodes.h	/^    Key_O,$/;"	e	enum:OVR::KeyCode
Key_OEM_102	Src/Kernel/OVR_KeyCodes.h	/^    Key_OEM_102         = 0xE2,  \/\/  "<>" or "\\|" on RT 102-key keyboard.$/;"	e	enum:OVR::KeyCode
Key_OEM_AX	Src/Kernel/OVR_KeyCodes.h	/^    Key_OEM_AX          = 0xE1,  \/\/  'AX' key on Japanese AX keyboard$/;"	e	enum:OVR::KeyCode
Key_P	Src/Kernel/OVR_KeyCodes.h	/^    Key_P,$/;"	e	enum:OVR::KeyCode
Key_PageDown	Src/Kernel/OVR_KeyCodes.h	/^    Key_PageDown,$/;"	e	enum:OVR::KeyCode
Key_PageUp	Src/Kernel/OVR_KeyCodes.h	/^    Key_PageUp          = 0xc0,$/;"	e	enum:OVR::KeyCode
Key_Pause	Src/Kernel/OVR_KeyCodes.h	/^    Key_Pause,$/;"	e	enum:OVR::KeyCode
Key_Period	Src/Kernel/OVR_KeyCodes.h	/^    Key_Period,$/;"	e	enum:OVR::KeyCode
Key_Q	Src/Kernel/OVR_KeyCodes.h	/^    Key_Q,$/;"	e	enum:OVR::KeyCode
Key_Quote	Src/Kernel/OVR_KeyCodes.h	/^    Key_Quote           = 39,$/;"	e	enum:OVR::KeyCode
Key_R	Src/Kernel/OVR_KeyCodes.h	/^    Key_R,$/;"	e	enum:OVR::KeyCode
Key_Return	Src/Kernel/OVR_KeyCodes.h	/^    Key_Return,$/;"	e	enum:OVR::KeyCode
Key_Right	Src/Kernel/OVR_KeyCodes.h	/^    Key_Right,$/;"	e	enum:OVR::KeyCode
Key_S	Src/Kernel/OVR_KeyCodes.h	/^    Key_S,$/;"	e	enum:OVR::KeyCode
Key_ScrollLock	Src/Kernel/OVR_KeyCodes.h	/^    Key_ScrollLock      = 145, \/\/ Toggle$/;"	e	enum:OVR::KeyCode
Key_ScrollToggled	Src/Kernel/OVR_KeyCodes.h	/^        Key_ScrollToggled   = 0x40,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_Semicolon	Src/Kernel/OVR_KeyCodes.h	/^    Key_Semicolon       = 59,$/;"	e	enum:OVR::KeyCode
Key_Shift	Src/Kernel/OVR_KeyCodes.h	/^    Key_Shift           = 16,$/;"	e	enum:OVR::KeyCode
Key_ShiftPressed	Src/Kernel/OVR_KeyCodes.h	/^        Key_ShiftPressed    = 0x01,$/;"	e	enum:OVR::KeyModifiers::__anon30
Key_Slash	Src/Kernel/OVR_KeyCodes.h	/^    Key_Slash           = 47,$/;"	e	enum:OVR::KeyCode
Key_Space	Src/Kernel/OVR_KeyCodes.h	/^    Key_Space           = 32,$/;"	e	enum:OVR::KeyCode
Key_T	Src/Kernel/OVR_KeyCodes.h	/^    Key_T,$/;"	e	enum:OVR::KeyCode
Key_Tab	Src/Kernel/OVR_KeyCodes.h	/^    Key_Tab,$/;"	e	enum:OVR::KeyCode
Key_U	Src/Kernel/OVR_KeyCodes.h	/^    Key_U,$/;"	e	enum:OVR::KeyCode
Key_Up	Src/Kernel/OVR_KeyCodes.h	/^    Key_Up,$/;"	e	enum:OVR::KeyCode
Key_V	Src/Kernel/OVR_KeyCodes.h	/^    Key_V,$/;"	e	enum:OVR::KeyCode
Key_W	Src/Kernel/OVR_KeyCodes.h	/^    Key_W,$/;"	e	enum:OVR::KeyCode
Key_X	Src/Kernel/OVR_KeyCodes.h	/^    Key_X,$/;"	e	enum:OVR::KeyCode
Key_Y	Src/Kernel/OVR_KeyCodes.h	/^    Key_Y,$/;"	e	enum:OVR::KeyCode
Key_Z	Src/Kernel/OVR_KeyCodes.h	/^    Key_Z,$/;"	e	enum:OVR::KeyCode
LCSV_CatmullRom10Version1	Src/OVR_Stereo.cpp	/^    LCSV_CatmullRom10Version1 = 1$/;"	e	enum:OVR::LensConfigStoredVersion	file:
LENGTH_FIELD_BYTES	Src/Net/OVR_PacketizedTCPSocket.cpp	/^static const int LENGTH_FIELD_BYTES = 4;$/;"	m	namespace:OVR::Net	file:
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline double   LEToSystem(double v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline double   LEToSystem(double v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline float    LEToSystem(float  v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline float    LEToSystem(float  v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int16_t  LEToSystem(int16_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int16_t  LEToSystem(int16_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int32_t  LEToSystem(int32_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int32_t  LEToSystem(int32_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int64_t  LEToSystem(int64_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int64_t  LEToSystem(int64_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int8_t   LEToSystem(int8_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline int8_t   LEToSystem(int8_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint16_t LEToSystem(uint16_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint16_t LEToSystem(uint16_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint32_t LEToSystem(uint32_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint32_t LEToSystem(uint32_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint64_t LEToSystem(uint64_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint64_t LEToSystem(uint64_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  LEToSystem(uint8_t  v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
LEToSystem	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  LEToSystem(uint8_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
LGetLength	Src/Kernel/OVR_File.cpp	/^int64_t BufferedFile::LGetLength()$/;"	f	class:OVR::BufferedFile
LGetLength	Src/Kernel/OVR_File.h	/^    int64_t     LGetLength()        { return (int64_t) FileSize; }$/;"	f	class:OVR::MemoryFile
LGetLength	Src/Kernel/OVR_File.h	/^    virtual int64_t     LGetLength()                                { return pFile->LGetLength(); }$/;"	f	class:OVR::DelegatedFile
LGetLength	Src/Kernel/OVR_FileFILE.cpp	/^int64_t FILEFile::LGetLength()$/;"	f	class:OVR::FILEFile
LGetLength	Src/Kernel/OVR_SysFile.cpp	/^    virtual int64_t     LGetLength()                { return 0; }$/;"	f	class:OVR::UnopenedFile
LIBOVRPATH	Makefile	/^LIBOVRPATH    = .$/;"	m
LIBOVR_OBJECTS	Makefile	/^LIBOVR_OBJECTS = $(patsubst $(LIBOVRPATH)%.cpp,$(OBJPATH)%.o,$(LIBOVR_SOURCE))$/;"	m
LIBOVR_SOURCE	Makefile	/^LIBOVR_SOURCE = 	$(LIBOVRPATH)\/Src\/Net\/OVR_BitStream.cpp \\$/;"	m
LINK	Makefile	/^LINK          = $/;"	m
LPFN_ISWOW64PROCESS	Src/Util/Util_SystemInfo.cpp	/^typedef BOOL(WINAPI *LPFN_ISWOW64PROCESS) (HANDLE, PBOOL);$/;"	t	namespace:OVR::Util	file:
LRR_BREAK	Src/Net/OVR_Session.h	/^	LRR_BREAK,$/;"	e	enum:OVR::Net::ListenerReceiveResult
LRR_CONTINUE	Src/Net/OVR_Session.h	/^    LRR_CONTINUE,$/;"	e	enum:OVR::Net::ListenerReceiveResult
LRR_RETURN	Src/Net/OVR_Session.h	/^	LRR_RETURN = 0,$/;"	e	enum:OVR::Net::ListenerReceiveResult
LSeek	Src/Kernel/OVR_File.cpp	/^int64_t BufferedFile::LSeek(int64_t offset, int origin)$/;"	f	class:OVR::BufferedFile
LSeek	Src/Kernel/OVR_File.h	/^    int64_t     LSeek(int64_t offset, int origin = Seek_Set)$/;"	f	class:OVR::MemoryFile
LSeek	Src/Kernel/OVR_File.h	/^    virtual int64_t     LSeek(int64_t offset, int origin=Seek_Set)   { return pFile->LSeek(offset,origin); }$/;"	f	class:OVR::DelegatedFile
LSeek	Src/Kernel/OVR_FileFILE.cpp	/^int64_t FILEFile::LSeek(int64_t offset, int origin)$/;"	f	class:OVR::FILEFile
LSeek	Src/Kernel/OVR_SysFile.cpp	/^    virtual int64_t     LSeek(int64_t \/*offset*\/, int \/*origin*\/)            { return -1; }$/;"	f	class:OVR::UnopenedFile
LT2_ColorIncrement	Src/Util/Util_LatencyTest2State.h	/^    LT2_ColorIncrement                  = 32,$/;"	e	enum:OVR::Util::LatencyTester2Constants
LT2_IncrementCount	Src/Util/Util_LatencyTest2State.h	/^    LT2_IncrementCount                  = 256 \/ LT2_ColorIncrement,$/;"	e	enum:OVR::Util::LatencyTester2Constants
LT2_PixelTestThreshold	Src/Util/Util_LatencyTest2State.h	/^    LT2_PixelTestThreshold              = LT2_ColorIncrement \/ 3,$/;"	e	enum:OVR::Util::LatencyTester2Constants
LT2_TimeoutWaitingForColorDetected	Src/Util/Util_LatencyTest2State.h	/^    LT2_TimeoutWaitingForColorDetected  = 1000  \/\/ 1 second$/;"	e	enum:OVR::Util::LatencyTester2Constants
LTell	Src/Kernel/OVR_File.cpp	/^int64_t BufferedFile::LTell()$/;"	f	class:OVR::BufferedFile
LTell	Src/Kernel/OVR_File.h	/^    int64_t     LTell()             { return (int64_t) FileIndex; }$/;"	f	class:OVR::MemoryFile
LTell	Src/Kernel/OVR_File.h	/^    virtual int64_t     LTell()                                     { return pFile->LTell(); }$/;"	f	class:OVR::DelegatedFile
LTell	Src/Kernel/OVR_FileFILE.cpp	/^int64_t FILEFile::LTell()$/;"	f	class:OVR::FILEFile
LTell	Src/Kernel/OVR_SysFile.cpp	/^    virtual int64_t     LTell()                     { return 0; }$/;"	f	class:OVR::UnopenedFile
LabelType	Src/OVR_SerialFormat.h	/^	DK2LabelType LabelType;         \/\/ [1 char] 0 means HMD, 1 means PTC(camera), 2 means Overpack(bundle)$/;"	m	class:OVR::DK2PrintedSerialFormat
LagStats	Src/CAPI/CAPI_HMDState.h	/^    LagStatsCalculator      LagStats;$/;"	m	class:OVR::CAPI::HMDState
LagStatsCSV	Src/CAPI/CAPI_HMDState.h	/^    LatencyStatisticsCSV    LagStatsCSV;$/;"	m	class:OVR::CAPI::HMDState
LagStatsCalculator	Src/CAPI/CAPI_LatencyStatistics.cpp	/^LagStatsCalculator::LagStatsCalculator()$/;"	f	class:OVR::CAPI::LagStatsCalculator
LagStatsCalculator	Src/CAPI/CAPI_LatencyStatistics.h	/^class LagStatsCalculator$/;"	c	namespace:OVR::CAPI
Last	Src/Kernel/OVR_Array.h	/^    ConstIterator Last() const  { return ConstIterator(this, (intptr_t)GetSize() - 1); }$/;"	f	class:OVR::ArrayBase
Last	Src/Kernel/OVR_Array.h	/^    Iterator Last()  { return Iterator(this, (intptr_t)GetSize() - 1); }$/;"	f	class:OVR::ArrayBase
LastCameraFrameCounter	Src/CAPI/CAPI_LatencyStatistics.h	/^    uint32_t            LastCameraFrameCounter;$/;"	m	class:OVR::CAPI::LagStatsCalculator
LastCameraFrameCounter	Src/OVR_CAPI.h	/^    uint32_t LastCameraFrameCounter;$/;"	m	struct:ovrTrackingState_
LastCameraFrameCounter	Src/Tracking/Tracking_SensorState.h	/^    uint32_t          LastCameraFrameCounter;$/;"	m	struct:OVR::Tracking::LocklessSensorState
LastCameraFrameCounter	Src/Tracking/Tracking_SensorState.h	/^    uint32_t LastCameraFrameCounter;$/;"	m	class:OVR::Tracking::TrackingState
LastFramePresentFlushTime	Src/Util/Util_Render_Stereo.h	/^    double              LastFramePresentFlushTime;$/;"	m	class:OVR::Util::Render::TimewarpMachine
LastFrameTimeSeconds	Src/CAPI/CAPI_HMDState.h	/^    double                  LastFrameTimeSeconds;    $/;"	m	class:OVR::CAPI::HMDState
LastGetFrameTimeSeconds	Src/CAPI/CAPI_HMDState.h	/^    double                  LastGetFrameTimeSeconds;$/;"	m	class:OVR::CAPI::HMDState
LastGetStringValue	Src/CAPI/CAPI_HMDState.h	/^    char                    LastGetStringValue[256];$/;"	m	class:OVR::CAPI::HMDState
LastHSWTime	Src/CAPI/CAPI_HSWDisplay.h	/^    mutable int            LastHSWTime;$/;"	m	class:OVR::CAPI::HSWDisplay
LastLatWarnTime	Src/Tracking/Tracking_SensorStateReader.h	/^    mutable double LastLatWarnTime;$/;"	m	class:OVR::Tracking::SensorStateReader
LastOp	Src/Kernel/OVR_FileFILE.cpp	/^    int         LastOp;$/;"	m	class:OVR::FILEFile	file:
LastPollTime	Src/CAPI/CAPI_HSWDisplay.h	/^    double                 LastPollTime;            \/\/ Used to prevent us from polling the required display state every frame but rather more like every 200 milliseconds.$/;"	m	class:OVR::CAPI::HSWDisplay
LastProfileName	Src/CAPI/CAPI_HSWDisplay.h	/^    mutable String         LastProfileName;$/;"	m	class:OVR::CAPI::HSWDisplay
LastResultNanos	Src/Kernel/OVR_Timer.cpp	/^    uint64_t        LastResultNanos;$/;"	m	struct:OVR::PerformanceTimer	file:
LastUsedOverdriveTextureIndex	Src/CAPI/CAPI_DistortionRenderer.h	/^	int					LastUsedOverdriveTextureIndex;$/;"	m	class:OVR::CAPI::DistortionRenderer
LastVisionFrameLatency	Src/OVR_CAPI.h	/^    double LastVisionFrameLatency;$/;"	m	struct:ovrTrackingState_
LastVisionFrameLatency	Src/Tracking/Tracking_SensorState.h	/^    double            LastVisionFrameLatency;$/;"	m	struct:OVR::Tracking::LocklessSensorState
LastVisionFrameLatency	Src/Tracking/Tracking_SensorState.h	/^    double LastVisionFrameLatency;$/;"	m	class:OVR::Tracking::TrackingState
LastVisionProcessingTime	Src/OVR_CAPI.h	/^    double LastVisionProcessingTime;$/;"	m	struct:ovrTrackingState_
LastVisionProcessingTime	Src/Tracking/Tracking_SensorState.h	/^    double            LastVisionProcessingTime;$/;"	m	struct:OVR::Tracking::LocklessSensorState
LastVisionProcessingTime	Src/Tracking/Tracking_SensorState.h	/^    double LastVisionProcessingTime;$/;"	m	class:OVR::Tracking::TrackingState
LatencyPostPresent	Src/CAPI/CAPI_LatencyStatistics.h	/^    float LatencyPostPresent;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
LatencyRecordTime	Src/CAPI/CAPI_FrameTimeManager.h	/^    double                LatencyRecordTime;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
LatencyRender	Src/CAPI/CAPI_LatencyStatistics.h	/^    float LatencyRender;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
LatencyStatisticsCSV	Src/CAPI/CAPI_LatencyStatistics.cpp	/^LatencyStatisticsCSV::LatencyStatisticsCSV()$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
LatencyStatisticsCSV	Src/CAPI/CAPI_LatencyStatistics.h	/^class LatencyStatisticsCSV$/;"	c	namespace:OVR::CAPI
LatencyStatisticsResults	Src/CAPI/CAPI_LatencyStatistics.h	/^struct LatencyStatisticsResults$/;"	s	namespace:OVR::CAPI
LatencyStatisticsSlot	Src/CAPI/CAPI_LatencyStatistics.h	/^typedef Delegate1<void, LatencyStatisticsResults*> LatencyStatisticsSlot;$/;"	t	namespace:OVR::CAPI
LatencyTest2Active	Src/CAPI/CAPI_DistortionRenderer.h	/^    bool                LatencyTest2Active;$/;"	m	class:OVR::CAPI::DistortionRenderer
LatencyTest2Active	Src/CAPI/CAPI_HMDState.h	/^    bool                    LatencyTest2Active;$/;"	m	class:OVR::CAPI::HMDState
LatencyTest2DrawColor	Src/CAPI/CAPI_DistortionRenderer.h	/^    unsigned char       LatencyTest2DrawColor[3];$/;"	m	class:OVR::CAPI::DistortionRenderer
LatencyTest2DrawColor	Src/CAPI/CAPI_HMDState.h	/^    unsigned char           LatencyTest2DrawColor[3];$/;"	m	class:OVR::CAPI::HMDState
LatencyTestActive	Src/CAPI/CAPI_DistortionRenderer.h	/^    bool                LatencyTestActive;$/;"	m	class:OVR::CAPI::DistortionRenderer
LatencyTestActive	Src/CAPI/CAPI_HMDState.h	/^    bool                    LatencyTestActive;$/;"	m	class:OVR::CAPI::HMDState
LatencyTestDrawColor	Src/CAPI/CAPI_DistortionRenderer.h	/^    unsigned char       LatencyTestDrawColor[3];$/;"	m	class:OVR::CAPI::DistortionRenderer
LatencyTestDrawColor	Src/CAPI/CAPI_HMDState.h	/^    unsigned char           LatencyTestDrawColor[3];$/;"	m	class:OVR::CAPI::HMDState
LatencyTester2Constants	Src/Util/Util_LatencyTest2State.h	/^enum LatencyTester2Constants$/;"	g	namespace:OVR::Util
LatencyTesterAvailable	Src/Service/Service_NetClient.h	/^    bool          LatencyTesterAvailable;$/;"	m	class:OVR::Service::NetClient
LatencyTesterAvailableScope	Src/Service/Service_NetClient.h	/^    ObserverScope<Net::Plugins::RPCSlot> LatencyTesterAvailableScope;$/;"	m	class:OVR::Service::NetClient
LatencyTesterAvailable_1	Src/Service/Service_NetClient.cpp	/^void NetClient::LatencyTesterAvailable_1(BitStream* userData, ReceivePayload* pPayload)$/;"	f	class:OVR::Service::NetClient
LatencyTesterQuadVB	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<Buffer>         LatencyTesterQuadVB;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
LatencyTimewarp	Src/CAPI/CAPI_LatencyStatistics.h	/^    float LatencyTimewarp;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
LatencyUtil_GetResultsString	Src/Service/Service_NetClient.cpp	/^const char* NetClient::LatencyUtil_GetResultsString()$/;"	f	class:OVR::Service::NetClient
LatencyUtil_GetResultsString_Str	Src/Service/Service_NetClient.h	/^    String       LatencyUtil_GetResultsString_Str;$/;"	m	class:OVR::Service::NetClient
LatencyUtil_ProcessInputs	Src/Service/Service_NetClient.cpp	/^bool NetClient::LatencyUtil_ProcessInputs(double startTestSeconds, unsigned char rgbColorOut[3])$/;"	f	class:OVR::Service::NetClient
LatencyVAO	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLuint              LatencyVAO;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
LatencyVertex	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    LatencyVertex (const Vector3f& p) : Pos(p) {}$/;"	f	struct:OVR::CAPI::GL::LatencyVertex
LatencyVertex	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^struct LatencyVertex$/;"	s	namespace:OVR::CAPI::GL	file:
LatencyVisionFrame	Src/CAPI/CAPI_LatencyStatistics.h	/^    double LatencyVisionFrame;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
LatencyVisionProc	Src/CAPI/CAPI_LatencyStatistics.h	/^    double LatencyVisionProc;$/;"	m	struct:OVR::CAPI::LatencyStatisticsResults
Left	Src/Util/Util_Render_Stereo.h	/^    ViewportScaleAndOffset  Left;$/;"	m	struct:OVR::Util::Render::ViewportScaleAndOffsetBothEyes
LeftTan	Src/OVR_CAPI.h	/^    float LeftTan;$/;"	m	struct:ovrFovPort_
LeftTan	Src/OVR_Stereo.h	/^    float LeftTan;$/;"	m	struct:OVR::FovPort
Length	Src/Kernel/OVR_Math.h	/^    T       Length() const                       { return sqrt(LengthSq()); }$/;"	f	class:OVR::Vector2
Length	Src/Kernel/OVR_Math.h	/^    T       Length() const                       { return sqrt(LengthSq()); }$/;"	f	class:OVR::Vector3
Length	Src/Kernel/OVR_Math.h	/^    T       Length() const                       { return sqrt(LengthSq()); }$/;"	f	class:OVR::Vector4
Length	Src/Kernel/OVR_Math.h	/^    T       Length() const                  { return sqrt(LengthSq()); }$/;"	f	class:OVR::Quat
LengthIsSize	Src/Kernel/OVR_String.h	/^        bool        LengthIsSize() const    { return GetLengthFlag() != 0; }$/;"	f	struct:OVR::String::DataDesc
LengthIsSize	Src/Kernel/OVR_String.h	/^    mutable bool    LengthIsSize;    $/;"	m	class:OVR::StringBuffer
LengthSq	Src/Kernel/OVR_Math.h	/^    T       LengthSq() const                     { return (x * x + y * y + z * z + w * w); }$/;"	f	class:OVR::Vector4
LengthSq	Src/Kernel/OVR_Math.h	/^    T       LengthSq() const                     { return (x * x + y * y + z * z); }$/;"	f	class:OVR::Vector3
LengthSq	Src/Kernel/OVR_Math.h	/^    T       LengthSq() const                     { return (x * x + y * y); }$/;"	f	class:OVR::Vector2
LengthSq	Src/Kernel/OVR_Math.h	/^    T       LengthSq() const                { return (x * x + y * y + z * z + w * w); }$/;"	f	class:OVR::Quat
Lens	Src/OVR_Stereo.h	/^    LensConfig          Lens;$/;"	m	struct:OVR::DistortionRenderDesc
LensCenter	Src/OVR_Stereo.h	/^    Vector2f            LensCenter;$/;"	m	struct:OVR::DistortionRenderDesc
LensConfig	Src/OVR_Stereo.h	/^    LensConfig()$/;"	f	struct:OVR::LensConfig
LensConfig	Src/OVR_Stereo.h	/^struct LensConfig$/;"	s	namespace:OVR
LensConfigStoredVersion	Src/OVR_Stereo.cpp	/^enum LensConfigStoredVersion$/;"	g	namespace:OVR	file:
LensConfigStored_CatmullRom10Version1	Src/OVR_Stereo.cpp	/^struct LensConfigStored_CatmullRom10Version1$/;"	s	namespace:OVR	file:
LensDiameterInMeters	Src/OVR_Stereo.h	/^    float       LensDiameterInMeters;$/;"	m	struct:OVR::HmdRenderInfo
LensOverrideLeft	Src/Util/Util_Render_Stereo.h	/^    LensConfig         LensOverrideLeft;$/;"	m	class:OVR::Util::Render::StereoConfig
LensOverrideRight	Src/Util/Util_Render_Stereo.h	/^    LensConfig         LensOverrideRight;$/;"	m	class:OVR::Util::Render::StereoConfig
LensSeparationInMeters	Src/OVR_Stereo.h	/^	float       LensSeparationInMeters;$/;"	m	class:OVR::HMDInfo
LensSeparationInMeters	Src/OVR_Stereo.h	/^    float       LensSeparationInMeters;$/;"	m	struct:OVR::HmdRenderInfo
LensSurfaceToMidplateInMeters	Src/OVR_Stereo.h	/^    float       LensSurfaceToMidplateInMeters;$/;"	m	struct:OVR::HmdRenderInfo
Lerp	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE T       Lerp(T a, T b, T f) $/;"	f	namespace:OVR::Alg
Lerp	Src/Kernel/OVR_Math.h	/^    Vector2 Lerp(const Vector2& b, T f) const    { return *this*(T(1) - f) + b*f; }$/;"	f	class:OVR::Vector2
Lerp	Src/Kernel/OVR_Math.h	/^    Vector3 Lerp(const Vector3& b, T f) const    { return *this*(T(1) - f) + b*f; }$/;"	f	class:OVR::Vector3
LeveledCameraPose	Src/OVR_CAPI.h	/^    ovrPosef       LeveledCameraPose;$/;"	m	struct:ovrTrackingState_
LeveledCameraPose	Src/Tracking/Tracking_SensorState.h	/^    Posef        LeveledCameraPose;$/;"	m	class:OVR::Tracking::TrackingState
Lighting	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Lighting;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
LightingVer	Src/CAPI/GL/CAPI_GL_Util.h	/^    int       LightingVer;$/;"	m	class:OVR::CAPI::GL::ShaderSet
LinearAcceleration	Src/OVR_CAPI.h	/^    ovrVector3f  LinearAcceleration;$/;"	m	struct:ovrPoseStatef_
LinearAcceleration	Src/Tracking/Tracking_PoseState.h	/^	Vector3<T>  LinearAcceleration;$/;"	m	class:OVR::PoseState
LinearVelocity	Src/OVR_CAPI.h	/^    ovrVector3f  LinearVelocity;$/;"	m	struct:ovrPoseStatef_
LinearVelocity	Src/Tracking/Tracking_PoseState.h	/^	Vector3<T>  LinearVelocity;$/;"	m	class:OVR::PoseState
Link	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool ShaderSet::Link()$/;"	f	class:OVR::CAPI::GL::ShaderSet
Linux	Src/Displays/OVR_Linux_Display.h	/^namespace OVR { namespace Linux {$/;"	n	namespace:OVR
LinuxDeviceScreen	Src/Displays/OVR_Linux_SDKWindow.h	/^    LinuxDeviceScreen() :$/;"	f	struct:OVR::LinuxDeviceScreen
LinuxDeviceScreen	Src/Displays/OVR_Linux_SDKWindow.h	/^struct LinuxDeviceScreen$/;"	s	namespace:OVR
LinuxDisplayGeneric	Src/Displays/OVR_Linux_Display.h	/^    LinuxDisplayGeneric( const DisplayDesc& dd ) :$/;"	f	class:OVR::Linux::LinuxDisplayGeneric
LinuxDisplayGeneric	Src/Displays/OVR_Linux_Display.h	/^class LinuxDisplayGeneric : public Display$/;"	c	namespace:OVR::Linux
LinuxDisplaySearchHandle	Src/Displays/OVR_Linux_Display.h	/^    LinuxDisplaySearchHandle() :$/;"	f	class:OVR::Linux::LinuxDisplaySearchHandle
LinuxDisplaySearchHandle	Src/Displays/OVR_Linux_Display.h	/^class LinuxDisplaySearchHandle : public DisplaySearchHandle$/;"	c	namespace:OVR::Linux
List	Src/Kernel/OVR_List.h	/^    List()$/;"	f	class:OVR::List
List	Src/Kernel/OVR_List.h	/^template<class T, class B = T> class List$/;"	c	namespace:OVR
ListNode	Src/Kernel/OVR_List.h	/^struct ListNode$/;"	s	namespace:OVR
Listen	Src/Net/OVR_Session.cpp	/^SessionResult Session::Listen(ListenerDescription* pListenerDescription)$/;"	f	class:OVR::Net::Session
Listen	Src/Net/OVR_Unix_Socket.cpp	/^int TCPSocket::Listen()$/;"	f	class:OVR::Net::TCPSocket
ListenPTCP	Src/Net/OVR_Session.cpp	/^SessionResult Session::ListenPTCP(OVR::Net::BerkleyBindParameters *bbp)$/;"	f	class:OVR::Net::Session
ListenerDescription	Src/Net/OVR_Session.h	/^    ListenerDescription() :$/;"	f	class:OVR::Net::ListenerDescription
ListenerDescription	Src/Net/OVR_Session.h	/^class ListenerDescription$/;"	c	namespace:OVR::Net
ListenerReceiveResult	Src/Net/OVR_Session.h	/^enum ListenerReceiveResult$/;"	g	namespace:OVR::Net
Load	Src/OVR_JSON.cpp	/^JSON* JSON::Load(const char* path, const char** perror)$/;"	f	class:OVR::JSON
LoadBuffer	Src/Kernel/OVR_File.cpp	/^void    BufferedFile::LoadBuffer()$/;"	f	class:OVR::BufferedFile
LoadCache	Src/OVR_Profile.cpp	/^void ProfileManager::LoadCache(bool create)$/;"	f	class:OVR::ProfileManager
LoadDeviceFile	Src/OVR_Profile.cpp	/^bool Profile::LoadDeviceFile(unsigned int productId, const char* printedSerialNumber)$/;"	f	class:OVR::Profile
LoadDeviceProfile	Src/OVR_Profile.cpp	/^bool Profile::LoadDeviceProfile(const ProfileDeviceKey& deviceKey)$/;"	f	class:OVR::Profile
LoadGraphics	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void LoadGraphics() {}$/;"	f	class:OVR::CAPI::HSWDisplay
LoadGraphics	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::LoadGraphics()$/;"	f	class:OVR::CAPI::GL::HSWDisplay
LoadLensConfig	Src/OVR_Stereo.cpp	/^bool LoadLensConfig ( LensConfig *presult, uint8_t const *pbuffer, int bufferSizeInBytes )$/;"	f	namespace:OVR
LoadProfile	Src/OVR_Profile.cpp	/^bool Profile::LoadProfile(JSON* root,$/;"	f	class:OVR::Profile
LoadTextureTga	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^Texture* LoadTextureTga(RenderParams& rParams, int samplerMode, OVR::File* f, uint8_t alpha)$/;"	f	namespace:OVR::CAPI::GL
LoadTextureTga	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^Texture* LoadTextureTga(RenderParams& rParams, int samplerMode, const uint8_t* pData, int dataSize, uint8_t alpha)$/;"	f	namespace:OVR::CAPI::GL
LoadTextureTgaData	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^uint8_t* LoadTextureTgaData(OVR::File* f, uint8_t alpha, int& width, int& height)$/;"	f	namespace:OVR::CAPI
LoadUser	Src/OVR_Profile.cpp	/^bool Profile::LoadUser(JSON* root, $/;"	f	class:OVR::Profile
LoadV1Profiles	Src/OVR_Profile.cpp	/^void ProfileManager::LoadV1Profiles(JSON* v1)$/;"	f	class:OVR::ProfileManager
Load_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline T     Load_Acquire() const               { return Ops::Load_Acquire(&Value);  }$/;"	f	class:OVR::AtomicValueBase
Load_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static C     Load_Acquire(const volatile C* p)               { C2T_union u; u.t = Ops::Load_Acquire((PT)p); return u.c; }$/;"	f	class:OVR::AtomicOps
Load_Acquire	Src/Kernel/OVR_Atomic.h	/^    inline static O_T   Load_Acquire(const volatile O_T* p)$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Location	Src/CAPI/GL/CAPI_GL_Util.h	/^        int    Location, Size;$/;"	m	struct:OVR::CAPI::GL::ShaderSet::Uniform
Lock	Src/Kernel/OVR_Atomic.cpp	/^Lock::Lock(unsigned spinCount)$/;"	f	class:OVR::Lock
Lock	Src/Kernel/OVR_Atomic.h	/^    Lock (unsigned dummy = 0)$/;"	f	class:OVR::Lock
Lock	Src/Kernel/OVR_Atomic.h	/^    inline Lock() { }$/;"	f	class:OVR::Lock
Lock	Src/Kernel/OVR_Atomic.h	/^    inline Lock(unsigned) { }$/;"	f	class:OVR::Lock
Lock	Src/Kernel/OVR_Atomic.h	/^class Lock$/;"	c	namespace:OVR
LockCount	Src/Kernel/OVR_ThreadsPthread.cpp	/^    unsigned      LockCount;$/;"	m	class:OVR::MutexImpl	file:
LockInitMarker	Src/Kernel/OVR_Atomic.cpp	/^enum { LockInitMarker = 0xFFFFFFFF };$/;"	e	enum:OVR::__anon25	file:
LockedBy	Src/Kernel/OVR_ThreadsPthread.cpp	/^    pthread_t     LockedBy;$/;"	m	class:OVR::MutexImpl	file:
Locker	Src/Kernel/OVR_Atomic.h	/^        inline Locker(Lock *plock)$/;"	f	class:OVR::Lock::Locker
Locker	Src/Kernel/OVR_Atomic.h	/^    class Locker$/;"	c	class:OVR::Lock
Locker	Src/Kernel/OVR_Threads.h	/^        Locker(Mutex *pmutex)$/;"	f	class:OVR::Mutex::Locker
Locker	Src/Kernel/OVR_Threads.h	/^    class Locker$/;"	c	class:OVR::Mutex
LockessRecordUpdater	Src/Util/Util_LatencyTest2State.h	/^typedef LocklessUpdater<FrameTimeRecordSet, FrameTimeRecordSet> LockessRecordUpdater;$/;"	t	namespace:OVR::Util
LocklessSensorState	Src/Tracking/Tracking_SensorState.h	/^	LocklessSensorState() :$/;"	f	struct:OVR::Tracking::LocklessSensorState
LocklessSensorState	Src/Tracking/Tracking_SensorState.h	/^struct LocklessSensorState$/;"	s	namespace:OVR::Tracking
LocklessSensorStatePadding	Src/Tracking/Tracking_SensorState.h	/^struct LocklessSensorStatePadding$/;"	s	namespace:OVR::Tracking
LocklessTest	Src/Kernel/OVR_Lockless.cpp	/^namespace OVR { namespace LocklessTest {$/;"	n	namespace:OVR	file:
LocklessTiming	Src/CAPI/CAPI_FrameTimeManager.h	/^    LocklessUpdater<Timing, Timing> LocklessTiming;$/;"	m	class:OVR::CAPI::FrameTimeManager
LocklessUpdater	Src/Kernel/OVR_Lockless.h	/^	LocklessUpdater() : UpdateBegin( 0 ), UpdateEnd( 0 )$/;"	f	class:OVR::LocklessUpdater
LocklessUpdater	Src/Kernel/OVR_Lockless.h	/^class LocklessUpdater$/;"	c	namespace:OVR
Log	Src/Kernel/OVR_Log.cpp	/^Log::Log(unsigned logMask) :$/;"	f	class:OVR::Log
Log	Src/Kernel/OVR_Log.h	/^class Log$/;"	c	namespace:OVR
LogHandler	Src/Kernel/OVR_Log.h	/^	typedef Delegate2<void, const char*, LogMessageType> LogHandler;$/;"	t	class:OVR::Log
LogMaskConstants	Src/Kernel/OVR_Log.h	/^enum LogMaskConstants$/;"	g	namespace:OVR
LogMask_All	Src/Kernel/OVR_Log.h	/^    LogMask_All     = LogMask_Regular|LogMask_Debug$/;"	e	enum:OVR::LogMaskConstants
LogMask_Debug	Src/Kernel/OVR_Log.h	/^    LogMask_Debug   = 0x200,$/;"	e	enum:OVR::LogMaskConstants
LogMask_None	Src/Kernel/OVR_Log.h	/^    LogMask_None    = 0,$/;"	e	enum:OVR::LogMaskConstants
LogMask_Regular	Src/Kernel/OVR_Log.h	/^    LogMask_Regular = 0x100,$/;"	e	enum:OVR::LogMaskConstants
LogMessage	Src/Kernel/OVR_Log.cpp	/^void OVR::Log::LogMessage(LogMessageType messageType, const char* pfmt, ...)$/;"	f	class:OVR::OVR::Log
LogMessageType	Src/Kernel/OVR_Log.h	/^enum LogMessageType$/;"	g	namespace:OVR
LogMessageVarg	Src/Kernel/OVR_Log.cpp	/^void Log::LogMessageVarg(LogMessageType messageType, const char* fmt, va_list argList)$/;"	f	class:OVR::Log
LogMessageVargInt	Src/Kernel/OVR_Log.cpp	/^void Log::LogMessageVargInt(LogMessageType messageType, const char* fmt, va_list argList)$/;"	f	class:OVR::Log
LogSubject	Src/Kernel/OVR_Log.cpp	/^    LogSubject(){$/;"	f	class:LogSubject
LogSubject	Src/Kernel/OVR_Log.cpp	/^OVR_DEFINE_SINGLETON(LogSubject);$/;"	v
LogSubject	Src/Kernel/OVR_Log.cpp	/^class LogSubject : public OVR::SystemSingletonBase<LogSubject>$/;"	c	file:
Log_Assert	Src/Kernel/OVR_Log.h	/^    Log_Assert      = LogMask_Debug | 2,   \/\/ "Assert: %s\\n".$/;"	e	enum:OVR::LogMessageType
Log_Debug	Src/Kernel/OVR_Log.h	/^    Log_Debug       = LogMask_Debug | 1,   \/\/ "Debug: %s\\n".$/;"	e	enum:OVR::LogMessageType
Log_DebugText	Src/Kernel/OVR_Log.h	/^    Log_DebugText   = LogMask_Debug | 0,$/;"	e	enum:OVR::LogMessageType
Log_Error	Src/Kernel/OVR_Log.h	/^    Log_Error       = LogMask_Regular | 1, \/\/ "Error: %s\\n".$/;"	e	enum:OVR::LogMessageType
Log_Text	Src/Kernel/OVR_Log.h	/^    Log_Text        = LogMask_Regular | 0,    $/;"	e	enum:OVR::LogMessageType
LoggingMask	Src/Kernel/OVR_Log.h	/^    unsigned    LoggingMask;$/;"	m	class:OVR::Log
LogicalResolutionInPixels	Src/Displays/OVR_Display.h	/^    const Sizei         LogicalResolutionInPixels;$/;"	m	class:OVR::Display
LogicalResolutionInPixels	Src/Displays/OVR_Linux_Display.h	/^    Sizei       LogicalResolutionInPixels;$/;"	m	struct:OVR::Linux::DisplayDesc
LookAtLH	Src/Kernel/OVR_Math.h	/^    static Matrix4 LookAtLH(const Vector3<T>& eye, const Vector3<T>& at, const Vector3<T>& up)$/;"	f	class:OVR::Matrix4
LookAtRH	Src/Kernel/OVR_Math.h	/^    static Matrix4 LookAtRH(const Vector3<T>& eye, const Vector3<T>& at, const Vector3<T>& up)$/;"	f	class:OVR::Matrix4
LowerBit	Src/Kernel/OVR_Alg.h	/^inline uint8_t LowerBit(size_t val)$/;"	f	namespace:OVR::Alg
LowerBitTable	Src/Kernel/OVR_Alg.cpp	/^extern const uint8_t LowerBitTable[256] =$/;"	m	namespace:OVR::Alg	file:
LowerBound	Src/Kernel/OVR_Alg.h	/^size_t LowerBound(const Array& arr, const Value& val)$/;"	f	namespace:OVR::Alg
LowerBound	Src/Kernel/OVR_Alg.h	/^size_t LowerBound(const Array& arr, const Value& val, Less less)$/;"	f	namespace:OVR::Alg
LowerBoundSized	Src/Kernel/OVR_Alg.h	/^size_t LowerBoundSized(const Array& arr, size_t size, const Value& val)$/;"	f	namespace:OVR::Alg
LowerBoundSliced	Src/Kernel/OVR_Alg.h	/^size_t LowerBoundSliced(const Array& arr, size_t start, size_t end, const Value& val)$/;"	f	namespace:OVR::Alg
LowerBoundSliced	Src/Kernel/OVR_Alg.h	/^size_t LowerBoundSliced(const Array& arr, size_t start, size_t end, const Value& val, Less less)$/;"	f	namespace:OVR::Alg
LowestPriority	Src/Kernel/OVR_Threads.h	/^        LowestPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
M	Src/Kernel/OVR_Math.h	/^	T M[3][3];    $/;"	m	class:OVR::Matrix3
M	Src/Kernel/OVR_Math.h	/^    T M[4][4];    $/;"	m	class:OVR::Matrix4
M	Src/OVR_CAPI.h	/^    float M[4][4];$/;"	m	struct:ovrMatrix4f_
MATH_DOUBLE	Src/Kernel/OVR_Math.h	189;"	d
MATH_DOUBLE_DEGREETORADFACTOR	Src/Kernel/OVR_Math.h	191;"	d
MATH_DOUBLE_E	Src/Kernel/OVR_Math.h	187;"	d
MATH_DOUBLE_MAXVALUE	Src/Kernel/OVR_Math.h	188;"	d
MATH_DOUBLE_PI	Src/Kernel/OVR_Math.h	183;"	d
MATH_DOUBLE_PIOVER2	Src/Kernel/OVR_Math.h	185;"	d
MATH_DOUBLE_PIOVER4	Src/Kernel/OVR_Math.h	186;"	d
MATH_DOUBLE_RADTODEGREEFACTOR	Src/Kernel/OVR_Math.h	190;"	d
MATH_DOUBLE_SINGULARITYRADIUS	Src/Kernel/OVR_Math.h	193;"	d
MATH_DOUBLE_TOLERANCE	Src/Kernel/OVR_Math.h	192;"	d
MATH_DOUBLE_TWOPI	Src/Kernel/OVR_Math.h	184;"	d
MATH_FLOAT	Src/Kernel/OVR_Math.h	177;"	d
MATH_FLOAT_DEGREETORADFACTOR	Src/Kernel/OVR_Math.h	179;"	d
MATH_FLOAT_E	Src/Kernel/OVR_Math.h	175;"	d
MATH_FLOAT_MAXVALUE	Src/Kernel/OVR_Math.h	176;"	d
MATH_FLOAT_PI	Src/Kernel/OVR_Math.h	171;"	d
MATH_FLOAT_PIOVER2	Src/Kernel/OVR_Math.h	173;"	d
MATH_FLOAT_PIOVER4	Src/Kernel/OVR_Math.h	174;"	d
MATH_FLOAT_RADTODEGREEFACTOR	Src/Kernel/OVR_Math.h	178;"	d
MATH_FLOAT_SINGULARITYRADIUS	Src/Kernel/OVR_Math.h	181;"	d
MATH_FLOAT_TOLERANCE	Src/Kernel/OVR_Math.h	180;"	d
MATH_FLOAT_TWOPI	Src/Kernel/OVR_Math.h	172;"	d
MAX_DEVICE_PROFILE_MAJOR_VERSION	Src/OVR_Profile.cpp	59;"	d	file:
MAX_PROFILE_MAJOR_VERSION	Src/OVR_Profile.cpp	58;"	d	file:
MMTimeWrapCounter	Src/Kernel/OVR_Timer.cpp	/^    uint32_t        MMTimeWrapCounter;$/;"	m	struct:OVR::PerformanceTimer	file:
MMTimerResolutionNanos	Src/Kernel/OVR_Timer.cpp	/^        MMTimerResolutionNanos = 1000000$/;"	e	enum:OVR::PerformanceTimer::__anon19	file:
MSleep	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::MSleep(unsigned msecs)$/;"	f	class:OVR::Thread
MacHash	Src/OVR_SerialFormat.h	/^	uint8_t      MacHash[5];        \/\/ [5 bytes] 5 most significant bytes of MD5 hash from first ethernet adapter mac address$/;"	m	class:OVR::DK2BinarySerialFormat
MacHashLow	Src/OVR_SerialFormat.h	/^	uint8_t      MacHashLow[3];     \/\/ [3 char] 3 least significant bytes of mac hash$/;"	m	class:OVR::DK2PrintedSerialFormat
MagneticField	Src/Sensors/OVR_DeviceConstants.h	/^    Vector3f MagneticField;    \/\/ in Gauss$/;"	m	class:OVR::SensorDataType
Magnetometer	Src/OVR_CAPI.h	/^    ovrVector3f    Magnetometer;     \/\/\/ Magnetic field in Gauss.$/;"	m	struct:ovrSensorData_
MajorVersion	Src/CAPI/GL/CAPI_GLE.h	/^        int   MajorVersion;             \/\/ Best guess at major version$/;"	m	class:OVR::GLEContext
MajorVersion	Src/CAPI/GL/CAPI_GL_Util.h	/^    int         MajorVersion;        \/\/ Best guess at major version$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
MajorVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_C2S_Hello
MajorVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_S2C_Authorization
MakePickable	Src/Kernel/OVR_RefCount.h	/^Pickable<T> MakePickable(T* p)$/;"	f	namespace:OVR
Manufacturer	Src/OVR_CAPI.h	/^    const char* Manufacturer;$/;"	m	struct:ovrHmdDesc_
Manufacturer	Src/OVR_Stereo.h	/^	String      Manufacturer;$/;"	m	class:OVR::HMDInfo
Map	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void* Buffer::Map(size_t, size_t, int)$/;"	f	class:OVR::CAPI::GL::Buffer
MapFlags	Src/CAPI/GL/CAPI_GL_Util.h	/^enum MapFlags$/;"	g	namespace:OVR::CAPI::GL
Map_Discard	Src/CAPI/GL/CAPI_GL_Util.h	/^    Map_Discard        = 1,$/;"	e	enum:OVR::CAPI::GL::MapFlags
Map_Read	Src/CAPI/GL/CAPI_GL_Util.h	/^    Map_Read           = 2, \/\/ do not use$/;"	e	enum:OVR::CAPI::GL::MapFlags
Map_Unsynchronized	Src/CAPI/GL/CAPI_GL_Util.h	/^    Map_Unsynchronized = 4, \/\/ like D3D11_MAP_NO_OVERWRITE$/;"	e	enum:OVR::CAPI::GL::MapFlags
MatchCount	Src/CAPI/CAPI_FrameTimeManager.h	/^    int                   MatchCount;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
MatchDisplay	Src/Displays/OVR_Display.h	/^    bool MatchDisplay(const Display* other)$/;"	f	class:OVR::Display
MatchRecord	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameLatencyTracker::MatchRecord(const Util::FrameTimeRecordSet &r)$/;"	f	class:OVR::CAPI::FrameLatencyTracker
MatchedRecord	Src/CAPI/CAPI_FrameTimeManager.h	/^        bool    MatchedRecord;$/;"	m	struct:OVR::CAPI::FrameLatencyTracker::FrameTimeRecordEx
Math	Src/Kernel/OVR_Math.h	/^class Math$/;"	c	namespace:OVR
Math	Src/Kernel/OVR_Math.h	/^class Math<double>$/;"	c	namespace:OVR
Math	Src/Kernel/OVR_Math.h	/^class Math<float>$/;"	c	namespace:OVR
Mathd	Src/Kernel/OVR_Math.h	/^typedef Math<double> Mathd;$/;"	t	namespace:OVR
Mathf	Src/Kernel/OVR_Math.h	/^typedef Math<float>  Mathf;$/;"	t	namespace:OVR
Matrix3	Src/Kernel/OVR_Math.h	/^	Matrix3()$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	Matrix3(NoInitType) { }$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	Matrix3(T m11, T m12, T m13,$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	Matrix3(const typename CompatibleTypes<Matrix3<T> >::Type& s) $/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	explicit Matrix3(const Matrix4<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	explicit Matrix3(const Pose<T>& p)$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	explicit Matrix3(const Quat<T>& q)$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^	inline explicit Matrix3(T s)$/;"	f	class:OVR::Matrix3
Matrix3	Src/Kernel/OVR_Math.h	/^class Matrix3$/;"	c	namespace:OVR
Matrix3d	Src/Kernel/OVR_Math.h	/^typedef Matrix3<double> Matrix3d;$/;"	t	namespace:OVR
Matrix3f	Src/Kernel/OVR_Math.h	/^typedef Matrix3<float>  Matrix3f;$/;"	t	namespace:OVR
Matrix4	Src/Kernel/OVR_Math.h	/^    Matrix4()$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    Matrix4(NoInitType) { }$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    Matrix4(T m11, T m12, T m13, T m14,$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    Matrix4(T m11, T m12, T m13,$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    Matrix4(const typename CompatibleTypes<Matrix4<T> >::Type& s) $/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    explicit Matrix4(const Matrix4<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    explicit Matrix4(const Pose<T>& p)$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^    explicit Matrix4(const Quat<T>& q)$/;"	f	class:OVR::Matrix4
Matrix4	Src/Kernel/OVR_Math.h	/^class Matrix4$/;"	c	namespace:OVR
Matrix4d	Src/Kernel/OVR_Math.h	/^typedef Matrix4<double> Matrix4d;$/;"	t	namespace:OVR
Matrix4f	Src/Kernel/OVR_Math.h	/^typedef Matrix4<float>  Matrix4f;$/;"	t	namespace:OVR
Max	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE const T Max(const T a, const T b)$/;"	f	namespace:OVR::Alg
Max	Src/Kernel/OVR_Math.h	/^    static Size Max(const Size& a, const Size& b)  { return Size((a.w  > b.w)  ? a.w  : b.w,$/;"	f	class:OVR::Size
Max	Src/Kernel/OVR_Math.h	/^    static Vector2  Max(const Vector2& a, const Vector2& b) { return Vector2((a.x > b.x) ? a.x : b.x,$/;"	f	class:OVR::Vector2
Max	Src/Kernel/OVR_Math.h	/^    static Vector3  Max(const Vector3& a, const Vector3& b)$/;"	f	class:OVR::Vector3
Max	Src/Kernel/OVR_Math.h	/^    static Vector4  Max(const Vector4& a, const Vector4& b)$/;"	f	class:OVR::Vector4
Max	Src/OVR_Stereo.h	/^    static FovPort Max(const FovPort& a, const FovPort& b)$/;"	f	struct:OVR::FovPort
MaxConnections	Src/Net/OVR_Session.h	/^    int                MaxConnections;$/;"	m	class:OVR::Net::BerkleyListenerDescription
MaxEyeFov	Src/OVR_CAPI.h	/^    ovrFovPort  MaxEyeFov[ovrEye_Count];$/;"	m	struct:ovrHmdDesc_
MaxIncomingConnections	Src/Net/OVR_Session.h	/^    int                MaxIncomingConnections;$/;"	m	class:OVR::Net::BerkleyListenerDescription
MaxInvR	Src/OVR_Stereo.h	/^    float               MaxInvR;$/;"	m	struct:OVR::LensConfig
MaxLogBufferMessageSize	Src/Kernel/OVR_Log.h	/^    enum { MaxLogBufferMessageSize = 4096 };$/;"	e	enum:OVR::Log::__anon18
MaxR	Src/OVR_Stereo.cpp	/^    uint16_t    MaxR;$/;"	m	struct:OVR::LensConfigStored_CatmullRom10Version1	file:
MaxR	Src/OVR_Stereo.h	/^    float               MaxR;       \/\/ The highest R you're going to query for - the curve is unpredictable beyond it.$/;"	m	struct:OVR::LensConfig
MaxSize	Src/Kernel/OVR_ThreadCommandQueue.h	/^        enum { MaxSize = 256 };$/;"	e	enum:OVR::ThreadCommand::PopBuffer::__anon21
MaxWindows	Src/Util/Util_ImageWindow.h	/^	static const int			MaxWindows = 4;$/;"	m	class:OVR::Util::ImageWindow
Median	Src/CAPI/CAPI_FrameTimeManager.h	/^    mutable double  Median;$/;"	m	struct:OVR::CAPI::TimeDeltaCollector
Median	Src/Kernel/OVR_Alg.h	/^typename Array::ValueType& Median(Array& arr)$/;"	f	namespace:OVR::Alg
MemUtil	Src/Kernel/OVR_Alg.h	/^class MemUtil$/;"	c	namespace:OVR::Alg
MemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type MemberStub(void *object)$/;"	f	class:OVR::Delegate0
MemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type MemberStub(void *object, arg1_type a1)$/;"	f	class:OVR::Delegate1
MemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type MemberStub(void *object, arg1_type a1, arg2_type a2)$/;"	f	class:OVR::Delegate2
MemberStub	Src/Kernel/OVR_Delegates.h	/^	static OVR_FORCE_INLINE ret_type MemberStub(void *object, arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:OVR::Delegate3
MemoryFile	Src/Kernel/OVR_File.h	/^    MemoryFile (const String& fileName, const uint8_t *pBuffer, int buffSize)$/;"	f	class:OVR::MemoryFile
MemoryFile	Src/Kernel/OVR_File.h	/^    MemoryFile (const char* pfileName, const uint8_t *pBuffer, int buffSize)$/;"	f	class:OVR::MemoryFile
MemoryFile	Src/Kernel/OVR_File.h	/^class MemoryFile : public File$/;"	c	namespace:OVR
MessageID	Src/Net/OVR_MessageIDTypes.h	/^typedef unsigned char MessageID;$/;"	t	namespace:OVR::Net
MetersPerTanAngleAtCenter	Src/OVR_Stereo.cpp	/^    uint16_t    MetersPerTanAngleAtCenter;$/;"	m	struct:OVR::LensConfigStored_CatmullRom10Version1	file:
MetersPerTanAngleAtCenter	Src/OVR_Stereo.h	/^    float               MetersPerTanAngleAtCenter;$/;"	m	struct:OVR::LensConfig
MidpointTime	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              MidpointTime;$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
Min	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE const T Min(const T a, const T b)$/;"	f	namespace:OVR::Alg
Min	Src/Kernel/OVR_Math.h	/^    static Size Min(const Size& a, const Size& b)  { return Size((a.w  < b.w)  ? a.w  : b.w,$/;"	f	class:OVR::Size
Min	Src/Kernel/OVR_Math.h	/^    static Vector2  Min(const Vector2& a, const Vector2& b) { return Vector2((a.x < b.x) ? a.x : b.x,$/;"	f	class:OVR::Vector2
Min	Src/Kernel/OVR_Math.h	/^    static Vector3  Min(const Vector3& a, const Vector3& b)$/;"	f	class:OVR::Vector3
Min	Src/Kernel/OVR_Math.h	/^    static Vector4  Min(const Vector4& a, const Vector4& b)$/;"	f	class:OVR::Vector4
Min	Src/OVR_Stereo.h	/^    static FovPort Min(const FovPort& a, const FovPort& b)$/;"	f	struct:OVR::FovPort
MinorVersion	Src/CAPI/GL/CAPI_GLE.h	/^        int   MinorVersion;             \/\/ Best guess at minor version$/;"	m	class:OVR::GLEContext
MinorVersion	Src/CAPI/GL/CAPI_GL_Util.h	/^    int         MinorVersion;        \/\/ Best guess at minor version$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
MinorVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_C2S_Hello
MinorVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_S2C_Authorization
MinutesSinceEpoch	Src/OVR_SerialFormat.h	/^	int          MinutesSinceEpoch; \/\/ [3 bytes] Number of minutes that have elapsed since the epoch: May 1st, 2014$/;"	m	class:OVR::DK2BinarySerialFormat
MinutesSinceEpoch	Src/OVR_SerialFormat.h	/^	int          MinutesSinceEpoch; \/\/ [4 char] Number of minutes that have elapsed since the epoch: May 1st, 2014$/;"	m	class:OVR::DK2PrintedSerialFormat
MirrorDisabled	Src/Displays/OVR_Display.h	/^		MirrorDisabled = 1$/;"	e	enum:OVR::Display::MirrorMode
MirrorEnabled	Src/Displays/OVR_Display.h	/^		MirrorEnabled = 0,$/;"	e	enum:OVR::Display::MirrorMode
MirrorMode	Src/Displays/OVR_Display.h	/^	enum MirrorMode$/;"	g	class:OVR::Display
MksPerSecond	Src/Kernel/OVR_Timer.h	/^        MksPerSecond    = 1000 * 1000,           \/\/ Microseconds in one second.$/;"	e	enum:OVR::Timer::__anon27
Mode	Src/Util/Util_Render_Stereo.h	/^    StereoMode         Mode;$/;"	m	class:OVR::Util::Render::StereoConfig
Mode_Execute	Src/Kernel/OVR_File.h	/^        Mode_Execute    = 0111,$/;"	e	enum:OVR::FileConstants::Modes
Mode_Read	Src/Kernel/OVR_File.h	/^        Mode_Read       = 0444,$/;"	e	enum:OVR::FileConstants::Modes
Mode_ReadWrite	Src/Kernel/OVR_File.h	/^        Mode_ReadWrite  = 0666$/;"	e	enum:OVR::FileConstants::Modes
Mode_Write	Src/Kernel/OVR_File.h	/^        Mode_Write      = 0222,$/;"	e	enum:OVR::FileConstants::Modes
ModelName	Src/Displays/OVR_Display.h	/^    const String        ModelName;$/;"	m	class:OVR::Display
ModelName	Src/Displays/OVR_Linux_Display.h	/^    String      ModelName; \/\/ This is a "DK2" type string$/;"	m	struct:OVR::Linux::DisplayDesc
ModelNumber	Src/Displays/OVR_Linux_Display.h	/^    UInt16 ModelNumber;$/;"	m	struct:OVR::Linux::DisplayEDID
Modes	Src/Kernel/OVR_File.h	/^    enum Modes$/;"	g	class:OVR::FileConstants
ModifyRenderDensity	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffset ModifyRenderDensity ( StereoEyeParams const &params,$/;"	f	namespace:OVR::Util::Render
ModifyRenderSize	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffset ModifyRenderSize ( StereoEyeParams const &params,$/;"	f	namespace:OVR::Util::Render
ModifyRenderViewport	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffset ModifyRenderViewport ( StereoEyeParams const &params,$/;"	f	namespace:OVR::Util::Render
ModifyTime	Src/Kernel/OVR_SysFile.h	/^    int64_t ModifyTime;$/;"	m	struct:OVR::FileStat
MonitorName	Src/CAPI/GL/CAPI_GL_Util.h	/^    String MonitorName; \/\/ Monitor name for fullscreen mode$/;"	m	struct:OVR::CAPI::GL::DisplayId
MonitorName	Src/Displays/OVR_Linux_Display.h	/^    String MonitorName;$/;"	m	struct:OVR::Linux::DisplayEDID
MonotonicClockAvailable	Src/Kernel/OVR_Timer.cpp	/^bool Timer::MonotonicClockAvailable = false;$/;"	m	class:OVR::Timer	file:
MonotonicClockAvailable	Src/Kernel/OVR_Timer.h	/^        static bool MonotonicClockAvailable;      \/\/ True if clock_gettime supports CLOCK_MONOTONIC$/;"	m	class:OVR::Timer
MsPerSecond	Src/Kernel/OVR_Timer.h	/^        MsPerSecond     = 1000,                  \/\/ Milliseconds in one second.$/;"	e	enum:OVR::Timer::__anon27
Multiply	Src/Kernel/OVR_Math.h	/^	static Matrix3& Multiply(Matrix3* d, const Matrix3& a, const Matrix3& b)$/;"	f	class:OVR::Matrix3
Multiply	Src/Kernel/OVR_Math.h	/^	static SymMat3& Multiply(SymMat3* d, const SymMat3& a, const SymMat3& b)$/;"	f	class:OVR::SymMat3
Multiply	Src/Kernel/OVR_Math.h	/^    static Matrix4& Multiply(Matrix4* d, const Matrix4& a, const Matrix4& b)$/;"	f	class:OVR::Matrix4
Multisample	Src/CAPI/GL/CAPI_GL_Util.h	/^    int    Multisample;$/;"	m	struct:OVR::CAPI::GL::RenderParams
Multisample	Src/OVR_CAPI.h	/^    int              Multisample;$/;"	m	struct:ovrRenderAPIConfigHeader_
Mutex	Src/Kernel/OVR_Threads.h	/^class Mutex$/;"	c	namespace:OVR
Mutex	Src/Kernel/OVR_ThreadsPthread.cpp	/^Mutex::Mutex(bool recursive)$/;"	f	class:OVR::Mutex
MutexImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^MutexImpl::MutexImpl(Mutex* pmutex, bool recursive)$/;"	f	class:OVR::MutexImpl
MutexImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^class MutexImpl : public NewOverrideBase$/;"	c	namespace:OVR	file:
N	Src/Kernel/OVR_Math.h	/^    Vector3<T> N;$/;"	m	class:OVR::Plane
NEXT_BYTE	Src/Kernel/OVR_UTF8Util.cpp	162;"	d	file:
NTSTATUS	Src/Kernel/OVR_Timer.cpp	48;"	d	file:
Name	Src/CAPI/GL/CAPI_GL_Util.h	/^		const char* Name;$/;"	m	struct:OVR::CAPI::GL::ShaderBase::Uniform
Name	Src/CAPI/GL/CAPI_GL_Util.h	/^        String Name;$/;"	m	struct:OVR::CAPI::GL::ShaderSet::Uniform
Name	Src/Kernel/OVR_SharedMemory.cpp	/^        String Name;$/;"	m	class:OVR::FakeMemoryBlock	file:
Name	Src/OVR_JSON.h	/^    String          Name;       \/\/ Name part of the {Name, Value} pair in a parent object.$/;"	m	class:OVR::JSON
NanosPerSecond	Src/Kernel/OVR_Timer.h	/^        NanosPerSecond  = 1000 * 1000 * 1000,    \/\/ Nanoseconds in one second.$/;"	e	enum:OVR::Timer::__anon27
NativeHeight	Src/OVR_Stereo.h	/^	int NativeHeight;$/;"	m	struct:OVR::Win32ShimInfo
NativeResolutionInPixels	Src/Displays/OVR_Display.h	/^    const Sizei         NativeResolutionInPixels;$/;"	m	class:OVR::Display
NativeResolutionInPixels	Src/Displays/OVR_Linux_Display.h	/^    Sizei       NativeResolutionInPixels;$/;"	m	struct:OVR::Linux::DisplayDesc
NativeWidth	Src/OVR_Stereo.h	/^	int NativeWidth;$/;"	m	struct:OVR::Win32ShimInfo
NeedDistortionTimeMeasurement	Src/CAPI/CAPI_FrameTimeManager.cpp	/^bool  FrameTimeManager::NeedDistortionTimeMeasurement() const$/;"	f	class:OVR::CAPI::FrameTimeManager
NeedsWait	Src/Kernel/OVR_ThreadCommandQueue.h	/^        bool        NeedsWait() const   { return toCommand()->NeedsWait(); }$/;"	f	class:OVR::ThreadCommand::PopBuffer
NeedsWait	Src/Kernel/OVR_ThreadCommandQueue.h	/^    bool          NeedsWait() const { return WaitFlag; }$/;"	f	class:OVR::ThreadCommand
Net	Src/Net/OVR_BitStream.cpp	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_BitStream.h	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_MessageIDTypes.h	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_NetworkPlugin.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_NetworkPlugin.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR
Net	Src/Net/OVR_NetworkTypes.h	/^namespace OVR {	namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_PacketizedTCPSocket.cpp	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_PacketizedTCPSocket.h	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_RPC1.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_RPC1.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR
Net	Src/Net/OVR_Session.cpp	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_Session.h	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_Socket.cpp	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_Socket.h	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR
Net	Src/Net/OVR_Unix_Socket.cpp	/^namespace OVR { namespace Net {$/;"	n	namespace:OVR	file:
Net	Src/Net/OVR_Unix_Socket.h	/^namespace OVR { namespace Net { $/;"	n	namespace:OVR
NetClient	Src/Service/Service_NetClient.cpp	/^NetClient::NetClient() :$/;"	f	class:OVR::Service::NetClient
NetClient	Src/Service/Service_NetClient.cpp	/^OVR_DEFINE_SINGLETON(OVR::Service::NetClient);$/;"	v
NetClient	Src/Service/Service_NetClient.h	/^class NetClient : public NetSessionCommon,$/;"	c	namespace:OVR::Service
NetId	Src/CAPI/CAPI_HMDState.h	/^	VirtualHmdId            NetId;$/;"	m	class:OVR::CAPI::HMDState
NetId	Src/Service/Service_NetSessionCommon.h	/^	VirtualHmdId NetId;$/;"	m	struct:OVR::Service::HMDNetworkInfo
NetInfo	Src/CAPI/CAPI_HMDState.h	/^	HMDNetworkInfo          NetInfo;$/;"	m	class:OVR::CAPI::HMDState
NetSessionCommon	Src/Service/Service_NetSessionCommon.cpp	/^NetSessionCommon::NetSessionCommon() :$/;"	f	class:OVR::Service::NetSessionCommon
NetSessionCommon	Src/Service/Service_NetSessionCommon.h	/^class NetSessionCommon : public Thread$/;"	c	namespace:OVR::Service
NetworkConnection	Src/Net/OVR_Session.h	/^    NetworkConnection()$/;"	f	class:OVR::Net::NetworkConnection
NetworkConnection	Src/Net/OVR_Session.h	/^class NetworkConnection : public Connection$/;"	c	namespace:OVR::Net
NetworkID	Src/Net/OVR_NetworkTypes.h	/^typedef uint64_t NetworkID;$/;"	t	namespace:OVR::Net
NetworkPlugin	Src/Net/OVR_NetworkPlugin.cpp	/^NetworkPlugin::NetworkPlugin()$/;"	f	class:OVR::Net::Plugins::NetworkPlugin
NetworkPlugin	Src/Net/OVR_NetworkPlugin.h	/^class NetworkPlugin : public SessionListener$/;"	c	namespace:OVR::Net::Plugins
NeverShrinking	Src/Kernel/OVR_Array.h	/^    bool    NeverShrinking()const       { return Data.Policy.NeverShrinking(); }$/;"	f	class:OVR::ArrayBase
NeverShrinking	Src/Kernel/OVR_Array.h	/^    bool  NeverShrinking() const { return 0; }$/;"	f	struct:OVR::ArrayDefaultPolicy
NeverShrinking	Src/Kernel/OVR_Array.h	/^    bool  NeverShrinking() const { return NeverShrink; }$/;"	f	struct:OVR::ArrayConstPolicy
NeverShrinking	Src/Net/OVR_Session.h	/^		bool NeverShrinking() const { return 1; }$/;"	f	struct:OVR::Net::Session::ArrayNoShrinkPolicy
NewOverrideBase	Src/Kernel/OVR_Allocator.h	/^class NewOverrideBase$/;"	c	namespace:OVR
NextFramePresentFlushTime	Src/Util/Util_Render_Stereo.h	/^    double              NextFramePresentFlushTime;$/;"	m	class:OVR::Util::Render::TimewarpMachine
NextFrameSeconds	Src/OVR_CAPI.h	/^    double          NextFrameSeconds;$/;"	m	struct:ovrFrameTiming_
NextFrameTime	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              NextFrameTime;        $/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
NextInChain	Src/Kernel/OVR_Hash.h	/^    intptr_t    NextInChain;$/;"	m	class:OVR::HashsetCachedEntry
NextInChain	Src/Kernel/OVR_Hash.h	/^    intptr_t    NextInChain;$/;"	m	class:OVR::HashsetEntry
NextInChain	Src/Kernel/OVR_Hash.h	/^    intptr_t NextInChain;$/;"	m	class:OVR::HashsetCachedNodeEntry
NextInChain	Src/Kernel/OVR_Hash.h	/^    intptr_t NextInChain;$/;"	m	class:OVR::HashsetNodeEntry
NextSingleton	Src/Kernel/OVR_System.h	/^    SystemSingletonInternal* NextSingleton;$/;"	m	class:OVR::SystemSingletonInternal
NextWriteIndex	Src/Util/Util_LatencyTest2State.h	/^    int             NextWriteIndex;$/;"	m	struct:OVR::Util::FrameTimeRecordSet
Nlerp	Src/Kernel/OVR_Math.h	/^    Quat Nlerp(const Quat& other, T a)$/;"	f	class:OVR::Quat
NoBuffer	Src/Kernel/OVR_File.h	/^        NoBuffer,$/;"	e	enum:OVR::BufferedFile::BufferModeType
NoCaseHashFunctor	Src/Kernel/OVR_String.h	/^    struct NoCaseHashFunctor$/;"	s	class:OVR::String
NoCaseKey	Src/Kernel/OVR_String.h	/^        NoCaseKey(const String &str) : pStr(&str){};$/;"	f	struct:OVR::String::NoCaseKey
NoCaseKey	Src/Kernel/OVR_String.h	/^    struct NoCaseKey$/;"	s	class:OVR::String
NoConstructor	Src/Kernel/OVR_String.h	/^    struct NoConstructor { };$/;"	s	class:OVR::String
NoInit	Src/Kernel/OVR_Math.h	/^	enum NoInitType { NoInit };$/;"	e	enum:OVR::Matrix3::NoInitType
NoInit	Src/Kernel/OVR_Math.h	/^    enum NoInitType { NoInit };$/;"	e	enum:OVR::Matrix4::NoInitType
NoInitType	Src/Kernel/OVR_Math.h	/^	enum NoInitType { NoInit };$/;"	g	class:OVR::Matrix3
NoInitType	Src/Kernel/OVR_Math.h	/^    enum NoInitType { NoInit };$/;"	g	class:OVR::Matrix4
NoVSyncToScanoutDelay	Src/CAPI/CAPI_FrameTimeManager.h	/^    double              NoVSyncToScanoutDelay;$/;"	m	class:OVR::CAPI::FrameTimeManager
NodeAltHashF	Src/Kernel/OVR_Hash.h	/^    struct NodeAltHashF$/;"	s	struct:OVR::HashNode
NodeHashF	Src/Kernel/OVR_Hash.h	/^    struct NodeHashF$/;"	s	struct:OVR::HashNode
NodeRef	Src/Kernel/OVR_Hash.h	/^        NodeRef(const C& f, const U& s) : pFirst(&f), pSecond(&s) { }$/;"	f	struct:OVR::HashNode::NodeRef
NodeRef	Src/Kernel/OVR_Hash.h	/^        NodeRef(const NodeRef& src)     : pFirst(src.pFirst), pSecond(src.pSecond) { }$/;"	f	struct:OVR::HashNode::NodeRef
NodeRef	Src/Kernel/OVR_Hash.h	/^    struct NodeRef$/;"	s	struct:OVR::HashNode
NormalPriority	Src/Kernel/OVR_Threads.h	/^        NormalPriority,$/;"	e	enum:OVR::Thread::ThreadPriority
Normalize	Src/Kernel/OVR_Math.h	/^    void    Normalize()                          $/;"	f	class:OVR::Vector2
Normalize	Src/Kernel/OVR_Math.h	/^    void    Normalize()                          $/;"	f	class:OVR::Vector3
Normalize	Src/Kernel/OVR_Math.h	/^    void    Normalize()                          $/;"	f	class:OVR::Vector4
Normalize	Src/Kernel/OVR_Math.h	/^    void    Normalize()                     $/;"	f	class:OVR::Quat
Normalized	Src/Kernel/OVR_Math.h	/^	Quat    Normalized() const              $/;"	f	class:OVR::Quat
Normalized	Src/Kernel/OVR_Math.h	/^    Vector2 Normalized() const                   $/;"	f	class:OVR::Vector2
Normalized	Src/Kernel/OVR_Math.h	/^    Vector3 Normalized() const                   $/;"	f	class:OVR::Vector3
Normalized	Src/Kernel/OVR_Math.h	/^    Vector4 Normalized() const                   $/;"	f	class:OVR::Vector4
NoseToPupilInMeters	Src/OVR_Stereo.h	/^        float               NoseToPupilInMeters;$/;"	m	struct:OVR::HmdRenderInfo::EyeConfig
NotRunning	Src/Kernel/OVR_Threads.h	/^        NotRunning  = 0,$/;"	e	enum:OVR::Thread::ThreadState
Notify	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    WaitCondition::Notify()$/;"	f	class:OVR::WaitCondition
Notify	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    WaitConditionImpl::Notify()$/;"	f	class:OVR::WaitConditionImpl
NotifyAll	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    WaitCondition::NotifyAll()$/;"	f	class:OVR::WaitCondition
NotifyAll	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    WaitConditionImpl::NotifyAll()$/;"	f	class:OVR::WaitConditionImpl
NotifyEvent	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    typedef ThreadCommand::NotifyEvent NotifyEvent;$/;"	t	class:OVR::ThreadCommandQueueImpl	file:
NotifyEvent	Src/Kernel/OVR_ThreadCommandQueue.h	/^        NotifyEvent() { }$/;"	f	class:OVR::ThreadCommand::NotifyEvent
NotifyEvent	Src/Kernel/OVR_ThreadCommandQueue.h	/^    class NotifyEvent : public ListNode<NotifyEvent>, public NewOverrideBase$/;"	c	class:OVR::ThreadCommand
NtQueryTimerResolutionType	Src/Kernel/OVR_Timer.cpp	/^    typedef NTSTATUS (NTAPI* NtQueryTimerResolutionType)(PULONG MaximumTime, PULONG MinimumTime, PULONG CurrentTime);$/;"	t	file:
NullData	Src/Kernel/OVR_String.cpp	/^String::DataDesc String::NullData = {String_LengthIsSize, 1, {0} };$/;"	m	class:OVR::String	file:
NullData	Src/Kernel/OVR_String.h	/^    static DataDesc NullData;$/;"	m	class:OVR::String
NullWithoutRelease	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE void    NullWithoutRelease()    $/;"	f	class:OVR::Ptr
NumCoefficients	Src/OVR_Stereo.h	/^    enum { NumCoefficients = 11 };$/;"	e	enum:OVR::LensConfig::__anon13
NumDistortionTimes	Src/Util/Util_Render_Stereo.h	/^    enum { NumDistortionTimes = 100 };$/;"	e	enum:OVR::Util::Render::TimewarpMachine::__anon15
NumOverdriveTextures	Src/CAPI/CAPI_DistortionRenderer.h	/^	static const int	NumOverdriveTextures = 2;$/;"	m	class:OVR::CAPI::DistortionRenderer
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( int16_t x ) {return NumberOfLeadingZeroes((uint16_t)x);}$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( int32_t x ) {return NumberOfLeadingZeroes((uint32_t)x);}$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( int64_t x ) {return NumberOfLeadingZeroes((uint64_t)x);}$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( int8_t x ) {return NumberOfLeadingZeroes((uint8_t)x);}$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( uint16_t x )$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( uint32_t x )$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( uint64_t x )$/;"	f	class:OVR::Net::BitStream
NumberOfLeadingZeroes	Src/Net/OVR_BitStream.cpp	/^int BitStream::NumberOfLeadingZeroes( uint8_t x )$/;"	f	class:OVR::Net::BitStream
OBJECTS	Makefile	/^OBJECTS = $(OTHER_OBJECTS) $(LIBOVR_OBJECTS)$/;"	m
OBJPATH	Makefile	/^OBJPATH       = .\/Obj\/Linux\/$(RELEASETYPE)\/$(SYSARCH)$/;"	m
ODCW1	Src/Kernel/OVR_Compiler.h	235;"	d
ODCW2	Src/Kernel/OVR_Compiler.h	236;"	d
ODCW3	Src/Kernel/OVR_Compiler.h	237;"	d
ODGW1	Src/Kernel/OVR_Compiler.h	191;"	d
ODGW2	Src/Kernel/OVR_Compiler.h	192;"	d
ODGW3	Src/Kernel/OVR_Compiler.h	193;"	d
OGL	Src/OVR_CAPI_GL.h	/^    ovrGLConfigData    OGL;$/;"	m	union:ovrGLConfig
OGL	Src/OVR_CAPI_GL.h	/^    ovrGLTextureData OGL;$/;"	m	union:ovrGLTexture_s
OS	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
OSAsString	Src/Util/Util_SystemInfo.cpp	/^const char * OSAsString()$/;"	f	namespace:OVR::Util
OSVersion	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
OSVersionAsString	Src/Util/Util_SystemInfo.cpp	/^String OSVersionAsString()$/;"	f	namespace:OVR::Util
OTHER_OBJECTS	Makefile	/^OTHER_OBJECTS = $(OTHER_SOURCE:.cpp=.o)$/;"	m
OTHER_SOURCE	Makefile	/^OTHER_SOURCE =	$(3RDPARTYPATH)\/EDID\/edid.cpp \\$/;"	m
OVR	Src/CAPI/CAPI_DistortionRenderer.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_DistortionRenderer.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/CAPI_FrameTimeManager.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_FrameTimeManager.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/CAPI_HMDRenderState.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_HMDRenderState.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/CAPI_HMDState.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_HMDState.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/CAPI_HSWDisplay.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_HSWDisplay.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/CAPI_LatencyStatistics.cpp	/^namespace OVR { namespace CAPI {$/;"	n	file:
OVR	Src/CAPI/CAPI_LatencyStatistics.h	/^namespace OVR { namespace CAPI {$/;"	n
OVR	Src/CAPI/GL/CAPI_GLE.cpp	/^        namespace OVR {$/;"	n	file:
OVR	Src/CAPI/GL/CAPI_GLE.h	/^namespace OVR$/;"	n
OVR	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	file:
OVR	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n
OVR	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n
OVR	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^namespace OVR { namespace CAPI { $/;"	n	file:
OVR	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n
OVR	Src/CAPI/GL/CAPI_GL_Util.cpp	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n	file:
OVR	Src/CAPI/GL/CAPI_GL_Util.h	/^namespace OVR { namespace CAPI { namespace GL {$/;"	n
OVR	Src/Displays/OVR_Display.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Displays/OVR_Display.h	/^namespace OVR {$/;"	n
OVR	Src/Displays/OVR_Linux_Display.cpp	/^namespace OVR { $/;"	n	file:
OVR	Src/Displays/OVR_Linux_Display.h	/^namespace OVR { namespace Linux {$/;"	n
OVR	Src/Displays/OVR_Linux_SDKWindow.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Displays/OVR_Linux_SDKWindow.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Alg.cpp	/^namespace OVR { namespace Alg {$/;"	n	file:
OVR	Src/Kernel/OVR_Alg.h	/^namespace OVR { namespace Alg {$/;"	n
OVR	Src/Kernel/OVR_Allocator.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Allocator.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Array.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Atomic.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Atomic.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_CRC32.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_CRC32.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Color.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_ContainerAllocator.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Delegates.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Deque.h	/^namespace OVR{ $/;"	n
OVR	Src/Kernel/OVR_File.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_File.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_FileFILE.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Hash.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_KeyCodes.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_List.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Lockless.cpp	/^namespace OVR { namespace LocklessTest {$/;"	n	file:
OVR	Src/Kernel/OVR_Lockless.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Log.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Log.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Math.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Math.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Observer.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_RefCount.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_RefCount.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_SharedMemory.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_SharedMemory.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Std.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Std.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_String.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_String.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_StringHash.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_String_FormatUtil.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_String_PathUtil.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_SysFile.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_SysFile.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_System.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_System.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_ThreadCommandQueue.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Threads.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_ThreadsPthread.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Timer.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/Kernel/OVR_Timer.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_Types.h	/^namespace OVR {$/;"	n
OVR	Src/Kernel/OVR_UTF8Util.cpp	/^namespace OVR { namespace UTF8Util {$/;"	n	file:
OVR	Src/Kernel/OVR_UTF8Util.h	/^namespace OVR { namespace UTF8Util {$/;"	n
OVR	Src/Net/OVR_BitStream.cpp	/^namespace OVR { namespace Net {$/;"	n	file:
OVR	Src/Net/OVR_BitStream.h	/^namespace OVR { namespace Net {$/;"	n
OVR	Src/Net/OVR_MessageIDTypes.h	/^namespace OVR { namespace Net {$/;"	n
OVR	Src/Net/OVR_NetworkPlugin.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	file:
OVR	Src/Net/OVR_NetworkPlugin.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n
OVR	Src/Net/OVR_NetworkTypes.h	/^namespace OVR {	namespace Net {$/;"	n
OVR	Src/Net/OVR_PacketizedTCPSocket.cpp	/^namespace OVR { namespace Net {$/;"	n	file:
OVR	Src/Net/OVR_PacketizedTCPSocket.h	/^namespace OVR { namespace Net {$/;"	n
OVR	Src/Net/OVR_RPC1.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	file:
OVR	Src/Net/OVR_RPC1.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n
OVR	Src/Net/OVR_Session.cpp	/^namespace OVR { namespace Net {$/;"	n	file:
OVR	Src/Net/OVR_Session.h	/^namespace OVR { namespace Net {$/;"	n
OVR	Src/Net/OVR_Socket.cpp	/^namespace OVR { namespace Net {$/;"	n	file:
OVR	Src/Net/OVR_Socket.h	/^namespace OVR { namespace Net {$/;"	n
OVR	Src/Net/OVR_Unix_Socket.cpp	/^namespace OVR { namespace Net {$/;"	n	file:
OVR	Src/Net/OVR_Unix_Socket.h	/^namespace OVR { namespace Net { $/;"	n
OVR	Src/OVR_CAPI.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/OVR_JSON.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/OVR_JSON.h	/^namespace OVR {  $/;"	n
OVR	Src/OVR_Profile.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/OVR_Profile.h	/^namespace OVR {$/;"	n
OVR	Src/OVR_SerialFormat.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/OVR_SerialFormat.h	/^namespace OVR {$/;"	n
OVR	Src/OVR_Stereo.cpp	/^namespace OVR {$/;"	n	file:
OVR	Src/OVR_Stereo.h	/^namespace OVR {$/;"	n
OVR	Src/Sensors/OVR_DeviceConstants.h	/^namespace OVR {$/;"	n
OVR	Src/Service/Service_NetClient.cpp	/^namespace OVR { namespace Service {$/;"	n	file:
OVR	Src/Service/Service_NetClient.h	/^namespace OVR { namespace Service {$/;"	n
OVR	Src/Service/Service_NetSessionCommon.cpp	/^namespace OVR { namespace Service {$/;"	n	file:
OVR	Src/Service/Service_NetSessionCommon.h	/^namespace OVR {$/;"	n
OVR	Src/Tracking/Tracking_PoseState.h	/^namespace OVR {$/;"	n
OVR	Src/Tracking/Tracking_SensorState.h	/^namespace OVR { namespace Tracking {$/;"	n
OVR	Src/Tracking/Tracking_SensorStateReader.cpp	/^namespace OVR { namespace Tracking {$/;"	n	file:
OVR	Src/Tracking/Tracking_SensorStateReader.h	/^namespace OVR { namespace Tracking {$/;"	n
OVR	Src/Util/Util_ImageWindow.h	/^namespace OVR { namespace Util {$/;"	n
OVR	Src/Util/Util_LatencyTest2Reader.cpp	/^namespace OVR { namespace Util {$/;"	n	file:
OVR	Src/Util/Util_LatencyTest2Reader.h	/^namespace OVR { namespace Util {$/;"	n
OVR	Src/Util/Util_LatencyTest2State.h	/^namespace OVR { namespace Util {$/;"	n
OVR	Src/Util/Util_Render_Stereo.cpp	/^namespace OVR { namespace Util { namespace Render {$/;"	n	file:
OVR	Src/Util/Util_Render_Stereo.h	/^namespace OVR { namespace Util { namespace Render {$/;"	n
OVR	Src/Util/Util_SystemInfo.cpp	/^namespace OVR { namespace Util {$/;"	n	file:
OVR	Src/Util/Util_SystemInfo.h	/^namespace OVR { namespace Util {$/;"	n
OVRID_END	Src/Net/OVR_MessageIDTypes.h	/^    OVRID_END = 128,$/;"	e	enum:OVR::Net::DefaultMessageIDTypes
OVRID_LATENCY_TESTER_1	Src/Net/OVR_MessageIDTypes.h	/^    OVRID_LATENCY_TESTER_1,$/;"	e	enum:OVR::Net::DefaultMessageIDTypes
OVRID_RPC1	Src/Net/OVR_MessageIDTypes.h	/^    OVRID_RPC1,$/;"	e	enum:OVR::Net::DefaultMessageIDTypes
OVRTypeof	Src/CAPI/GL/CAPI_GLE.cpp	51;"	d	file:
OVRTypeof	Src/CAPI/GL/CAPI_GLE.cpp	53;"	d	file:
OVR_64BIT_POINTERS	Src/Kernel/OVR_Types.h	141;"	d
OVR_ALIGNAS	Src/Kernel/OVR_Compiler.h	1248;"	d
OVR_ALIGNAS	Src/Kernel/OVR_Compiler.h	1250;"	d
OVR_ALIGNAS	Src/Kernel/OVR_Compiler.h	1252;"	d
OVR_ALIGNAS	Src/Kernel/OVR_Compiler.h	1254;"	d
OVR_ALIGNAS	Src/Kernel/OVR_Compiler.h	1256;"	d
OVR_ALIGNOF	Src/Kernel/OVR_Compiler.h	1264;"	d
OVR_ALIGNOF	Src/Kernel/OVR_Compiler.h	1266;"	d
OVR_ALIGNOF	Src/Kernel/OVR_Compiler.h	1268;"	d
OVR_ALIGNOF	Src/Kernel/OVR_Compiler.h	1270;"	d
OVR_ALIGNOF	Src/Kernel/OVR_Compiler.h	1272;"	d
OVR_ALLOC	Src/Kernel/OVR_Allocator.h	319;"	d
OVR_ALLOC	Src/Kernel/OVR_Allocator.h	322;"	d
OVR_ALLOC_ALIGNED	Src/Kernel/OVR_Allocator.h	315;"	d
OVR_ALLOC_DEBUG	Src/Kernel/OVR_Allocator.h	320;"	d
OVR_ALLOC_DEBUG	Src/Kernel/OVR_Allocator.h	323;"	d
OVR_ANALYSIS_ASSUME	Src/Kernel/OVR_Compiler.h	1306;"	d
OVR_ANALYSIS_ASSUME	Src/Kernel/OVR_Compiler.h	1309;"	d
OVR_ARRAY_COUNT	Src/Kernel/OVR_Types.h	691;"	d
OVR_ASM	Src/Kernel/OVR_Types.h	379;"	d
OVR_ASSERT	Src/Kernel/OVR_Types.h	562;"	d
OVR_ASSERT_AND_UNUSED	Src/Kernel/OVR_Types.h	566;"	d
OVR_ASSERT_LOG	Src/Kernel/OVR_Log.h	212;"	d
OVR_ASSERT_LOG	Src/Kernel/OVR_Log.h	221;"	d
OVR_ASSUME	Src/Kernel/OVR_Compiler.h	1305;"	d
OVR_ASSUME	Src/Kernel/OVR_Compiler.h	1308;"	d
OVR_Alg_h	Src/Kernel/OVR_Alg.h	29;"	d
OVR_Allocator_h	Src/Kernel/OVR_Allocator.h	29;"	d
OVR_Array_h	Src/Kernel/OVR_Array.h	29;"	d
OVR_Atomic_h	Src/Kernel/OVR_Atomic.h	31;"	d
OVR_BIG_ENDIAN	Src/Kernel/OVR_Types.h	356;"	d
OVR_BUILD_STRING	Src/Kernel/OVR_Types.h	792;"	d
OVR_BUILD_VERSION	Include/OVR_Version.h	30;"	d
OVR_BYTE_ORDER	Src/Kernel/OVR_Types.h	364;"	d
OVR_Bitstream_h	Src/Net/OVR_BitStream.h	29;"	d
OVR_CAPI_DistortionRenderer_h	Src/CAPI/CAPI_DistortionRenderer.h	28;"	d
OVR_CAPI_FrameTimeManager_h	Src/CAPI/CAPI_FrameTimeManager.h	28;"	d
OVR_CAPI_GL_DistortionRenderer_h	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	28;"	d
OVR_CAPI_GL_HSWDisplay_h	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	28;"	d
OVR_CAPI_GL_Shaders_h	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	29;"	d
OVR_CAPI_GL_h	Src/OVR_CAPI_GL.h	16;"	d
OVR_CAPI_HMDRenderState_h	Src/CAPI/CAPI_HMDRenderState.h	28;"	d
OVR_CAPI_HMDState_h	Src/CAPI/CAPI_HMDState.h	28;"	d
OVR_CAPI_HSWDisplay_h	Src/CAPI/CAPI_HSWDisplay.h	28;"	d
OVR_CAPI_LatencyStatistics_h	Src/CAPI/CAPI_LatencyStatistics.h	28;"	d
OVR_CAPI_h	Src/OVR_CAPI.h	36;"	d
OVR_CC_ARM	Src/Kernel/OVR_Compiler.h	87;"	d
OVR_CC_CLANG	Src/Kernel/OVR_Compiler.h	84;"	d
OVR_CC_GNU	Src/Kernel/OVR_Compiler.h	81;"	d
OVR_CC_HAS_BUILTIN	Src/Kernel/OVR_Compiler.h	357;"	d
OVR_CC_HAS_BUILTIN	Src/Kernel/OVR_Compiler.h	359;"	d
OVR_CC_HAS_FEATURE	Src/Kernel/OVR_Compiler.h	335;"	d
OVR_CC_HAS_FEATURE	Src/Kernel/OVR_Compiler.h	337;"	d
OVR_CC_INTEL	Src/Kernel/OVR_Compiler.h	60;"	d
OVR_CC_MSVC	Src/Kernel/OVR_Compiler.h	72;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	112;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	114;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	116;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	118;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	121;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	123;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	125;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	127;"	d
OVR_CC_VERSION	Src/Kernel/OVR_Compiler.h	130;"	d
OVR_CDECL	Src/Kernel/OVR_Types.h	374;"	d
OVR_COMPILER_ASSERT	Src/Kernel/OVR_Types.h	624;"	d
OVR_CONSTEXPR	Src/Kernel/OVR_Compiler.h	1445;"	d
OVR_CONSTEXPR	Src/Kernel/OVR_Compiler.h	1447;"	d
OVR_CONSTEXPR_OR_CONST	Src/Kernel/OVR_Compiler.h	1453;"	d
OVR_CONSTEXPR_OR_CONST	Src/Kernel/OVR_Compiler.h	1455;"	d
OVR_CPP11_ENABLED	Src/Kernel/OVR_Compiler.h	374;"	d
OVR_CPP11_ENABLED	Src/Kernel/OVR_Compiler.h	376;"	d
OVR_CPP11_ENABLED	Src/Kernel/OVR_Compiler.h	378;"	d
OVR_CPP_CPP14_ENABLED	Src/Kernel/OVR_Compiler.h	386;"	d
OVR_CPP_CPP14_ENABLED	Src/Kernel/OVR_Compiler.h	388;"	d
OVR_CPP_NO_ALIGNAS	Src/Kernel/OVR_Compiler.h	625;"	d
OVR_CPP_NO_ALIGNOF	Src/Kernel/OVR_Compiler.h	607;"	d
OVR_CPP_NO_AUTO	Src/Kernel/OVR_Compiler.h	527;"	d
OVR_CPP_NO_CONSTEXPR	Src/Kernel/OVR_Compiler.h	563;"	d
OVR_CPP_NO_DECLTYPE	Src/Kernel/OVR_Compiler.h	736;"	d
OVR_CPP_NO_DEFAULTED_FUNCTIONS	Src/Kernel/OVR_Compiler.h	755;"	d
OVR_CPP_NO_DELEGATING_CONSTRUCTORS	Src/Kernel/OVR_Compiler.h	968;"	d
OVR_CPP_NO_DELETED_FUNCTIONS	Src/Kernel/OVR_Compiler.h	774;"	d
OVR_CPP_NO_DOUBLE_TEMPLATE_BRACKETS	Src/Kernel/OVR_Compiler.h	931;"	d
OVR_CPP_NO_EXCEPTIONS	Src/Kernel/OVR_Compiler.h	421;"	d
OVR_CPP_NO_EXCEPTIONS	Src/Kernel/OVR_Compiler.h	423;"	d
OVR_CPP_NO_EXPLICIT_CONVERSION_OPERATORS	Src/Kernel/OVR_Compiler.h	1056;"	d
OVR_CPP_NO_EXTENDED_FRIEND_DECLARATIONS	Src/Kernel/OVR_Compiler.h	1198;"	d
OVR_CPP_NO_EXTENDED_SIZEOF	Src/Kernel/OVR_Compiler.h	1021;"	d
OVR_CPP_NO_EXTERN_TEMPLATE	Src/Kernel/OVR_Compiler.h	679;"	d
OVR_CPP_NO_FINAL	Src/Kernel/OVR_Compiler.h	661;"	d
OVR_CPP_NO_FORWARD_DECLARED_ENUMS	Src/Kernel/OVR_Compiler.h	809;"	d
OVR_CPP_NO_FUNCTION_TEMPLATE_DEFAULT_ARGS	Src/Kernel/OVR_Compiler.h	985;"	d
OVR_CPP_NO_INHERITING_CONSTRUCTORS	Src/Kernel/OVR_Compiler.h	951;"	d
OVR_CPP_NO_INITIALIZER_LISTS	Src/Kernel/OVR_Compiler.h	876;"	d
OVR_CPP_NO_INLINE_NAMESPACES	Src/Kernel/OVR_Compiler.h	1039;"	d
OVR_CPP_NO_LAMBDA_EXPRESSIONS	Src/Kernel/OVR_Compiler.h	589;"	d
OVR_CPP_NO_LOCAL_CLASS_TEMPLATE_PARAMETERS	Src/Kernel/OVR_Compiler.h	1077;"	d
OVR_CPP_NO_NEW_CHARACTER_TYPES	Src/Kernel/OVR_Compiler.h	1095;"	d
OVR_CPP_NO_NOEXCEPT	Src/Kernel/OVR_Compiler.h	714;"	d
OVR_CPP_NO_NONSTATIC_MEMBER_INITIALIZERS	Src/Kernel/OVR_Compiler.h	913;"	d
OVR_CPP_NO_NORETURN	Src/Kernel/OVR_Compiler.h	895;"	d
OVR_CPP_NO_NULLPTR	Src/Kernel/OVR_Compiler.h	494;"	d
OVR_CPP_NO_OVERRIDE	Src/Kernel/OVR_Compiler.h	643;"	d
OVR_CPP_NO_RANGE_BASED_FOR_LOOP	Src/Kernel/OVR_Compiler.h	544;"	d
OVR_CPP_NO_RAW_STRING_LITERALS	Src/Kernel/OVR_Compiler.h	1164;"	d
OVR_CPP_NO_RELAXED_CONSTEXPR	Src/Kernel/OVR_Compiler.h	571;"	d
OVR_CPP_NO_RTTI	Src/Kernel/OVR_Compiler.h	444;"	d
OVR_CPP_NO_RTTI	Src/Kernel/OVR_Compiler.h	446;"	d
OVR_CPP_NO_RTTI	Src/Kernel/OVR_Compiler.h	448;"	d
OVR_CPP_NO_RTTI	Src/Kernel/OVR_Compiler.h	450;"	d
OVR_CPP_NO_RVALUE_REFERENCES	Src/Kernel/OVR_Compiler.h	511;"	d
OVR_CPP_NO_STANDARD_LAYOUT_TYPES	Src/Kernel/OVR_Compiler.h	792;"	d
OVR_CPP_NO_STATIC_ASSERT	Src/Kernel/OVR_Compiler.h	472;"	d
OVR_CPP_NO_STRONGLY_TYPED_ENUMS	Src/Kernel/OVR_Compiler.h	825;"	d
OVR_CPP_NO_TEMPLATE_ALIASES	Src/Kernel/OVR_Compiler.h	858;"	d
OVR_CPP_NO_THREAD_LOCAL	Src/Kernel/OVR_Compiler.h	1221;"	d
OVR_CPP_NO_TRAILING_RETURN_TYPES	Src/Kernel/OVR_Compiler.h	842;"	d
OVR_CPP_NO_UNICODE_CHAR_NAME_LITERALS	Src/Kernel/OVR_Compiler.h	1113;"	d
OVR_CPP_NO_UNICODE_STRING_LITERALS	Src/Kernel/OVR_Compiler.h	1147;"	d
OVR_CPP_NO_UNIFIED_INITIALIZATION_SYNTAX	Src/Kernel/OVR_Compiler.h	1181;"	d
OVR_CPP_NO_UNRESTRICTED_UNIONS	Src/Kernel/OVR_Compiler.h	1002;"	d
OVR_CPP_NO_UNWIND	Src/Kernel/OVR_Compiler.h	425;"	d
OVR_CPP_NO_USER_DEFINED_LITERALS	Src/Kernel/OVR_Compiler.h	1130;"	d
OVR_CPP_NO_VARIADIC_TEMPLATES	Src/Kernel/OVR_Compiler.h	695;"	d
OVR_CPU_ALTIVEC	Src/Kernel/OVR_Types.h	170;"	d
OVR_CPU_ARM	Src/Kernel/OVR_Types.h	151;"	d
OVR_CPU_ARM_NEON	Src/Kernel/OVR_Types.h	174;"	d
OVR_CPU_MIPS	Src/Kernel/OVR_Types.h	149;"	d
OVR_CPU_OTHER	Src/Kernel/OVR_Types.h	153;"	d
OVR_CPU_PPC	Src/Kernel/OVR_Types.h	147;"	d
OVR_CPU_PPC64	Src/Kernel/OVR_Types.h	145;"	d
OVR_CPU_SSE	Src/Kernel/OVR_Types.h	166;"	d
OVR_CPU_X86	Src/Kernel/OVR_Types.h	143;"	d
OVR_CPU_X86_64	Src/Kernel/OVR_Types.h	140;"	d
OVR_CRC32_h	Src/Kernel/OVR_CRC32.h	29;"	d
OVR_CURRENT_FUNCTION	Src/Kernel/OVR_Types.h	713;"	d
OVR_Color_h	Src/Kernel/OVR_Color.h	28;"	d
OVR_Compiler_h	Src/Kernel/OVR_Compiler.h	30;"	d
OVR_ContainerAllocator_h	Src/Kernel/OVR_ContainerAllocator.h	29;"	d
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	32;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	34;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	36;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	38;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	40;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_DistortionRenderer.cpp	42;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	421;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	423;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	425;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	427;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	429;"	d	file:
OVR_D3D_VERSION	Src/CAPI/CAPI_HSWDisplay.cpp	431;"	d	file:
OVR_DEBUG_BREAK	Src/Kernel/OVR_Types.h	558;"	d
OVR_DEBUG_CODE	Src/Kernel/OVR_Types.h	555;"	d
OVR_DEBUG_LOG	Src/Kernel/OVR_Log.h	204;"	d
OVR_DEBUG_LOG	Src/Kernel/OVR_Log.h	217;"	d
OVR_DEBUG_LOG_COND	Src/Kernel/OVR_Log.h	208;"	d
OVR_DEBUG_LOG_COND	Src/Kernel/OVR_Log.h	219;"	d
OVR_DEBUG_LOG_TEXT	Src/Kernel/OVR_Log.h	205;"	d
OVR_DEBUG_LOG_TEXT	Src/Kernel/OVR_Log.h	218;"	d
OVR_DEBUG_LOG_TEXT_COND	Src/Kernel/OVR_Log.h	209;"	d
OVR_DEBUG_LOG_TEXT_COND	Src/Kernel/OVR_Log.h	220;"	d
OVR_DEBUG_SELECT	Src/Kernel/OVR_Types.h	805;"	d
OVR_DEBUG_STATEMENT	Src/Kernel/OVR_Types.h	804;"	d
OVR_DECLARE_SINGLETON	Src/Kernel/OVR_System.h	111;"	d
OVR_DEFAULT_CAMERA_POSITION	Src/OVR_CAPI_Keys.h	55;"	d
OVR_DEFAULT_EXTRA_EYE_ROTATION	Src/OVR_Stereo.h	/^const float OVR_DEFAULT_EXTRA_EYE_ROTATION = 30.0f * MATH_FLOAT_DEGREETORADFACTOR;$/;"	m	namespace:OVR
OVR_DEFAULT_EYE_HEIGHT	Src/OVR_CAPI_Keys.h	50;"	d
OVR_DEFAULT_EYE_RELIEF_DIAL	Src/OVR_CAPI_Keys.h	54;"	d
OVR_DEFAULT_GENDER	Src/OVR_CAPI_Keys.h	48;"	d
OVR_DEFAULT_IPD	Src/OVR_CAPI_Keys.h	51;"	d
OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL	Src/OVR_CAPI_Keys.h	52;"	d
OVR_DEFAULT_NECK_TO_EYE_VERTICAL	Src/OVR_CAPI_Keys.h	53;"	d
OVR_DEFAULT_PLAYER_HEIGHT	Src/OVR_CAPI_Keys.h	49;"	d
OVR_DEFINE_SINGLETON	Src/Kernel/OVR_System.h	119;"	d
OVR_DEPRECATED	Src/Kernel/OVR_Types.h	739;"	d
OVR_DEPRECATED_MSG	Src/Kernel/OVR_Types.h	740;"	d
OVR_DISABLE_ALL_MSVC_WARNINGS	Src/Kernel/OVR_Compiler.h	303;"	d
OVR_DISABLE_ALL_MSVC_WARNINGS	Src/Kernel/OVR_Compiler.h	306;"	d
OVR_DISABLE_CLANG_WARNING	Src/Kernel/OVR_Compiler.h	239;"	d
OVR_DISABLE_CLANG_WARNING	Src/Kernel/OVR_Compiler.h	243;"	d
OVR_DISABLE_GNU_WARNING	Src/Kernel/OVR_Compiler.h	197;"	d
OVR_DISABLE_GNU_WARNING	Src/Kernel/OVR_Compiler.h	201;"	d
OVR_DISABLE_GNU_WARNING	Src/Kernel/OVR_Compiler.h	204;"	d
OVR_DISABLE_MSVC_WARNING	Src/Kernel/OVR_Compiler.h	270;"	d
OVR_DISABLE_MSVC_WARNING	Src/Kernel/OVR_Compiler.h	274;"	d
OVR_DISABLE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	155;"	d
OVR_DISABLE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	159;"	d
OVR_DISABLE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	161;"	d
OVR_DK2_LATEST_FIRMWARE_MAJOR_VERSION	Include/OVR_Version.h	33;"	d
OVR_DK2_LATEST_FIRMWARE_MINOR_VERSION	Include/OVR_Version.h	34;"	d
OVR_Delegates_h	Src/Kernel/OVR_Delegates.h	65;"	d
OVR_Deque_h	Src/Kernel/OVR_Deque.h	28;"	d
OVR_DeviceConstants_h	Src/Sensors/OVR_DeviceConstants.h	28;"	d
OVR_Display_h	Src/Displays/OVR_Display.h	29;"	d
OVR_ENABLE_THREADS	Src/Kernel/OVR_Types.h	812;"	d
OVR_EXPORT	Src/OVR_CAPI.h	49;"	d
OVR_EXPORT	Src/OVR_CAPI.h	51;"	d
OVR_EXTERN_TEMPLATE	Src/Kernel/OVR_Compiler.h	1426;"	d
OVR_EXTERN_TEMPLATE	Src/Kernel/OVR_Compiler.h	1428;"	d
OVR_FAKE_SHAREDMEMORY	Src/Kernel/OVR_SharedMemory.h	37;"	d
OVR_FASTCALL	Src/Kernel/OVR_Types.h	368;"	d
OVR_FINAL	Src/Kernel/OVR_Compiler.h	1366;"	d
OVR_FINAL	Src/Kernel/OVR_Compiler.h	1368;"	d
OVR_FINAL	Src/Kernel/OVR_Compiler.h	1370;"	d
OVR_FINAL_OVERRIDE	Src/Kernel/OVR_Compiler.h	1409;"	d
OVR_FORCE_INLINE	Src/Kernel/OVR_Types.h	454;"	d
OVR_FREE	Src/Kernel/OVR_Allocator.h	314;"	d
OVR_FREE_ALIGNED	Src/Kernel/OVR_Allocator.h	316;"	d
OVR_FUNCTION_DEFAULT	Src/Kernel/OVR_Compiler.h	1481;"	d
OVR_FUNCTION_DEFAULT	Src/Kernel/OVR_Compiler.h	1483;"	d
OVR_FUNCTION_DELETE	Src/Kernel/OVR_Compiler.h	1475;"	d
OVR_FUNCTION_DELETE	Src/Kernel/OVR_Compiler.h	1477;"	d
OVR_File_h	Src/Kernel/OVR_File.h	34;"	d
OVR_GUID	Src/Kernel/OVR_Types.h	/^struct OVR_GUID$/;"	s	namespace:OVR
OVR_GlobalLog	Src/Kernel/OVR_Log.cpp	/^    Log* volatile OVR_GlobalLog = 0;$/;"	m	namespace:OVR	file:
OVR_HAVE_std_nullptr_t	Src/Kernel/OVR_Nullptr.h	43;"	d
OVR_HAVE_std_nullptr_t	Src/Kernel/OVR_Nullptr.h	46;"	d
OVR_HAVE_std_nullptr_t	Src/Kernel/OVR_Nullptr.h	49;"	d
OVR_HAVE_std_nullptr_t	Src/Kernel/OVR_Nullptr.h	51;"	d
OVR_HAVE_std_nullptr_t	Src/Kernel/OVR_Nullptr.h	53;"	d
OVR_Hash_h	Src/Kernel/OVR_Hash.h	29;"	d
OVR_JOIN	Src/Kernel/OVR_Types.h	503;"	d
OVR_JOIN1	Src/Kernel/OVR_Types.h	504;"	d
OVR_JOIN2	Src/Kernel/OVR_Types.h	505;"	d
OVR_JSON_H	Src/OVR_JSON.h	30;"	d
OVR_KEY_CAMERA_POSITION	Src/OVR_CAPI_Keys.h	41;"	d
OVR_KEY_CUSTOM_EYE_RENDER	Src/OVR_CAPI_Keys.h	40;"	d
OVR_KEY_EYE_CUP	Src/OVR_CAPI_Keys.h	39;"	d
OVR_KEY_EYE_HEIGHT	Src/OVR_CAPI_Keys.h	33;"	d
OVR_KEY_EYE_RELIEF_DIAL	Src/OVR_CAPI_Keys.h	36;"	d
OVR_KEY_EYE_TO_NOSE_DISTANCE	Src/OVR_CAPI_Keys.h	37;"	d
OVR_KEY_GENDER	Src/OVR_CAPI_Keys.h	31;"	d
OVR_KEY_HSWDISPLAYLASTDISPLAYEDTIME	Src/CAPI/CAPI_HSWDisplay.cpp	102;"	d	file:
OVR_KEY_IPD	Src/OVR_CAPI_Keys.h	34;"	d
OVR_KEY_MAX_EYE_TO_PLATE_DISTANCE	Src/OVR_CAPI_Keys.h	38;"	d
OVR_KEY_NAME	Src/OVR_CAPI_Keys.h	30;"	d
OVR_KEY_NECK_TO_EYE_DISTANCE	Src/OVR_CAPI_Keys.h	35;"	d
OVR_KEY_PLAYER_HEIGHT	Src/OVR_CAPI_Keys.h	32;"	d
OVR_KEY_USER	Src/OVR_CAPI_Keys.h	29;"	d
OVR_KeyCodes_h	Src/Kernel/OVR_KeyCodes.h	28;"	d
OVR_LAG_STATS_EPOCH	Src/CAPI/CAPI_LatencyStatistics.h	40;"	d
OVR_LAG_STATS_RESET_LIMIT	Src/CAPI/CAPI_LatencyStatistics.h	42;"	d
OVR_LITTLE_ENDIAN	Src/Kernel/OVR_Types.h	355;"	d
OVR_LOG_FUNCTION_IMPL	Src/Kernel/OVR_Log.cpp	336;"	d	file:
OVR_LOG_FUNCTION_IMPL	Src/Kernel/OVR_Log.cpp	352;"	d	file:
OVR_LOG_VAARG_ATTRIBUTE	Src/Kernel/OVR_Log.h	92;"	d
OVR_LOG_VAARG_ATTRIBUTE	Src/Kernel/OVR_Log.h	94;"	d
OVR_Linux_Display_h	Src/Displays/OVR_Linux_Display.h	28;"	d
OVR_Linux_SDKWindow_h	Src/Displays/OVR_Linux_SDKWindow.h	28;"	d
OVR_List_h	Src/Kernel/OVR_List.h	29;"	d
OVR_Lockless_h	Src/Kernel/OVR_Lockless.h	29;"	d
OVR_Log_h	Src/Kernel/OVR_Log.h	29;"	d
OVR_MAJOR_VERSION	Include/OVR_Version.h	28;"	d
OVR_MEMORY_CHECK_DELETE_NONE	Src/Kernel/OVR_Allocator.h	88;"	d
OVR_MEMORY_DEFINE_PLACEMENT_NEW	Src/Kernel/OVR_Allocator.h	83;"	d
OVR_MEMORY_REDEFINE_NEW	Src/Kernel/OVR_Allocator.h	91;"	d
OVR_MEMORY_REDEFINE_NEW_IMPL	Src/Kernel/OVR_Allocator.h	73;"	d
OVR_MINOR_VERSION	Include/OVR_Version.h	29;"	d
OVR_MSVC_SAFESTRING	Src/Kernel/OVR_Std.h	39;"	d
OVR_Math_h	Src/Kernel/OVR_Math.h	30;"	d
OVR_NOEXCEPT	Src/Kernel/OVR_Compiler.h	1344;"	d
OVR_NOEXCEPT	Src/Kernel/OVR_Compiler.h	1348;"	d
OVR_NOEXCEPT_EXPR	Src/Kernel/OVR_Compiler.h	1346;"	d
OVR_NOEXCEPT_EXPR	Src/Kernel/OVR_Compiler.h	1350;"	d
OVR_NOEXCEPT_IF	Src/Kernel/OVR_Compiler.h	1345;"	d
OVR_NOEXCEPT_IF	Src/Kernel/OVR_Compiler.h	1349;"	d
OVR_NON_COPYABLE	Src/Kernel/OVR_Compiler.h	1506;"	d
OVR_NON_COPYABLE	Src/Kernel/OVR_Compiler.h	1511;"	d
OVR_NO_INLINE	Src/Kernel/OVR_Types.h	472;"	d
OVR_Net_RPC_h	Src/Net/OVR_RPC1.h	29;"	d
OVR_NetworkPlugin_h	Src/Net/OVR_NetworkPlugin.h	29;"	d
OVR_NetworkTypes_h	Src/Net/OVR_NetworkTypes.h	29;"	d
OVR_Nullptr_h	Src/Kernel/OVR_Nullptr.h	29;"	d
OVR_OBSERVER_CALL_BODY	Src/Kernel/OVR_Observer.h	264;"	d
OVR_OBSERVER_CALL_BODY	Src/Kernel/OVR_Observer.h	321;"	d
OVR_OFFSETOF	Src/Kernel/OVR_Types.h	523;"	d
OVR_OFFSET_OF	Src/OVR_CAPI.cpp	892;"	d	file:
OVR_OS_ANDROID	Src/Kernel/OVR_Types.h	82;"	d
OVR_OS_APPLE	Src/Kernel/OVR_Types.h	107;"	d
OVR_OS_BSD	Src/Kernel/OVR_Types.h	74;"	d
OVR_OS_BSD	Src/Kernel/OVR_Types.h	87;"	d
OVR_OS_DARWIN	Src/Kernel/OVR_Types.h	72;"	d
OVR_OS_IPHONE	Src/Kernel/OVR_Types.h	70;"	d
OVR_OS_LINUX	Src/Kernel/OVR_Types.h	83;"	d
OVR_OS_LINUX	Src/Kernel/OVR_Types.h	85;"	d
OVR_OS_MAC	Src/Kernel/OVR_Types.h	73;"	d
OVR_OS_MOBILE	Src/Kernel/OVR_Types.h	119;"	d
OVR_OS_MS	Src/Kernel/OVR_Types.h	101;"	d
OVR_OS_MS_MOBILE	Src/Kernel/OVR_Types.h	95;"	d
OVR_OS_OTHER	Src/Kernel/OVR_Types.h	89;"	d
OVR_OS_UNIX	Src/Kernel/OVR_Types.h	113;"	d
OVR_OS_WIN32	Src/Kernel/OVR_Types.h	78;"	d
OVR_OS_WIN32	Src/Kernel/OVR_Types.h	80;"	d
OVR_OS_WIN64	Src/Kernel/OVR_Types.h	77;"	d
OVR_OVERRIDE	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    virtual bool Initialize(const ovrRenderAPIConfig* apiConfig) OVR_OVERRIDE;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
OVR_OVERRIDE	Src/Kernel/OVR_Compiler.h	1386;"	d
OVR_OVERRIDE	Src/Kernel/OVR_Compiler.h	1389;"	d
OVR_OVERRIDE	Src/Kernel/OVR_Compiler.h	1394;"	d
OVR_Observer_h	Src/Kernel/OVR_Observer.h	29;"	d
OVR_PROCESSOR_PAUSE	Src/Kernel/OVR_Types.h	667;"	d
OVR_PTR_SIZE	Src/Kernel/OVR_Types.h	423;"	d
OVR_PacketizedTCPSocket_h	Src/Net/OVR_PacketizedTCPSocket.h	29;"	d
OVR_Profile_h	Src/OVR_Profile.h	33;"	d
OVR_REALLOC	Src/Kernel/OVR_Allocator.h	313;"	d
OVR_REFCOUNTALLOC_CHECK_DELETE	Src/Kernel/OVR_RefCount.h	188;"	d
OVR_REFCOUNTALLOC_CHECK_DELETE	Src/Kernel/OVR_RefCount.h	191;"	d
OVR_REFCOUNTALLOC_CHECK_DELETE	Src/Kernel/OVR_RefCount.h	197;"	d
OVR_REFCOUNTALLOC_CHECK_DELETE	Src/Kernel/OVR_RefCount.h	221;"	d
OVR_REFCOUNTALLOC_CHECK_DELETE	Src/Kernel/OVR_RefCount.h	226;"	d
OVR_RESTORE_ALL_MSVC_WARNINGS	Src/Kernel/OVR_Compiler.h	312;"	d
OVR_RESTORE_ALL_MSVC_WARNINGS	Src/Kernel/OVR_Compiler.h	315;"	d
OVR_RESTORE_CLANG_WARNING	Src/Kernel/OVR_Compiler.h	249;"	d
OVR_RESTORE_CLANG_WARNING	Src/Kernel/OVR_Compiler.h	252;"	d
OVR_RESTORE_GNU_WARNING	Src/Kernel/OVR_Compiler.h	213;"	d
OVR_RESTORE_GNU_WARNINGS	Src/Kernel/OVR_Compiler.h	210;"	d
OVR_RESTORE_MSVC_WARNING	Src/Kernel/OVR_Compiler.h	280;"	d
OVR_RESTORE_MSVC_WARNING	Src/Kernel/OVR_Compiler.h	283;"	d
OVR_RESTORE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	167;"	d
OVR_RESTORE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	169;"	d
OVR_RESTORE_OPTIMIZATION	Src/Kernel/OVR_Compiler.h	171;"	d
OVR_RESTRICT	Src/Kernel/OVR_Compiler.h	1325;"	d
OVR_RefCount_h	Src/Kernel/OVR_RefCount.h	29;"	d
OVR_SA_HELP	Src/Kernel/OVR_Types.h	647;"	d
OVR_SA_PASTE	Src/Kernel/OVR_Types.h	646;"	d
OVR_SA_UNUSED	Src/Kernel/OVR_Types.h	642;"	d
OVR_SBUFF_DEFAULT_GROW_SIZE	Src/Kernel/OVR_String.cpp	558;"	d	file:
OVR_SIZEOF_MEMBER	Src/Kernel/OVR_Types.h	542;"	d
OVR_STDCALL	Src/Kernel/OVR_Types.h	373;"	d
OVR_STDLIB_DINKUMWARE	Src/Kernel/OVR_Types.h	334;"	d
OVR_STDLIB_LIBCPP	Src/Kernel/OVR_Types.h	327;"	d
OVR_STDLIB_LIBSTDCPP	Src/Kernel/OVR_Types.h	320;"	d
OVR_STR	Src/Kernel/OVR_Types.h	385;"	d
OVR_STRINGIZE	Src/Kernel/OVR_Types.h	489;"	d
OVR_STRINGIZEIMPL	Src/Kernel/OVR_Types.h	488;"	d
OVR_SerialFormat_h	Src/OVR_SerialFormat.h	28;"	d
OVR_Service_NetClient_h	Src/Service/Service_NetClient.h	28;"	d
OVR_Service_NetSessionCommon_h	Src/Service/Service_NetSessionCommon.h	28;"	d
OVR_Session_h	Src/Net/OVR_Session.h	29;"	d
OVR_SharedMemory_h	Src/Kernel/OVR_SharedMemory.h	29;"	d
OVR_Socket_h	Src/Net/OVR_Socket.h	29;"	d
OVR_Std_h	Src/Kernel/OVR_Std.h	29;"	d
OVR_Stereo_h	Src/OVR_Stereo.h	28;"	d
OVR_StringHash_h	Src/Kernel/OVR_StringHash.h	30;"	d
OVR_String_h	Src/Kernel/OVR_String.h	30;"	d
OVR_SysFile_h	Src/Kernel/OVR_SysFile.h	34;"	d
OVR_System_h	Src/Kernel/OVR_System.h	30;"	d
OVR_THREAD_EXIT	Src/Kernel/OVR_Threads.h	194;"	d
OVR_THREAD_FINISHED	Src/Kernel/OVR_Threads.h	189;"	d
OVR_THREAD_STARTED	Src/Kernel/OVR_Threads.h	187;"	d
OVR_THREAD_START_SUSPENDED	Src/Kernel/OVR_Threads.h	191;"	d
OVR_ThreadCommandQueue_h	Src/Kernel/OVR_ThreadCommandQueue.h	29;"	d
OVR_Threads_h	Src/Kernel/OVR_Threads.h	28;"	d
OVR_Timer_h	Src/Kernel/OVR_Timer.h	29;"	d
OVR_Types_H	Src/Kernel/OVR_Types.h	29;"	d
OVR_UNUSED	Src/Kernel/OVR_Types.h	769;"	d
OVR_UNUSED1	Src/Kernel/OVR_Types.h	774;"	d
OVR_UNUSED2	Src/Kernel/OVR_Types.h	775;"	d
OVR_UNUSED3	Src/Kernel/OVR_Types.h	776;"	d
OVR_UNUSED4	Src/Kernel/OVR_Types.h	777;"	d
OVR_UNUSED5	Src/Kernel/OVR_Types.h	778;"	d
OVR_UNUSED6	Src/Kernel/OVR_Types.h	779;"	d
OVR_UNUSED7	Src/Kernel/OVR_Types.h	780;"	d
OVR_UNUSED8	Src/Kernel/OVR_Types.h	781;"	d
OVR_UNUSED9	Src/Kernel/OVR_Types.h	782;"	d
OVR_UTF8Util_h	Src/Kernel/OVR_UTF8Util.h	29;"	d
OVR_Unix_Socket_h	Src/Net/OVR_Unix_Socket.h	29;"	d
OVR_Util_Interface_h	Src/Util/Util_Interface.h	31;"	d
OVR_Util_LatencyTest2Reader_h	Src/Util/Util_LatencyTest2Reader.h	28;"	d
OVR_Util_LatencyTest2_State_h	Src/Util/Util_LatencyTest2State.h	28;"	d
OVR_Util_Render_Stereo_h	Src/Util/Util_Render_Stereo.h	28;"	d
OVR_VERSION_LIBOVR_PFX	Src/OVR_CAPI.cpp	462;"	d	file:
OVR_VERSION_STRING	Include/OVR_Version.h	31;"	d
OVR_WAIT_INFINITE	Src/Kernel/OVR_Threads.h	36;"	d
OVR_WORD_SIZE	Src/Kernel/OVR_Types.h	441;"	d
OVR_atoq	Src/Kernel/OVR_Std.h	/^inline int64_t OVR_CDECL OVR_atoq(const char* string)$/;"	f	namespace:OVR
OVR_atouq	Src/Kernel/OVR_Std.h	/^inline uint64_t OVR_CDECL OVR_atouq(const char* string)$/;"	f	namespace:OVR
OVR_h	Include/OVR.h	27;"	d
OVR_h	Include/OVR_Kernel.h	27;"	d
OVR_iswalnum	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswalnum (wchar_t charCode) { return UnicodeCharIs(UnicodeAlnumBits,  charCode); }$/;"	f	namespace:OVR
OVR_iswalnum	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswalnum(wchar_t c)$/;"	f	namespace:OVR
OVR_iswalpha	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswalpha (wchar_t charCode) { return UnicodeCharIs(UnicodeAlphaBits,  charCode); }$/;"	f	namespace:OVR
OVR_iswalpha	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswalpha(wchar_t c)$/;"	f	namespace:OVR
OVR_iswdigit	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswdigit (wchar_t charCode) { return UnicodeCharIs(UnicodeDigitBits,  charCode); }$/;"	f	namespace:OVR
OVR_iswdigit	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswdigit(wchar_t c)$/;"	f	namespace:OVR
OVR_iswspace	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswspace (wchar_t charCode) { return UnicodeCharIs(UnicodeSpaceBits,  charCode); }$/;"	f	namespace:OVR
OVR_iswspace	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswspace(wchar_t c)$/;"	f	namespace:OVR
OVR_iswxdigit	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswxdigit(wchar_t c)$/;"	f	namespace:OVR
OVR_iswxdigit	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_iswxdigit(wchar_t charCode) { return UnicodeCharIs(UnicodeXDigitBits, charCode); }$/;"	f	namespace:OVR
OVR_itoa	Src/Kernel/OVR_Std.h	/^inline char* OVR_CDECL OVR_itoa(int val, char *dest, size_t destsize, int radix)$/;"	f	namespace:OVR
OVR_memrchr	Src/Kernel/OVR_Std.h	/^inline const uint8_t* OVR_CDECL OVR_memrchr(const uint8_t* str, size_t size, uint8_t c)$/;"	f	namespace:OVR
OVR_snprintf	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_snprintf(char *dest, size_t destsize, const char * format, ...)$/;"	f	namespace:OVR
OVR_sprintf	Src/Kernel/OVR_Std.h	/^inline size_t OVR_CDECL OVR_sprintf(char *dest, size_t destsize, const char* format, ...)$/;"	f	namespace:OVR
OVR_strcat	Src/Kernel/OVR_Std.h	/^inline char * OVR_CDECL OVR_strcat(char* dest, size_t destsize, const char* src)$/;"	f	namespace:OVR
OVR_strchr	Src/Kernel/OVR_Std.h	/^inline char* OVR_CDECL OVR_strchr(char* str, char c)$/;"	f	namespace:OVR
OVR_strchr	Src/Kernel/OVR_Std.h	/^inline const char* OVR_CDECL OVR_strchr(const char* str, char c)$/;"	f	namespace:OVR
OVR_strcmp	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_strcmp(const char* dest, const char* src)$/;"	f	namespace:OVR
OVR_strcpy	Src/Kernel/OVR_Std.h	/^inline char* OVR_CDECL OVR_strcpy(char* dest, size_t destsize, const char* src)$/;"	f	namespace:OVR
OVR_stricmp	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_stricmp(const char* a, const char* b)$/;"	f	namespace:OVR
OVR_strlen	Src/Kernel/OVR_Std.h	/^inline size_t OVR_CDECL OVR_strlen(const char* str)$/;"	f	namespace:OVR
OVR_strncmp	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_strncmp(const char* ws1, const char* ws2, size_t size)$/;"	f	namespace:OVR
OVR_strncpy	Src/Kernel/OVR_Std.h	/^inline char* OVR_CDECL OVR_strncpy(char* dest, size_t destsize, const char* src, size_t count)$/;"	f	namespace:OVR
OVR_strnicmp	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_strnicmp(const char* a, const char* b, size_t count)$/;"	f	namespace:OVR
OVR_strrchr	Src/Kernel/OVR_Std.h	/^inline char* OVR_CDECL OVR_strrchr(char* str, char c)$/;"	f	namespace:OVR
OVR_strrchr	Src/Kernel/OVR_Std.h	/^inline const char* OVR_strrchr(const char* str, char c)$/;"	f	namespace:OVR
OVR_strtod	Src/Kernel/OVR_Std.cpp	/^double OVR_CDECL OVR_strtod(const char* str, char** tailptr)$/;"	f	namespace:OVR
OVR_strtol	Src/Kernel/OVR_Std.h	/^inline long OVR_CDECL OVR_strtol(const char* string, char** tailptr, int radix)$/;"	f	namespace:OVR
OVR_strtoq	Src/Kernel/OVR_Std.h	/^inline int64_t OVR_CDECL OVR_strtoq(const char *nptr, char **endptr, int base)$/;"	f	namespace:OVR
OVR_strtoul	Src/Kernel/OVR_Std.h	/^inline long OVR_CDECL OVR_strtoul(const char* string, char** tailptr, int radix)$/;"	f	namespace:OVR
OVR_strtouq	Src/Kernel/OVR_Std.h	/^inline uint64_t OVR_CDECL OVR_strtouq(const char *nptr, char **endptr, int base)$/;"	f	namespace:OVR
OVR_tolower	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_tolower(int c)$/;"	f	namespace:OVR
OVR_toupper	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_toupper(int c)$/;"	f	namespace:OVR
OVR_towlower	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_towlower(wchar_t charCode)$/;"	f	namespace:OVR
OVR_towlower	Src/Kernel/OVR_Std.h	/^inline wchar_t OVR_CDECL OVR_towlower(wchar_t c)$/;"	f	namespace:OVR
OVR_towupper	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_towupper(wchar_t charCode)$/;"	f	namespace:OVR
OVR_towupper	Src/Kernel/OVR_Std.h	/^inline wchar_t OVR_towupper(wchar_t c)$/;"	f	namespace:OVR
OVR_vscprintf	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_vscprintf(const char * format, va_list argList)$/;"	f	namespace:OVR
OVR_vsnprintf	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_vsnprintf(char *dest, size_t destsize, const char * format, va_list argList)$/;"	f	namespace:OVR
OVR_vsprintf	Src/Kernel/OVR_Std.h	/^inline size_t OVR_CDECL OVR_vsprintf(char *dest, size_t destsize, const char * format, va_list argList)$/;"	f	namespace:OVR
OVR_wcscat	Src/Kernel/OVR_Std.cpp	/^wchar_t* OVR_CDECL OVR_wcscat(wchar_t* dest, size_t destsize, const wchar_t* src)$/;"	f	namespace:OVR
OVR_wcscmp	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_wcscmp(const wchar_t* a, const wchar_t* b)$/;"	f	namespace:OVR
OVR_wcscoll	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_wcscoll(const wchar_t* a, const wchar_t* b)$/;"	f	namespace:OVR
OVR_wcscpy	Src/Kernel/OVR_Std.cpp	/^wchar_t* OVR_CDECL OVR_wcscpy(wchar_t* dest, size_t destsize, const wchar_t* src)$/;"	f	namespace:OVR
OVR_wcsicmp	Src/Kernel/OVR_Std.cpp	/^int OVR_CDECL OVR_wcsicmp(const wchar_t* a, const wchar_t* b)$/;"	f	namespace:OVR
OVR_wcsicoll	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL OVR_wcsicoll(const wchar_t* a, const wchar_t* b)$/;"	f	namespace:OVR
OVR_wcslen	Src/Kernel/OVR_Std.cpp	/^size_t  OVR_CDECL OVR_wcslen(const wchar_t* str)$/;"	f	namespace:OVR
OVR_wcsncpy	Src/Kernel/OVR_Std.cpp	/^wchar_t* OVR_CDECL OVR_wcsncpy(wchar_t* dest, size_t destsize, const wchar_t* src, size_t count)$/;"	f	namespace:OVR
OVR_wcstod	Src/Kernel/OVR_Std.h	/^inline double OVR_CDECL OVR_wcstod(const wchar_t* string, wchar_t** tailptr)$/;"	f	namespace:OVR
OVR_wcstol	Src/Kernel/OVR_Std.h	/^inline long OVR_CDECL OVR_wcstol(const wchar_t* string, wchar_t** tailptr, int radix)$/;"	f	namespace:OVR
O_AcquireSync	Src/Kernel/OVR_Atomic.h	/^    typedef typename O::AcquireSync O_AcquireSync;$/;"	t	struct:OVR::AtomicOpsRaw_DefImpl
O_FullSync	Src/Kernel/OVR_Atomic.h	/^    typedef typename O::FullSync    O_FullSync;$/;"	t	struct:OVR::AtomicOpsRaw_DefImpl
O_ReleaseSync	Src/Kernel/OVR_Atomic.h	/^    typedef typename O::ReleaseSync O_ReleaseSync;$/;"	t	struct:OVR::AtomicOpsRaw_DefImpl
O_T	Src/Kernel/OVR_Atomic.h	/^    typedef typename O::T O_T;$/;"	t	struct:OVR::AtomicOpsRaw_DefImpl
Observe	Src/Kernel/OVR_Observer.h	/^	bool Observe(ThisType *subject)$/;"	f	class:OVR::Observer
Observer	Src/Kernel/OVR_Observer.h	/^	Observer() :$/;"	f	class:OVR::Observer
Observer	Src/Kernel/OVR_Observer.h	/^	Observer(Handler handler) :$/;"	f	class:OVR::Observer
Observer	Src/Kernel/OVR_Observer.h	/^class Observer : public RefCountBase< Observer<DelegateT> >$/;"	c	namespace:OVR
ObserverHash	Src/Kernel/OVR_Observer.h	/^	ObserverHash() {}$/;"	f	class:OVR::ObserverHash
ObserverHash	Src/Kernel/OVR_Observer.h	/^class ObserverHash : public NewOverrideBase$/;"	c	namespace:OVR
ObserverScope	Src/Kernel/OVR_Observer.h	/^	ObserverScope()$/;"	f	class:OVR::ObserverScope
ObserverScope	Src/Kernel/OVR_Observer.h	/^class ObserverScope : public NewOverrideBase$/;"	c	namespace:OVR
OfficialAuthorizedString	Src/Net/OVR_Session.cpp	/^static const char* OfficialAuthorizedString = "OculusVR_Authorized";$/;"	m	namespace:OVR::Net	file:
OfficialHelloString	Src/Net/OVR_Session.cpp	/^static const char* OfficialHelloString = "OculusVR_Hello";$/;"	m	namespace:OVR::Net	file:
Offset	Src/CAPI/GL/CAPI_GL_Util.h	/^        int         Offset;$/;"	m	struct:OVR::CAPI::GL::ShaderBase::Uniform
Offset	Src/OVR_Stereo.h	/^    Vector2f Offset;$/;"	m	struct:OVR::ScaleAndOffset2D
OldMMTimeMs	Src/Kernel/OVR_Timer.cpp	/^    uint32_t        OldMMTimeMs;$/;"	m	struct:OVR::PerformanceTimer	file:
OldMode	Src/Kernel/OVR_FileFILE.cpp	/^    UINT    OldMode;$/;"	m	class:OVR::SysErrorModeDisabler	file:
OnAddedToSession	Src/Net/OVR_NetworkPlugin.cpp	/^void NetworkPlugin::OnAddedToSession(Session* _pSession)$/;"	f	class:OVR::Net::Plugins::NetworkPlugin
OnAddedToSession	Src/Net/OVR_Session.h	/^    virtual void OnAddedToSession(Session* session)            { OVR_UNUSED(session); }$/;"	f	class:OVR::Net::SessionListener
OnConnected	Src/Net/OVR_RPC1.cpp	/^void RPC1::OnConnected(Connection* conn)$/;"	f	class:OVR::Net::Plugins::RPC1
OnConnected	Src/Service/Service_NetClient.cpp	/^void NetClient::OnConnected(Connection* conn)$/;"	f	class:OVR::Service::NetClient
OnConnectionAttemptFailed	Src/Net/OVR_Session.h	/^    virtual void OnConnectionAttemptFailed(Connection* conn)   { OnDisconnected(conn); }$/;"	f	class:OVR::Net::SessionListener
OnConnectionRequestAccepted	Src/Net/OVR_Session.h	/^    virtual void OnConnectionRequestAccepted(Connection* conn) { OnConnected(conn); }$/;"	f	class:OVR::Net::SessionListener
OnDisconnected	Src/Net/OVR_RPC1.cpp	/^void RPC1::OnDisconnected(Connection* conn)$/;"	f	class:OVR::Net::Plugins::RPC1
OnDisconnected	Src/Service/Service_NetClient.cpp	/^void NetClient::OnDisconnected(Connection* conn)$/;"	f	class:OVR::Service::NetClient
OnExit	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    Thread::OnExit()$/;"	f	class:OVR::Thread
OnHandshakeAttemptFailed	Src/Net/OVR_Session.h	/^    virtual void OnHandshakeAttemptFailed(Connection* conn)    { OnConnectionAttemptFailed(conn); }$/;"	f	class:OVR::Net::SessionListener
OnIncompatibleProtocol	Src/Net/OVR_Session.h	/^    virtual void OnIncompatibleProtocol(Connection* conn)      { OnConnectionAttemptFailed(conn); }$/;"	f	class:OVR::Net::SessionListener
OnNewIncomingConnection	Src/Net/OVR_Session.h	/^    virtual void OnNewIncomingConnection(Connection* conn)     { OnConnected(conn); }$/;"	f	class:OVR::Net::SessionListener
OnPaint	Src/Util/Util_ImageWindow.h	/^	void OnPaint() { }$/;"	f	class:OVR::Util::ImageWindow
OnPopEmpty_Locked	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual void OnPopEmpty_Locked()     { }$/;"	f	class:OVR::ThreadCommandQueue
OnPushNonEmpty_Locked	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual void OnPushNonEmpty_Locked() { }$/;"	f	class:OVR::ThreadCommandQueue
OnReceive	Src/Net/OVR_RPC1.cpp	/^void RPC1::OnReceive(ReceivePayload *pPayload, ListenerReceiveResult *lrrOut)$/;"	f	class:OVR::Net::Plugins::RPC1
OnReceive	Src/Net/OVR_Session.h	/^    virtual void OnReceive(ReceivePayload* pPayload, ListenerReceiveResult* lrrOut) { OVR_UNUSED2(pPayload, lrrOut);  }$/;"	f	class:OVR::Net::SessionListener
OnReceive	Src/Service/Service_NetClient.cpp	/^void NetClient::OnReceive(ReceivePayload* pPayload, ListenerReceiveResult* lrrOut)$/;"	f	class:OVR::Service::NetClient
OnRecv	Src/Net/OVR_PacketizedTCPSocket.cpp	/^void PacketizedTCPSocket::OnRecv(SocketEvent_TCP* eventHandler, uint8_t* pData, int bytesRead)$/;"	f	class:OVR::Net::PacketizedTCPSocket
OnRecv	Src/Net/OVR_Unix_Socket.cpp	/^void TCPSocket::OnRecv(SocketEvent_TCP* eventHandler, UByte* pData, int bytesRead)$/;"	f	class:OVR::Net::TCPSocket
OnRecv	Src/Net/OVR_Unix_Socket.cpp	/^void UDPSocket::OnRecv(SocketEvent_UDP* eventHandler, UByte* pData, int bytesRead, SockAddr* address)$/;"	f	class:OVR::Net::UDPSocket
OnRemovedFromSession	Src/Net/OVR_NetworkPlugin.cpp	/^void NetworkPlugin::OnRemovedFromSession(Session* _pSession)$/;"	f	class:OVR::Net::Plugins::NetworkPlugin
OnRemovedFromSession	Src/Net/OVR_Session.h	/^    virtual void OnRemovedFromSession(Session* session)        { OVR_UNUSED(session); }$/;"	f	class:OVR::Net::SessionListener
OnResults	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LatencyStatisticsCSV::OnResults(LatencyStatisticsResults *results)$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
OnSystemDestroy	Src/Kernel/OVR_Log.cpp	/^    virtual void OnSystemDestroy()$/;"	f	class:LogSubject
OnSystemDestroy	Src/Kernel/OVR_SharedMemory.cpp	/^    void FakeMemoryManager::OnSystemDestroy()$/;"	f	class:OVR::FakeMemoryManager
OnSystemDestroy	Src/Kernel/OVR_SharedMemory.cpp	/^void SharedMemoryFactory::OnSystemDestroy()$/;"	f	class:OVR::SharedMemoryFactory
OnSystemDestroy	Src/OVR_Profile.cpp	/^void ProfileManager::OnSystemDestroy()$/;"	f	class:OVR::ProfileManager
OnSystemDestroy	Src/Service/Service_NetClient.cpp	/^void NetClient::OnSystemDestroy()$/;"	f	class:OVR::Service::NetClient
OnThreadDestroy	Src/Kernel/OVR_Log.cpp	/^    virtual void OnThreadDestroy()$/;"	f	class:LogSubject
OnThreadDestroy	Src/Kernel/OVR_System.h	/^    virtual void OnThreadDestroy() {}$/;"	f	class:OVR::SystemSingletonInternal
OnThreadDestroy	Src/Service/Service_NetClient.cpp	/^void NetClient::OnThreadDestroy()$/;"	f	class:OVR::Service::NetClient
Open	Src/Kernel/OVR_SharedMemory.cpp	/^        SharedMemoryInternal* Open(const char *name, int bytes, bool openOnly)$/;"	f	class:OVR::FakeMemoryManager
Open	Src/Kernel/OVR_SharedMemory.cpp	/^Ptr<SharedMemory> SharedMemoryFactory::Open(const SharedMemory::OpenParameters& params)$/;"	f	class:OVR::SharedMemoryFactory
Open	Src/Kernel/OVR_SharedMemory.h	/^	OVR_FORCE_INLINE bool Open(const char* name)$/;"	f	class:OVR::SharedObjectReader
Open	Src/Kernel/OVR_SharedMemory.h	/^	OVR_FORCE_INLINE bool Open(const char* name)$/;"	f	class:OVR::SharedObjectWriter
Open	Src/Kernel/OVR_SharedMemory.h	/^	bool Open(const char* name, bool readOnly)$/;"	f	class:OVR::ISharedObject
Open	Src/Kernel/OVR_SysFile.cpp	/^bool SysFile::Open(const String& path, int flags, int mode)$/;"	f	class:OVR::SysFile
OpenFlags	Src/Kernel/OVR_File.h	/^    enum OpenFlags$/;"	g	class:OVR::FileConstants
OpenFlags	Src/Kernel/OVR_FileFILE.cpp	/^    int         OpenFlags;$/;"	m	class:OVR::FILEFile	file:
OpenMode	Src/Kernel/OVR_SharedMemory.h	/^	enum OpenMode$/;"	g	class:OVR::SharedMemory
OpenMode_CreateOnly	Src/Kernel/OVR_SharedMemory.h	/^		OpenMode_CreateOnly,		\/\/ Must not already exist$/;"	e	enum:OVR::SharedMemory::OpenMode
OpenMode_CreateOrOpen	Src/Kernel/OVR_SharedMemory.h	/^		OpenMode_CreateOrOpen		\/\/ May exist or not$/;"	e	enum:OVR::SharedMemory::OpenMode
OpenMode_OpenOnly	Src/Kernel/OVR_SharedMemory.h	/^		OpenMode_OpenOnly,			\/\/ Must already exist$/;"	e	enum:OVR::SharedMemory::OpenMode
OpenParameters	Src/Kernel/OVR_SharedMemory.h	/^		OpenParameters() :$/;"	f	struct:OVR::SharedMemory::OpenParameters
OpenParameters	Src/Kernel/OVR_SharedMemory.h	/^	struct OpenParameters$/;"	s	class:OVR::SharedMemory
Open_Buffered	Src/Kernel/OVR_File.h	/^        Open_Buffered    = 32$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_Create	Src/Kernel/OVR_File.h	/^        Open_Create     = 8,$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_CreateOnly	Src/Kernel/OVR_File.h	/^        Open_CreateOnly = 24,$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_Read	Src/Kernel/OVR_File.h	/^        Open_Read       = 1,$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_ReadWrite	Src/Kernel/OVR_File.h	/^        Open_ReadWrite  = 3,$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_Truncate	Src/Kernel/OVR_File.h	/^        Open_Truncate   = 4,$/;"	e	enum:OVR::FileConstants::OpenFlags
Open_Write	Src/Kernel/OVR_File.h	/^        Open_Write      = 2,$/;"	e	enum:OVR::FileConstants::OpenFlags
Opened	Src/Kernel/OVR_FileFILE.cpp	/^    bool        Opened;$/;"	m	class:OVR::FILEFile	file:
OperatorLess	Src/Kernel/OVR_Alg.h	/^template<class T> struct OperatorLess$/;"	s	namespace:OVR::Alg
Ops	Src/Kernel/OVR_Atomic.h	/^    typedef AtomicOps<T> Ops;$/;"	t	class:OVR::AtomicValueBase
Ops	Src/Kernel/OVR_Atomic.h	/^    typedef AtomicOpsRaw<sizeof(C)>       Ops;$/;"	t	class:OVR::AtomicOps
Ops	Src/Kernel/OVR_Atomic.h	/^    typedef typename AtomicValueBase<T*>::Ops Ops;$/;"	t	class:OVR::AtomicPtr
Ops	Src/Kernel/OVR_Atomic.h	/^    typedef typename AtomicValueBase<T>::Ops Ops;$/;"	t	class:OVR::AtomicInt
Orientation	Src/OVR_CAPI.h	/^    ovrQuatf     Orientation;$/;"	m	struct:ovrPosef_
Ortho2D	Src/Kernel/OVR_Math.h	/^    static Matrix4 Ortho2D(T w, T h)$/;"	f	class:OVR::Matrix4
OrthoProjection	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Matrix4f                           OrthoProjection[2];  \/\/ Projection for 2D.$/;"	m	class:OVR::CAPI::GL::HSWDisplay
OrthoProjection	Src/Util/Util_Render_Stereo.h	/^    Matrix4f                OrthoProjection;$/;"	m	struct:OVR::Util::Render::StereoEyeParamsWithOrtho
OtherFloatType	Src/Kernel/OVR_Math.h	/^     typedef double OtherFloatType;$/;"	t	class:OVR::Math
OtherFloatType	Src/Kernel/OVR_Math.h	/^    typedef float OtherFloatType;$/;"	t	class:OVR::Math
OurHMDInfo	Src/CAPI/CAPI_HMDRenderState.h	/^    HMDInfo                 OurHMDInfo;$/;"	m	struct:OVR::CAPI::HMDRenderState
OurHMDInfo	Src/CAPI/CAPI_HMDState.h	/^    HMDInfo                 OurHMDInfo;$/;"	m	class:OVR::CAPI::HMDState
OverdriveBackBufferTexture	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<Texture>    OverdriveBackBufferTexture;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
OverdriveFbo	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    GLuint              OverdriveFbo;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
OverrideLens	Src/Util/Util_Render_Stereo.h	/^    bool               OverrideLens;$/;"	m	class:OVR::Util::Render::StereoConfig
OverrideTanHalfFov	Src/Util/Util_Render_Stereo.h	/^    bool               OverrideTanHalfFov;$/;"	m	class:OVR::Util::Render::StereoConfig
OverrideZeroIpd	Src/Util/Util_Render_Stereo.h	/^    bool               OverrideZeroIpd;$/;"	m	class:OVR::Util::Render::StereoConfig
PFNGLACTIVETEXTUREPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t
PFNGLADDSWAPHINTRECTWINPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLADDSWAPHINTRECTWINPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLATTACHSHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLBEGINCONDITIONALRENDERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);$/;"	t
PFNGLBEGINQUERYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);$/;"	t
PFNGLBEGINTRANSFORMFEEDBACKPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);$/;"	t
PFNGLBINDATTRIBLOCATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar* name);$/;"	t
PFNGLBINDBUFFERBASEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);$/;"	t
PFNGLBINDBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t
PFNGLBINDBUFFERRANGEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLBINDFRAGDATALOCATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint colorNumber, const GLchar* name);$/;"	t
PFNGLBINDFRAMEBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);$/;"	t
PFNGLBINDRENDERBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);$/;"	t
PFNGLBINDTEXTUREPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	namespace:OVR::CAPI::GL
PFNGLBINDVERTEXARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void      (GLAPIENTRY * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);$/;"	t
PFNGLBINDVERTEXARRAYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLBLENDCOLORPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);$/;"	t
PFNGLBLENDEQUATIONIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);$/;"	t
PFNGLBLENDEQUATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t
PFNGLBLENDEQUATIONSEPARATEIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDEQUATIONSEPARATEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t
PFNGLBLENDFUNCIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t
PFNGLBLENDFUNCPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);$/;"	t	namespace:OVR::CAPI::GL
PFNGLBLENDFUNCSEPARATEIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);$/;"	t
PFNGLBLENDFUNCSEPARATEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);$/;"	t
PFNGLBLITFRAMEBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);$/;"	t
PFNGLBUFFERDATAPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void* data, GLenum usage);$/;"	t
PFNGLBUFFERPARAMETERIAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);$/;"	t
PFNGLBUFFERSUBDATAPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void* data);$/;"	t
PFNGLCHECKFRAMEBUFFERSTATUSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLenum    (GLAPIENTRY * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);$/;"	t
PFNGLCLAMPCOLORPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);$/;"	t
PFNGLCLEARBUFFERFIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawBuffer, GLfloat depth, GLint stencil);$/;"	t
PFNGLCLEARBUFFERFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawBuffer, const GLfloat* value);$/;"	t
PFNGLCLEARBUFFERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawBuffer, const GLint* value);$/;"	t
PFNGLCLEARBUFFERUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawBuffer, const GLuint* value);$/;"	t
PFNGLCLEARCOLORPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLCLEARCOLORPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a);$/;"	t	namespace:OVR::CAPI::GL
PFNGLCLEARDEPTHFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLEARDEPTHFPROC) (GLclampf d);$/;"	t
PFNGLCLEARDEPTHPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLCLEARDEPTHPROC) (GLclampd depth);$/;"	t	namespace:OVR::CAPI::GL
PFNGLCLEARPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLCLEARPROC) (GLbitfield);$/;"	t	namespace:OVR::CAPI::GL
PFNGLCLIENTACTIVETEXTUREPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);$/;"	t
PFNGLCOLORMASKINDEXEDEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);$/;"	t
PFNGLCOLORMASKIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOLORMASKIPROC) (GLuint buf, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t
PFNGLCOLORMASKPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);$/;"	t	namespace:OVR::CAPI::GL
PFNGLCOMPILESHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE1DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXIMAGE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);$/;"	t
PFNGLCOPYTEXSUBIMAGE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t
PFNGLCREATEPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint (GLAPIENTRY * PFNGLCREATEPROGRAMPROC) (void);$/;"	t
PFNGLCREATESHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint (GLAPIENTRY * PFNGLCREATESHADERPROC) (GLenum type);$/;"	t
PFNGLDEBUGMESSAGECALLBACKAMDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);$/;"	t
PFNGLDEBUGMESSAGECALLBACKARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECALLBACKPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);$/;"	t
PFNGLDEBUGMESSAGECONTROLARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGECONTROLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEENABLEAMDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);$/;"	t
PFNGLDEBUGMESSAGEINSERTAMDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar* buf);$/;"	t
PFNGLDEBUGMESSAGEINSERTARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);$/;"	t
PFNGLDEBUGMESSAGEINSERTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);$/;"	t
PFNGLDELETEBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint* buffers);$/;"	t
PFNGLDELETEFENCESAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint* fences);$/;"	t
PFNGLDELETEFRAMEBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint* framebuffers);$/;"	t
PFNGLDELETEPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLDELETEQUERIESPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint* ids);$/;"	t
PFNGLDELETERENDERBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint* renderbuffers);$/;"	t
PFNGLDELETESHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t
PFNGLDELETETEXTURESPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDELETETEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDELETEVERTEXARRAYSAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void      (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays);$/;"	t
PFNGLDELETEVERTEXARRAYSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint* arrays);$/;"	t
PFNGLDEPTHMASKPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDEPTHMASKPROC) (GLboolean flag);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDEPTHRANGEFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);$/;"	t
PFNGLDEPTHRANGEFPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDEPTHRANGEFPROC) (GLclampf nearVal,  GLclampf farVal);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDEPTHRANGEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDEPTHRANGEPROC) (GLclampd nearVal,  GLclampd farVal);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDETACHSHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t
PFNGLDISABLEINDEXEDEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);$/;"	t
PFNGLDISABLEIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDISABLEIPROC) (GLenum cap, GLuint index);$/;"	t
PFNGLDISABLEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDISABLEPROC) (GLenum);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDISABLEVERTEXATTRIBAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);$/;"	t
PFNGLDISABLEVERTEXATTRIBARRAYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLDRAWARRAYSINSTANCEDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);$/;"	t
PFNGLDRAWARRAYSPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDRAWBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum* bufs);$/;"	t
PFNGLDRAWELEMENTARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t
PFNGLDRAWELEMENTSINSTANCEDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount);$/;"	t
PFNGLDRAWELEMENTSPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);$/;"	t	namespace:OVR::CAPI::GL
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);$/;"	t
PFNGLDRAWRANGEELEMENTSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);$/;"	t
PFNGLELEMENTPOINTERAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);$/;"	t
PFNGLENABLEINDEXEDEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);$/;"	t
PFNGLENABLEIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLENABLEIPROC) (GLenum cap, GLuint index);$/;"	t
PFNGLENABLEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLENABLEPROC) (GLenum);$/;"	t	namespace:OVR::CAPI::GL
PFNGLENABLEVERTEXATTRIBAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);$/;"	t
PFNGLENABLEVERTEXATTRIBARRAYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t
PFNGLENDCONDITIONALRENDERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLENDCONDITIONALRENDERPROC) (void);$/;"	t
PFNGLENDQUERYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLENDQUERYPROC) (GLenum target);$/;"	t
PFNGLENDTRANSFORMFEEDBACKPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLENDTRANSFORMFEEDBACKPROC) (void);$/;"	t
PFNGLFINISHFENCEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);$/;"	t
PFNGLFINISHOBJECTAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);$/;"	t
PFNGLFINISHPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLFINISHPROC) ();$/;"	t	namespace:OVR::CAPI::GL
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);$/;"	t
PFNGLFLUSHPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLFLUSHPROC) ();$/;"	t	namespace:OVR::CAPI::GL
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);$/;"	t
PFNGLFOGCOORDDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFOGCOORDDPROC) (GLdouble coord);$/;"	t
PFNGLFOGCOORDDVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);$/;"	t
PFNGLFOGCOORDFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFOGCOORDFPROC) (GLfloat coord);$/;"	t
PFNGLFOGCOORDFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);$/;"	t
PFNGLFOGCOORDPOINTERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLFRAMEBUFFERRENDERBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);$/;"	t
PFNGLFRAMEBUFFERTEXTURE1DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);$/;"	t
PFNGLFRAMEBUFFERTEXTURE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTURELAYERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target,GLenum attachment, GLuint texture,GLint level,GLint layer);$/;"	t
PFNGLFRAMEBUFFERTEXTUREPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);$/;"	t
PFNGLFRONTFACEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLFRONTFACEPROC) (GLenum mode);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGENBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint* buffers);$/;"	t
PFNGLGENERATEMIPMAPPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENERATEMIPMAPPROC) (GLenum target);$/;"	t
PFNGLGENFENCESAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint* fences);$/;"	t
PFNGLGENFRAMEBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint* framebuffers);$/;"	t
PFNGLGENQUERIESPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENQUERIESPROC) (GLsizei n, GLuint* ids);$/;"	t
PFNGLGENRENDERBUFFERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint* renderbuffers);$/;"	t
PFNGLGENTEXTURESPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGENVERTEXARRAYSAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void      (GLAPIENTRY * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint* arrays); \/\/ It's not clear whether arrays needs to be const or not.$/;"	t
PFNGLGENVERTEXARRAYSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint* arrays);$/;"	t
PFNGLGETACTIVEATTRIBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);$/;"	t
PFNGLGETACTIVEUNIFORMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei maxLength, GLsizei* length, GLint* size, GLenum* type, GLchar* name);$/;"	t
PFNGLGETATTACHEDSHADERSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);$/;"	t
PFNGLGETATTRIBLOCATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLint (GLAPIENTRY * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar* name);$/;"	t
PFNGLGETBOOLEANINDEXEDVEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum value, GLuint index, GLboolean* data);$/;"	t
PFNGLGETBOOLEANI_VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETBOOLEANI_VPROC) (GLenum pname, GLuint index, GLboolean* data);$/;"	t
PFNGLGETBUFFERPARAMETERI64VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum value, GLint64 * data);$/;"	t
PFNGLGETBUFFERPARAMETERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETBUFFERPOINTERVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void** params);$/;"	t
PFNGLGETBUFFERSUBDATAPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void* data);$/;"	t
PFNGLGETCOMPRESSEDTEXIMAGEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, void *img);$/;"	t
PFNGLGETDEBUGMESSAGELOGAMDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum* categories, GLuint* severities, GLuint* ids, GLsizei* lengths, GLchar* message);$/;"	t
PFNGLGETDEBUGMESSAGELOGARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);$/;"	t
PFNGLGETDEBUGMESSAGELOGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLuint (GLAPIENTRY * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);$/;"	t
PFNGLGETDOUBLEVPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLGETDOUBLEVPROC) (GLenum, GLdouble*);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETERRORPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef GLenum (__stdcall *PFNGLGETERRORPROC) ();$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETFLOATVPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLGETFLOATVPROC) (GLenum, GLfloat*);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETFRAGDATALOCATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLint (GLAPIENTRY * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar* name);$/;"	t
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint* params);$/;"	t
PFNGLGETINTEGER64I_VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETINTEGER64I_VPROC) (GLenum pname, GLuint index, GLint64 * data);$/;"	t
PFNGLGETINTEGERINDEXEDVEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum value, GLuint index, GLint* data);$/;"	t
PFNGLGETINTEGERI_VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint* data);$/;"	t
PFNGLGETINTEGERVPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void(__stdcall *PFNGLGETINTEGERVPROC) (GLenum, GLint*);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETMULTISAMPLEFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat* val);$/;"	t
PFNGLGETOBJECTLABELPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar *label);$/;"	t
PFNGLGETOBJECTPARAMETERIVAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint* params);$/;"	t
PFNGLGETOBJECTPTRLABELPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei* length, GLchar *label);$/;"	t
PFNGLGETPROGRAMINFOLOGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);$/;"	t
PFNGLGETPROGRAMIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint* param);$/;"	t
PFNGLGETQUERYIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETQUERYOBJECTI64VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64* params);$/;"	t
PFNGLGETQUERYOBJECTIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint* params);$/;"	t
PFNGLGETQUERYOBJECTUI64VPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64* params);$/;"	t
PFNGLGETQUERYOBJECTUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint* params);$/;"	t
PFNGLGETRENDERBUFFERPARAMETERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETSHADERINFOLOGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);$/;"	t
PFNGLGETSHADERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint* param);$/;"	t
PFNGLGETSHADERPRECISIONFORMATPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint* range, GLint *precision);$/;"	t
PFNGLGETSHADERSOURCEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETSHADERSOURCEPROC) (GLuint obj, GLsizei maxLength, GLsizei* length, GLchar* source);$/;"	t
PFNGLGETSTRINGIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef const GLubyte* (GLAPIENTRY * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t
PFNGLGETSTRINGIPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef const GLubyte * (__stdcall *PFNGLGETSTRINGIPROC) (GLenum, GLuint);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETSTRINGPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef const GLubyte * (__stdcall *PFNGLGETSTRINGPROC) (GLenum);$/;"	t	namespace:OVR::CAPI::GL
PFNGLGETTEXPARAMETERIIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint* params);$/;"	t
PFNGLGETTEXPARAMETERIUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint* params);$/;"	t
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);$/;"	t
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);$/;"	t
PFNGLGETUNIFORMFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat* params);$/;"	t
PFNGLGETUNIFORMIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint* params);$/;"	t
PFNGLGETUNIFORMLOCATIONPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLint     (GLAPIENTRY * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar* name);$/;"	t
PFNGLGETUNIFORMUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint* params);$/;"	t
PFNGLGETVERTEXATTRIBDVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble* params);$/;"	t
PFNGLGETVERTEXATTRIBFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat* params);$/;"	t
PFNGLGETVERTEXATTRIBIIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint* params);$/;"	t
PFNGLGETVERTEXATTRIBIUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint* params);$/;"	t
PFNGLGETVERTEXATTRIBIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint* params);$/;"	t
PFNGLGETVERTEXATTRIBPOINTERVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void** pointer);$/;"	t
PFNGLISBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISBUFFERPROC) (GLuint buffer);$/;"	t
PFNGLISENABLEDINDEXEDEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);$/;"	t
PFNGLISENABLEDIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISENABLEDIPROC) (GLenum cap, GLuint index);$/;"	t
PFNGLISFENCEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLboolean (GLAPIENTRY * PFNGLISFENCEAPPLEPROC) (GLuint fence);$/;"	t
PFNGLISFRAMEBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);$/;"	t
PFNGLISPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISPROGRAMPROC) (GLuint program);$/;"	t
PFNGLISQUERYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISQUERYPROC) (GLuint id);$/;"	t
PFNGLISRENDERBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);$/;"	t
PFNGLISSHADERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISSHADERPROC) (GLuint shader);$/;"	t
PFNGLISVERTEXARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);$/;"	t
PFNGLISVERTEXARRAYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXARRAYPROC) (GLuint array);$/;"	t
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLboolean (GLAPIENTRY * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);$/;"	t
PFNGLLINKPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t
PFNGLLOADTRANSPOSEMATRIXDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);$/;"	t
PFNGLLOADTRANSPOSEMATRIXFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);$/;"	t
PFNGLMAPBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void*     (GLAPIENTRY * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);$/;"	t
PFNGLMAPVERTEXATTRIB1DAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);$/;"	t
PFNGLMAPVERTEXATTRIB1FAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);$/;"	t
PFNGLMAPVERTEXATTRIB2DAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);$/;"	t
PFNGLMAPVERTEXATTRIB2FAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);$/;"	t
PFNGLMINSAMPLESHADINGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMINSAMPLESHADINGPROC) (GLclampf value);$/;"	t
PFNGLMULTIDRAWARRAYSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint* first, const GLsizei *count, GLsizei primcount);$/;"	t
PFNGLMULTIDRAWELEMENTSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const* indices, GLsizei drawcount);$/;"	t
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint* first, const GLsizei *count, GLsizei primcount);$/;"	t
PFNGLMULTITEXCOORD1DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);$/;"	t
PFNGLMULTITEXCOORD1DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD1FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);$/;"	t
PFNGLMULTITEXCOORD1FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD1IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);$/;"	t
PFNGLMULTITEXCOORD1IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD1SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);$/;"	t
PFNGLMULTITEXCOORD1SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);$/;"	t
PFNGLMULTITEXCOORD2DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD2FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);$/;"	t
PFNGLMULTITEXCOORD2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD2IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);$/;"	t
PFNGLMULTITEXCOORD2IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD2SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);$/;"	t
PFNGLMULTITEXCOORD2SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);$/;"	t
PFNGLMULTITEXCOORD3DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD3FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);$/;"	t
PFNGLMULTITEXCOORD3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD3IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);$/;"	t
PFNGLMULTITEXCOORD3IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD3SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);$/;"	t
PFNGLMULTITEXCOORD3SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);$/;"	t
PFNGLMULTITEXCOORD4DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);$/;"	t
PFNGLMULTITEXCOORD4DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);$/;"	t
PFNGLMULTITEXCOORD4FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);$/;"	t
PFNGLMULTITEXCOORD4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);$/;"	t
PFNGLMULTITEXCOORD4IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);$/;"	t
PFNGLMULTITEXCOORD4IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);$/;"	t
PFNGLMULTITEXCOORD4SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);$/;"	t
PFNGLMULTITEXCOORD4SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);$/;"	t
PFNGLMULTTRANSPOSEMATRIXDPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble m[16]);$/;"	t
PFNGLMULTTRANSPOSEMATRIXFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat m[16]);$/;"	t
PFNGLOBJECTLABELPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar* label);$/;"	t
PFNGLOBJECTPTRLABELPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar* label);$/;"	t
PFNGLOBJECTPURGEABLEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLenum (GLAPIENTRY * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);$/;"	t
PFNGLOBJECTUNPURGEABLEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLenum (GLAPIENTRY * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);$/;"	t
PFNGLPOINTPARAMETERFPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);$/;"	t
PFNGLPOINTPARAMETERFVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);$/;"	t
PFNGLPOINTPARAMETERIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);$/;"	t
PFNGLPOINTPARAMETERIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);$/;"	t
PFNGLPOLYGONMODEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	namespace:OVR::CAPI::GL
PFNGLPOPDEBUGGROUPPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t
PFNGLPRIMITIVERESTARTINDEXPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint buffer);$/;"	t
PFNGLPUSHDEBUGGROUPPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void   (GLAPIENTRY * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar * message);$/;"	t
PFNGLQUERYCOUNTERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);$/;"	t
PFNGLRELEASESHADERCOMPILERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLRELEASESHADERCOMPILERPROC) (void);$/;"	t
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERBUFFERSTORAGEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);$/;"	t
PFNGLRENDERMODEPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef GLint (__stdcall *PFNGLRENDERMODEPROC) (GLenum mode);$/;"	t	namespace:OVR::CAPI::GL
PFNGLSAMPLECOVERAGEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);$/;"	t
PFNGLSAMPLEMASKIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);$/;"	t
PFNGLSECONDARYCOLOR3BPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);$/;"	t
PFNGLSECONDARYCOLOR3BVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);$/;"	t
PFNGLSECONDARYCOLOR3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);$/;"	t
PFNGLSECONDARYCOLOR3DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);$/;"	t
PFNGLSECONDARYCOLOR3FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);$/;"	t
PFNGLSECONDARYCOLOR3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);$/;"	t
PFNGLSECONDARYCOLOR3IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);$/;"	t
PFNGLSECONDARYCOLOR3IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);$/;"	t
PFNGLSECONDARYCOLOR3SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);$/;"	t
PFNGLSECONDARYCOLOR3SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);$/;"	t
PFNGLSECONDARYCOLOR3UBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);$/;"	t
PFNGLSECONDARYCOLOR3UBVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);$/;"	t
PFNGLSECONDARYCOLOR3UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);$/;"	t
PFNGLSECONDARYCOLOR3UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);$/;"	t
PFNGLSECONDARYCOLOR3USPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);$/;"	t
PFNGLSECONDARYCOLOR3USVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);$/;"	t
PFNGLSECONDARYCOLORPOINTERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);$/;"	t
PFNGLSETFENCEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLSETFENCEAPPLEPROC) (GLuint fence);$/;"	t
PFNGLSHADERBINARYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint* shaders, GLenum binaryformat, const void*binary, GLsizei length);$/;"	t
PFNGLSHADERSOURCEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const* string, const GLint* length);$/;"	t
PFNGLSTENCILFUNCSEPARATEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);$/;"	t
PFNGLSTENCILMASKSEPARATEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);$/;"	t
PFNGLSTENCILOPSEPARATEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);$/;"	t
PFNGLTESTFENCEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLboolean (GLAPIENTRY * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);$/;"	t
PFNGLTESTOBJECTAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLboolean (GLAPIENTRY * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);$/;"	t
PFNGLTEXBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalFormat, GLuint buffer);$/;"	t
PFNGLTEXIMAGE2DMULTISAMPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE2DPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLint format, GLenum type, const GLvoid *pixels);$/;"	t	namespace:OVR::CAPI::GL
PFNGLTEXIMAGE3DMULTISAMPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);$/;"	t
PFNGLTEXIMAGE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXPARAMETERIIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint* params);$/;"	t
PFNGLTEXPARAMETERIPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	namespace:OVR::CAPI::GL
PFNGLTEXPARAMETERIUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint* params);$/;"	t
PFNGLTEXSUBIMAGE3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);$/;"	t
PFNGLTEXTURERANGEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer);$/;"	t
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);$/;"	t
PFNGLUNIFORM1FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);$/;"	t
PFNGLUNIFORM1FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM1IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void      (GLAPIENTRY * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t
PFNGLUNIFORM1IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM1UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);$/;"	t
PFNGLUNIFORM1UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM2FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);$/;"	t
PFNGLUNIFORM2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM2IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);$/;"	t
PFNGLUNIFORM2IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM2UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);$/;"	t
PFNGLUNIFORM2UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM3FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t
PFNGLUNIFORM3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM3IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLUNIFORM3IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM3UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLUNIFORM3UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORM4FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);$/;"	t
PFNGLUNIFORM4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat* value);$/;"	t
PFNGLUNIFORM4IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLUNIFORM4IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint* value);$/;"	t
PFNGLUNIFORM4UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLUNIFORM4UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint* value);$/;"	t
PFNGLUNIFORMMATRIX2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX2X3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX2X4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX3X2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX3X4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);$/;"	t
PFNGLUNIFORMMATRIX4X2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNIFORMMATRIX4X3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);$/;"	t
PFNGLUNMAPBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef GLboolean (GLAPIENTRY * PFNGLUNMAPBUFFERPROC) (GLenum target);$/;"	t
PFNGLUSEPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLVALIDATEPROGRAMPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVALIDATEPROGRAMPROC) (GLuint program);$/;"	t
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);$/;"	t
PFNGLVERTEXARRAYRANGEAPPLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (GLAPIENTRY * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);$/;"	t
PFNGLVERTEXATTRIB1DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);$/;"	t
PFNGLVERTEXATTRIB1DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB1FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);$/;"	t
PFNGLVERTEXATTRIB1FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB1SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);$/;"	t
PFNGLVERTEXATTRIB1SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t
PFNGLVERTEXATTRIB2DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB2FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);$/;"	t
PFNGLVERTEXATTRIB2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB2SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);$/;"	t
PFNGLVERTEXATTRIB2SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLVERTEXATTRIB3DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB3FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLVERTEXATTRIB3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB3SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLVERTEXATTRIB3SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB4BVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte* v);$/;"	t
PFNGLVERTEXATTRIB4DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);$/;"	t
PFNGLVERTEXATTRIB4DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble* v);$/;"	t
PFNGLVERTEXATTRIB4FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);$/;"	t
PFNGLVERTEXATTRIB4FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat* v);$/;"	t
PFNGLVERTEXATTRIB4IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIB4NBVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte* v);$/;"	t
PFNGLVERTEXATTRIB4NIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint* v);$/;"	t
PFNGLVERTEXATTRIB4NSVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB4NUBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);$/;"	t
PFNGLVERTEXATTRIB4NUBVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte* v);$/;"	t
PFNGLVERTEXATTRIB4NUIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIB4NUSVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort* v);$/;"	t
PFNGLVERTEXATTRIB4SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);$/;"	t
PFNGLVERTEXATTRIB4SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort* v);$/;"	t
PFNGLVERTEXATTRIB4UBVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte* v);$/;"	t
PFNGLVERTEXATTRIB4UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint* v);$/;"	t
PFNGLVERTEXATTRIB4USVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort* v);$/;"	t
PFNGLVERTEXATTRIBDIVISORPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);$/;"	t
PFNGLVERTEXATTRIBI1IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint v0);$/;"	t
PFNGLVERTEXATTRIBI1IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint* v0);$/;"	t
PFNGLVERTEXATTRIBI1UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint v0);$/;"	t
PFNGLVERTEXATTRIBI1UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint* v0);$/;"	t
PFNGLVERTEXATTRIBI2IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint v0, GLint v1);$/;"	t
PFNGLVERTEXATTRIBI2IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint* v0);$/;"	t
PFNGLVERTEXATTRIBI2UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint v0, GLuint v1);$/;"	t
PFNGLVERTEXATTRIBI2UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint* v0);$/;"	t
PFNGLVERTEXATTRIBI3IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint v0, GLint v1, GLint v2);$/;"	t
PFNGLVERTEXATTRIBI3IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint* v0);$/;"	t
PFNGLVERTEXATTRIBI3UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2);$/;"	t
PFNGLVERTEXATTRIBI3UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint* v0);$/;"	t
PFNGLVERTEXATTRIBI4BVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte* v0);$/;"	t
PFNGLVERTEXATTRIBI4IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint v0, GLint v1, GLint v2, GLint v3);$/;"	t
PFNGLVERTEXATTRIBI4IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint* v0);$/;"	t
PFNGLVERTEXATTRIBI4SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort* v0);$/;"	t
PFNGLVERTEXATTRIBI4UBVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte* v0);$/;"	t
PFNGLVERTEXATTRIBI4UIPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint v0, GLuint v1, GLuint v2, GLuint v3);$/;"	t
PFNGLVERTEXATTRIBI4UIVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint* v0);$/;"	t
PFNGLVERTEXATTRIBI4USVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort* v0);$/;"	t
PFNGLVERTEXATTRIBIPOINTERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void*pointer);$/;"	t
PFNGLVERTEXATTRIBPOINTERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);$/;"	t
PFNGLVIEWPORTPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef void (__stdcall *PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	namespace:OVR::CAPI::GL
PFNGLWINDOWPOS2DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);$/;"	t
PFNGLWINDOWPOS2DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2DVPROC) (const GLdouble *p);$/;"	t
PFNGLWINDOWPOS2FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);$/;"	t
PFNGLWINDOWPOS2FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2FVPROC) (const GLfloat *p);$/;"	t
PFNGLWINDOWPOS2IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);$/;"	t
PFNGLWINDOWPOS2IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2IVPROC) (const GLint *p);$/;"	t
PFNGLWINDOWPOS2SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);$/;"	t
PFNGLWINDOWPOS2SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS2SVPROC) (const GLshort *p);$/;"	t
PFNGLWINDOWPOS3DPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);$/;"	t
PFNGLWINDOWPOS3DVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3DVPROC) (const GLdouble *p);$/;"	t
PFNGLWINDOWPOS3FPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);$/;"	t
PFNGLWINDOWPOS3FVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3FVPROC) (const GLfloat *p);$/;"	t
PFNGLWINDOWPOS3IPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);$/;"	t
PFNGLWINDOWPOS3IVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3IVPROC) (const GLint *p);$/;"	t
PFNGLWINDOWPOS3SPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);$/;"	t
PFNGLWINDOWPOS3SVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^    typedef void (GLAPIENTRY * PFNGLWINDOWPOS3SVPROC) (const GLshort *p);$/;"	t
PFNGLXCHOOSEFBCONFIGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXFBConfig* (* PFNGLXCHOOSEFBCONFIGPROC) (::Display *dpy, int screen, const int *attrib_list, int *nelements);$/;"	t
PFNGLXCREATENEWCONTEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXContext   (* PFNGLXCREATENEWCONTEXTPROC) (::Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);$/;"	t
PFNGLXCREATEPBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXPbuffer   (* PFNGLXCREATEPBUFFERPROC) (::Display *dpy, GLXFBConfig config, const int *attrib_list);$/;"	t
PFNGLXCREATEPIXMAPPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXPixmap    (* PFNGLXCREATEPIXMAPPROC) (::Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list);$/;"	t
PFNGLXCREATEWINDOWPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXWindow    (* PFNGLXCREATEWINDOWPROC) (::Display *dpy, GLXFBConfig config, Window win, const int *attrib_list);$/;"	t
PFNGLXDESTROYPBUFFERPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXDESTROYPBUFFERPROC) (::Display *dpy, GLXPbuffer pbuf);$/;"	t
PFNGLXDESTROYPIXMAPPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXDESTROYPIXMAPPROC) (::Display *dpy, GLXPixmap pixmap);$/;"	t
PFNGLXDESTROYWINDOWPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXDESTROYWINDOWPROC) (::Display *dpy, GLXWindow win);$/;"	t
PFNGLXGETCURRENTDISPLAYPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Display* (* PFNGLXGETCURRENTDISPLAYPROC) (void);$/;"	t
PFNGLXGETCURRENTREADDRAWABLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXDrawable  (* PFNGLXGETCURRENTREADDRAWABLEPROC) (void);$/;"	t
PFNGLXGETFBCONFIGATTRIBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int          (* PFNGLXGETFBCONFIGATTRIBPROC) (::Display *dpy, GLXFBConfig config, int attribute, int *value);$/;"	t
PFNGLXGETFBCONFIGSPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef GLXFBConfig* (* PFNGLXGETFBCONFIGSPROC) (::Display *dpy, int screen, int *nelements);$/;"	t
PFNGLXGETMSCRATEOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Bool    (* PFNGLXGETMSCRATEOMLPROC) (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);$/;"	t
PFNGLXGETSELECTEDEVENTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXGETSELECTEDEVENTPROC) (::Display *dpy, GLXDrawable draw, unsigned long *event_mask);$/;"	t
PFNGLXGETSYNCVALUESOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Bool    (* PFNGLXGETSYNCVALUESOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);$/;"	t
PFNGLXGETVISUALFROMFBCONFIGPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef XVisualInfo* (* PFNGLXGETVISUALFROMFBCONFIGPROC) (::Display *dpy, GLXFBConfig config);$/;"	t
PFNGLXMAKECONTEXTCURRENTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Bool         (* PFNGLXMAKECONTEXTCURRENTPROC) (::Display *display, GLXDrawable draw, GLXDrawable read, GLXContext ctx);$/;"	t
PFNGLXQUERYCONTEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int          (* PFNGLXQUERYCONTEXTPROC) (::Display *dpy, GLXContext ctx, int attribute, int *value);$/;"	t
PFNGLXQUERYDRAWABLEPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXQUERYDRAWABLEPROC) (::Display *dpy, GLXDrawable draw, int attribute, unsigned int *value);$/;"	t
PFNGLXSELECTEVENTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void         (* PFNGLXSELECTEVENTPROC) (::Display *dpy, GLXDrawable draw, unsigned long event_mask);$/;"	t
PFNGLXSWAPBUFFERSMSCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int64_t (* PFNGLXSWAPBUFFERSMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);$/;"	t
PFNGLXSWAPINTERVALEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef void (* PFNGLXSWAPINTERVALEXTPROC) (Display* dpy, GLXDrawable drawable, int interval);$/;"	t
PFNGLXWAITFORMSCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Bool    (* PFNGLXWAITFORMSCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);$/;"	t
PFNGLXWAITFORSBCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef Bool    (* PFNGLXWAITFORSBCOMLPROC) (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);$/;"	t
PFNWGLBINDSWAPBARRIERNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLBINDSWAPBARRIERNVPROC) (GLuint group, GLuint barrier);$/;"	t
PFNWGLBINDTEXIMAGEARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLBINDTEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);$/;"	t
PFNWGLBINDVIDEOCAPTUREDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLBINDVIDEOCAPTUREDEVICENVPROC) (UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice);$/;"	t
PFNWGLBINDVIDEODEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLBINDVIDEODEVICENVPROC) (HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList);$/;"	t
PFNWGLBINDVIDEOIMAGENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLBINDVIDEOIMAGENVPROC) (HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer);$/;"	t
PFNWGLCHOOSEPIXELFORMATARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLCHOOSEPIXELFORMATARBPROC) (HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats);$/;"	t
PFNWGLCOPYIMAGESUBDATANVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLCOPYIMAGESUBDATANVPROC) (HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);$/;"	t
PFNWGLCREATEBUFFERREGIONARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HANDLE (WINAPI * PFNWGLCREATEBUFFERREGIONARBPROC) (HDC hDC, int iLayerPlane, UINT uType);$/;"	t
PFNWGLCREATECONTEXTATTRIBSARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HGLRC (WINAPI * PFNWGLCREATECONTEXTATTRIBSARBPROC) (HDC hDC, HGLRC hShareContext, const int *attribList);$/;"	t
PFNWGLCREATECONTEXTPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef HGLRC(__stdcall *PFNWGLCREATECONTEXTPROC)(HDC hDC);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLCREATEPBUFFERARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HPBUFFERARB (WINAPI * PFNWGLCREATEPBUFFERARBPROC) (HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList);$/;"	t
PFNWGLDELETEBUFFERREGIONARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef VOID   (WINAPI * PFNWGLDELETEBUFFERREGIONARBPROC) (HANDLE hRegion);$/;"	t
PFNWGLDELETECONTEXTPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef BOOL(__stdcall *PFNWGLDELETECONTEXTPROC)(HGLRC hglrc);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLDESTROYPBUFFERARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL        (WINAPI * PFNWGLDESTROYPBUFFERARBPROC) (HPBUFFERARB hPbuffer);$/;"	t
PFNWGLDXCLOSEDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXCLOSEDEVICENVPROC) (HANDLE hDevice);$/;"	t
PFNWGLDXLOCKOBJECTSNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE* hObjects);$/;"	t
PFNWGLDXOBJECTACCESSNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXOBJECTACCESSNVPROC) (HANDLE hObject, GLenum access);$/;"	t
PFNWGLDXOPENDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HANDLE (WINAPI * PFNWGLDXOPENDEVICENVPROC) (void* dxDevice);$/;"	t
PFNWGLDXREGISTEROBJECTNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HANDLE (WINAPI * PFNWGLDXREGISTEROBJECTNVPROC) (HANDLE hDevice, void* dxObject, GLuint name, GLenum type, GLenum access);$/;"	t
PFNWGLDXSETRESOURCESHAREHANDLENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXSETRESOURCESHAREHANDLENVPROC) (void* dxObject, HANDLE shareHandle);$/;"	t
PFNWGLDXUNLOCKOBJECTSNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXUNLOCKOBJECTSNVPROC) (HANDLE hDevice, GLint count, HANDLE* hObjects);$/;"	t
PFNWGLDXUNREGISTEROBJECTNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLDXUNREGISTEROBJECTNVPROC) (HANDLE hDevice, HANDLE hObject);$/;"	t
PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef UINT (WINAPI * PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC) (HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList);$/;"	t
PFNWGLENUMERATEVIDEODEVICESNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int  (WINAPI * PFNWGLENUMERATEVIDEODEVICESNVPROC) (HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList);$/;"	t
PFNWGLGETCURRENTCONTEXTPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef HGLRC(__stdcall *PFNWGLGETCURRENTCONTEXTPROC)(void);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLGETCURRENTDCPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef HDC(__stdcall *PFNWGLGETCURRENTDCPROC)(void);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLGETCURRENTREADDCARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HDC  (WINAPI * PFNWGLGETCURRENTREADDCARBPROC) (void);$/;"	t
PFNWGLGETEXTENSIONSSTRINGARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGARBPROC) (HDC hdc);$/;"	t
PFNWGLGETEXTENSIONSSTRINGEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef const char * (WINAPI * PFNWGLGETEXTENSIONSSTRINGEXTPROC) (void);$/;"	t
PFNWGLGETMSCRATEOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL  (WINAPI * PFNWGLGETMSCRATEOMLPROC) (HDC hdc, INT32 *numerator, INT32 *denominator);$/;"	t
PFNWGLGETPBUFFERDCARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef HDC         (WINAPI * PFNWGLGETPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer);$/;"	t
PFNWGLGETPIXELFORMATATTRIBFVARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBFVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues);$/;"	t
PFNWGLGETPIXELFORMATATTRIBIVARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLGETPIXELFORMATATTRIBIVARBPROC) (HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues);$/;"	t
PFNWGLGETPROCADDRESS	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef PROC (__stdcall *PFNWGLGETPROCADDRESS) (LPCSTR);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLGETPROCADDRESSPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef PROC(__stdcall *PFNWGLGETPROCADDRESSPROC) (LPCSTR);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLGETSWAPINTERVALEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int  (WINAPI * PFNWGLGETSWAPINTERVALEXTPROC) (void);$/;"	t
PFNWGLGETSYNCVALUESOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL  (WINAPI * PFNWGLGETSYNCVALUESOMLPROC) (HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc);$/;"	t
PFNWGLGETVIDEODEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLGETVIDEODEVICENVPROC) (HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice);$/;"	t
PFNWGLGETVIDEOINFONVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLGETVIDEOINFONVPROC) (HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo);$/;"	t
PFNWGLJOINSWAPGROUPNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLJOINSWAPGROUPNVPROC) (HDC hDC, GLuint group);$/;"	t
PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);$/;"	t
PFNWGLMAKECONTEXTCURRENTARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLMAKECONTEXTCURRENTARBPROC) (HDC hDrawDC, HDC hReadDC, HGLRC hglrc);$/;"	t
PFNWGLMAKECURRENTPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef BOOL(__stdcall *PFNWGLMAKECURRENTPROC)(HDC, HGLRC);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLQUERYCURRENTCONTEXTNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLQUERYCURRENTCONTEXTNVPROC) (int iAttribute, int *piValue);$/;"	t
PFNWGLQUERYFRAMECOUNTNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLQUERYFRAMECOUNTNVPROC) (HDC hDC, GLuint *count);$/;"	t
PFNWGLQUERYMAXSWAPGROUPSNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLQUERYMAXSWAPGROUPSNVPROC) (HDC hDC, GLuint *maxGroups, GLuint *maxBarriers);$/;"	t
PFNWGLQUERYPBUFFERARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL        (WINAPI * PFNWGLQUERYPBUFFERARBPROC) (HPBUFFERARB hPbuffer, int iAttribute, int *piValue);$/;"	t
PFNWGLQUERYSWAPGROUPNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLQUERYSWAPGROUPNVPROC) (HDC hDC, GLuint *group, GLuint *barrier);$/;"	t
PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue);$/;"	t
PFNWGLRELEASEPBUFFERDCARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef int         (WINAPI * PFNWGLRELEASEPBUFFERDCARBPROC) (HPBUFFERARB hPbuffer, HDC hDC);$/;"	t
PFNWGLRELEASETEXIMAGEARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLRELEASETEXIMAGEARBPROC) (HPBUFFERARB hPbuffer, int iBuffer);$/;"	t
PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC) (HDC hDc, HVIDEOINPUTDEVICENV hDevice);$/;"	t
PFNWGLRELEASEVIDEODEVICENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLRELEASEVIDEODEVICENVPROC) (HPVIDEODEV hVideoDevice);$/;"	t
PFNWGLRELEASEVIDEOIMAGENVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLRELEASEVIDEOIMAGENVPROC) (HPBUFFERARB hPbuffer, int iVideoBuffer);$/;"	t
PFNWGLRESETFRAMECOUNTNVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLRESETFRAMECOUNTNVPROC) (HDC hDC);$/;"	t
PFNWGLRESTOREBUFFERREGIONARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLRESTOREBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc);$/;"	t
PFNWGLSAVEBUFFERREGIONARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL   (WINAPI * PFNWGLSAVEBUFFERREGIONARBPROC) (HANDLE hRegion, int x, int y, int width, int height);$/;"	t
PFNWGLSENDPBUFFERTOVIDEONVPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLSENDPBUFFERTOVIDEONVPROC) (HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock);$/;"	t
PFNWGLSETPBUFFERATTRIBARBPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLSETPBUFFERATTRIBARBPROC) (HPBUFFERARB hPbuffer, const int *piAttribList);$/;"	t
PFNWGLSHARELISTSPROC	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef BOOL(__stdcall *PFNWGLSHARELISTSPROC)(HGLRC hglrcShare, HGLRC hglrcSrc);$/;"	t	namespace:OVR::CAPI::GL
PFNWGLSWAPBUFFERSMSCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef INT64 (WINAPI * PFNWGLSWAPBUFFERSMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder);$/;"	t
PFNWGLSWAPINTERVALEXTPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL (WINAPI * PFNWGLSWAPINTERVALEXTPROC) (int interval);$/;"	t
PFNWGLSWAPLAYERBUFFERSMSCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef INT64 (WINAPI * PFNWGLSWAPLAYERBUFFERSMSCOMLPROC) (HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder);$/;"	t
PFNWGLWAITFORMSCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL  (WINAPI * PFNWGLWAITFORMSCOMLPROC) (HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc);$/;"	t
PFNWGLWAITFORSBCOMLPROC	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef BOOL  (WINAPI * PFNWGLWAITFORSBCOMLPROC) (HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc);$/;"	t
PGPU_DEVICE	Src/CAPI/GL/CAPI_GLE_GL.h	/^        } GPU_DEVICE, *PGPU_DEVICE;$/;"	t	typeref:struct:_GPU_DEVICE
PMax	Src/Kernel/OVR_Alg.h	/^template <typename T>   OVR_FORCE_INLINE const T PMax(const T a, const T b)$/;"	f	namespace:OVR::Alg
PMin	Src/Kernel/OVR_Alg.h	/^template <typename T>   OVR_FORCE_INLINE const T PMin(const T a, const T b)$/;"	f	namespace:OVR::Alg
PROFILE_VERSION	Src/OVR_Profile.cpp	57;"	d	file:
PRead16	Src/Kernel/OVR_File.h	/^    uint16_t  PRead16()           { uint16_t v = 0; Read((uint8_t*)&v, 2); return v; }$/;"	f	class:OVR::File
PRead32	Src/Kernel/OVR_File.h	/^    uint32_t  PRead32()           { uint32_t v = 0; Read((uint8_t*)&v, 4); return v; }$/;"	f	class:OVR::File
PRead64	Src/Kernel/OVR_File.h	/^    uint64_t  PRead64()           { uint64_t v = 0; Read((uint8_t*)&v, 8); return v; }$/;"	f	class:OVR::File
PRead8	Src/Kernel/OVR_File.h	/^    uint8_t PRead8()            { uint8_t  v = 0; Read((uint8_t*)&v, 1); return v; }$/;"	f	class:OVR::File
PRun	Src/Kernel/OVR_ThreadsPthread.cpp	/^int    Thread::PRun()$/;"	f	class:OVR::Thread
PT	Src/Kernel/OVR_Atomic.h	/^    typedef volatile typename Ops::T*     PT;$/;"	t	class:OVR::AtomicOps
PWrite16	Src/Kernel/OVR_File.h	/^    void    PWrite16(uint16_t v)  { Write((uint8_t*)&v, 2); }$/;"	f	class:OVR::File
PWrite32	Src/Kernel/OVR_File.h	/^    void    PWrite32(uint32_t v)  { Write((uint8_t*)&v, 4); }$/;"	f	class:OVR::File
PWrite64	Src/Kernel/OVR_File.h	/^    void    PWrite64(uint64_t v)  { Write((uint8_t*)&v, 8); }$/;"	f	class:OVR::File
PWrite8	Src/Kernel/OVR_File.h	/^    void    PWrite8(uint8_t v)  { Write((uint8_t*)&v, 1); }$/;"	f	class:OVR::File
PacketizedTCPConnection	Src/Net/OVR_Session.h	/^	PacketizedTCPConnection()$/;"	f	class:OVR::Net::PacketizedTCPConnection
PacketizedTCPConnection	Src/Net/OVR_Session.h	/^class PacketizedTCPConnection : public TCPConnection$/;"	c	namespace:OVR::Net
PacketizedTCPSocket	Src/Net/OVR_PacketizedTCPSocket.cpp	/^PacketizedTCPSocket::PacketizedTCPSocket()$/;"	f	class:OVR::Net::PacketizedTCPSocket
PacketizedTCPSocket	Src/Net/OVR_PacketizedTCPSocket.cpp	/^PacketizedTCPSocket::PacketizedTCPSocket(SocketHandle _sock, bool isListenSocket) : PacketizedTCPSocketBase(_sock, isListenSocket)$/;"	f	class:OVR::Net::PacketizedTCPSocket
PacketizedTCPSocket	Src/Net/OVR_PacketizedTCPSocket.h	/^class PacketizedTCPSocket : public PacketizedTCPSocketBase$/;"	c	namespace:OVR::Net
PacketizedTCPSocketBase	Src/Net/OVR_PacketizedTCPSocket.h	/^	PacketizedTCPSocketBase() {}$/;"	f	class:OVR::Net::PacketizedTCPSocketBase
PacketizedTCPSocketBase	Src/Net/OVR_PacketizedTCPSocket.h	/^	PacketizedTCPSocketBase(SocketHandle _sock, bool isListenSocket) : TCPSocket(_sock, isListenSocket) {}$/;"	f	class:OVR::Net::PacketizedTCPSocketBase
PacketizedTCPSocketBase	Src/Net/OVR_PacketizedTCPSocket.h	/^class PacketizedTCPSocketBase : public TCPSocket$/;"	c	namespace:OVR::Net
PadWithZeroToByteLength	Src/Net/OVR_BitStream.cpp	/^void BitStream::PadWithZeroToByteLength( unsigned int bytes )$/;"	f	class:OVR::Net::BitStream
Parse	Src/OVR_JSON.cpp	/^JSON* JSON::Parse(const char* buff, const char** perror)$/;"	f	class:OVR::JSON
ParseBuffer	Src/OVR_JSON.cpp	/^JSON* JSON::ParseBuffer(const char *buff, int len, const char** perror)$/;"	f	class:OVR::JSON
ParseGLExtensions	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void GLVersionAndExtensions::ParseGLExtensions()$/;"	f	class:OVR::CAPI::GL::GLVersionAndExtensions
ParseGLVersion	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void GLVersionAndExtensions::ParseGLVersion()$/;"	f	class:OVR::CAPI::GL::GLVersionAndExtensions
ParseHex	Src/OVR_JSON.cpp	/^const char* ParseHex(unsigned* val, unsigned digits, const char* str)$/;"	f	namespace:OVR
PartId	Src/OVR_SerialFormat.h	/^	DK2PartId    PartId;            \/\/ [4 bits] 0 means HMD, 1 means PTC(camera)$/;"	m	class:OVR::DK2BinarySerialFormat
PatchVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_C2S_Hello
PatchVersion	Src/Net/OVR_Session.h	/^    uint16_t MajorVersion, MinorVersion, PatchVersion;$/;"	m	struct:OVR::Net::RPC_S2C_Authorization
PeekBack	Src/Kernel/OVR_Deque.h	/^Elem& InPlaceMutableDeque<Elem, Allocator>::PeekBack(int count)$/;"	f	class:OVR::InPlaceMutableDeque
PeekBack	Src/Kernel/OVR_Deque.h	/^const Elem& Deque<Elem, Allocator>::PeekBack(int count) const$/;"	f	class:OVR::Deque
PeekFront	Src/Kernel/OVR_Deque.h	/^Elem& InPlaceMutableDeque<Elem, Allocator>::PeekFront(int count)$/;"	f	class:OVR::InPlaceMutableDeque
PeekFront	Src/Kernel/OVR_Deque.h	/^const Elem& Deque<Elem, Allocator>::PeekFront(int count) const$/;"	f	class:OVR::Deque
PerfFrequency	Src/Kernel/OVR_Timer.cpp	/^    uint64_t        PerfFrequency;              \/\/ cycles per second, typically a large value like 3000000, but usually not the same as the CPU clock rate.$/;"	m	struct:OVR::PerformanceTimer	file:
PerfFrequencyInverse	Src/Kernel/OVR_Timer.cpp	/^    double          PerfFrequencyInverse;       \/\/ seconds per cycle (will be a small fractional value).$/;"	m	struct:OVR::PerformanceTimer	file:
PerfFrequencyInverseNanos	Src/Kernel/OVR_Timer.cpp	/^    double          PerfFrequencyInverseNanos;  \/\/ nanoseconds per cycle.$/;"	m	struct:OVR::PerformanceTimer	file:
PerfMinusTicksDeltaNanos	Src/Kernel/OVR_Timer.cpp	/^    uint64_t        PerfMinusTicksDeltaNanos;$/;"	m	struct:OVR::PerformanceTimer	file:
PerformanceTimer	Src/Kernel/OVR_Timer.cpp	/^    PerformanceTimer()$/;"	f	struct:OVR::PerformanceTimer
PerformanceTimer	Src/Kernel/OVR_Timer.cpp	/^struct PerformanceTimer$/;"	s	namespace:OVR	file:
PerspectiveLH	Src/Kernel/OVR_Math.h	/^    static Matrix4 PerspectiveLH(T yfov, T aspect, T znear, T zfar)$/;"	f	class:OVR::Matrix4
PerspectiveRH	Src/Kernel/OVR_Math.h	/^    static Matrix4 PerspectiveRH(T yfov, T aspect, T znear, T zfar)$/;"	f	class:OVR::Matrix4
Pick	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& Pick(C* p)$/;"	f	class:OVR::Ptr
Pick	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& Pick(Pickable<C> v)$/;"	f	class:OVR::Ptr
Pick	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& Pick(Pickable<R> v)$/;"	f	class:OVR::Ptr
Pick	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& Pick(Ptr<C>& other)$/;"	f	class:OVR::Ptr
PickType	Src/Kernel/OVR_RefCount.h	/^enum PickType { PickValue };$/;"	g	namespace:OVR
PickValue	Src/Kernel/OVR_RefCount.h	/^enum PickType { PickValue };$/;"	e	enum:OVR::PickType
Pickable	Src/Kernel/OVR_RefCount.h	/^    Pickable() : pV(NULL) {}$/;"	f	class:OVR::Pickable
Pickable	Src/Kernel/OVR_RefCount.h	/^    Pickable(T* p, PickType) : pV(p) $/;"	f	class:OVR::Pickable
Pickable	Src/Kernel/OVR_RefCount.h	/^    Pickable(const Pickable<OT>& other) : pV(other.GetPtr()) {}$/;"	f	class:OVR::Pickable
Pickable	Src/Kernel/OVR_RefCount.h	/^    explicit Pickable(T* p) : pV(p) {}$/;"	f	class:OVR::Pickable
Pickable	Src/Kernel/OVR_RefCount.h	/^class Pickable$/;"	c	namespace:OVR
PixelPersistence	Src/OVR_Stereo.h	/^		float   PixelPersistence;                \/\/ Full persistence = 1\/framerate.$/;"	m	struct:OVR::HMDInfo::ShutterInfo
PixelPersistence	Src/OVR_Stereo.h	/^        float               PixelPersistence;                \/\/ Full persistence = 1\/framerate.$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
PixelSettleTime	Src/OVR_Stereo.h	/^		float   PixelSettleTime;                 \/\/ estimated.$/;"	m	struct:OVR::HMDInfo::ShutterInfo
PixelSettleTime	Src/OVR_Stereo.h	/^        float               PixelSettleTime;                 \/\/ estimated.$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
PixelsPerTanAngleAtCenter	Src/OVR_CAPI.h	/^    ovrVector2f PixelsPerTanAngleAtCenter;  \/\/\/ How many display pixels will fit in tan(angle) = 1.$/;"	m	struct:ovrEyeRenderDesc_
PixelsPerTanAngleAtCenter	Src/OVR_Stereo.h	/^    Vector2f            PixelsPerTanAngleAtCenter;$/;"	m	struct:OVR::DistortionRenderDesc
Plane	Src/Kernel/OVR_Math.h	/^    Plane() : D(0) {}$/;"	f	class:OVR::Plane
Plane	Src/Kernel/OVR_Math.h	/^    Plane(T x, T y, T z, T d) : N(x,y,z), D(d) {}$/;"	f	class:OVR::Plane
Plane	Src/Kernel/OVR_Math.h	/^    Plane(const Vector3<T>& n, T d) : N(n), D(d) {}$/;"	f	class:OVR::Plane
Plane	Src/Kernel/OVR_Math.h	/^    Plane(const Vector3<T>& p, const Vector3<T>& n) : N(n), D(-(p * n)) {}$/;"	f	class:OVR::Plane
Plane	Src/Kernel/OVR_Math.h	/^class Plane$/;"	c	namespace:OVR
Planed	Src/Kernel/OVR_Math.h	/^typedef Plane<double> Planed;$/;"	t	namespace:OVR
Planef	Src/Kernel/OVR_Math.h	/^typedef Plane<float> Planef;$/;"	t	namespace:OVR
PlatformData	Src/OVR_CAPI.h	/^    uintptr_t                PlatformData[8];$/;"	m	struct:ovrRenderAPIConfig_
PlatformData	Src/OVR_CAPI.h	/^    uintptr_t        PlatformData[8];$/;"	m	struct:ovrTexture_
Plugins	Src/Net/OVR_NetworkPlugin.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR::Net	file:
Plugins	Src/Net/OVR_NetworkPlugin.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR::Net
Plugins	Src/Net/OVR_RPC1.cpp	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR::Net	file:
Plugins	Src/Net/OVR_RPC1.h	/^namespace OVR { namespace Net { namespace Plugins {$/;"	n	namespace:OVR::Net
Point2d	Src/Kernel/OVR_Math.h	/^typedef Vector2<double> Point2d;$/;"	t	namespace:OVR
Point2f	Src/Kernel/OVR_Math.h	/^typedef Vector2<float>  Point2f;$/;"	t	namespace:OVR
Point2i	Src/Kernel/OVR_Math.h	/^typedef Vector2<int>    Point2i;$/;"	t	namespace:OVR
Point3d	Src/Kernel/OVR_Math.h	/^typedef Vector3<double>  Point3d;$/;"	t	namespace:OVR
Point3f	Src/Kernel/OVR_Math.h	/^typedef Vector3<float>   Point3f;$/;"	t	namespace:OVR
Point3i	Src/Kernel/OVR_Math.h	/^typedef Vector3<int32_t>  Point3i;$/;"	t	namespace:OVR
Policy	Src/Kernel/OVR_Array.h	/^    SizePolicy  Policy;$/;"	m	struct:OVR::ArrayDataBase
Poll	Src/Net/OVR_Session.cpp	/^void Session::Poll(bool listeners)$/;"	f	class:OVR::Net::Session
Poll	Src/Net/OVR_Unix_Socket.cpp	/^bool TCPSocketPollState::Poll(long usec, long seconds)$/;"	f	class:OVR::Net::TCPSocketPollState
Poll	Src/Net/OVR_Unix_Socket.cpp	/^void UDPSocket::Poll(SocketEvent_UDP *eventHandler)$/;"	f	class:OVR::Net::UDPSocket
Pop	Src/Kernel/OVR_Array.h	/^    ValueType Pop()$/;"	f	class:OVR::ArrayBase
PopBack	Src/Kernel/OVR_Array.h	/^    void    PopBack(size_t count = 1)$/;"	f	class:OVR::ArrayBase
PopBack	Src/Kernel/OVR_Deque.h	/^Elem Deque<Elem, Allocator>::PopBack(void)$/;"	f	class:OVR::Deque
PopBuffer	Src/Kernel/OVR_ThreadCommandQueue.h	/^        PopBuffer() : Size(0) { }$/;"	f	class:OVR::ThreadCommand::PopBuffer
PopBuffer	Src/Kernel/OVR_ThreadCommandQueue.h	/^    class PopBuffer$/;"	c	class:OVR::ThreadCommand
PopCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^bool ThreadCommandQueue::PopCommand(ThreadCommand::PopBuffer* popBuffer)$/;"	f	class:OVR::ThreadCommandQueue
PopCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^bool ThreadCommandQueueImpl::PopCommand(ThreadCommand::PopBuffer* popBuffer)$/;"	f	class:OVR::ThreadCommandQueueImpl
PopFront	Src/Kernel/OVR_Deque.h	/^Elem Deque<Elem, Allocator>::PopFront(void)$/;"	f	class:OVR::Deque
Port	Src/Net/OVR_Socket.h	/^	uint16_t Port;     \/\/ Port$/;"	m	struct:OVR::Net::BerkleyBindParameters
Pos	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Vector3f  Pos;$/;"	m	struct:OVR::CAPI::GL::LatencyVertex	file:
Pos	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    Vector3f  Pos;$/;"	m	struct:OVR::CAPI::GL::HASWVertex	file:
Pos	Src/Kernel/OVR_File.h	/^    unsigned        Pos;$/;"	m	class:OVR::BufferedFile
Pos	Src/OVR_CAPI.h	/^    ovrVector2i Pos;$/;"	m	struct:ovrRecti_
Pose	Src/Kernel/OVR_Math.h	/^    Pose() { }$/;"	f	class:OVR::Pose
Pose	Src/Kernel/OVR_Math.h	/^    Pose(const CompatibleType& s)$/;"	f	class:OVR::Pose
Pose	Src/Kernel/OVR_Math.h	/^    Pose(const Pose& s)$/;"	f	class:OVR::Pose
Pose	Src/Kernel/OVR_Math.h	/^    Pose(const Quat<T>& orientation, const Vector3<T>& pos)$/;"	f	class:OVR::Pose
Pose	Src/Kernel/OVR_Math.h	/^    explicit Pose(const Pose<typename Math<T>::OtherFloatType> &s)$/;"	f	class:OVR::Pose
Pose	Src/Kernel/OVR_Math.h	/^class Pose$/;"	c	namespace:OVR
PoseState	Src/Tracking/Tracking_PoseState.h	/^	PoseState() : TimeInSeconds(0.0) { }$/;"	f	class:OVR::PoseState
PoseState	Src/Tracking/Tracking_PoseState.h	/^	PoseState(const typename CompatibleTypes<PoseState<T> >::Type& src)$/;"	f	class:OVR::PoseState
PoseState	Src/Tracking/Tracking_PoseState.h	/^	explicit PoseState(const PoseState<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::PoseState
PoseState	Src/Tracking/Tracking_PoseState.h	/^    PoseState(Pose<T> pose, double time) : ThePose(pose), TimeInSeconds(time) { }$/;"	f	class:OVR::PoseState
PoseState	Src/Tracking/Tracking_PoseState.h	/^class PoseState$/;"	c	namespace:OVR
PoseStated	Src/Tracking/Tracking_PoseState.h	/^typedef PoseState<double> PoseStated;$/;"	t	namespace:OVR
PoseStatef	Src/Tracking/Tracking_PoseState.h	/^typedef PoseState<float>  PoseStatef;$/;"	t	namespace:OVR
Posed	Src/Kernel/OVR_Math.h	/^typedef Pose<double> Posed;$/;"	t	namespace:OVR
Posef	Src/Kernel/OVR_Math.h	/^typedef Pose<float>  Posef;$/;"	t	namespace:OVR
Position	Src/OVR_CAPI.h	/^    ovrVector3f  Position;$/;"	m	struct:ovrPosef_
PostDistortionCallback	Src/CAPI/CAPI_DistortionRenderer.h	/^typedef void (*PostDistortionCallback)(void* pRenderContext);$/;"	t
PostGLXHook	Src/CAPI/GL/CAPI_GLE.cpp	/^			void OVR::GLEContext::PostGLXHook()$/;"	f	class:OVR::GLEContext
PostHook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::PostHook()$/;"	f	class:OVR::GLEContext
PostWGLHook	Src/CAPI/GL/CAPI_GLE.cpp	/^			void OVR::GLEContext::PostWGLHook()$/;"	f	class:OVR::GLEContext
PowNormalized	Src/Kernel/OVR_Math.h	/^    Quat PowNormalized(T p) const$/;"	f	class:OVR::Quat
PredictedTrackingState	Src/CAPI/CAPI_HMDState.cpp	/^ovrTrackingState HMDState::PredictedTrackingState(double absTime)$/;"	f	class:OVR::CAPI::HMDState
PredictionGetDeviceValues	Src/Util/Util_Render_Stereo.cpp	/^PredictionValues PredictionGetDeviceValues ( const HmdRenderInfo &hmdRenderInfo,$/;"	f	namespace:OVR::Util::Render
PredictionValues	Src/Util/Util_Render_Stereo.h	/^struct PredictionValues$/;"	s	namespace:OVR::Util::Render
PresentFlushToPresentFlush	Src/Util/Util_Render_Stereo.h	/^    float PresentFlushToPresentFlush;         \/\/ To the next present+flush, i.e. the ideal framerate.$/;"	m	struct:OVR::Util::Render::PredictionValues
PresentFlushToPresentFlushSeconds	Src/Util/Util_Render_Stereo.h	/^    float               PresentFlushToPresentFlushSeconds;$/;"	m	class:OVR::Util::Render::TimewarpMachine
PresentFlushToRenderedScene	Src/Util/Util_Render_Stereo.h	/^    float PresentFlushToRenderedScene;        \/\/ To the overall rendered 3D scene being visible.$/;"	m	struct:OVR::Util::Render::PredictionValues
PresentFlushToTimewarpEnd	Src/Util/Util_Render_Stereo.h	/^    float PresentFlushToTimewarpEnd;          \/\/ To when the last timewarped scanline will be visible.$/;"	m	struct:OVR::Util::Render::PredictionValues
PresentFlushToTimewarpStart	Src/Util/Util_Render_Stereo.h	/^    float PresentFlushToTimewarpStart;        \/\/ To when the first timewarped scanline will be visible.$/;"	m	struct:OVR::Util::Render::PredictionValues
Prim_Count	Src/CAPI/GL/CAPI_GL_Util.h	/^    Prim_Count$/;"	e	enum:OVR::CAPI::GL::PrimitiveType
Prim_Lines	Src/CAPI/GL/CAPI_GL_Util.h	/^    Prim_Lines,$/;"	e	enum:OVR::CAPI::GL::PrimitiveType
Prim_TriangleStrip	Src/CAPI/GL/CAPI_GL_Util.h	/^    Prim_TriangleStrip,$/;"	e	enum:OVR::CAPI::GL::PrimitiveType
Prim_Triangles	Src/CAPI/GL/CAPI_GL_Util.h	/^    Prim_Triangles,$/;"	e	enum:OVR::CAPI::GL::PrimitiveType
Prim_Unknown	Src/CAPI/GL/CAPI_GL_Util.h	/^    Prim_Unknown,$/;"	e	enum:OVR::CAPI::GL::PrimitiveType
PrimitiveType	Src/CAPI/GL/CAPI_GL_Util.h	/^enum PrimitiveType$/;"	g	namespace:OVR::CAPI::GL
PrintArray	Src/OVR_JSON.cpp	/^char* JSON::PrintArray(int depth, bool fmt)$/;"	f	class:OVR::JSON
PrintBits	Src/Net/OVR_BitStream.cpp	/^void BitStream::PrintBits( char *out ) const$/;"	f	class:OVR::Net::BitStream
PrintBits	Src/Net/OVR_BitStream.cpp	/^void BitStream::PrintBits( void ) const$/;"	f	class:OVR::Net::BitStream
PrintHex	Src/Net/OVR_BitStream.cpp	/^void BitStream::PrintHex( char *out ) const$/;"	f	class:OVR::Net::BitStream
PrintHex	Src/Net/OVR_BitStream.cpp	/^void BitStream::PrintHex( void ) const$/;"	f	class:OVR::Net::BitStream
PrintInt	Src/OVR_JSON.cpp	/^static char* PrintInt(int valueint)$/;"	f	namespace:OVR
PrintNumber	Src/OVR_JSON.cpp	/^static char* PrintNumber(double d)$/;"	f	namespace:OVR
PrintObject	Src/OVR_JSON.cpp	/^char* JSON::PrintObject(int depth, bool fmt)$/;"	f	class:OVR::JSON
PrintString	Src/OVR_JSON.cpp	/^char* PrintString(const char* str)$/;"	f	namespace:OVR
PrintValue	Src/OVR_JSON.cpp	/^char* JSON::PrintValue(int depth, bool fmt)$/;"	f	class:OVR::JSON
PrintedSerial	Src/OVR_Profile.h	/^	String PrintedSerial;$/;"	m	struct:OVR::ProfileDeviceKey
PrintedSerial	Src/OVR_Stereo.h	/^    String      PrintedSerial;$/;"	m	class:OVR::HMDInfo
Priority	Src/Kernel/OVR_Threads.h	/^    ThreadPriority Priority;$/;"	m	class:OVR::Thread
Process	Src/Util/Util_ImageWindow.h	/^	void Process() { }$/;"	f	class:OVR::Util::ImageWindow
ProcessInfo	Src/CAPI/CAPI_LatencyStatistics.h	/^    String OS, OSVersion, ProcessInfo, DisplayDriverVersion, CameraDriverVersion, GPUVersion;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
ProcessLatencyTest	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::ProcessLatencyTest(unsigned char rgbColorOut[3])$/;"	f	class:OVR::CAPI::HMDState
Processor	Src/Kernel/OVR_Threads.h	/^    int            Processor;$/;"	m	class:OVR::Thread
Producer	Src/Kernel/OVR_Lockless.cpp	/^class Producer : public Thread$/;"	c	namespace:OVR::LocklessTest	file:
ProductId	Src/OVR_CAPI.h	/^    short       ProductId;$/;"	m	struct:ovrHmdDesc_
ProductId	Src/OVR_Profile.h	/^	unsigned ProductId;$/;"	m	struct:OVR::ProfileDeviceKey
ProductId	Src/OVR_SerialFormat.h	/^	DK2ProductId ProductId;         \/\/ [1 char] 2 = DK2, 3 = Reconditioned bundle$/;"	m	class:OVR::DK2PrintedSerialFormat
ProductId	Src/OVR_SerialFormat.h	/^	DK2ProductId ProductId;         \/\/ [4 bits] 2 = DK2$/;"	m	class:OVR::DK2BinarySerialFormat
ProductId	Src/OVR_Stereo.h	/^    int         ProductId;$/;"	m	class:OVR::HMDInfo
ProductName	Src/OVR_CAPI.h	/^    const char* ProductName;$/;"	m	struct:ovrHmdDesc_
ProductName	Src/OVR_Profile.h	/^	String ProductName;$/;"	m	struct:OVR::ProfileDeviceKey
ProductName	Src/OVR_Stereo.h	/^	String      ProductName;$/;"	m	class:OVR::HMDInfo
Profile	Src/OVR_Profile.h	/^	Profile(String basePath) :$/;"	f	class:OVR::Profile
Profile	Src/OVR_Profile.h	/^class Profile : public RefCountBase<Profile>$/;"	c	namespace:OVR
ProfileCache	Src/OVR_Profile.h	/^    Ptr<JSON>           ProfileCache;$/;"	m	class:OVR::ProfileManager
ProfileDeviceKey	Src/OVR_Profile.cpp	/^ProfileDeviceKey::ProfileDeviceKey(const HMDInfo* info) :$/;"	f	class:OVR::ProfileDeviceKey
ProfileDeviceKey	Src/OVR_Profile.h	/^struct ProfileDeviceKey$/;"	s	namespace:OVR
ProfileGetValue1_Str	Src/Service/Service_NetClient.h	/^    String       ProfileGetValue1_Str, ProfileGetValue3_Str;$/;"	m	class:OVR::Service::NetClient
ProfileGetValue3_Str	Src/Service/Service_NetClient.h	/^    String       ProfileGetValue1_Str, ProfileGetValue3_Str;$/;"	m	class:OVR::Service::NetClient
ProfileLock	Src/OVR_Profile.h	/^    Lock                ProfileLock;$/;"	m	class:OVR::ProfileManager
ProfileManager	Src/OVR_Profile.cpp	/^ProfileManager::ProfileManager(bool sys_register) :$/;"	f	class:OVR::ProfileManager
ProfileManager	Src/OVR_Profile.h	/^class ProfileManager : public NewOverrideBase, public SystemSingletonBase<ProfileManager>$/;"	c	namespace:OVR
Prog	Src/CAPI/GL/CAPI_GL_Util.h	/^	GLuint    Prog;$/;"	m	class:OVR::CAPI::GL::ShaderSet
Program	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Program;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Proj	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        Matrix4f  Proj;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::StandardUniformData
ProjLoc	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLint     ProjLoc, ViewLoc;$/;"	m	class:OVR::CAPI::GL::ShaderSet
ProjectTo	Src/Kernel/OVR_Math.h	/^    Vector2 ProjectTo(const Vector2& b) const    $/;"	f	class:OVR::Vector2
ProjectTo	Src/Kernel/OVR_Math.h	/^    Vector3 ProjectTo(const Vector3& b) const    $/;"	f	class:OVR::Vector3
ProjectToPlane	Src/Kernel/OVR_Math.h	/^    Vector3 ProjectToPlane(const Vector3& normal) const { return *this - this->ProjectTo(normal); }$/;"	f	class:OVR::Vector3
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr() : pObject(0)$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(C &robj) : pObject(ReturnArg(&robj))$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(C *pobj)$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(Pickable<C> v) : pObject(v.GetPtr())$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(Pickable<R> v) : pObject(v.GetPtr())$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(Ptr<C>& other, PickType) : pObject(other.pObject)$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(Ptr<R> &src)$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr(const Ptr<C> &src)$/;"	f	class:OVR::Ptr
Ptr	Src/Kernel/OVR_RefCount.h	/^class Ptr$/;"	c	namespace:OVR
PullThreadId	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^	OVR::ThreadId		PullThreadId;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
PulseEvent	Src/Kernel/OVR_ThreadCommandQueue.h	/^        void PulseEvent()  { E.PulseEvent(); }$/;"	f	class:OVR::ThreadCommand::NotifyEvent
PulseEvent	Src/Kernel/OVR_Threads.h	/^    void  PulseEvent()$/;"	f	class:OVR::Event
PushBack	Src/Kernel/OVR_Array.h	/^    void    PushBack(const ValueType& val)$/;"	f	class:OVR::ArrayBase
PushBack	Src/Kernel/OVR_Array.h	/^    void PushBack(const ValueType& val)$/;"	f	struct:OVR::ArrayData
PushBack	Src/Kernel/OVR_Array.h	/^    void PushBack(const ValueType& val)$/;"	f	struct:OVR::ArrayDataCC
PushBack	Src/Kernel/OVR_Deque.h	/^void CircularBuffer<Elem, Allocator>::PushBack(const Elem &Item)$/;"	f	class:OVR::CircularBuffer
PushBack	Src/Kernel/OVR_Deque.h	/^void Deque<Elem, Allocator>::PushBack(const Elem &Item)$/;"	f	class:OVR::Deque
PushBack	Src/Kernel/OVR_List.h	/^    void PushBack(ValueType* p)$/;"	f	class:OVR::List
PushBackAlt	Src/Kernel/OVR_Array.h	/^    void PushBackAlt(const S& val)$/;"	f	class:OVR::ArrayBase
PushBackAlt	Src/Kernel/OVR_Array.h	/^    void PushBackAlt(const S& val)$/;"	f	struct:OVR::ArrayData
PushBackAlt	Src/Kernel/OVR_Array.h	/^    void PushBackAlt(const S& val)$/;"	f	struct:OVR::ArrayDataCC
PushCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^bool ThreadCommandQueue::PushCommand(const ThreadCommand& command)$/;"	f	class:OVR::ThreadCommandQueue
PushCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^bool ThreadCommandQueueImpl::PushCommand(const ThreadCommand& command)$/;"	f	class:OVR::ThreadCommandQueueImpl
PushDefault	Src/Kernel/OVR_Array.h	/^    ValueType& PushDefault()$/;"	f	class:OVR::ArrayBase
PushDestroyCallbacks	Src/Kernel/OVR_System.cpp	/^void SystemSingletonInternal::PushDestroyCallbacks()$/;"	f	class:OVR::SystemSingletonInternal
PushExitCommand	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^void ThreadCommandQueue::PushExitCommand(bool wait)$/;"	f	class:OVR::ThreadCommandQueue
PushFollowingListItemsToFront	Src/Kernel/OVR_List.h	/^    void    PushFollowingListItemsToFront(List<T>& src, ValueType *pfirst)$/;"	f	class:OVR::List
PushFront	Src/Kernel/OVR_Deque.h	/^void CircularBuffer<Elem, Allocator>::PushFront(const Elem &Item)$/;"	f	class:OVR::CircularBuffer
PushFront	Src/Kernel/OVR_Deque.h	/^void Deque<Elem, Allocator>::PushFront(const Elem &Item)$/;"	f	class:OVR::Deque
PushFront	Src/Kernel/OVR_List.h	/^    void PushFront(ValueType* p)$/;"	f	class:OVR::List
PushListItemsToFront	Src/Kernel/OVR_List.h	/^    void    PushListItemsToFront(ValueType *pfirst, ValueType *pend)$/;"	f	class:OVR::List
PushListToBack	Src/Kernel/OVR_List.h	/^    void PushListToBack(List<T>& src)$/;"	f	class:OVR::List
PushListToFront	Src/Kernel/OVR_List.h	/^    void PushListToFront(List<T>& src)$/;"	f	class:OVR::List
PushPrecedingListItemsToFront	Src/Kernel/OVR_List.h	/^    void    PushPrecedingListItemsToFront(List<T>& src, ValueType *ptail)$/;"	f	class:OVR::List
Quat	Src/Kernel/OVR_Math.h	/^	explicit Quat(const Matrix3<T>& m)$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    Quat() : x(0), y(0), z(0), w(1) { }$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    Quat(Axis A, T angle, RotateDirection d = Rotate_CCW, HandedSystem s = Handed_R)$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    Quat(T x_, T y_, T z_, T w_) : x(x_), y(y_), z(z_), w(w_) { }$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    Quat(const CompatibleType& s) : x(s.x), y(s.y), z(s.z), w(s.w) { }$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    Quat(const Vector3<T>& axis, T angle)$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    explicit Quat(const Matrix4<T>& m)$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^    explicit Quat(const Quat<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Quat
Quat	Src/Kernel/OVR_Math.h	/^class Quat$/;"	c	namespace:OVR
Quatd	Src/Kernel/OVR_Math.h	/^typedef Quat<double> Quatd;$/;"	t	namespace:OVR
Quatf	Src/Kernel/OVR_Math.h	/^typedef Quat<float>  Quatf;$/;"	t	namespace:OVR
QueueLock	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    Lock                QueueLock;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
QuickSort	Src/Kernel/OVR_Alg.h	/^void QuickSort(Array& arr)$/;"	f	namespace:OVR::Alg
QuickSort	Src/Kernel/OVR_Alg.h	/^void QuickSort(Array& arr, Less less)$/;"	f	namespace:OVR::Alg
QuickSortSafe	Src/Kernel/OVR_Alg.h	/^bool QuickSortSafe(Array& arr)$/;"	f	namespace:OVR::Alg
QuickSortSafe	Src/Kernel/OVR_Alg.h	/^bool QuickSortSafe(Array& arr, Less less)$/;"	f	namespace:OVR::Alg
QuickSortSliced	Src/Kernel/OVR_Alg.h	/^void QuickSortSliced(Array& arr, size_t start, size_t end)$/;"	f	namespace:OVR::Alg
QuickSortSliced	Src/Kernel/OVR_Alg.h	/^void QuickSortSliced(Array& arr, size_t start, size_t end, Less less)$/;"	f	namespace:OVR::Alg
QuickSortSlicedSafe	Src/Kernel/OVR_Alg.h	/^bool QuickSortSlicedSafe(Array& arr, size_t start, size_t end)$/;"	f	namespace:OVR::Alg
QuickSortSlicedSafe	Src/Kernel/OVR_Alg.h	/^bool QuickSortSlicedSafe(Array& arr, size_t start, size_t end, Less less)$/;"	f	namespace:OVR::Alg
R	Src/Kernel/OVR_Color.h	/^    uint8_t R,G,B,A;$/;"	m	struct:OVR::Color
RELEASETYPE	Makefile	/^	RELEASETYPE   ?= Debug$/;"	m
RELEASETYPE	Makefile	/^	RELEASETYPE   ?= Release$/;"	m
RPC1	Src/Net/OVR_RPC1.cpp	/^RPC1::RPC1()$/;"	f	class:OVR::Net::Plugins::RPC1
RPC1	Src/Net/OVR_RPC1.h	/^class RPC1 : public NetworkPlugin, public NewOverrideBase$/;"	c	namespace:OVR::Net::Plugins
RPCDelegate	Src/Net/OVR_RPC1.h	/^typedef Delegate3<void, BitStream*, BitStream*, ReceivePayload*> RPCDelegate;$/;"	t	namespace:OVR::Net::Plugins
RPCSlot	Src/Net/OVR_RPC1.h	/^typedef Delegate2<void, BitStream*, ReceivePayload*> RPCSlot;$/;"	t	namespace:OVR::Net::Plugins
RPCVersion_Major	Src/Net/OVR_Session.h	/^static const uint16_t RPCVersion_Major = 1; \/\/ MAJOR version when you make incompatible API changes,$/;"	m	namespace:OVR::Net
RPCVersion_Minor	Src/Net/OVR_Session.h	/^static const uint16_t RPCVersion_Minor = 1; \/\/ MINOR version when you add functionality in a backwards-compatible manner, and$/;"	m	namespace:OVR::Net
RPCVersion_Patch	Src/Net/OVR_Session.h	/^static const uint16_t RPCVersion_Patch = 0; \/\/ PATCH version when you make backwards-compatible bug fixes.$/;"	m	namespace:OVR::Net
RPC_C2S_Hello	Src/Net/OVR_Session.h	/^    RPC_C2S_Hello() :$/;"	f	struct:OVR::Net::RPC_C2S_Hello
RPC_C2S_Hello	Src/Net/OVR_Session.h	/^struct RPC_C2S_Hello$/;"	s	namespace:OVR::Net
RPC_ERROR_FUNCTION_NOT_REGISTERED	Src/Net/OVR_RPC1.cpp	/^	RPC_ERROR_FUNCTION_NOT_REGISTERED,$/;"	e	enum:OVR::Net::Plugins::__anon5	file:
RPC_REGISTER_SLOT	Src/Service/Service_NetClient.cpp	813;"	d	file:
RPC_S2C_Authorization	Src/Net/OVR_Session.h	/^    RPC_S2C_Authorization() :$/;"	f	struct:OVR::Net::RPC_S2C_Authorization
RPC_S2C_Authorization	Src/Net/OVR_Session.h	/^struct RPC_S2C_Authorization$/;"	s	namespace:OVR::Net
RParams	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    RenderParams        RParams;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
RState	Src/CAPI/CAPI_DistortionRenderer.h	/^    const HMDRenderState&   RState;$/;"	m	class:OVR::CAPI::DistortionRenderer
RTSize	Src/CAPI/GL/CAPI_GL_Util.h	/^    ovrSizei  RTSize;$/;"	m	struct:OVR::CAPI::GL::RenderParams
RTSize	Src/OVR_CAPI.h	/^    ovrSizei         RTSize;$/;"	m	struct:ovrRenderAPIConfigHeader_
RadToDegree	Src/Kernel/OVR_Math.h	/^T RadToDegree(T rads) { return rads * ((T)MATH_DOUBLE_RADTODEGREEFACTOR); }$/;"	f	namespace:OVR
Radians	Src/Kernel/OVR_Math.h	/^		Radians = 0,$/;"	e	enum:OVR::Angle::AngularUnits
Rank1	Src/Kernel/OVR_Math.h	/^	inline void Rank1(const Vector3<T> &a)$/;"	f	class:OVR::SymMat3
Rank1Add	Src/Kernel/OVR_Math.h	/^	inline void Rank1Add(const Vector3<T> &a)$/;"	f	class:OVR::SymMat3
Rank1Add	Src/Kernel/OVR_Math.h	/^	inline void Rank1Add(const Vector3<T> &a, const Vector3<T> &b)$/;"	f	class:OVR::Matrix3
Rank1Sub	Src/Kernel/OVR_Math.h	/^	inline void Rank1Sub(const Vector3<T> &a)$/;"	f	class:OVR::SymMat3
Rank1Sub	Src/Kernel/OVR_Math.h	/^	inline void Rank1Sub(const Vector3<T> &a, const Vector3<T> &b)$/;"	f	class:OVR::Matrix3
RasterizerDiscard	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint RasterizerDiscard;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
RawSensorData	Src/OVR_CAPI.h	/^    ovrSensorData  RawSensorData;$/;"	m	struct:ovrTrackingState_
RawSensorData	Src/Tracking/Tracking_SensorState.h	/^    SensorDataType    RawSensorData;$/;"	m	struct:OVR::Tracking::LocklessSensorState
RawSensorData	Src/Tracking/Tracking_SensorState.h	/^    SensorDataType RawSensorData;$/;"	m	class:OVR::Tracking::TrackingState
ReCalcMedian	Src/CAPI/CAPI_FrameTimeManager.h	/^    mutable bool    ReCalcMedian;$/;"	m	struct:OVR::CAPI::TimeDeltaCollector
Read	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::Read(uint8_t *pdestBuffer, int numBytes)$/;"	f	class:OVR::BufferedFile
Read	Src/Kernel/OVR_File.h	/^    int         Read(uint8_t *pbufer, int numBytes)$/;"	f	class:OVR::MemoryFile
Read	Src/Kernel/OVR_File.h	/^    virtual int         Read(uint8_t *pbuffer, int numBytes)          { return pFile->Read(pbuffer,numBytes); }   $/;"	f	class:OVR::DelegatedFile
Read	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::Read(uint8_t *pbuffer, int numBytes)$/;"	f	class:OVR::FILEFile
Read	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         Read(uint8_t * \/*pbuffer*\/, int \/*numBytes*\/)         { return -1; }$/;"	f	class:OVR::UnopenedFile
Read	Src/Net/OVR_BitStream.cpp	/^bool BitStream::Read( BitStream &bitStream )$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.cpp	/^bool BitStream::Read( BitStream &bitStream, BitSize_t numberOfBits )$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.cpp	/^bool BitStream::Read( BitStream *bitStream )$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.cpp	/^bool BitStream::Read( BitStream *bitStream, BitSize_t numberOfBits )$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.cpp	/^bool BitStream::Read( char* outByteArray, const unsigned int numberOfBytes )$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Read(OVR::String &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Read(bool &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Read(char *&varString)$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Read(templateType &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
Read	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Read(unsigned char *&varString)$/;"	f	class:OVR::Net::BitStream
Read	Src/OVR_Profile.cpp	/^void ProfileManager::Read()$/;"	f	class:OVR::ProfileManager
ReadAlignedBytes	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedBytes( unsigned char* inOutByteArray, const unsigned int numberOfBytesToRead )$/;"	f	class:OVR::Net::BitStream
ReadAlignedBytesSafe	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedBytesSafe( char *inOutByteArray, int &inputLength, const int maxBytesToRead )$/;"	f	class:OVR::Net::BitStream
ReadAlignedBytesSafe	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedBytesSafe( char *inOutByteArray, unsigned int &inputLength, const unsigned int maxBytesToRead )$/;"	f	class:OVR::Net::BitStream
ReadAlignedBytesSafeAlloc	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedBytesSafeAlloc( char ** outByteArray, unsigned int &inputLength, const unsigned int maxBytesToRead )$/;"	f	class:OVR::Net::BitStream
ReadAlignedBytesSafeAlloc	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedBytesSafeAlloc( char **outByteArray, int &inputLength, const unsigned int maxBytesToRead )$/;"	f	class:OVR::Net::BitStream
ReadAlignedVar16	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedVar16(char *inOutByteArray)$/;"	f	class:OVR::Net::BitStream
ReadAlignedVar32	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedVar32(char *inOutByteArray)$/;"	f	class:OVR::Net::BitStream
ReadAlignedVar8	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadAlignedVar8(char *inOutByteArray)$/;"	f	class:OVR::Net::BitStream
ReadAndCheckConsistency	Src/Kernel/OVR_Lockless.cpp	/^    int ReadAndCheckConsistency(int prevValue) const$/;"	f	struct:OVR::LocklessTest::TestData
ReadBegin	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    uint8_t*  ReadBegin()$/;"	f	class:OVR::CircularBuffer
ReadBit	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadBit( void )$/;"	f	class:OVR::Net::BitStream
ReadBits	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadBits( unsigned char *inOutByteArray, BitSize_t numberOfBitsToRead, const bool alignBitsToRight )$/;"	f	class:OVR::Net::BitStream
ReadBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadBitsFromIntegerRange( templateType &value, const templateType minimum, const templateType maximum, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
ReadBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadBitsFromIntegerRange( templateType &value, const templateType minimum, const templateType maximum, const int requiredBits, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
ReadBuffer	Src/Kernel/OVR_File.h	/^        ReadBuffer,$/;"	e	enum:OVR::BufferedFile::BufferModeType
ReadCasted	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadCasted( sourceType &value )$/;"	f	class:OVR::Net::BitStream
ReadCompressed	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadCompressed( unsigned char* inOutByteArray,$/;"	f	class:OVR::Net::BitStream
ReadCompressed	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressed(bool &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadCompressed	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressed(double &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadCompressed	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressed(float &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadCompressed	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressed(templateType &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadCompressedDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressedDelta(bool &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadCompressedDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadCompressedDelta(templateType &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadDelta(bool &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::ReadDelta(templateType &outTemplateVar)$/;"	f	class:OVR::Net::BitStream
ReadDouble	Src/Kernel/OVR_File.h	/^    inline double  ReadDouble()                { double v = 0.0; Read((uint8_t*)&v, 8); return Alg::ByteUtil::LEToSystem(v); }$/;"	f	class:OVR::File
ReadDoubleBE	Src/Kernel/OVR_File.h	/^    inline double  ReadDoubleBE()              { double v = 0.0; Read((uint8_t*)&v, 8); return Alg::ByteUtil::BEToSystem(v); }$/;"	f	class:OVR::File
ReadEnd	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^void CircularBuffer::ReadEnd(size_t size)$/;"	f	class:OVR::CircularBuffer
ReadFloat	Src/Kernel/OVR_File.h	/^    inline float   ReadFloat()                 { float v = 0.0f; Read((uint8_t*)&v, 4); return Alg::ByteUtil::LEToSystem(v); }$/;"	f	class:OVR::File
ReadFloat16	Src/Net/OVR_BitStream.cpp	/^bool BitStream::ReadFloat16( float &outFloat, float floatMin, float floatMax )$/;"	f	class:OVR::Net::BitStream
ReadFloatBE	Src/Kernel/OVR_File.h	/^    inline float   ReadFloatBE()               { float v = 0.0f; Read((uint8_t*)&v, 4); return Alg::ByteUtil::BEToSystem(v); }$/;"	f	class:OVR::File
ReadNormQuat	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadNormQuat( templateType &w, templateType &x, templateType &y, templateType &z)$/;"	f	class:OVR::Net::BitStream
ReadNormVector	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadNormVector( templateType &x, templateType &y, templateType &z )$/;"	f	class:OVR::Net::BitStream
ReadOrthMatrix	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadOrthMatrix($/;"	f	class:OVR::Net::BitStream
ReadSByte	Src/Kernel/OVR_File.h	/^    inline int8_t  ReadSByte()                 { return (int8_t)Alg::ByteUtil::LEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadSByteBE	Src/Kernel/OVR_File.h	/^    inline int8_t  ReadSByteBE()               { return (int8_t)Alg::ByteUtil::BEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadSInt16	Src/Kernel/OVR_File.h	/^    inline int16_t ReadSInt16()                { return (int16_t)Alg::ByteUtil::LEToSystem(PRead16());  }$/;"	f	class:OVR::File
ReadSInt16BE	Src/Kernel/OVR_File.h	/^    inline int16_t ReadSInt16BE()              { return (int16_t)Alg::ByteUtil::BEToSystem(PRead16());  }$/;"	f	class:OVR::File
ReadSInt32	Src/Kernel/OVR_File.h	/^    inline int32_t ReadSInt32()                { return (int32_t)Alg::ByteUtil::LEToSystem(PRead32());  }$/;"	f	class:OVR::File
ReadSInt32BE	Src/Kernel/OVR_File.h	/^    inline int32_t ReadSInt32BE()              { return (int32_t)Alg::ByteUtil::BEToSystem(PRead32());  }$/;"	f	class:OVR::File
ReadSInt64	Src/Kernel/OVR_File.h	/^    inline int64_t ReadSInt64()                { return (int64_t)Alg::ByteUtil::LEToSystem(PRead64());  }$/;"	f	class:OVR::File
ReadSInt64BE	Src/Kernel/OVR_File.h	/^    inline int64_t ReadSInt64BE()              { return (int64_t)Alg::ByteUtil::BEToSystem(PRead64());  }$/;"	f	class:OVR::File
ReadSInt8	Src/Kernel/OVR_File.h	/^    inline int8_t  ReadSInt8()                 { return (int8_t)Alg::ByteUtil::LEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadSInt8BE	Src/Kernel/OVR_File.h	/^    inline int8_t  ReadSInt8BE()               { return (int8_t)Alg::ByteUtil::BEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadUByte	Src/Kernel/OVR_File.h	/^    inline uint8_t ReadUByte()                 { return (uint8_t)Alg::ByteUtil::LEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadUByteBE	Src/Kernel/OVR_File.h	/^    inline uint8_t ReadUByteBE()               { return (uint8_t)Alg::ByteUtil::BEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadUInt16	Src/Kernel/OVR_File.h	/^    inline uint16_t  ReadUInt16()                { return (uint16_t)Alg::ByteUtil::LEToSystem(PRead16());  }$/;"	f	class:OVR::File
ReadUInt16BE	Src/Kernel/OVR_File.h	/^    inline uint16_t  ReadUInt16BE()              { return (uint16_t)Alg::ByteUtil::BEToSystem(PRead16());  }$/;"	f	class:OVR::File
ReadUInt32	Src/Kernel/OVR_File.h	/^    inline uint32_t  ReadUInt32()                { return (uint32_t)Alg::ByteUtil::LEToSystem(PRead32());  }$/;"	f	class:OVR::File
ReadUInt32BE	Src/Kernel/OVR_File.h	/^    inline uint32_t  ReadUInt32BE()              { return (uint32_t)Alg::ByteUtil::BEToSystem(PRead32());  }$/;"	f	class:OVR::File
ReadUInt64	Src/Kernel/OVR_File.h	/^    inline uint64_t  ReadUInt64()                { return (uint64_t)Alg::ByteUtil::LEToSystem(PRead64());  }$/;"	f	class:OVR::File
ReadUInt64BE	Src/Kernel/OVR_File.h	/^    inline uint64_t  ReadUInt64BE()              { return (uint64_t)Alg::ByteUtil::BEToSystem(PRead64());  }$/;"	f	class:OVR::File
ReadUInt8	Src/Kernel/OVR_File.h	/^    inline uint8_t ReadUInt8()                 { return (uint8_t)Alg::ByteUtil::LEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadUInt8BE	Src/Kernel/OVR_File.h	/^    inline uint8_t ReadUInt8BE()               { return (uint8_t)Alg::ByteUtil::BEToSystem(PRead8());    }$/;"	f	class:OVR::File
ReadVector	Src/Net/OVR_BitStream.h	/^bool BitStream::ReadVector( templateType &x, templateType &y, templateType &z )$/;"	f	class:OVR::Net::BitStream
ReadbackIndex	Src/Util/Util_LatencyTest2State.h	/^    int    ReadbackIndex;$/;"	m	struct:OVR::Util::FrameTimeRecord
ReadbackIndexToColor	Src/Util/Util_LatencyTest2Reader.cpp	/^unsigned char FrameTimeRecord::ReadbackIndexToColor(int readbackIndex)$/;"	f	class:OVR::Util::FrameTimeRecord
Realloc	Src/Kernel/OVR_Allocator.cpp	/^void* DefaultAllocator::Realloc(void* p, size_t newSize)$/;"	f	class:OVR::DefaultAllocator
Realloc	Src/Kernel/OVR_ContainerAllocator.h	/^    static void* Realloc(void* p, size_t newSize)  { return OVR_REALLOC(p, newSize); }$/;"	f	class:OVR::ContainerAllocatorBase
ReceivePayload	Src/Net/OVR_Session.h	/^struct ReceivePayload$/;"	s	namespace:OVR::Net
RecenterPose	Src/CAPI/CAPI_HMDState.cpp	/^void HMDState::RecenterPose()$/;"	f	class:OVR::CAPI::HMDState
RecenterPose	Src/Tracking/Tracking_SensorStateReader.cpp	/^void SensorStateReader::RecenterPose()$/;"	f	class:OVR::Tracking::SensorStateReader
RecordCount	Src/Util/Util_LatencyTest2State.h	/^        RecordCount = 4,$/;"	e	enum:OVR::Util::FrameTimeRecordSet::__anon14
RecordMask	Src/Util/Util_LatencyTest2State.h	/^        RecordMask  = RecordCount - 1$/;"	e	enum:OVR::Util::FrameTimeRecordSet::__anon14
RecordStateReader	Src/Util/Util_LatencyTest2Reader.h	/^    RecordStateReader()$/;"	f	class:OVR::Util::RecordStateReader
RecordStateReader	Src/Util/Util_LatencyTest2Reader.h	/^class RecordStateReader : public NewOverrideBase$/;"	c	namespace:OVR::Util
Records	Src/Util/Util_LatencyTest2State.h	/^    FrameTimeRecord Records[RecordCount];    $/;"	m	struct:OVR::Util::FrameTimeRecordSet
Rect	Src/Kernel/OVR_Math.h	/^    Rect() { }$/;"	f	class:OVR::Rect
Rect	Src/Kernel/OVR_Math.h	/^    Rect(T x1, T y1, T w1, T h1)                   : x(x1), y(y1), w(w1), h(h1) { }    $/;"	f	class:OVR::Rect
Rect	Src/Kernel/OVR_Math.h	/^    Rect(const CompatibleType& s) : x(s.Pos.x), y(s.Pos.y), w(s.Size.w), h(s.Size.h) {  }$/;"	f	class:OVR::Rect
Rect	Src/Kernel/OVR_Math.h	/^    Rect(const Size<T>& sz)                        : x(0), y(0), w(sz.w), h(sz.h) { }$/;"	f	class:OVR::Rect
Rect	Src/Kernel/OVR_Math.h	/^    Rect(const Vector2<T>& pos, const Size<T>& sz) : x(pos.x), y(pos.y), w(sz.w), h(sz.h) { }$/;"	f	class:OVR::Rect
Rect	Src/Kernel/OVR_Math.h	/^class Rect$/;"	c	namespace:OVR
Recti	Src/Kernel/OVR_Math.h	/^typedef Rect<int> Recti;$/;"	t	namespace:OVR
Recursive	Src/Kernel/OVR_ThreadsPthread.cpp	/^    bool          Recursive;$/;"	m	class:OVR::MutexImpl	file:
RecursiveAttr	Src/Kernel/OVR_Atomic.h	/^    static pthread_mutexattr_t RecursiveAttr;$/;"	m	class:OVR::Lock
RecursiveAttr	Src/Kernel/OVR_ThreadsPthread.cpp	/^pthread_mutexattr_t Lock::RecursiveAttr;$/;"	m	class:OVR::Lock	file:
RecursiveAttrInit	Src/Kernel/OVR_Atomic.h	/^    static bool                RecursiveAttrInit;$/;"	m	class:OVR::Lock
RecursiveAttrInit	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Lock::RecursiveAttrInit = 0;$/;"	m	class:OVR::Lock	file:
RecvBuf	Src/Net/OVR_Unix_Socket.h	/^	UByte* RecvBuf;$/;"	m	class:OVR::Net::UDPSocket
RecvBufSize	Src/Net/OVR_Unix_Socket.h	/^	static const int RecvBufSize = 1048576;$/;"	m	class:OVR::Net::UDPSocket
RefCount	Src/Kernel/OVR_RefCount.h	/^    mutable int RefCount;$/;"	m	class:OVR::RefCountNTSImplCore
RefCount	Src/Kernel/OVR_RefCount.h	/^   volatile int RefCount;$/;"	m	class:OVR::RefCountImplCore
RefCount	Src/Kernel/OVR_String.h	/^        volatile int32_t RefCount;$/;"	m	struct:OVR::String::DataDesc
RefCountBase	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE RefCountBase() : RefCountBaseStatImpl<RefCountImpl>() { }    $/;"	f	class:OVR::RefCountBase
RefCountBase	Src/Kernel/OVR_RefCount.h	/^class RefCountBase : public RefCountBaseStatImpl<RefCountImpl>$/;"	c	namespace:OVR
RefCountBaseNTS	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE RefCountBaseNTS() : RefCountBaseStatImpl<RefCountNTSImpl>() { }    $/;"	f	class:OVR::RefCountBaseNTS
RefCountBaseNTS	Src/Kernel/OVR_RefCount.h	/^class RefCountBaseNTS : public RefCountBaseStatImpl<RefCountNTSImpl>$/;"	c	namespace:OVR
RefCountBaseStatImpl	Src/Kernel/OVR_RefCount.h	/^    RefCountBaseStatImpl() { }$/;"	f	class:OVR::RefCountBaseStatImpl
RefCountBaseStatImpl	Src/Kernel/OVR_RefCount.h	/^class RefCountBaseStatImpl : public Base$/;"	c	namespace:OVR
RefCountBaseStatVImpl	Src/Kernel/OVR_RefCount.h	/^	RefCountBaseStatVImpl() { }$/;"	f	class:OVR::RefCountBaseStatVImpl
RefCountBaseStatVImpl	Src/Kernel/OVR_RefCount.h	/^class RefCountBaseStatVImpl : virtual public Base$/;"	c	namespace:OVR
RefCountBaseV	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE RefCountBaseV() : RefCountBaseStatVImpl<RefCountVImpl>() { }    $/;"	f	class:OVR::RefCountBaseV
RefCountBaseV	Src/Kernel/OVR_RefCount.h	/^class RefCountBaseV : virtual public RefCountBaseStatVImpl<RefCountVImpl>$/;"	c	namespace:OVR
RefCountImpl	Src/Kernel/OVR_RefCount.h	/^class RefCountImpl : public RefCountImplCore$/;"	c	namespace:OVR
RefCountImplCore	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE RefCountImplCore() : RefCount(1) { }$/;"	f	class:OVR::RefCountImplCore
RefCountImplCore	Src/Kernel/OVR_RefCount.h	/^class RefCountImplCore$/;"	c	namespace:OVR
RefCountNTSImpl	Src/Kernel/OVR_RefCount.h	/^class RefCountNTSImpl : public RefCountNTSImplCore$/;"	c	namespace:OVR
RefCountNTSImplCore	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE RefCountNTSImplCore() : RefCount(1) { }$/;"	f	class:OVR::RefCountNTSImplCore
RefCountNTSImplCore	Src/Kernel/OVR_RefCount.h	/^class RefCountNTSImplCore$/;"	c	namespace:OVR
RefCountVImpl	Src/Kernel/OVR_RefCount.h	/^class RefCountVImpl : virtual public RefCountImplCore$/;"	c	namespace:OVR
References	Src/Kernel/OVR_Observer.h	/^	Array< Ptr< ThisType > > References; \/\/ List of observed or observing objects$/;"	m	class:OVR::Observer
References	Src/Kernel/OVR_SharedMemory.cpp	/^        int    References;$/;"	m	class:OVR::FakeMemoryBlock	file:
ReflectionData	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    const ShaderBase::Uniform* ReflectionData;$/;"	m	struct:OVR::CAPI::GL::ShaderInfo	file:
ReflectionSize	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    size_t ReflectionSize;$/;"	m	struct:OVR::CAPI::GL::ShaderInfo	file:
RegionSize	Src/Kernel/OVR_SharedMemory.h	/^	static const int RegionSize = (int)sizeof(SharedType);$/;"	m	class:OVR::ISharedObject
RegisterBlockingFunction	Src/Net/OVR_RPC1.cpp	/^bool RPC1::RegisterBlockingFunction(OVR::String uniqueID, RPCDelegate blockingFunction)$/;"	f	class:OVR::Net::Plugins::RPC1
RegisterPostDistortionCallback	Src/CAPI/CAPI_DistortionRenderer.h	/^    void RegisterPostDistortionCallback(PostDistortionCallback postDistortionCallback)$/;"	f	class:OVR::CAPI::DistortionRenderer
RegisterSlot	Src/Net/OVR_RPC1.cpp	/^void RPC1::RegisterSlot(OVR::String sharedIdentifier,  OVR::Observer<RPCSlot>* rpcSlotObserver )$/;"	f	class:OVR::Net::Plugins::RPC1
RegisteredPostDistortionCallback	Src/CAPI/CAPI_DistortionRenderer.h	/^    PostDistortionCallback  RegisteredPostDistortionCallback;$/;"	m	class:OVR::CAPI::DistortionRenderer
Release	Src/Kernel/OVR_RefCount.cpp	/^void    RefCountImpl::Release()$/;"	f	class:OVR::RefCountImpl
Release	Src/Kernel/OVR_RefCount.cpp	/^void    RefCountNTSImpl::Release() const$/;"	f	class:OVR::RefCountNTSImpl
Release	Src/Kernel/OVR_RefCount.cpp	/^void    RefCountVImpl::Release()$/;"	f	class:OVR::RefCountVImpl
Release	Src/Kernel/OVR_String.h	/^        void    Release()$/;"	f	struct:OVR::String::DataDesc
ReleaseAll	Src/Kernel/OVR_Observer.h	/^	void ReleaseAll()$/;"	f	class:OVR::ObserverScope
ReleaseLock	Src/Kernel/OVR_Atomic.cpp	/^void SharedLock::ReleaseLock(Lock* plock)$/;"	f	class:OVR::SharedLock
ReleaseSync	Src/Kernel/OVR_Atomic.h	/^    struct ReleaseSync { inline ReleaseSync() { } };$/;"	f	struct:OVR::AtomicOpsRawBase::ReleaseSync
ReleaseSync	Src/Kernel/OVR_Atomic.h	/^    struct ReleaseSync { inline ReleaseSync() { } };$/;"	s	struct:OVR::AtomicOpsRawBase
ReliefInMeters	Src/OVR_Stereo.h	/^        float               ReliefInMeters;$/;"	m	struct:OVR::HmdRenderInfo::EyeConfig
RemoteAddress	Src/Net/OVR_Session.h	/^	SockAddr           RemoteAddress;$/;"	m	struct:OVR::Net::ConnectParametersBerkleySocket
RemoteMajorVersion	Src/Net/OVR_Session.h	/^    int              RemoteMajorVersion;$/;"	m	class:OVR::Net::Connection
RemoteMinorVersion	Src/Net/OVR_Session.h	/^    int              RemoteMinorVersion;$/;"	m	class:OVR::Net::Connection
RemoteMode	Src/Kernel/OVR_SharedMemory.h	/^	enum RemoteMode$/;"	g	class:OVR::SharedMemory
RemoteMode_ReadOnly	Src/Kernel/OVR_SharedMemory.h	/^		RemoteMode_ReadOnly,		\/\/ Other processes will need to open in read-only mode$/;"	e	enum:OVR::SharedMemory::RemoteMode
RemoteMode_ReadWrite	Src/Kernel/OVR_SharedMemory.h	/^		RemoteMode_ReadWrite		\/\/ Other processes can open in read-write mode$/;"	e	enum:OVR::SharedMemory::RemoteMode
RemotePatchVersion	Src/Net/OVR_Session.h	/^    int              RemotePatchVersion;$/;"	m	class:OVR::Net::Connection
Remove	Src/Kernel/OVR_Array.h	/^        void Remove()$/;"	f	class:OVR::ArrayBase::Iterator
Remove	Src/Kernel/OVR_Hash.h	/^        void Remove()$/;"	f	struct:OVR::HashSetBase::Iterator
Remove	Src/Kernel/OVR_Hash.h	/^    inline void     Remove(const C& key)$/;"	f	class:OVR::Hash
Remove	Src/Kernel/OVR_Hash.h	/^    void Remove(const CRef& key)$/;"	f	class:OVR::HashSetBase
Remove	Src/Kernel/OVR_List.h	/^    static void Remove(ValueType* p)$/;"	f	class:OVR::List
Remove	Src/Kernel/OVR_String.cpp	/^void    String::Remove(size_t posAt, intptr_t removeLength)$/;"	f	class:OVR::String
RemoveAlt	Src/Kernel/OVR_Hash.h	/^        void RemoveAlt(const K& key)$/;"	f	struct:OVR::HashSetBase::Iterator
RemoveAlt	Src/Kernel/OVR_Hash.h	/^    inline void     RemoveAlt(const K& key)$/;"	f	class:OVR::Hash
RemoveAlt	Src/Kernel/OVR_Hash.h	/^    void RemoveAlt(const K& key)$/;"	f	class:OVR::HashSetBase
RemoveAt	Src/Kernel/OVR_Array.h	/^    void    RemoveAt(size_t index)$/;"	f	class:OVR::ArrayBase
RemoveAtUnordered	Src/Kernel/OVR_Array.h	/^    void    RemoveAtUnordered(size_t index)$/;"	f	class:OVR::ArrayBase
RemoveLast	Src/OVR_JSON.cpp	/^void JSON::RemoveLast()$/;"	f	class:OVR::JSON
RemoveMultipleAt	Src/Kernel/OVR_Array.h	/^    void    RemoveMultipleAt(size_t index, size_t num)$/;"	f	class:OVR::ArrayBase
RemoveNode	Src/Kernel/OVR_List.h	/^    void    RemoveNode()$/;"	f	struct:OVR::ListNode
RemoveRunningThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^    static void RemoveRunningThread(Thread *pthread)$/;"	f	class:OVR::ThreadList
RemoveSessionListener	Src/Net/OVR_Session.cpp	/^void Session::RemoveSessionListener(SessionListener* se)$/;"	f	class:OVR::Net::Session
RemoveSubject	Src/Kernel/OVR_Observer.h	/^	void RemoveSubject(OVR::String key)$/;"	f	class:OVR::ObserverHash
RemoveUser	Src/OVR_Profile.cpp	/^bool ProfileManager::RemoveUser(const char* user)$/;"	f	class:OVR::ProfileManager
Render	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::Render(ovrEyeType eye, const ovrTexture* eyeTexture)$/;"	f	class:OVR::CAPI::HSWDisplay
Render	Src/Util/Util_Render_Stereo.cpp	/^namespace OVR { namespace Util { namespace Render {$/;"	n	namespace:OVR::Util	file:
Render	Src/Util/Util_Render_Stereo.h	/^namespace OVR { namespace Util { namespace Render {$/;"	n	namespace:OVR::Util
RenderAPI	Src/CAPI/CAPI_DistortionRenderer.h	/^    const ovrRenderAPIType  RenderAPI;$/;"	m	class:OVR::CAPI::DistortionRenderer
RenderAPIThreadChecker	Src/CAPI/CAPI_HMDState.h	/^    ThreadChecker           RenderAPIThreadChecker;$/;"	m	class:OVR::CAPI::HMDState
RenderAPIType	Src/CAPI/CAPI_HSWDisplay.h	/^    const ovrRenderAPIType RenderAPIType;           \/\/ e.g. ovrRenderAPI_D3D11$/;"	m	class:OVR::CAPI::HSWDisplay
RenderEnabled	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   RenderEnabled;           \/\/ If true then we handle rendering when Render is called. Else we skip it and assume the application is otherwise handling it itself.$/;"	m	class:OVR::CAPI::HSWDisplay
RenderIMUTimeSeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^        double  RenderIMUTimeSeconds;$/;"	m	struct:OVR::CAPI::FrameLatencyTracker::FrameTimeRecordEx
RenderIMUTimeSeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^    double              RenderIMUTimeSeconds;$/;"	m	class:OVR::CAPI::FrameTimeManager
RenderInfo	Src/CAPI/CAPI_FrameTimeManager.h	/^    HmdRenderInfo       RenderInfo;$/;"	m	class:OVR::CAPI::FrameTimeManager
RenderInfo	Src/CAPI/CAPI_HMDRenderState.h	/^    HmdRenderInfo           RenderInfo;$/;"	m	struct:OVR::CAPI::HMDRenderState
RenderInfo	Src/Util/Util_Render_Stereo.h	/^    HmdRenderInfo       RenderInfo;$/;"	m	class:OVR::Util::Render::TimewarpMachine
RenderInternal	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void RenderInternal(ovrEyeType, const ovrTexture*) {}$/;"	f	class:OVR::CAPI::HSWDisplay
RenderInternal	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::RenderInternal(ovrEyeType eye, const ovrTexture* eyeTexture)$/;"	f	class:OVR::CAPI::GL::HSWDisplay
RenderLatencySeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^    double                RenderLatencySeconds;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
RenderMode	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint RenderMode;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
RenderParams	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        OVR::CAPI::GL::RenderParams        RenderParams;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
RenderParams	Src/CAPI/GL/CAPI_GL_Util.h	/^struct RenderParams$/;"	s	namespace:OVR::CAPI::GL
RenderState	Src/CAPI/CAPI_HMDState.h	/^    HMDRenderState          RenderState;$/;"	m	class:OVR::CAPI::HMDState
RenderState	Src/CAPI/CAPI_HSWDisplay.h	/^    const HMDRenderState&  RenderState;             \/\/ Information about the rendering setup.$/;"	m	class:OVR::CAPI::HSWDisplay
RenderViewport	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        Recti                     RenderViewport;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
RenderViewport	Src/OVR_CAPI.h	/^    ovrRecti         RenderViewport;  \/\/ Pixel viewport in texture that holds eye image.$/;"	m	struct:ovrTextureHeader_
RenderedProjection	Src/OVR_Stereo.h	/^    Matrix4f                RenderedProjection;     \/\/ Projection matrix used with this eye.$/;"	m	struct:OVR::StereoEyeParams
RenderedViewport	Src/OVR_Stereo.h	/^    Recti                   RenderedViewport;       \/\/ Viewport that we render the standard scene to.$/;"	m	struct:OVR::StereoEyeParams
RenderedViewport	Src/Util/Util_Render_Stereo.h	/^    Recti               RenderedViewport;$/;"	m	struct:OVR::Util::Render::ViewportScaleAndOffset
RenderingConfigured	Src/CAPI/CAPI_HMDState.h	/^    bool                    RenderingConfigured;$/;"	m	class:OVR::CAPI::HMDState
RendertargetSize	Src/Util/Util_Render_Stereo.h	/^    Sizei              RendertargetSize;$/;"	m	class:OVR::Util::Render::StereoConfig
ReplaceNodeWith	Src/Kernel/OVR_List.h	/^    void    ReplaceNodeWith(T* pnew)$/;"	f	struct:OVR::ListNode
Reserve	Src/Kernel/OVR_Array.h	/^    void    Reserve(size_t newCapacity)  $/;"	f	class:OVR::ArrayBase
Reserve	Src/Kernel/OVR_Array.h	/^    void Reserve(size_t newCapacity)$/;"	f	struct:OVR::ArrayDataBase
Reserve	Src/Kernel/OVR_String.cpp	/^void    StringBuffer::Reserve(size_t _size)$/;"	f	class:OVR::StringBuffer
Reset	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameLatencyTracker::Reset()$/;"	f	class:OVR::CAPI::FrameLatencyTracker
Reset	Src/Kernel/OVR_KeyCodes.h	/^    void Reset() { States = 0; }$/;"	f	class:OVR::KeyModifiers
Reset	Src/Net/OVR_BitStream.cpp	/^void BitStream::Reset( void )$/;"	f	class:OVR::Net::BitStream
Reset	Src/Util/Util_Render_Stereo.cpp	/^void TimewarpMachine::Reset(HmdRenderInfo& renderInfo, bool vsyncEnabled, double timeNow)$/;"	f	class:OVR::Util::Render::TimewarpMachine
ResetEvent	Src/Kernel/OVR_Threads.h	/^    void  ResetEvent()$/;"	f	class:OVR::Event
ResetFrameTiming	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::ResetFrameTiming(unsigned frameIndex,$/;"	f	class:OVR::CAPI::FrameTimeManager
ResetReadPointer	Src/Net/OVR_BitStream.cpp	/^void BitStream::ResetReadPointer( void )$/;"	f	class:OVR::Net::BitStream
ResetTracking	Src/CAPI/CAPI_HMDState.cpp	/^void HMDState::ResetTracking()$/;"	f	class:OVR::CAPI::HMDState
ResetWritePointer	Src/Net/OVR_BitStream.cpp	/^void BitStream::ResetWritePointer( void )$/;"	f	class:OVR::Net::BitStream
Resize	Src/Kernel/OVR_Array.h	/^    void    Resize(size_t newSize)       { Data.Resize(newSize); }$/;"	f	class:OVR::ArrayBase
Resize	Src/Kernel/OVR_Array.h	/^    void Resize(size_t newSize)$/;"	f	struct:OVR::ArrayData
Resize	Src/Kernel/OVR_Array.h	/^    void Resize(size_t newSize)$/;"	f	struct:OVR::ArrayDataCC
Resize	Src/Kernel/OVR_Hash.h	/^	inline void    Resize(size_t n)              { mHash.Resize(n); }$/;"	f	class:OVR::Hash
Resize	Src/Kernel/OVR_Hash.h	/^    void Resize(size_t n)    $/;"	f	class:OVR::HashSet
Resize	Src/Kernel/OVR_Hash.h	/^    void Resize(size_t n)    $/;"	f	class:OVR::HashSetBase
Resize	Src/Kernel/OVR_String.cpp	/^void    StringBuffer::Resize(size_t _size)$/;"	f	class:OVR::StringBuffer
ResizeNoConstruct	Src/Kernel/OVR_Array.h	/^    void ResizeNoConstruct(size_t newSize)$/;"	f	struct:OVR::ArrayDataBase
Resolution	Src/OVR_CAPI.h	/^    ovrSizei    Resolution;$/;"	m	struct:ovrHmdDesc_
ResolutionInPixels	Src/OVR_Stereo.h	/^	Size<int>   ResolutionInPixels;$/;"	m	class:OVR::HMDInfo
ResolutionInPixels	Src/OVR_Stereo.h	/^    Size<int>   ResolutionInPixels;$/;"	m	struct:OVR::HmdRenderInfo
Restore	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::GraphicsState::Restore()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
RestoreGraphicsState	Src/CAPI/CAPI_DistortionRenderer.h	/^	void RestoreGraphicsState() { if (!(RState.DistortionCaps & ovrDistortionCap_NoRestore)) GfxState->Restore(); }$/;"	f	class:OVR::CAPI::DistortionRenderer
Results	Src/CAPI/CAPI_LatencyStatistics.h	/^    LocklessUpdater<LatencyStatisticsResults, LatencyStatisticsResults> Results;$/;"	m	class:OVR::CAPI::LagStatsCalculator
Resume	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::Resume()$/;"	f	class:OVR::Thread
ReturnArg	Src/Kernel/OVR_RefCount.h	/^    static C* ReturnArg(void* p) { return (C*)ReturnArg0(p); }$/;"	f	class:OVR::Ptr
ReturnArg0	Src/Kernel/OVR_RefCount.cpp	/^void* ReturnArg0(void* p)$/;"	f	namespace:OVR
ReverseArray	Src/Kernel/OVR_Alg.h	/^template<class Array> void ReverseArray(Array& arr)$/;"	f	namespace:OVR::Alg
ReverseBytes	Src/Net/OVR_BitStream.cpp	/^void BitStream::ReverseBytes(unsigned char *inByteArray, unsigned char *inOutByteArray, const unsigned int length)$/;"	f	class:OVR::Net::BitStream
ReverseBytesInPlace	Src/Net/OVR_BitStream.cpp	/^void BitStream::ReverseBytesInPlace(unsigned char *inOutData,const unsigned int length)$/;"	f	class:OVR::Net::BitStream
Right	Src/Util/Util_Render_Stereo.h	/^    ViewportScaleAndOffset  Right;$/;"	m	struct:OVR::Util::Render::ViewportScaleAndOffsetBothEyes
RightHandedProjection	Src/Util/Util_Render_Stereo.h	/^    bool               RightHandedProjection;$/;"	m	class:OVR::Util::Render::StereoConfig
RightTan	Src/OVR_CAPI.h	/^    float RightTan;$/;"	m	struct:ovrFovPort_
RightTan	Src/OVR_Stereo.h	/^    float RightTan;$/;"	m	struct:OVR::FovPort
Root	Src/Kernel/OVR_List.h	/^    ListNode<B> Root;$/;"	m	class:OVR::List
RootThreadId	Src/Kernel/OVR_ThreadsPthread.cpp	/^    pthread_t                             RootThreadId;$/;"	m	class:OVR::ThreadList	file:
Rotate	Src/Kernel/OVR_Math.h	/^    Vector3<T> Rotate(const Vector3<T>& v) const$/;"	f	class:OVR::Pose
Rotate	Src/Kernel/OVR_Math.h	/^    Vector3<T> Rotate(const Vector3<T>& v) const$/;"	f	class:OVR::Quat
RotateCCW90	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    bool                RotateCCW90;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
RotateDirection	Src/Kernel/OVR_Math.h	/^enum RotateDirection$/;"	g	namespace:OVR
Rotate_CCW	Src/Kernel/OVR_Math.h	/^    Rotate_CCW = 1,$/;"	e	enum:OVR::RotateDirection
Rotate_CW	Src/Kernel/OVR_Math.h	/^    Rotate_CW  = -1 $/;"	e	enum:OVR::RotateDirection
Rotation	Src/Displays/OVR_Display.h	/^	const uint32_t	    Rotation;$/;"	m	class:OVR::Display
Rotation	Src/Kernel/OVR_Math.h	/^    Quat<T>    Rotation;$/;"	m	class:OVR::Pose
Rotation	Src/OVR_Stereo.h	/^	int Rotation;$/;"	m	struct:OVR::Win32ShimInfo
RotationAxis	Src/Kernel/OVR_Math.h	/^    static Matrix4 RotationAxis(Axis A, T angle, RotateDirection d, HandedSystem s)$/;"	f	class:OVR::Matrix4
RotationRate	Src/Sensors/OVR_DeviceConstants.h	/^    Vector3f RotationRate;     \/\/ in rad\/s$/;"	m	class:OVR::SensorDataType
RotationX	Src/Kernel/OVR_Math.h	/^    static Matrix4 RotationX(T angle)$/;"	f	class:OVR::Matrix4
RotationY	Src/Kernel/OVR_Math.h	/^    static Matrix4 RotationY(T angle)$/;"	f	class:OVR::Matrix4
RotationZ	Src/Kernel/OVR_Math.h	/^    static Matrix4 RotationZ(T angle)$/;"	f	class:OVR::Matrix4
Row	Src/Kernel/OVR_Math.h	/^	inline Vector3<T> Row(int r) const$/;"	f	class:OVR::Matrix3
Run	Src/Kernel/OVR_Lockless.cpp	/^    virtual int Run()$/;"	f	class:OVR::LocklessTest::Consumer	file:
Run	Src/Kernel/OVR_Lockless.cpp	/^    virtual int Run()$/;"	f	class:OVR::LocklessTest::Producer	file:
Run	Src/Kernel/OVR_ThreadsPthread.cpp	/^int    Thread::Run()$/;"	f	class:OVR::Thread
Run	Src/Service/Service_NetClient.cpp	/^int NetClient::Run()$/;"	f	class:OVR::Service::NetClient
Running	Src/Kernel/OVR_Threads.h	/^        Running     = 1,$/;"	e	enum:OVR::Thread::ThreadState
SByte	Src/Kernel/OVR_Types.h	/^typedef char            SByte;  \/\/ 8 bit Integer (Byte)$/;"	t	namespace:OVR
SByte	Src/Kernel/OVR_Types.h	/^typedef int             SByte  __attribute__((__mode__ (__QI__)));$/;"	t	namespace:OVR
SByte	Src/Kernel/OVR_Types.h	/^typedef int8_t          SByte;$/;"	t	namespace:OVR
SDBM_Hash	Src/Kernel/OVR_Hash.h	/^    static OVR_FORCE_INLINE size_t SDBM_Hash(const void* data_in, size_t size, size_t seed = 5381)     $/;"	f	class:OVR::FixedSizeHash
SDKRendered	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   SDKRendered;             \/\/ If true then the display is being rendered by the SDK as opposed to the application.$/;"	m	class:OVR::CAPI::HSWDisplay
SDKWindow	Src/Displays/OVR_Linux_SDKWindow.cpp	/^SDKWindow::SDKWindow(const ovrHmd& hmd) :$/;"	f	class:OVR::SDKWindow
SDKWindow	Src/Displays/OVR_Linux_SDKWindow.h	/^class SDKWindow$/;"	c	namespace:OVR
SFerror	Src/Kernel/OVR_FileFILE.cpp	/^static int SFerror ()$/;"	f	namespace:OVR
SHARED_MAJOR	Makefile	/^SHARED_MAJOR = 0$/;"	m
SHARED_MINOR	Makefile	/^SHARED_MINOR = 1$/;"	m
SHARED_RELEASE	Makefile	/^SHARED_RELEASE = 1$/;"	m
SHARED_TARGET	Makefile	/^SHARED_TARGET	= .\/Lib\/Linux\/$(RELEASETYPE)\/$(SYSARCH)\/libovr.so$/;"	m
SINGLE_PROCESS	Makefile	/^SINGLE_PROCESS    ?= 0$/;"	m
SI_NOREFL	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	61;"	d	file:
SI_REFL__	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	62;"	d	file:
SInt16	Src/Kernel/OVR_Types.h	/^typedef int             SInt16 __attribute__((__mode__ (__HI__)));$/;"	t	namespace:OVR
SInt16	Src/Kernel/OVR_Types.h	/^typedef int16_t         SInt16;$/;"	t	namespace:OVR
SInt16	Src/Kernel/OVR_Types.h	/^typedef short           SInt16; \/\/ 16 bit Integer (Word)$/;"	t	namespace:OVR
SInt32	Src/Kernel/OVR_Types.h	/^typedef int             SInt32 __attribute__((__mode__ (__SI__)));$/;"	t	namespace:OVR
SInt32	Src/Kernel/OVR_Types.h	/^typedef int32_t         SInt32;$/;"	t	namespace:OVR
SInt32	Src/Kernel/OVR_Types.h	/^typedef long            SInt32; \/\/ 32 bit Integer$/;"	t	namespace:OVR
SInt64	Src/Kernel/OVR_Types.h	/^typedef __int64         SInt64; \/\/ 64 bit Integer (QWord)$/;"	t	namespace:OVR
SInt64	Src/Kernel/OVR_Types.h	/^typedef int             SInt64 __attribute__((__mode__ (__DI__)));$/;"	t	namespace:OVR
SInt64	Src/Kernel/OVR_Types.h	/^typedef int64_t         SInt64;$/;"	t	namespace:OVR
SMutex	Src/Kernel/OVR_ThreadsPthread.cpp	/^    pthread_mutex_t     SMutex;$/;"	m	class:OVR::WaitConditionImpl	file:
SMutex	Src/Kernel/OVR_ThreadsPthread.cpp	/^    pthread_mutex_t   SMutex;$/;"	m	class:OVR::MutexImpl	file:
SOCKET_ERROR	Src/Net/OVR_Socket.h	/^static const int SOCKET_ERROR = -1;$/;"	m	namespace:OVR::Net
SPInt	Src/Kernel/OVR_Types.h	/^typedef ptrdiff_t       SPInt;$/;"	t	namespace:OVR
SRGB	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint SRGB;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
STATIC_TARGET	Makefile	/^STATIC_TARGET = .\/Lib\/Linux\/$(RELEASETYPE)\/$(SYSARCH)\/libovr.a$/;"	m
SVPM_Density	Src/Util/Util_Render_Stereo.h	/^        SVPM_Density,$/;"	e	enum:OVR::Util::Render::StereoConfig::SetViewportModeEnum
SVPM_Size	Src/Util/Util_Render_Stereo.h	/^        SVPM_Size,$/;"	e	enum:OVR::Util::Render::StereoConfig::SetViewportModeEnum
SVPM_Viewport	Src/Util/Util_Render_Stereo.h	/^        SVPM_Viewport,$/;"	e	enum:OVR::Util::Render::StereoConfig::SetViewportModeEnum
SYSARCH	Makefile	/^SYSARCH       = i386$/;"	m
SYSARCH	Makefile	/^SYSARCH       = x86_64$/;"	m
SampleMask	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint SampleMask;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
SampleMode	Src/CAPI/GL/CAPI_GL_Util.h	/^enum SampleMode$/;"	g	namespace:OVR::CAPI::GL
SampleWaitType	Src/CAPI/CAPI_FrameTimeManager.h	/^    enum SampleWaitType {$/;"	g	class:OVR::CAPI::FrameLatencyTracker
SampleWait_Match	Src/CAPI/CAPI_FrameTimeManager.h	/^        SampleWait_Match   \/\/ We are issuing & matching colors.$/;"	e	enum:OVR::CAPI::FrameLatencyTracker::SampleWaitType
SampleWait_Zeroes	Src/CAPI/CAPI_FrameTimeManager.h	/^        SampleWait_Zeroes, \/\/ We are waiting for a record with all zeros.$/;"	e	enum:OVR::CAPI::FrameLatencyTracker::SampleWaitType
Sample_AddressMask	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_AddressMask  =12,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Anisotropic	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Anisotropic  = 2,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Clamp	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Clamp        = 4,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_ClampBorder	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_ClampBorder  = 8, \/\/ If unsupported Clamp is used instead.$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Count	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Count        =13,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_FilterMask	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_FilterMask   = 3,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Linear	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Linear       = 0,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Nearest	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Nearest      = 1,$/;"	e	enum:OVR::CAPI::GL::SampleMode
Sample_Repeat	Src/CAPI/GL/CAPI_GL_Util.h	/^    Sample_Repeat       = 0,$/;"	e	enum:OVR::CAPI::GL::SampleMode
SanitizeProductName	Src/OVR_Profile.cpp	/^String ProfileDeviceKey::SanitizeProductName(String productName)$/;"	f	class:OVR::ProfileDeviceKey
Save	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::GraphicsState::Save()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Save	Src/OVR_JSON.cpp	/^bool JSON::Save(const char* path)$/;"	f	class:OVR::JSON
Save	Src/OVR_Profile.cpp	/^void ProfileManager::Save()$/;"	f	class:OVR::ProfileManager
SaveDrawColor	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameLatencyTracker::SaveDrawColor(unsigned char drawColor, double endFrameTime,$/;"	f	class:OVR::CAPI::FrameLatencyTracker
SaveGraphicsState	Src/CAPI/CAPI_DistortionRenderer.h	/^	void SaveGraphicsState() { if (!(RState.DistortionCaps & ovrDistortionCap_NoRestore)) GfxState->Save(); }$/;"	f	class:OVR::CAPI::DistortionRenderer
SaveLensConfig	Src/OVR_Stereo.cpp	/^bool SaveLensConfig ( uint8_t *pbuffer, int bufferSizeInBytes, LensConfig const &config )$/;"	f	namespace:OVR
SaveLensConfigSizeInBytes	Src/OVR_Stereo.cpp	/^int SaveLensConfigSizeInBytes ( LensConfig const &config )$/;"	f	namespace:OVR
SavedActiveTexture	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedActiveTexture;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedBoundFrameBuffer	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    GLint SavedBoundFrameBuffer;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedBoundTexture	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedBoundTexture;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedClearColor	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLfloat SavedClearColor[4];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedCullFace	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedCullFace;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedDepthTest	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedDepthTest;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedProgram	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedProgram;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedVertexArray	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedVertexArray;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SavedViewport	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	GLint SavedViewport[4];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
Scale	Src/OVR_Stereo.h	/^    Vector2f Scale;$/;"	m	struct:OVR::ScaleAndOffset2D
ScaleAndOffset2D	Src/OVR_Stereo.h	/^    ScaleAndOffset2D(float sx = 0.0f, float sy = 0.0f, float ox = 0.0f, float oy = 0.0f)$/;"	f	struct:OVR::ScaleAndOffset2D
ScaleAndOffset2D	Src/OVR_Stereo.h	/^struct ScaleAndOffset2D$/;"	s	namespace:OVR
Scaling	Src/Kernel/OVR_Math.h	/^    static Matrix4 Scaling(T s)$/;"	f	class:OVR::Matrix4
Scaling	Src/Kernel/OVR_Math.h	/^    static Matrix4 Scaling(T x, T y, T z)$/;"	f	class:OVR::Matrix4
Scaling	Src/Kernel/OVR_Math.h	/^    static Matrix4 Scaling(const Vector3<T>& v)$/;"	f	class:OVR::Matrix4
ScanFilePath	Src/Kernel/OVR_String_PathUtil.cpp	/^void ScanFilePath(const char* url, const char** pfilename, const char** pext)$/;"	f	namespace:OVR
ScanPathProtocol	Src/Kernel/OVR_String_PathUtil.cpp	/^const char* ScanPathProtocol(const char* url)$/;"	f	namespace:OVR
ScanoutMidpointSeconds	Src/OVR_CAPI.h	/^    double          ScanoutMidpointSeconds;$/;"	m	struct:ovrFrameTiming_
ScissorTest	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint ScissorTest;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
Scope	Src/CAPI/CAPI_HMDState.h	/^        Scope(ThreadChecker*, const char *) { }$/;"	f	struct:OVR::CAPI::ThreadChecker::Scope
Scope	Src/CAPI/CAPI_HMDState.h	/^    struct Scope$/;"	s	class:OVR::CAPI::ThreadChecker
ScreenDelay	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              ScreenDelay;$/;"	m	struct:OVR::CAPI::FrameTimeManager::TimingInputs
ScreenGapSizeInMeters	Src/OVR_Stereo.h	/^	float       ScreenGapSizeInMeters;$/;"	m	class:OVR::HMDInfo
ScreenGapSizeInMeters	Src/OVR_Stereo.h	/^    float       ScreenGapSizeInMeters;$/;"	m	struct:OVR::HmdRenderInfo
ScreenLatencyTracker	Src/CAPI/CAPI_FrameTimeManager.h	/^    FrameLatencyTracker ScreenLatencyTracker;$/;"	m	class:OVR::CAPI::FrameTimeManager
ScreenPosNDC	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Vector2f ScreenPosNDC;$/;"	m	struct:OVR::CAPI::GL::DistortionVertex	file:
ScreenPosNDC	Src/OVR_CAPI.h	/^    ovrVector2f ScreenPosNDC;    \/\/ [-1,+1],[-1,+1] over the entire framebuffer.$/;"	m	struct:ovrDistortionVertex_
ScreenPosNDC	Src/Util/Util_Render_Stereo.h	/^    Vector2f    ScreenPosNDC;$/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
ScreenPosNDC	Src/Util/Util_Render_Stereo.h	/^    Vector2f    ScreenPosNDC;$/;"	m	struct:OVR::Util::Render::HeightmapMeshVertexData
ScreenSizeInMeters	Src/OVR_Stereo.h	/^	Size<float> ScreenSizeInMeters;$/;"	m	class:OVR::HMDInfo
ScreenSizeInMeters	Src/OVR_Stereo.h	/^    Size<float> ScreenSizeInMeters;$/;"	m	struct:OVR::HmdRenderInfo
ScreenSwitchingDelay	Src/CAPI/CAPI_FrameTimeManager.h	/^    double              ScreenSwitchingDelay;$/;"	m	class:OVR::CAPI::FrameTimeManager
SdkRender	Src/CAPI/CAPI_FrameTimeManager.h	/^    bool                SdkRender;$/;"	m	class:OVR::CAPI::FrameTimeManager
Second	Src/Kernel/OVR_Hash.h	/^    U   Second;$/;"	m	struct:OVR::HashNode
SecondType	Src/Kernel/OVR_Hash.h	/^    typedef U                       SecondType;$/;"	t	struct:OVR::HashNode
Seek	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::Seek(int offset, int origin)$/;"	f	class:OVR::BufferedFile
Seek	Src/Kernel/OVR_File.h	/^    int         Seek(int offset, int origin = Seek_Set)$/;"	f	class:OVR::MemoryFile
Seek	Src/Kernel/OVR_File.h	/^    virtual int         Seek(int offset, int origin=Seek_Set)       { return pFile->Seek(offset,origin); }$/;"	f	class:OVR::DelegatedFile
Seek	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::Seek(int offset, int origin)$/;"	f	class:OVR::FILEFile
Seek	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         Seek(int \/*offset*\/, int \/*origin*\/)                 { return -1; }$/;"	f	class:OVR::UnopenedFile
SeekOps	Src/Kernel/OVR_File.h	/^    enum SeekOps$/;"	g	class:OVR::FileConstants
SeekToBegin	Src/Kernel/OVR_File.h	/^    int                 SeekToBegin()           {return Seek(0); }$/;"	f	class:OVR::File
SeekToEnd	Src/Kernel/OVR_File.h	/^    int                 SeekToEnd()             {return Seek(0,Seek_End); }$/;"	f	class:OVR::File
Seek_Cur	Src/Kernel/OVR_File.h	/^        Seek_Cur        = 1,$/;"	e	enum:OVR::FileConstants::SeekOps
Seek_End	Src/Kernel/OVR_File.h	/^        Seek_End        = 2$/;"	e	enum:OVR::FileConstants::SeekOps
Seek_Set	Src/Kernel/OVR_File.h	/^        Seek_Set        = 0,$/;"	e	enum:OVR::FileConstants::SeekOps
SelfType	Src/Kernel/OVR_Array.h	/^    typedef Array<T, SizePolicy>                                        SelfType;$/;"	t	class:OVR::Array
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayBase<ArrayData>                SelfType;$/;"	t	class:OVR::ArrayBase
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayCC<T, SizePolicy>                                          SelfType;$/;"	t	class:OVR::ArrayCC
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayCPP<T, SizePolicy>                                         SelfType;$/;"	t	class:OVR::ArrayCPP
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayConstPolicy<MinCapacity, Granularity, NeverShrink> SelfType;$/;"	t	struct:OVR::ArrayConstPolicy
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayData    <T, Allocator, SizePolicy>     SelfType;$/;"	t	struct:OVR::ArrayData
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayDataBase<T, Allocator, SizePolicy>     SelfType;$/;"	t	struct:OVR::ArrayDataBase
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayDataCC  <T, Allocator, SizePolicy>     SelfType;$/;"	t	struct:OVR::ArrayDataCC
SelfType	Src/Kernel/OVR_Array.h	/^    typedef ArrayPOD<T, SizePolicy>                                         SelfType;$/;"	t	class:OVR::ArrayPOD
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef Hash<C, U, HashF, Allocator, HashNode, Entry, Container>    SelfType;$/;"	t	class:OVR::Hash
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashIdentity<C, U, Allocator, HashF> SelfType;$/;"	t	class:OVR::HashIdentity
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashNode<C, U, HashF>   SelfType;$/;"	t	struct:OVR::HashNode
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashSet<C, HashF, AltHashF, Allocator, Entry>     SelfType;$/;"	t	class:OVR::HashSet
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashSetBase<C, HashF, AltHashF, Allocator, Entry>    SelfType;$/;"	t	class:OVR::HashSetBase
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashSetUncached<C, HashF, AltHashF, Allocator>                  SelfType;$/;"	t	class:OVR::HashSetUncached
SelfType	Src/Kernel/OVR_Hash.h	/^    typedef HashUncached<C, U, HashF, Allocator>                SelfType;$/;"	t	class:OVR::HashUncached
SelfType	Src/Kernel/OVR_StringHash.h	/^    typedef StringHash<U, Allocator>                                 SelfType;$/;"	t	class:OVR::StringHash
SelfType	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct SelfType { typedef T Type; };$/;"	s	namespace:OVR
Send	Src/Net/OVR_PacketizedTCPSocket.cpp	/^int PacketizedTCPSocket::Send(const void* pData, int bytes)$/;"	f	class:OVR::Net::PacketizedTCPSocket
Send	Src/Net/OVR_Session.cpp	/^int Session::Send(SendParameters *payload)$/;"	f	class:OVR::Net::Session
Send	Src/Net/OVR_Unix_Socket.cpp	/^int TCPSocket::Send(const void* pData, int bytes)$/;"	f	class:OVR::Net::TCPSocket
Send	Src/Net/OVR_Unix_Socket.cpp	/^int UDPSocket::Send(const void* pData, int bytes, SockAddr* address)$/;"	f	class:OVR::Net::UDPSocket
SendAndConcatenate	Src/Net/OVR_PacketizedTCPSocket.cpp	/^int PacketizedTCPSocket::SendAndConcatenate(const void** pDataArray, int* dataLengthArray, int arrayCount)$/;"	f	class:OVR::Net::PacketizedTCPSocket
SendParameters	Src/Net/OVR_Session.h	/^	SendParameters() :$/;"	f	class:OVR::Net::SendParameters
SendParameters	Src/Net/OVR_Session.h	/^	SendParameters(Ptr<Connection> _pConnection, const void* _pData, int _bytes) :$/;"	f	class:OVR::Net::SendParameters
SendParameters	Src/Net/OVR_Session.h	/^class SendParameters$/;"	c	namespace:OVR::Net
SendToBack	Src/Kernel/OVR_List.h	/^    void SendToBack(ValueType* p)$/;"	f	class:OVR::List
SensorDataType	Src/OVR_CAPI.cpp	/^SensorDataType::SensorDataType(const ovrSensorData& s)$/;"	f	class:OVR::SensorDataType
SensorDataType	Src/Sensors/OVR_DeviceConstants.h	/^    SensorDataType() : Temperature(0.0f), AbsoluteTimeSeconds(0.0) { }$/;"	f	class:OVR::SensorDataType
SensorDataType	Src/Sensors/OVR_DeviceConstants.h	/^class SensorDataType$/;"	c	namespace:OVR
SensorStateReader	Src/Tracking/Tracking_SensorStateReader.cpp	/^SensorStateReader::SensorStateReader() :$/;"	f	class:OVR::Tracking::SensorStateReader
SensorStateReader	Src/Tracking/Tracking_SensorStateReader.h	/^class SensorStateReader : public NewOverrideBase$/;"	c	namespace:OVR::Tracking
SensorStateUpdater	Src/Tracking/Tracking_SensorState.h	/^typedef LocklessUpdater<LocklessSensorState, LocklessSensorStatePadding> SensorStateUpdater;$/;"	t	namespace:OVR::Tracking
SerialFormatType	Src/OVR_SerialFormat.h	/^enum SerialFormatType$/;"	g	namespace:OVR
SerialFormatType_DK2	Src/OVR_SerialFormat.h	/^	SerialFormatType_DK2 = 0,	   \/\/ Format used for DK2$/;"	e	enum:OVR::SerialFormatType
SerialFormatType_Invalid	Src/OVR_SerialFormat.h	/^	SerialFormatType_Invalid = -1, \/\/ Invalid format$/;"	e	enum:OVR::SerialFormatType
SerialNumber	Src/Displays/OVR_Linux_Display.h	/^    String SerialNumber;$/;"	m	struct:OVR::Linux::DisplayEDID
SerialNumber	Src/OVR_CAPI.h	/^    char        SerialNumber[24];$/;"	m	struct:ovrHmdDesc_
Serialize	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Serialize(bool writeToBitstream, char* inOutByteArray, const unsigned int numberOfBytes )$/;"	f	class:OVR::Net::BitStream
Serialize	Src/Net/OVR_BitStream.h	/^inline bool BitStream::Serialize(bool writeToBitstream, templateType &inOutTemplateVar)$/;"	f	class:OVR::Net::BitStream
Serialize	Src/Net/OVR_Session.h	/^    void Serialize(Net::BitStream* bs)$/;"	f	struct:OVR::Net::RPC_C2S_Hello
Serialize	Src/Net/OVR_Session.h	/^    void Serialize(Net::BitStream* bs)$/;"	f	struct:OVR::Net::RPC_S2C_Authorization
Serialize	Src/Service/Service_NetSessionCommon.h	/^	void Serialize(Net::BitStream* bs)$/;"	f	struct:OVR::Service::HMDNetworkInfo
SerializeBits	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeBits(bool writeToBitstream, unsigned char* inOutByteArray, const BitSize_t numberOfBitsToSerialize, const bool rightAlignedBits )$/;"	f	class:OVR::Net::BitStream
SerializeBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^bool BitStream::SerializeBitsFromIntegerRange( bool writeToBitstream, templateType &value, const templateType minimum, const templateType maximum, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
SerializeBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^bool BitStream::SerializeBitsFromIntegerRange( bool writeToBitstream, templateType &value, const templateType minimum, const templateType maximum, const int requiredBits, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
SerializeCasted	Src/Net/OVR_BitStream.h	/^bool BitStream::SerializeCasted( bool writeToBitstream, sourceType &value )$/;"	f	class:OVR::Net::BitStream
SerializeCompressed	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeCompressed(bool writeToBitstream, templateType &inOutTemplateVar)$/;"	f	class:OVR::Net::BitStream
SerializeCompressedDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeCompressedDelta(bool writeToBitstream, templateType &inOutCurrentValue)$/;"	f	class:OVR::Net::BitStream
SerializeCompressedDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeCompressedDelta(bool writeToBitstream, templateType &inOutCurrentValue, const templateType &lastValue)$/;"	f	class:OVR::Net::BitStream
SerializeDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeDelta(bool writeToBitstream, templateType &inOutCurrentValue)$/;"	f	class:OVR::Net::BitStream
SerializeDelta	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeDelta(bool writeToBitstream, templateType &inOutCurrentValue, const templateType &lastValue)$/;"	f	class:OVR::Net::BitStream
SerializeFloat16	Src/Net/OVR_BitStream.cpp	/^bool BitStream::SerializeFloat16(bool writeToBitstream, float &inOutFloat, float floatMin, float floatMax)$/;"	f	class:OVR::Net::BitStream
SerializeHMDInfo	Src/Service/Service_NetSessionCommon.cpp	/^void NetSessionCommon::SerializeHMDInfo(Net::BitStream *bitStream, HMDInfo* hmdInfo)$/;"	f	class:OVR::Service::NetSessionCommon
SerializeNormQuat	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeNormQuat(bool writeToBitstream,  templateType &w, templateType &x, templateType &y, templateType &z)$/;"	f	class:OVR::Net::BitStream
SerializeNormVector	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeNormVector(bool writeToBitstream, templateType &x, templateType &y, templateType &z )$/;"	f	class:OVR::Net::BitStream
SerializeOrthMatrix	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeOrthMatrix($/;"	f	class:OVR::Net::BitStream
SerializeVector	Src/Net/OVR_BitStream.h	/^inline bool BitStream::SerializeVector(bool writeToBitstream,  templateType &x, templateType &y, templateType &z )$/;"	f	class:OVR::Net::BitStream
Server_ConnectedWait	Src/Net/OVR_Session.h	/^    Server_ConnectedWait,  \/\/ Connected! Waiting for client handshake$/;"	e	enum:OVR::Net::EConnectionState
Service	Src/Service/Service_NetClient.cpp	/^namespace OVR { namespace Service {$/;"	n	namespace:OVR	file:
Service	Src/Service/Service_NetClient.h	/^namespace OVR { namespace Service {$/;"	n	namespace:OVR
Service	Src/Service/Service_NetSessionCommon.cpp	/^namespace OVR { namespace Service {$/;"	n	namespace:OVR	file:
Service	Src/Service/Service_NetSessionCommon.h	/^namespace Service {$/;"	n	namespace:OVR
Session	Src/Net/OVR_Session.h	/^    Session() :$/;"	f	class:OVR::Net::Session
Session	Src/Net/OVR_Session.h	/^class Session : public SocketEvent_TCP, public NewOverrideBase$/;"	c	namespace:OVR::Net
SessionListener	Src/Net/OVR_Session.h	/^class SessionListener$/;"	c	namespace:OVR::Net
SessionListeners	Src/Net/OVR_Session.h	/^    Array< SessionListener* > SessionListeners;    \/\/ List of session listeners$/;"	m	class:OVR::Net::Session
SessionListenersLock	Src/Net/OVR_Session.h	/^    Lock SocketListenersLock, ConnectionsLock, SessionListenersLock;$/;"	m	class:OVR::Net::Session
SessionResult	Src/Net/OVR_Session.h	/^enum SessionResult$/;"	g	namespace:OVR::Net
SessionResult_AlreadyConnected	Src/Net/OVR_Session.h	/^    SessionResult_AlreadyConnected,$/;"	e	enum:OVR::Net::SessionResult
SessionResult_BindFailure	Src/Net/OVR_Session.h	/^	SessionResult_BindFailure,$/;"	e	enum:OVR::Net::SessionResult
SessionResult_ConnectFailure	Src/Net/OVR_Session.h	/^	SessionResult_ConnectFailure,$/;"	e	enum:OVR::Net::SessionResult
SessionResult_ConnectInProgress	Src/Net/OVR_Session.h	/^    SessionResult_ConnectInProgress,$/;"	e	enum:OVR::Net::SessionResult
SessionResult_ListenFailure	Src/Net/OVR_Session.h	/^	SessionResult_ListenFailure,$/;"	e	enum:OVR::Net::SessionResult
SessionResult_OK	Src/Net/OVR_Session.h	/^	SessionResult_OK,$/;"	e	enum:OVR::Net::SessionResult
Set	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Texture::Set(int slot, ShaderStage) const$/;"	f	class:OVR::CAPI::GL::Texture
Set	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual void Set(PrimitiveType prim = Prim_Unknown) const {$/;"	f	class:OVR::CAPI::GL::ShaderFill
Set	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual void Set(PrimitiveType prim) const$/;"	f	class:OVR::CAPI::GL::ShaderSet
Set	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual void Set(PrimitiveType) const { }$/;"	f	class:OVR::CAPI::GL::Shader
Set	Src/Kernel/OVR_Hash.h	/^    inline void    Set(const C& key, const U& value)$/;"	f	class:OVR::Hash
Set	Src/Kernel/OVR_Hash.h	/^    void Set(const CRef& key)$/;"	f	class:OVR::HashSet
Set	Src/Kernel/OVR_Hash.h	/^    void Set(const CRef& key)$/;"	f	class:OVR::HashSetBase
Set	Src/Kernel/OVR_Lockless.cpp	/^    void Set(int val)$/;"	f	struct:OVR::LocklessTest::TestData
Set	Src/Kernel/OVR_Math.h	/^	void Set(const T& x, AngularUnits u = Radians) { a = (u == Radians) ? x : x*((T)MATH_DOUBLE_DEGREETORADFACTOR); FixRange(); }$/;"	f	class:OVR::Angle
Set	Src/Net/OVR_Unix_Socket.cpp	/^void SockAddr::Set(const char* hostAddress, UInt16 port, int sockType)$/;"	f	class:OVR::Net::SockAddr
Set	Src/Net/OVR_Unix_Socket.cpp	/^void SockAddr::Set(const sockaddr_in6* address)$/;"	f	class:OVR::Net::SockAddr
Set	Src/Net/OVR_Unix_Socket.cpp	/^void SockAddr::Set(const sockaddr_storage* storage)$/;"	f	class:OVR::Net::SockAddr
Set2DAreaFov	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::Set2DAreaFov(float fovRadians)$/;"	f	class:OVR::Util::Render::StereoConfig
SetAltPressed	Src/Kernel/OVR_KeyCodes.h	/^    void SetAltPressed(bool v = true)    { (v) ? States |= Key_AltPressed   : States &= ~Key_AltPressed; }$/;"	f	class:OVR::KeyModifiers
SetBasePath	Src/OVR_Profile.cpp	/^void ProfileManager::SetBasePath(String basePath)$/;"	f	class:OVR::ProfileManager
SetBlockingTimeout	Src/Net/OVR_Socket.h	/^	virtual void   SetBlockingTimeout(int timeoutMs) \/\/ milliseconds$/;"	f	class:OVR::Net::BerkleySocket
SetBoolValue	Src/OVR_Profile.cpp	/^void Profile::SetBoolValue(const char* key, bool val)$/;"	f	class:OVR::Profile
SetBoolValue	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetBoolValue(VirtualHmdId hmd, const char* key, bool val)$/;"	f	class:OVR::Service::NetClient
SetBufferMode	Src/Kernel/OVR_File.cpp	/^bool    BufferedFile::SetBufferMode(BufferModeType mode)$/;"	f	class:OVR::BufferedFile
SetCachedHash	Src/Kernel/OVR_Hash.h	/^    void    SetCachedHash(size_t hashValue)        { HashValue = hashValue; }$/;"	f	class:OVR::HashsetCachedEntry
SetCachedHash	Src/Kernel/OVR_Hash.h	/^    void    SetCachedHash(size_t hashValue)        { HashValue = hashValue; }$/;"	f	class:OVR::HashsetCachedNodeEntry
SetCachedHash	Src/Kernel/OVR_Hash.h	/^    void    SetCachedHash(size_t hashValue)        { OVR_UNUSED(hashValue); }$/;"	f	class:OVR::HashsetNodeEntry
SetCachedHash	Src/Kernel/OVR_Hash.h	/^    void    SetCachedHash(size_t)                  {}$/;"	f	class:OVR::HashsetEntry
SetCapacity	Src/Kernel/OVR_Array.h	/^    void  SetCapacity(size_t capacity) { Capacity = capacity; }$/;"	f	struct:OVR::ArrayConstPolicy
SetCapacity	Src/Kernel/OVR_Array.h	/^    void  SetCapacity(size_t capacity) { Capacity = capacity; }$/;"	f	struct:OVR::ArrayDefaultPolicy
SetCapacity	Src/Kernel/OVR_Hash.h	/^    inline void    SetCapacity(size_t newSize)   { mHash.SetCapacity(newSize); }$/;"	f	class:OVR::Hash
SetCapacity	Src/Kernel/OVR_Hash.h	/^    void SetCapacity(size_t newSize)$/;"	f	class:OVR::HashSet
SetCapacity	Src/Kernel/OVR_Hash.h	/^    void SetCapacity(size_t newSize)$/;"	f	class:OVR::HashSetBase
SetCapsToggled	Src/Kernel/OVR_KeyCodes.h	/^    void SetCapsToggled(bool v = true)   { (v) ? States |= Key_CapsToggled  : States &= ~Key_CapsToggled; }$/;"	f	class:OVR::KeyModifiers
SetCaseInsensitive	Src/Kernel/OVR_StringHash.h	/^    void    SetCaseInsensitive(const String& key, const U& value)$/;"	f	class:OVR::StringHash
SetConstMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetConstMember(T const *object)$/;"	f	class:OVR::Delegate0
SetConstMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetConstMember(T const *object)$/;"	f	class:OVR::Delegate1
SetConstMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetConstMember(T const *object)$/;"	f	class:OVR::Delegate2
SetConstMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetConstMember(T const *object)$/;"	f	class:OVR::Delegate3
SetCtrlPressed	Src/Kernel/OVR_KeyCodes.h	/^    void SetCtrlPressed(bool v = true)   { (v) ? States |= Key_CtrlPressed  : States &= ~Key_CtrlPressed; }$/;"	f	class:OVR::KeyModifiers
SetCurrentContext	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::SetCurrentContext(OVR::GLEContext* p)$/;"	f	class:OVR::GLEContext
SetCurrentPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Thread::SetCurrentPriority(ThreadPriority)$/;"	f	class:OVR::Thread
SetCurrentProfileLastHSWTime	Src/CAPI/CAPI_HSWDisplay.cpp	/^void HSWDisplay::SetCurrentProfileLastHSWTime(time_t t)$/;"	f	class:OVR::CAPI::HSWDisplay
SetData	Src/Kernel/OVR_String.h	/^    inline void        SetData(DataDesc* pdesc)$/;"	f	class:OVR::String
SetData	Src/Net/OVR_BitStream.cpp	/^void BitStream::SetData( unsigned char *inByteArray )$/;"	f	class:OVR::Net::BitStream
SetDefaultUser	Src/OVR_Profile.cpp	/^bool ProfileManager::SetDefaultUser(const ProfileDeviceKey& deviceKey, const char* user)$/;"	f	class:OVR::ProfileManager
SetDirty	Src/Util/Util_Render_Stereo.h	/^    void        SetDirty() { DirtyFlag = true; }$/;"	f	class:OVR::Util::Render::StereoConfig
SetDisplaySleep	Src/Displays/OVR_Display.h	/^    virtual bool SetDisplaySleep(bool off)$/;"	f	class:OVR::Display
SetDoubleValue	Src/OVR_Profile.cpp	/^void Profile::SetDoubleValue(const char* key, double val)$/;"	f	class:OVR::Profile
SetDoubleValues	Src/OVR_Profile.cpp	/^void Profile::SetDoubleValues(const char* key, const double* vals, int num_vals)$/;"	f	class:OVR::Profile
SetDriverMode	Src/Displays/OVR_Linux_Display.cpp	/^bool Display::SetDriverMode(bool \/*compatMode*\/, bool \/*hideDK1Mode*\/)$/;"	f	class:OVR::Display
SetDriverMode	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetDriverMode(bool compatMode, bool hideDK1Mode)$/;"	f	class:OVR::Service::NetClient
SetEnabledHmdCaps	Src/CAPI/CAPI_HMDState.cpp	/^unsigned HMDState::SetEnabledHmdCaps()$/;"	f	class:OVR::CAPI::HMDState
SetEnabledHmdCaps	Src/CAPI/CAPI_HMDState.cpp	/^void HMDState::SetEnabledHmdCaps(unsigned hmdCaps)$/;"	f	class:OVR::CAPI::HMDState
SetEvent	Src/Kernel/OVR_Threads.h	/^    void  SetEvent()$/;"	f	class:OVR::Event
SetExitFlag	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    Thread::SetExitFlag(bool exitFlag)$/;"	f	class:OVR::Thread
SetExtraEyeRotation	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetExtraEyeRotation ( float extraEyeRotationInRadians )$/;"	f	class:OVR::Util::Render::StereoConfig
SetEyeCup	Src/OVR_Stereo.cpp	/^void SetEyeCup(HmdRenderInfo* renderInfo, const char* cup)$/;"	f	namespace:OVR
SetFakeSeconds	Src/Kernel/OVR_Timer.h	/^    static void SetFakeSeconds(double fakeSeconds, bool enable = true) $/;"	f	class:OVR::Timer
SetFloatValue	Src/OVR_Profile.cpp	/^void Profile::SetFloatValue(const char* key, float val)$/;"	f	class:OVR::Profile
SetFloatValues	Src/OVR_Profile.cpp	/^void Profile::SetFloatValues(const char* key, const float* vals, int num_vals)$/;"	f	class:OVR::Profile
SetFov	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetFov ( FovPort const *pfovLeft  \/*= NULL*\/,$/;"	f	class:OVR::Util::Render::StereoConfig
SetFovPortRadians	Src/Util/Util_Render_Stereo.h	/^    void        SetFovPortRadians ( float horizontal, float vertical )$/;"	f	class:OVR::Util::Render::StereoConfig
SetFree	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetFree()$/;"	f	class:OVR::Delegate0
SetFree	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetFree()$/;"	f	class:OVR::Delegate1
SetFree	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetFree()$/;"	f	class:OVR::Delegate2
SetFree	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetFree()$/;"	f	class:OVR::Delegate3
SetGlobalLog	Src/Kernel/OVR_Log.cpp	/^void Log::SetGlobalLog(Log *log)$/;"	f	class:OVR::Log
SetGrowSize	Src/Kernel/OVR_String.cpp	/^void StringBuffer::SetGrowSize(size_t growSize) $/;"	f	class:OVR::StringBuffer
SetHandler	Src/Kernel/OVR_Observer.h	/^	void SetHandler(DelegateT handler)$/;"	f	class:OVR::ObserverScope
SetHandler	Src/Kernel/OVR_Observer.h	/^	void SetHandler(Handler handler)$/;"	f	class:OVR::Observer
SetHmdRenderInfo	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetHmdRenderInfo(const HmdRenderInfo& hmd)$/;"	f	class:OVR::Util::Render::StereoConfig
SetIdentity	Src/Kernel/OVR_Math.h	/^	void SetIdentity()$/;"	f	class:OVR::Matrix3
SetIdentity	Src/Kernel/OVR_Math.h	/^    void SetIdentity()$/;"	f	class:OVR::Matrix4
SetIntValue	Src/OVR_Profile.cpp	/^void Profile::SetIntValue(const char* key, int val)$/;"	f	class:OVR::Profile
SetIntValue	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetIntValue(VirtualHmdId hmd, const char* key, int val)$/;"	f	class:OVR::Service::NetClient
SetLastError	Src/Service/Service_NetClient.cpp	/^void NetClient::SetLastError(String str)$/;"	f	class:OVR::Service::NetClient
SetLatencyTest2Color	Src/CAPI/CAPI_DistortionRenderer.cpp	/^void DistortionRenderer::SetLatencyTest2Color(unsigned char* color)$/;"	f	class:OVR::CAPI::DistortionRenderer
SetLatencyTestColor	Src/CAPI/CAPI_DistortionRenderer.cpp	/^void DistortionRenderer::SetLatencyTestColor(unsigned char* color)$/;"	f	class:OVR::CAPI::DistortionRenderer
SetLensOverride	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetLensOverride ( LensConfig const *pLensOverrideLeft  \/*= NULL*\/,$/;"	f	class:OVR::Util::Render::StereoConfig
SetLoggingMask	Src/Kernel/OVR_Log.h	/^    void            SetLoggingMask(unsigned logMask)  { LoggingMask = logMask; }$/;"	f	class:OVR::Log
SetMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetMember(T *object)$/;"	f	class:OVR::Delegate0
SetMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetMember(T *object)$/;"	f	class:OVR::Delegate1
SetMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetMember(T *object)$/;"	f	class:OVR::Delegate2
SetMember	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE void SetMember(T *object)$/;"	f	class:OVR::Delegate3
SetMetaPressed	Src/Kernel/OVR_KeyCodes.h	/^    void SetMetaPressed(bool v = true)   { (v) ? States |= Key_MetaPressed  : States &= ~Key_MetaPressed; }$/;"	f	class:OVR::KeyModifiers
SetMirrorMode	Src/Displays/OVR_Linux_Display.h	/^    virtual MirrorMode SetMirrorMode( MirrorMode newMode ) $/;"	f	class:OVR::Linux::LinuxDisplayGeneric
SetNumToggled	Src/Kernel/OVR_KeyCodes.h	/^    void SetNumToggled(bool v = true)    { (v) ? States |= Key_NumToggled   : States &= ~Key_NumToggled; }$/;"	f	class:OVR::KeyModifiers
SetNumberOfBitsAllocated	Src/Net/OVR_BitStream.cpp	/^void BitStream::SetNumberOfBitsAllocated( const BitSize_t lengthInBits )$/;"	f	class:OVR::Net::BitStream
SetNumberValue	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetNumberValue(VirtualHmdId hmd, const char* key, double val)$/;"	f	class:OVR::Service::NetClient
SetNumberValues	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetNumberValues(VirtualHmdId hmd, const char* key, const double* vals, int num_vals)$/;"	f	class:OVR::Service::NetClient
SetPos	Src/Kernel/OVR_Math.h	/^    void       SetPos(const Vector2<T>& pos) { x = pos.x; y = pos.y; }$/;"	f	class:OVR::Rect
SetPriority	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Thread::SetPriority(ThreadPriority)$/;"	f	class:OVR::Thread
SetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& SetPtr(C &src)$/;"	f	class:OVR::Ptr
SetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& SetPtr(C *psrc)$/;"	f	class:OVR::Ptr
SetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& SetPtr(Pickable<C> src)$/;"	f	class:OVR::Ptr
SetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& SetPtr(const Ptr<C> &src)$/;"	f	class:OVR::Ptr
SetPtr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& SetPtr(const Ptr<R> &src)$/;"	f	class:OVR::Ptr
SetReadOffset	Src/Net/OVR_BitStream.h	/^	void SetReadOffset( const BitSize_t newReadOffset ) {readOffset=newReadOffset;}$/;"	f	class:OVR::Net::BitStream
SetRenderDensity	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffsetBothEyes StereoConfig::SetRenderDensity ( float pixelsPerDisplayPixel )$/;"	f	class:OVR::Util::Render::StereoConfig
SetRenderSize	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffsetBothEyes StereoConfig::SetRenderSize ( Sizei const &renderSizeLeft, Sizei const &renderSizeRight )$/;"	f	class:OVR::Util::Render::StereoConfig
SetRenderViewport	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffsetBothEyes StereoConfig::SetRenderViewport ( Recti const &renderViewportLeft, Recti const &renderViewportRight )$/;"	f	class:OVR::Util::Render::StereoConfig
SetRendertargetSize	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetRendertargetSize (Size<int> const rendertargetSize,$/;"	f	class:OVR::Util::Render::StereoConfig
SetSampleMode	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Texture::SetSampleMode(int sm)$/;"	f	class:OVR::CAPI::GL::Texture
SetScreenParameters	Src/OVR_Stereo.h	/^	void SetScreenParameters(int hres, int vres,$/;"	f	class:OVR::HMDInfo
SetScrollToggled	Src/Kernel/OVR_KeyCodes.h	/^    void SetScrollToggled(bool v = true) { (v) ? States |= Key_ScrollToggled: States &= ~Key_ScrollToggled; }$/;"	f	class:OVR::KeyModifiers
SetShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void ShaderSet::SetShader(Shader *s)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetShiftPressed	Src/Kernel/OVR_KeyCodes.h	/^    void SetShiftPressed(bool v = true)  { (v) ? States |= Key_ShiftPressed : States &= ~Key_ShiftPressed; }$/;"	f	class:OVR::KeyModifiers
SetSize	Src/Kernel/OVR_Math.h	/^    void       SetSize(const Size<T>& sz)    { w = sz.w; h = sz.h; }$/;"	f	class:OVR::Rect
SetSizePolicy	Src/Kernel/OVR_Array.h	/^    void            SetSizePolicy(const SizePolicyType& p) { Data.Policy = p; }$/;"	f	class:OVR::ArrayBase
SetSocketOptions	Src/Net/OVR_Unix_Socket.cpp	/^static bool SetSocketOptions(SocketHandle sock)$/;"	f	namespace:OVR::Net
SetState	Src/Kernel/OVR_Lockless.h	/^	void	SetState( const T& state )$/;"	f	class:OVR::LocklessUpdater
SetState	Src/Net/OVR_Session.h	/^    virtual void SetState(EConnectionState s) {State = s;}$/;"	f	class:OVR::Net::Connection
SetState	Src/Net/OVR_Session.h	/^    virtual void SetState(EConnectionState s)$/;"	f	class:OVR::Net::NetworkConnection
SetStereoMode	Src/Util/Util_Render_Stereo.h	/^    void        SetStereoMode(StereoMode mode)  { Mode = mode; DirtyFlag = true; }$/;"	f	class:OVR::Util::Render::StereoConfig
SetStringValue	Src/Service/Service_NetClient.cpp	/^bool NetClient::SetStringValue(VirtualHmdId hmd, const char* key, const char* val)$/;"	f	class:OVR::Service::NetClient
SetSurface	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::SetSurface( Context & ctx ) {$/;"	f	class:OVR::CAPI::GL::Context
SetTaggedProfile	Src/OVR_Profile.cpp	/^bool ProfileManager::SetTaggedProfile(const char** tag_names, const char** tags, int num_tags, Profile* profile)$/;"	f	class:OVR::ProfileManager
SetTexture	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual void SetTexture(int i, class Texture* tex) { if (i < 8) Textures[i] = tex; }$/;"	f	class:OVR::CAPI::GL::ShaderFill
SetThreadName	Src/Kernel/OVR_ThreadsPthread.cpp	/^void    Thread::SetThreadName( const char* name )$/;"	f	class:OVR::Thread
SetToIdentity	Src/OVR_Stereo.cpp	/^void LensConfig::SetToIdentity()$/;"	f	class:OVR::LensConfig
SetTranslation	Src/Kernel/OVR_Math.h	/^    void SetTranslation(const Vector3<T>& v)$/;"	f	class:OVR::Matrix4
SetUniform	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool ShaderBase::SetUniform(const char* name, int n, const float* v)$/;"	f	class:OVR::CAPI::GL::ShaderBase
SetUniform	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool ShaderSet::SetUniform(const char* name, int n, const float* v)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniform	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual bool SetUniform(const char* name, int n, const float* v) { OVR_UNUSED3(name, n, v); return false; }$/;"	f	class:OVR::CAPI::GL::Shader
SetUniform1f	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool SetUniform1f(const char* name, float x)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniform2f	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool SetUniform2f(const char* name, float x, float y)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniform3f	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool SetUniform3f(const char* name, float x, float y, float z)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniform4f	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool SetUniform4f(const char* name, float x, float y, float z, float w = 1)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniform4x4f	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual bool SetUniform4x4f(const char* name, const Matrix4f& m)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUniformBool	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool ShaderBase::SetUniformBool(const char* name, int n, const bool* v) $/;"	f	class:OVR::CAPI::GL::ShaderBase
SetUniformBool	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual bool SetUniformBool(const char* name, int n, const bool* v) { OVR_UNUSED3(name, n, v); return false; }$/;"	f	class:OVR::CAPI::GL::Shader
SetUniformBuffer	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual void SetUniformBuffer(class Buffer* buffers, int i = 0) { OVR_UNUSED2(buffers, i); }$/;"	f	class:OVR::CAPI::GL::Shader
SetUniformv	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool SetUniformv(const char* name, const Vector3f& v)$/;"	f	class:OVR::CAPI::GL::ShaderSet
SetUpInverseApprox	Src/OVR_Stereo.cpp	/^void LensConfig::SetUpInverseApprox()$/;"	f	class:OVR::LensConfig
SetUpdater	Src/Tracking/Tracking_SensorStateReader.cpp	/^void SensorStateReader::SetUpdater(const CombinedSharedStateUpdater* updater)$/;"	f	class:OVR::Tracking::SensorStateReader
SetUpdater	Src/Util/Util_LatencyTest2Reader.h	/^    void SetUpdater(const Tracking::CombinedSharedStateUpdater *updater)$/;"	f	class:OVR::Util::RecordStateReader
SetValue	Src/OVR_Profile.cpp	/^void Profile::SetValue(JSON* val)$/;"	f	class:OVR::Profile
SetValue	Src/OVR_Profile.cpp	/^void Profile::SetValue(const char* key, const char* val)$/;"	f	class:OVR::Profile
SetViewport	Src/Util/Util_Render_Stereo.h	/^    Recti           SetViewport[2];$/;"	m	class:OVR::Util::Render::StereoConfig
SetViewportMode	Src/Util/Util_Render_Stereo.h	/^    }                  SetViewportMode;$/;"	m	class:OVR::Util::Render::StereoConfig	typeref:enum:OVR::Util::Render::StereoConfig::SetViewportModeEnum
SetViewportModeEnum	Src/Util/Util_Render_Stereo.h	/^    enum SetViewportModeEnum$/;"	g	class:OVR::Util::Render::StereoConfig
SetViewportPixelsPerDisplayPixel	Src/Util/Util_Render_Stereo.h	/^    float              SetViewportPixelsPerDisplayPixel;$/;"	m	class:OVR::Util::Render::StereoConfig
SetViewportSize	Src/Util/Util_Render_Stereo.h	/^    Sizei              SetViewportSize[2];$/;"	m	class:OVR::Util::Render::StereoConfig
SetVsync	Src/CAPI/CAPI_FrameTimeManager.h	/^    void    SetVsync(bool enabled) { VsyncEnabled = enabled; }$/;"	f	class:OVR::CAPI::FrameTimeManager
SetWriteOffset	Src/Net/OVR_BitStream.cpp	/^void BitStream::SetWriteOffset( const BitSize_t offset )$/;"	f	class:OVR::Net::BitStream
SetXBasis	Src/Kernel/OVR_Math.h	/^	void SetXBasis(const Vector3f & v)$/;"	f	class:OVR::Matrix4
SetYBasis	Src/Kernel/OVR_Math.h	/^	void SetYBasis(const Vector3f & v)$/;"	f	class:OVR::Matrix4
SetZBasis	Src/Kernel/OVR_Math.h	/^	void SetZBasis(const Vector3f & v)$/;"	f	class:OVR::Matrix4
SetZClipPlanesAndHandedness	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetZClipPlanesAndHandedness ( float zNear \/*= 0.01f*\/, float zFar \/*= 10000.0f*\/, bool rightHandedProjection \/*= true*\/ )$/;"	f	class:OVR::Util::Render::StereoConfig
SetZeroVirtualIpdOverride	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::SetZeroVirtualIpdOverride ( bool enableOverride )$/;"	f	class:OVR::Util::Render::StereoConfig
Shade	Src/Util/Util_Render_Stereo.h	/^    float       Shade;        $/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
Shader	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader(ShaderStage s) : Stage(s) {}$/;"	f	class:OVR::CAPI::GL::Shader
Shader	Src/CAPI/GL/CAPI_GL_Util.h	/^class Shader : public RefCountBase<Shader>$/;"	c	namespace:OVR::CAPI::GL
ShaderBase	Src/CAPI/GL/CAPI_GL_Util.h	/^	ShaderBase(RenderParams* rp, ShaderStage stage) :$/;"	f	class:OVR::CAPI::GL::ShaderBase
ShaderBase	Src/CAPI/GL/CAPI_GL_Util.h	/^class ShaderBase : public Shader$/;"	c	namespace:OVR::CAPI::GL
ShaderData	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    const char* ShaderData;$/;"	m	struct:OVR::CAPI::GL::ShaderInfo	file:
ShaderFill	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderFill(ShaderSet& sh) : Shaders(sh) { InputLayout = NULL; }    $/;"	f	class:OVR::CAPI::GL::ShaderFill
ShaderFill	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderFill(ShaderSet* sh) : Shaders(sh) { InputLayout = NULL; }$/;"	f	class:OVR::CAPI::GL::ShaderFill
ShaderFill	Src/CAPI/GL/CAPI_GL_Util.h	/^class ShaderFill : public RefCountBase<ShaderFill>$/;"	c	namespace:OVR::CAPI::GL
ShaderImpl	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderImpl(RenderParams* rp, void* s, size_t size, const Uniform* refl, size_t reflSize)$/;"	f	class:OVR::CAPI::GL::ShaderImpl
ShaderImpl	Src/CAPI/GL/CAPI_GL_Util.h	/^class ShaderImpl : public ShaderBase$/;"	c	namespace:OVR::CAPI::GL
ShaderInfo	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^struct ShaderInfo$/;"	s	namespace:OVR::CAPI::GL	file:
ShaderSet	Src/CAPI/GL/CAPI_GL_Util.cpp	/^ShaderSet::ShaderSet()$/;"	f	class:OVR::CAPI::GL::ShaderSet
ShaderSet	Src/CAPI/GL/CAPI_GL_Util.h	/^class ShaderSet : public RefCountBase<ShaderSet>$/;"	c	namespace:OVR::CAPI::GL
ShaderSize	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    size_t ShaderSize;$/;"	m	struct:OVR::CAPI::GL::ShaderInfo	file:
ShaderStage	Src/CAPI/GL/CAPI_GL_Util.h	/^enum ShaderStage$/;"	g	namespace:OVR::CAPI::GL
Shader_Count	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader_Count    = 3,$/;"	e	enum:OVR::CAPI::GL::ShaderStage
Shader_Fragment	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader_Fragment = 2,$/;"	e	enum:OVR::CAPI::GL::ShaderStage
Shader_Pixel	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader_Pixel    = 2,$/;"	e	enum:OVR::CAPI::GL::ShaderStage
Shader_Vertex	Src/CAPI/GL/CAPI_GL_Util.h	/^    Shader_Vertex   = 0,$/;"	e	enum:OVR::CAPI::GL::ShaderStage
Shaders	Src/CAPI/GL/CAPI_GL_Util.h	/^    Ptr<Shader> Shaders[Shader_Count];$/;"	m	class:OVR::CAPI::GL::ShaderSet
Shaders	Src/CAPI/GL/CAPI_GL_Util.h	/^    Ptr<ShaderSet>     Shaders;$/;"	m	class:OVR::CAPI::GL::ShaderFill
SharedLatencyTestState	Src/Tracking/Tracking_SensorState.h	/^    Util::LockessRecordUpdater SharedLatencyTestState;$/;"	m	struct:OVR::Tracking::CombinedSharedStateUpdater
SharedLock	Src/Kernel/OVR_Atomic.h	/^    SharedLock() : UseCount(0) {}$/;"	f	class:OVR::SharedLock
SharedLock	Src/Kernel/OVR_Atomic.h	/^class SharedLock$/;"	c	namespace:OVR
SharedMemory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemory::SharedMemory(int size, void* data, SharedMemoryInternal* pInternal) :$/;"	f	class:OVR::SharedMemory
SharedMemory	Src/Kernel/OVR_SharedMemory.h	/^class SharedMemory : public RefCountBase<SharedMemory>$/;"	c	namespace:OVR
SharedMemoryFactory	Src/Kernel/OVR_SharedMemory.cpp	/^OVR_DEFINE_SINGLETON(OVR::SharedMemoryFactory);$/;"	v
SharedMemoryFactory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryFactory::SharedMemoryFactory()$/;"	f	class:OVR::SharedMemoryFactory
SharedMemoryFactory	Src/Kernel/OVR_SharedMemory.h	/^class SharedMemoryFactory : public NewOverrideBase, public SystemSingletonBase<SharedMemoryFactory>$/;"	c	namespace:OVR
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^	SharedMemoryInternal(HANDLE fileMapping, void* fileView) :$/;"	f	class:OVR::SharedMemoryInternal
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^	SharedMemoryInternal(int fileMapping, void* fileView, int fileSize) :$/;"	f	class:OVR::SharedMemoryInternal
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^        SharedMemoryInternal(FakeMemoryBlock* block) :$/;"	f	class:OVR::SharedMemoryInternal
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^    class SharedMemoryInternal : public NewOverrideBase$/;"	c	namespace:OVR	file:
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^class SharedMemoryInternal : public NewOverrideBase$/;"	c	namespace:OVR	file:
SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^class SharedMemoryInternal$/;"	c	namespace:OVR	file:
SharedMemoryName	Src/Service/Service_NetSessionCommon.h	/^	String       SharedMemoryName;$/;"	m	struct:OVR::Service::HMDNetworkInfo
SharedObjectReader	Src/Kernel/OVR_SharedMemory.h	/^class SharedObjectReader : public ISharedObject<SharedType>$/;"	c	namespace:OVR
SharedObjectWriter	Src/Kernel/OVR_SharedMemory.h	/^class SharedObjectWriter : public ISharedObject<SharedType>$/;"	c	namespace:OVR
SharedSensorState	Src/Tracking/Tracking_SensorState.h	/^    SensorStateUpdater         SharedSensorState;$/;"	m	struct:OVR::Tracking::CombinedSharedStateUpdater
SharedStateReader	Src/CAPI/CAPI_HMDState.h	/^    Tracking::CombinedSharedStateReader SharedStateReader;$/;"	m	class:OVR::CAPI::HMDState
ShimInfo	Src/OVR_Stereo.h	/^	Win32ShimInfo ShimInfo;$/;"	m	class:OVR::HMDInfo
Shutdown	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void Shutdown() {}$/;"	f	class:OVR::CAPI::HSWDisplay
Shutdown	Src/CAPI/GL/CAPI_GLE.cpp	/^    void OVR::GLEContext::Shutdown()$/;"	f	class:OVR::GLEContext
Shutdown	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::Shutdown()$/;"	f	class:OVR::CAPI::GL::HSWDisplay
Shutdown	Src/Kernel/OVR_Observer.h	/^	void Shutdown()$/;"	f	class:OVR::Observer
Shutdown	Src/Kernel/OVR_Observer.h	/^	void Shutdown()$/;"	f	class:OVR::ObserverScope
Shutdown	Src/Kernel/OVR_Timer.cpp	/^void PerformanceTimer::Shutdown()$/;"	f	class:OVR::PerformanceTimer
Shutdown	Src/Net/OVR_Session.cpp	/^void Session::Shutdown()$/;"	f	class:OVR::Net::Session
ShutdownServer	Src/Service/Service_NetClient.cpp	/^bool NetClient::ShutdownServer()$/;"	f	class:OVR::Service::NetClient
Shutter	Src/OVR_Stereo.h	/^	}           Shutter;$/;"	m	class:OVR::HMDInfo	typeref:struct:OVR::HMDInfo::ShutterInfo
Shutter	Src/OVR_Stereo.h	/^    }           Shutter;$/;"	m	struct:OVR::HmdRenderInfo	typeref:struct:OVR::HmdRenderInfo::ShutterInfo
ShutterInfo	Src/OVR_Stereo.h	/^	struct ShutterInfo$/;"	s	class:OVR::HMDInfo
ShutterInfo	Src/OVR_Stereo.h	/^    struct ShutterInfo$/;"	s	struct:OVR::HmdRenderInfo
Sign	Src/Kernel/OVR_Math.h	/^	int Sign() const                               { if (a == 0) return 0; else return (a > 0) ? 1 : -1; }$/;"	f	class:OVR::Angle
Signal	Src/Net/OVR_RPC1.cpp	/^bool RPC1::Signal(OVR::String sharedIdentifier, OVR::Net::BitStream* bitStream, Ptr<Connection> pConnection)$/;"	f	class:OVR::Net::Plugins::RPC1
SimpleQuadGammaShader	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<ShaderSet>      SimpleQuadGammaShader;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SimpleQuadGamma_fs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char SimpleQuadGamma_fs[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleQuadGamma_fs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform SimpleQuadGamma_fs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleQuadShader	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<ShaderSet>      SimpleQuadShader;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
SimpleQuad_fs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char SimpleQuad_fs[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleQuad_fs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform SimpleQuad_fs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleQuad_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char SimpleQuad_vs[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleQuad_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform SimpleQuad_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleTexturedQuad_ps	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char SimpleTexturedQuad_ps[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleTexturedQuad_ps_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform SimpleTexturedQuad_ps_refl[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleTexturedQuad_vs	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char SimpleTexturedQuad_vs[] =$/;"	m	namespace:OVR::CAPI::GL
SimpleTexturedQuad_vs_refl	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    const OVR::CAPI::GL::ShaderBase::Uniform SimpleTexturedQuad_vs_refl[] =$/;"	m	namespace:OVR::CAPI::GL
SingletonInstance	Src/Kernel/OVR_System.h	/^    static AtomicPtr<T> SingletonInstance;$/;"	m	class:OVR::SystemSingletonBase
SingletonInstance	Src/Kernel/OVR_System.h	/^template<class T> OVR::AtomicPtr<T> OVR::SystemSingletonBase<T>::SingletonInstance;$/;"	m	class:OVR::OVR::SystemSingletonBase
Size	Src/CAPI/GL/CAPI_GL_Util.h	/^        int         Size;$/;"	m	struct:OVR::CAPI::GL::ShaderBase::Uniform
Size	Src/CAPI/GL/CAPI_GL_Util.h	/^        int    Location, Size;$/;"	m	struct:OVR::CAPI::GL::ShaderSet::Uniform
Size	Src/CAPI/GL/CAPI_GL_Util.h	/^    size_t        Size;$/;"	m	class:OVR::CAPI::GL::Buffer
Size	Src/Kernel/OVR_Alg.h	/^    size_t   Size;$/;"	m	class:OVR::Alg::ConstArrayAdaptor
Size	Src/Kernel/OVR_Alg.h	/^    size_t  Size;$/;"	m	class:OVR::Alg::ArrayAdaptor
Size	Src/Kernel/OVR_Array.h	/^    size_t      Size;$/;"	m	struct:OVR::ArrayDataBase
Size	Src/Kernel/OVR_Math.h	/^    Size()              : w(0), h(0)   { }$/;"	f	class:OVR::Size
Size	Src/Kernel/OVR_Math.h	/^    Size(T w_, T h_)    : w(w_), h(h_) { }$/;"	f	class:OVR::Size
Size	Src/Kernel/OVR_Math.h	/^    Size(const CompatibleType& s) : w(s.w), h(s.h) {  }$/;"	f	class:OVR::Size
Size	Src/Kernel/OVR_Math.h	/^    explicit Size(T s)  : w(s), h(s)   { }$/;"	f	class:OVR::Size
Size	Src/Kernel/OVR_Math.h	/^    explicit Size(const Size<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Size
Size	Src/Kernel/OVR_Math.h	/^class Size$/;"	c	namespace:OVR
Size	Src/Kernel/OVR_SharedMemory.h	/^	int Size;		\/\/ How many shared bytes are shared at the pointer address?$/;"	m	class:OVR::SharedMemory
Size	Src/Kernel/OVR_String.h	/^        : pStr(v), Size(N) {}$/;"	f	class:OVR::StringDataPtr
Size	Src/Kernel/OVR_String.h	/^        size_t  Size;       $/;"	m	struct:OVR::String::DataDesc
Size	Src/Kernel/OVR_String.h	/^    size_t          Size;$/;"	m	class:OVR::StringBuffer
Size	Src/Kernel/OVR_String.h	/^    size_t      Size;$/;"	m	class:OVR::StringDataPtr
Size	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    size_t  Size;$/;"	m	class:OVR::CircularBuffer	file:
Size	Src/Kernel/OVR_ThreadCommandQueue.h	/^        size_t Size;$/;"	m	class:OVR::ThreadCommand::PopBuffer
Size	Src/Kernel/OVR_ThreadCommandQueue.h	/^    uint16_t     Size;$/;"	m	class:OVR::ThreadCommand
Size	Src/OVR_CAPI.h	/^    ovrSizei    Size;$/;"	m	struct:ovrRecti_
SizeBytes	Src/Kernel/OVR_SharedMemory.cpp	/^        int    SizeBytes;$/;"	m	class:OVR::FakeMemoryBlock	file:
SizeMask	Src/Kernel/OVR_Hash.h	/^        size_t SizeMask;$/;"	m	struct:OVR::HashSetBase::TableType
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                                      SizePolicyType;$/;"	t	class:OVR::ArrayCC
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                                      SizePolicyType;$/;"	t	class:OVR::ArrayCPP
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                                      SizePolicyType;$/;"	t	class:OVR::ArrayPOD
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                                  SizePolicyType;$/;"	t	class:OVR::Array
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                  SizePolicyType;$/;"	t	struct:OVR::ArrayData
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                  SizePolicyType;$/;"	t	struct:OVR::ArrayDataBase
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef SizePolicy                                  SizePolicyType;$/;"	t	struct:OVR::ArrayDataCC
SizePolicyType	Src/Kernel/OVR_Array.h	/^    typedef typename ArrayData::SizePolicyType  SizePolicyType;$/;"	t	class:OVR::ArrayBase
Sized	Src/Kernel/OVR_Math.h	/^typedef Size<double>    Sized;$/;"	t	namespace:OVR
Sizef	Src/Kernel/OVR_Math.h	/^typedef Size<float>     Sizef;$/;"	t	namespace:OVR
Sizei	Src/Kernel/OVR_Math.h	/^typedef Size<int>       Sizei;$/;"	t	namespace:OVR
Sizeu	Src/Kernel/OVR_Math.h	/^typedef Size<unsigned>  Sizeu;$/;"	t	namespace:OVR
Skip	Src/Kernel/OVR_File.h	/^    int                 Skip(int numBytes)     {return Seek(numBytes,Seek_Cur); }$/;"	f	class:OVR::File
SkipBytes	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::SkipBytes(int numBytes)$/;"	f	class:OVR::BufferedFile
SkipBytes	Src/Kernel/OVR_File.h	/^    int         SkipBytes(int numBytes)$/;"	f	class:OVR::MemoryFile
SkipBytes	Src/Kernel/OVR_File.h	/^    virtual int         SkipBytes(int numBytes)                     { return pFile->SkipBytes(numBytes); }      $/;"	f	class:OVR::DelegatedFile
SkipBytes	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::SkipBytes(int numBytes)$/;"	f	class:OVR::FILEFile
SkipBytes	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         SkipBytes(int \/*numBytes*\/)                          { return  0; }$/;"	f	class:OVR::UnopenedFile
Sleep	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::Sleep(unsigned secs)$/;"	f	class:OVR::Thread
Slots	Src/Kernel/OVR_Lockless.h	/^    SlotType       Slots[2];$/;"	m	class:OVR::LocklessUpdater
SlowGetInstance	Src/OVR_Profile.cpp	/^template<> ProfileManager* OVR::SystemSingletonBase<ProfileManager>::SlowGetInstance()$/;"	f	class:OVR::OVR::SystemSingletonBase
SockAddr	Src/Net/OVR_Unix_Socket.cpp	/^SockAddr::SockAddr()$/;"	f	class:OVR::Net::SockAddr
SockAddr	Src/Net/OVR_Unix_Socket.cpp	/^SockAddr::SockAddr(SockAddr* address)$/;"	f	class:OVR::Net::SockAddr
SockAddr	Src/Net/OVR_Unix_Socket.cpp	/^SockAddr::SockAddr(const char* hostAddress, UInt16 port, int sockType)$/;"	f	class:OVR::Net::SockAddr
SockAddr	Src/Net/OVR_Unix_Socket.cpp	/^SockAddr::SockAddr(sockaddr_in6* address)$/;"	f	class:OVR::Net::SockAddr
SockAddr	Src/Net/OVR_Unix_Socket.cpp	/^SockAddr::SockAddr(sockaddr_storage* storage)$/;"	f	class:OVR::Net::SockAddr
SockAddr	Src/Net/OVR_Unix_Socket.h	/^class SockAddr$/;"	c	namespace:OVR::Net
Socket	Src/Net/OVR_Socket.cpp	/^Socket::Socket() :$/;"	f	class:OVR::Net::Socket
Socket	Src/Net/OVR_Socket.h	/^class Socket : public RefCountBase<Socket>$/;"	c	namespace:OVR::Net
SocketEvent_TCP	Src/Net/OVR_Socket.h	/^class SocketEvent_TCP$/;"	c	namespace:OVR::Net
SocketEvent_UDP	Src/Net/OVR_Socket.h	/^class SocketEvent_UDP$/;"	c	namespace:OVR::Net
SocketHandle	Src/Net/OVR_Socket.h	/^typedef SOCKET SocketHandle;$/;"	t	namespace:OVR::Net
SocketHandle	Src/Net/OVR_Socket.h	/^typedef int SocketHandle;$/;"	t	namespace:OVR::Net
SocketListeners	Src/Net/OVR_Session.h	/^	Array< Ptr<TCPSocket> >   SocketListeners;     \/\/ List of active sockets$/;"	m	class:OVR::Net::Session
SocketListenersLock	Src/Net/OVR_Session.h	/^    Lock SocketListenersLock, ConnectionsLock, SessionListenersLock;$/;"	m	class:OVR::Net::Session
StackSize	Src/Kernel/OVR_Threads.h	/^    size_t              StackSize;$/;"	m	class:OVR::Thread
Stage	Src/CAPI/GL/CAPI_GL_Util.h	/^    ShaderStage Stage;$/;"	m	class:OVR::CAPI::GL::Shader
StandardUniformData	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    struct StandardUniformData$/;"	s	class:OVR::CAPI::GL::DistortionRenderer
Start	Src/CAPI/CAPI_LatencyStatistics.cpp	/^bool LatencyStatisticsCSV::Start(String fileName, String userData1)$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
Start	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::Start(ThreadState initialState)$/;"	f	class:OVR::Thread
StartLocklessTest	Src/Kernel/OVR_Lockless.cpp	/^void StartLocklessTest()$/;"	f	namespace:OVR
StartTime	Src/CAPI/CAPI_HSWDisplay.h	/^    double                 StartTime;               \/\/ Absolute time when the warning was first displayed. See ovr_GetTimeInSeconds().$/;"	m	class:OVR::CAPI::HSWDisplay
StartTime	Src/OVR_CAPI.h	/^    double  StartTime;       \/\/\/ Absolute time when the warning was first displayed. See ovr_GetTimeInSeconds().$/;"	m	struct:ovrHSWDisplayState_
State	Src/Kernel/OVR_Threads.h	/^    volatile bool   State;$/;"	m	class:OVR::Event
State	Src/Net/OVR_Session.h	/^    EConnectionState State;$/;"	m	class:OVR::Net::Connection
StateMutex	Src/Kernel/OVR_Threads.h	/^    mutable Mutex   StateMutex;$/;"	m	class:OVR::Event
StateMutex	Src/Net/OVR_Session.h	/^    Mutex         StateMutex;$/;"	m	class:OVR::Net::NetworkConnection
StateWaitCondition	Src/Kernel/OVR_Threads.h	/^    WaitCondition   StateWaitCondition;$/;"	m	class:OVR::Event
State_Connected	Src/Net/OVR_Session.h	/^    State_Connected        \/\/ Connected$/;"	e	enum:OVR::Net::EConnectionState
State_Zombie	Src/Net/OVR_Session.h	/^    State_Zombie,          \/\/ Disconnected$/;"	e	enum:OVR::Net::EConnectionState
States	Src/Kernel/OVR_KeyCodes.h	/^    unsigned char States;$/;"	m	class:OVR::KeyModifiers
StatusBits	Src/Tracking/Tracking_SensorState.h	/^enum StatusBits$/;"	g	namespace:OVR::Tracking
StatusFlags	Src/OVR_CAPI.h	/^    unsigned int   StatusFlags;$/;"	m	struct:ovrTrackingState_
StatusFlags	Src/Tracking/Tracking_SensorState.h	/^	uint32_t          StatusFlags;$/;"	m	struct:OVR::Tracking::LocklessSensorState
StatusFlags	Src/Tracking/Tracking_SensorState.h	/^	uint32_t     StatusFlags;$/;"	m	class:OVR::Tracking::TrackingState
Status_AllMask	Src/Tracking/Tracking_SensorState.h	/^    Status_AllMask = 0xffff,$/;"	e	enum:OVR::Tracking::StatusBits
Status_CameraPoseTracked	Src/Tracking/Tracking_SensorState.h	/^    Status_CameraPoseTracked  = 0x0004, \/\/ Camera pose is currently tracked$/;"	e	enum:OVR::Tracking::StatusBits
Status_ConnectedMask	Src/Tracking/Tracking_SensorState.h	/^    Status_ConnectedMask = Status_PositionConnected | Status_HMDConnected,$/;"	e	enum:OVR::Tracking::StatusBits
Status_HMDConnected	Src/Tracking/Tracking_SensorState.h	/^	Status_HMDConnected       = 0x0080, \/\/ HMD is available & connected$/;"	e	enum:OVR::Tracking::StatusBits
Status_OrientationTracked	Src/Tracking/Tracking_SensorState.h	/^	Status_OrientationTracked = 0x0001, \/\/ Orientation is currently tracked (connected and in use)$/;"	e	enum:OVR::Tracking::StatusBits
Status_PositionConnected	Src/Tracking/Tracking_SensorState.h	/^    Status_PositionConnected  = 0x0020, \/\/ Position tracking HW is connected$/;"	e	enum:OVR::Tracking::StatusBits
Status_PositionTracked	Src/Tracking/Tracking_SensorState.h	/^	Status_PositionTracked    = 0x0002, \/\/ Position is currently tracked (false if out of range)$/;"	e	enum:OVR::Tracking::StatusBits
Status_TrackingMask	Src/Tracking/Tracking_SensorState.h	/^    Status_TrackingMask = Status_PositionTracked | Status_OrientationTracked | Status_CameraPoseTracked,$/;"	e	enum:OVR::Tracking::StatusBits
StdUniforms	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    }                   StdUniforms;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer	typeref:struct:OVR::CAPI::GL::DistortionRenderer::StandardUniformData
StereoConfig	Src/Util/Util_Render_Stereo.cpp	/^StereoConfig::StereoConfig(StereoMode mode)$/;"	f	class:OVR::Util::Render::StereoConfig
StereoConfig	Src/Util/Util_Render_Stereo.h	/^class StereoConfig$/;"	c	namespace:OVR::Util::Render
StereoEye	Src/OVR_Stereo.h	/^enum StereoEye$/;"	g	namespace:OVR
StereoEye	Src/Util/Util_Render_Stereo.h	/^    StereoEyeParams         StereoEye;$/;"	m	struct:OVR::Util::Render::StereoEyeParamsWithOrtho
StereoEyeParams	Src/OVR_Stereo.h	/^struct StereoEyeParams$/;"	s	namespace:OVR
StereoEyeParamsWithOrtho	Src/Util/Util_Render_Stereo.h	/^struct StereoEyeParamsWithOrtho$/;"	s	namespace:OVR::Util::Render
StereoEye_Center	Src/OVR_Stereo.h	/^    StereoEye_Center,$/;"	e	enum:OVR::StereoEye
StereoEye_Left	Src/OVR_Stereo.h	/^    StereoEye_Left,$/;"	e	enum:OVR::StereoEye
StereoEye_Right	Src/OVR_Stereo.h	/^    StereoEye_Right    $/;"	e	enum:OVR::StereoEye
StereoMode	Src/Util/Util_Render_Stereo.h	/^    enum StereoMode$/;"	g	class:OVR::Util::Render::StereoConfig
Stereo_LeftRight_Multipass	Src/Util/Util_Render_Stereo.h	/^        Stereo_LeftRight_Multipass      = 1,        \/\/ One frustum per eye$/;"	e	enum:OVR::Util::Render::StereoConfig::StereoMode
Stereo_None	Src/Util/Util_Render_Stereo.h	/^        Stereo_None                     = 0,        \/\/ Single eye$/;"	e	enum:OVR::Util::Render::StereoConfig::StereoMode
Stop	Src/CAPI/CAPI_LatencyStatistics.cpp	/^bool LatencyStatisticsCSV::Stop()$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
Store_Release	Src/Kernel/OVR_Atomic.h	/^    inline static void  Store_Release(volatile C* p, C val)             { C2T_union u; u.c = val; Ops::Store_Release((PT)p, u.t); }    $/;"	f	class:OVR::AtomicOps
Store_Release	Src/Kernel/OVR_Atomic.h	/^    inline static void  Store_Release(volatile O_T* p, O_T val)  { Exchange_Release(p, val); }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Store_Release	Src/Kernel/OVR_Atomic.h	/^    inline static void  Store_Release(volatile O_T* p, O_T val)  { O_ReleaseSync sync; OVR_UNUSED(sync); *p = val; }$/;"	f	struct:OVR::AtomicOpsRaw_DefImpl
Store_Release	Src/Kernel/OVR_Atomic.h	/^    inline void  Store_Release(T val)               { Ops::Store_Release(&Value, val); }$/;"	f	class:OVR::AtomicValueBase
String	Src/Kernel/OVR_String.cpp	/^String::String()$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const InitStruct& src, size_t size)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const String& src)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const StringBuffer& src)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const char* pdata)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const char* pdata, size_t size)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const char* pdata1, const char* pdata2, const char* pdata3)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.cpp	/^String::String(const wchar_t* data)$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.h	/^    String(const NoConstructor&) { }$/;"	f	class:OVR::String
String	Src/Kernel/OVR_String.h	/^class String$/;"	c	namespace:OVR
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer()$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(const String& src)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(const StringBuffer& src)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(const char* data)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(const char* data, size_t dataSize)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(const wchar_t* data)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::StringBuffer(size_t growSize)$/;"	f	class:OVR::StringBuffer
StringBuffer	Src/Kernel/OVR_String.h	/^class StringBuffer$/;"	c	namespace:OVR
StringDataPtr	Src/Kernel/OVR_String.h	/^    StringDataPtr() : pStr(NULL), Size(0) {}$/;"	f	class:OVR::StringDataPtr
StringDataPtr	Src/Kernel/OVR_String.h	/^    StringDataPtr(const StringDataPtr& p)$/;"	f	class:OVR::StringDataPtr
StringDataPtr	Src/Kernel/OVR_String.h	/^    StringDataPtr(const char* pstr)$/;"	f	class:OVR::StringDataPtr
StringDataPtr	Src/Kernel/OVR_String.h	/^    StringDataPtr(const char* pstr, size_t sz)$/;"	f	class:OVR::StringDataPtr
StringDataPtr	Src/Kernel/OVR_String.h	/^    explicit StringDataPtr(const String& str)$/;"	f	class:OVR::StringDataPtr
StringDataPtr	Src/Kernel/OVR_String.h	/^class StringDataPtr$/;"	c	namespace:OVR
StringHash	Src/Kernel/OVR_StringHash.h	/^class StringHash : public Hash<String, U, String::NoCaseHashFunctor, Allocator>$/;"	c	namespace:OVR
String_LengthIsSize	Src/Kernel/OVR_String.cpp	39;"	d	file:
StripExtension	Src/Kernel/OVR_String_PathUtil.cpp	/^void    String::StripExtension()$/;"	f	class:OVR::String
StripProtocol	Src/Kernel/OVR_String_PathUtil.cpp	/^void    String::StripProtocol()$/;"	f	class:OVR::String
StubPointer	Src/Kernel/OVR_Delegates.h	/^	typedef ret_type (*StubPointer)(void *);$/;"	t	class:OVR::Delegate0
StubPointer	Src/Kernel/OVR_Delegates.h	/^	typedef ret_type (*StubPointer)(void *, arg1_type);$/;"	t	class:OVR::Delegate1
StubPointer	Src/Kernel/OVR_Delegates.h	/^	typedef ret_type (*StubPointer)(void *, arg1_type, arg2_type);$/;"	t	class:OVR::Delegate2
StubPointer	Src/Kernel/OVR_Delegates.h	/^	typedef ret_type (*StubPointer)(void *, arg1_type, arg2_type, arg3_type);$/;"	t	class:OVR::Delegate3
SubDet	Src/Kernel/OVR_Math.h	/^	T SubDet (const size_t* rows, const size_t* cols) const$/;"	f	class:OVR::Matrix3
SubDet	Src/Kernel/OVR_Math.h	/^    T SubDet (const size_t* rows, const size_t* cols) const$/;"	f	class:OVR::Matrix4
SubjectAddObserver	Src/Kernel/OVR_Observer.h	/^	bool SubjectAddObserver(ThisType* observer)$/;"	f	class:OVR::Observer
SubmitEye	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::SubmitEye(int eyeId, const ovrTexture* eyeTexture)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
SubmitEyeTextures	Src/CAPI/CAPI_HMDState.cpp	/^void  HMDState::SubmitEyeTextures(const ovrPosef renderPose[2],$/;"	f	class:OVR::CAPI::HMDState
Substring	Src/Kernel/OVR_String.cpp	/^String   String::Substring(size_t start, size_t end) const$/;"	f	class:OVR::String
SupportsDrawBuffers	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool        SupportsDrawBuffers; \/\/ Supports Draw Buffers?$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
SupportsVAO	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool        SupportsVAO;         \/\/ Supports Vertex Array Objects?$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
Suspend	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    Thread::Suspend()$/;"	f	class:OVR::Thread
SuspendCount	Src/Kernel/OVR_Threads.h	/^    AtomicInt<int32_t>   SuspendCount;$/;"	m	class:OVR::Thread
Suspended	Src/Kernel/OVR_Threads.h	/^        Suspended   = 2$/;"	e	enum:OVR::Thread::ThreadState
Swap	Src/Kernel/OVR_Alg.h	/^template <typename T> OVR_FORCE_INLINE void Swap(T &a, T &b) $/;"	f	namespace:OVR::Alg
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline double   SwapOrder(double p)$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline float    SwapOrder(float p)      $/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline int16_t  SwapOrder(int16_t v)    { return int16_t((uint16_t(v)>>8)|(v<<8)); }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline int32_t  SwapOrder(int32_t p)    { return (int32_t)SwapOrder(uint32_t(p)); }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline int64_t  SwapOrder(int64_t v)     { return (int64_t)SwapOrder(uint64_t(v)); }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline int8_t   SwapOrder(int8_t v)     { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline uint16_t SwapOrder(uint16_t v)   { return uint16_t(v>>8)|uint16_t(v<<8); }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline uint32_t SwapOrder(uint32_t v)   { return (v>>24)|((v&0x00FF0000)>>8)|((v&0x0000FF00)<<8)|(v<<24); }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline uint64_t SwapOrder(uint64_t v)$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  SwapOrder(uint8_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SwapOrder	Src/Kernel/OVR_Alg.h	/^    inline void     SwapOrder(void* pv, int size)$/;"	f	namespace:OVR::Alg::ByteUtil
SymMat3	Src/Kernel/OVR_Math.h	/^	inline SymMat3() {}$/;"	f	class:OVR::SymMat3
SymMat3	Src/Kernel/OVR_Math.h	/^	inline explicit SymMat3(T a00, T a01, T a02, T a11, T a12, T a22)$/;"	f	class:OVR::SymMat3
SymMat3	Src/Kernel/OVR_Math.h	/^	inline explicit SymMat3(T s)$/;"	f	class:OVR::SymMat3
SymMat3	Src/Kernel/OVR_Math.h	/^class SymMat3$/;"	c	namespace:OVR
SymMat3d	Src/Kernel/OVR_Math.h	/^typedef SymMat3<double> SymMat3d;$/;"	t	namespace:OVR
SymMat3f	Src/Kernel/OVR_Math.h	/^typedef SymMat3<float>  SymMat3f;$/;"	t	namespace:OVR
SysErrorModeDisabler	Src/Kernel/OVR_FileFILE.cpp	/^    SysErrorModeDisabler(const char* pfileName) { OVR_UNUSED(pfileName); }$/;"	f	class:OVR::SysErrorModeDisabler
SysErrorModeDisabler	Src/Kernel/OVR_FileFILE.cpp	/^    SysErrorModeDisabler(const char* pfileName)$/;"	f	class:OVR::SysErrorModeDisabler
SysErrorModeDisabler	Src/Kernel/OVR_FileFILE.cpp	/^class SysErrorModeDisabler$/;"	c	namespace:OVR	file:
SysFile	Src/Kernel/OVR_SysFile.cpp	/^SysFile::SysFile() : DelegatedFile(0)$/;"	f	class:OVR::SysFile
SysFile	Src/Kernel/OVR_SysFile.cpp	/^SysFile::SysFile(const String& path, int flags, int mode) : DelegatedFile(0)$/;"	f	class:OVR::SysFile
SysFile	Src/Kernel/OVR_SysFile.h	/^  SysFile(const SysFile &source) : DelegatedFile () { OVR_UNUSED(source); }$/;"	f	class:OVR::SysFile
SysFile	Src/Kernel/OVR_SysFile.h	/^class SysFile : public DelegatedFile$/;"	c	namespace:OVR
System	Src/Kernel/OVR_System.h	/^    System(Log* log = Log::ConfigureDefaultLog(LogMask_Debug),$/;"	f	class:OVR::System
System	Src/Kernel/OVR_System.h	/^class System$/;"	c	namespace:OVR
SystemShutdownListenerStack	Src/Kernel/OVR_System.cpp	/^static SystemSingletonInternal *SystemShutdownListenerStack = 0;$/;"	m	namespace:OVR	file:
SystemSingletonBase	Src/Kernel/OVR_System.h	/^class SystemSingletonBase : public SystemSingletonInternal$/;"	c	namespace:OVR
SystemSingletonInternal	Src/Kernel/OVR_System.h	/^    SystemSingletonInternal() :$/;"	f	class:OVR::SystemSingletonInternal
SystemSingletonInternal	Src/Kernel/OVR_System.h	/^class SystemSingletonInternal$/;"	c	namespace:OVR
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline double   SystemToBE(double v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline double   SystemToBE(double v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline float    SystemToBE(float  v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline float    SystemToBE(float  v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int16_t  SystemToBE(int16_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int16_t  SystemToBE(int16_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int32_t  SystemToBE(int32_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int32_t  SystemToBE(int32_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int64_t  SystemToBE(int64_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int64_t  SystemToBE(int64_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int8_t   SystemToBE(int8_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline int8_t   SystemToBE(int8_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint16_t SystemToBE(uint16_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint16_t SystemToBE(uint16_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint32_t SystemToBE(uint32_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint32_t SystemToBE(uint32_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint64_t SystemToBE(uint64_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint64_t SystemToBE(uint64_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  SystemToBE(uint8_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToBE	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  SystemToBE(uint8_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline double   SystemToLE(double v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline double   SystemToLE(double v)    { return v; }   $/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline float    SystemToLE(float  v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline float    SystemToLE(float  v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int16_t  SystemToLE(int16_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int16_t  SystemToLE(int16_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int32_t  SystemToLE(int32_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int32_t  SystemToLE(int32_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int64_t  SystemToLE(int64_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int64_t  SystemToLE(int64_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int8_t   SystemToLE(int8_t v)    { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline int8_t   SystemToLE(int8_t v)    { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint16_t SystemToLE(uint16_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint16_t SystemToLE(uint16_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint32_t SystemToLE(uint32_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint32_t SystemToLE(uint32_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint64_t SystemToLE(uint64_t v)  { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint64_t SystemToLE(uint64_t v)  { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  SystemToLE(uint8_t v)   { return SwapOrder(v); }$/;"	f	namespace:OVR::Alg::ByteUtil
SystemToLE	Src/Kernel/OVR_Alg.h	/^    inline uint8_t  SystemToLE(uint8_t v)   { return v; }$/;"	f	namespace:OVR::Alg::ByteUtil
T	Src/Kernel/OVR_Atomic.h	/^    typedef typename Ops::T               T;$/;"	t	class:OVR::AtomicOps
T	Src/Kernel/OVR_Atomic.h	/^    typedef uint32_t T;   $/;"	t	struct:OVR::AtomicOpsRaw_4ByteImpl
T	Src/Kernel/OVR_Atomic.h	/^    typedef uint64_t T;$/;"	t	struct:OVR::AtomicOpsRaw_8ByteImpl
TCPConnection	Src/Net/OVR_Session.h	/^    TCPConnection()$/;"	f	class:OVR::Net::TCPConnection
TCPConnection	Src/Net/OVR_Session.h	/^class TCPConnection : public NetworkConnection$/;"	c	namespace:OVR::Net
TCPSocket	Src/Net/OVR_Unix_Socket.cpp	/^TCPSocket::TCPSocket()$/;"	f	class:OVR::Net::TCPSocket
TCPSocket	Src/Net/OVR_Unix_Socket.cpp	/^TCPSocket::TCPSocket(SocketHandle boundHandle, bool isListenSocket)$/;"	f	class:OVR::Net::TCPSocket
TCPSocket	Src/Net/OVR_Unix_Socket.h	/^class TCPSocket : public TCPSocketBase$/;"	c	namespace:OVR::Net
TCPSocketBase	Src/Net/OVR_Socket.cpp	/^TCPSocketBase::TCPSocketBase()$/;"	f	class:OVR::Net::TCPSocketBase
TCPSocketBase	Src/Net/OVR_Socket.cpp	/^TCPSocketBase::TCPSocketBase(SocketHandle handle)$/;"	f	class:OVR::Net::TCPSocketBase
TCPSocketBase	Src/Net/OVR_Socket.h	/^class TCPSocketBase : public BerkleySocket$/;"	c	namespace:OVR::Net
TCPSocketPollState	Src/Net/OVR_Unix_Socket.cpp	/^TCPSocketPollState::TCPSocketPollState()$/;"	f	class:OVR::Net::TCPSocketPollState
TCPSocketPollState	Src/Net/OVR_Unix_Socket.h	/^class TCPSocketPollState$/;"	c	namespace:OVR::Net
TCP_OnAccept	Src/Net/OVR_Session.cpp	/^void Session::TCP_OnAccept(TCPSocket* pListener, SockAddr* pSockAddr, SocketHandle newSock)$/;"	f	class:OVR::Net::Session
TCP_OnAccept	Src/Net/OVR_Socket.h	/^	virtual void TCP_OnAccept   (TCPSocket* pListener,$/;"	f	class:OVR::Net::SocketEvent_TCP
TCP_OnClosed	Src/Net/OVR_Session.cpp	/^void Session::TCP_OnClosed(TCPSocket* s)$/;"	f	class:OVR::Net::Session
TCP_OnClosed	Src/Net/OVR_Socket.h	/^	virtual void TCP_OnClosed   (TCPSocket* pSocket)$/;"	f	class:OVR::Net::SocketEvent_TCP
TCP_OnConnected	Src/Net/OVR_Session.cpp	/^void Session::TCP_OnConnected(TCPSocket *s)$/;"	f	class:OVR::Net::Session
TCP_OnConnected	Src/Net/OVR_Socket.h	/^	virtual void TCP_OnConnected(TCPSocket* pSocket)$/;"	f	class:OVR::Net::SocketEvent_TCP
TCP_OnRecv	Src/Net/OVR_Session.cpp	/^void Session::TCP_OnRecv(Socket* pSocket, uint8_t* pData, int bytesRead)$/;"	f	class:OVR::Net::Session
TCP_OnRecv	Src/Net/OVR_Socket.h	/^	virtual void TCP_OnRecv     (Socket* pSocket,$/;"	f	class:OVR::Net::SocketEvent_TCP
TPH_SPLINE_STATISTICS	Src/OVR_Stereo.cpp	84;"	d	file:
TableType	Src/Kernel/OVR_Hash.h	/^    struct TableType$/;"	s	class:OVR::HashSetBase
Tail	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    size_t  Tail;   \/\/ Byte offset of next item to be popped.$/;"	m	class:OVR::CircularBuffer	file:
TanAngleToRendertargetNDC	Src/OVR_CAPI.cpp	/^Vector2f FovPort::TanAngleToRendertargetNDC(Vector2f const &tanEyeAngle)$/;"	f	class:OVR::FovPort
TanEyeAngleScale	Src/OVR_Stereo.h	/^    Vector2f            TanEyeAngleScale;$/;"	m	struct:OVR::DistortionRenderDesc
TanEyeAngles	Src/Util/Util_Render_Stereo.h	/^    Vector2f    TanEyeAngles;    $/;"	m	struct:OVR::Util::Render::HeightmapMeshVertexData
TanEyeAnglesB	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Vector2f TanEyeAnglesB;$/;"	m	struct:OVR::CAPI::GL::DistortionVertex	file:
TanEyeAnglesB	Src/OVR_CAPI.h	/^    ovrVector2f TanEyeAnglesB;$/;"	m	struct:ovrDistortionVertex_
TanEyeAnglesB	Src/Util/Util_Render_Stereo.h	/^    Vector2f    TanEyeAnglesB;    $/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
TanEyeAnglesG	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Vector2f TanEyeAnglesG;$/;"	m	struct:OVR::CAPI::GL::DistortionVertex	file:
TanEyeAnglesG	Src/OVR_CAPI.h	/^    ovrVector2f TanEyeAnglesG;$/;"	m	struct:ovrDistortionVertex_
TanEyeAnglesG	Src/Util/Util_Render_Stereo.h	/^    Vector2f    TanEyeAnglesG;$/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
TanEyeAnglesR	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^    Vector2f TanEyeAnglesR;$/;"	m	struct:OVR::CAPI::GL::DistortionVertex	file:
TanEyeAnglesR	Src/OVR_CAPI.h	/^    ovrVector2f TanEyeAnglesR;$/;"	m	struct:ovrDistortionVertex_
TanEyeAnglesR	Src/Util/Util_Render_Stereo.h	/^    Vector2f    TanEyeAnglesR;$/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
Tell	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::Tell()$/;"	f	class:OVR::BufferedFile
Tell	Src/Kernel/OVR_File.h	/^    int         Tell()              { return FileIndex; }$/;"	f	class:OVR::MemoryFile
Tell	Src/Kernel/OVR_File.h	/^    virtual int         Tell()                                      { return pFile->Tell(); }$/;"	f	class:OVR::DelegatedFile
Tell	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::Tell()$/;"	f	class:OVR::FILEFile
Tell	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         Tell()                      { return 0; }$/;"	f	class:OVR::UnopenedFile
TempBuff	Src/OVR_Profile.h	/^    String              TempBuff;$/;"	m	class:OVR::ProfileManager
TempVal	Src/OVR_Profile.h	/^    OVR::String         TempVal;$/;"	m	class:OVR::Profile
Temperature	Src/OVR_CAPI.h	/^    float          Temperature;      \/\/\/ Temperature of the sensor in degrees Celsius.$/;"	m	struct:ovrSensorData_
Temperature	Src/Sensors/OVR_DeviceConstants.h	/^    float    Temperature;      \/\/ in degrees Celsius$/;"	m	class:OVR::SensorDataType
Temporary	Src/Kernel/OVR_Threads.h	/^    volatile bool   Temporary;  $/;"	m	class:OVR::Event
Terminated	Src/Service/Service_NetSessionCommon.h	/^    bool                Terminated; \/\/ Thread termination flag$/;"	m	class:OVR::Service::NetSessionCommon
TestData	Src/Kernel/OVR_Lockless.cpp	/^struct TestData$/;"	s	namespace:OVR::LocklessTest	file:
TestDataUpdater	Src/Kernel/OVR_Lockless.cpp	/^LocklessUpdater<TestData, TestData>  TestDataUpdater;$/;"	m	namespace:OVR::LocklessTest	file:
TestIterations	Src/Kernel/OVR_Lockless.cpp	/^const int TestIterations = 10000000;$/;"	m	namespace:OVR::LocklessTest	file:
TestLock	Src/Kernel/OVR_Lockless.cpp	/^Lock                       TestLock;   $/;"	m	namespace:OVR::LocklessTest	file:
TestPos	Src/Kernel/OVR_FileFILE.cpp	/^    unsigned    TestPos; \/\/ File pointer position during tests.$/;"	m	class:OVR::FILEFile	file:
TestSaveLoadLensConfig	Src/OVR_Stereo.cpp	/^void TestSaveLoadLensConfig ( LensConfig const &config )$/;"	f	namespace:OVR
TestSerialFormatStuff	Src/OVR_SerialFormat.cpp	/^void TestSerialFormatStuff()$/;"	f	namespace:OVR
TestSide	Src/Kernel/OVR_Math.h	/^    T TestSide(const Vector3<T>& p) const$/;"	f	class:OVR::Plane
TexId	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLuint        TexId;$/;"	m	class:OVR::CAPI::GL::Texture
TexId	Src/OVR_CAPI_GL.h	/^    GLuint           TexId;       $/;"	m	struct:ovrGLTextureData_s
TexLoc	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLint     TexLoc[8];$/;"	m	class:OVR::CAPI::GL::ShaderSet
TextPlot	Src/Util/Util_ImageWindow.h	/^	} TextPlot;$/;"	t	namespace:OVR::Util	typeref:struct:OVR::Util::__anon17
Texture	Src/CAPI/GL/CAPI_GL_Util.cpp	/^Texture::Texture(RenderParams* rp, int w, int h) : IsUserAllocated(false), pParams(rp), TexId(0), Width(w), Height(h)$/;"	f	class:OVR::CAPI::GL::Texture
Texture	Src/CAPI/GL/CAPI_GL_Util.h	/^class Texture : public RefCountBase<Texture>$/;"	c	namespace:OVR::CAPI::GL
Texture	Src/OVR_CAPI_GL.h	/^    ovrTexture       Texture;$/;"	m	union:ovrGLTexture_s
TextureBinding	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint TextureBinding;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
TextureFormat	Src/CAPI/GL/CAPI_GL_Util.h	/^enum TextureFormat$/;"	g	namespace:OVR::CAPI::GL
TextureSize	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        Sizei                     TextureSize;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
TextureSize	Src/OVR_CAPI.h	/^    ovrSizei         TextureSize;$/;"	m	struct:ovrTextureHeader_
Texture_Depth	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_Depth           = 0x8000,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Texture_GenMipmaps	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_GenMipmaps      = 0x20000,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Texture_RGBA	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_RGBA            = 0x0100,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Texture_RenderTarget	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_RenderTarget    = 0x10000,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Texture_SamplesMask	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_SamplesMask     = 0x00ff,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Texture_TypeMask	Src/CAPI/GL/CAPI_GL_Util.h	/^    Texture_TypeMask        = 0xff00,$/;"	e	enum:OVR::CAPI::GL::TextureFormat
Textures	Src/CAPI/GL/CAPI_GL_Util.h	/^    Ptr<class Texture> Textures[8];$/;"	m	class:OVR::CAPI::GL::ShaderFill
TheHandler	Src/Kernel/OVR_Observer.h	/^	DelegateT TheHandler;$/;"	m	class:OVR::ObserverScope
TheHandler	Src/Kernel/OVR_Observer.h	/^	Handler                  TheHandler; \/\/ Observer-only: Handler for callbacks$/;"	m	class:OVR::Observer
TheLatencyTestStateReader	Src/CAPI/CAPI_HMDState.h	/^    Util::RecordStateReader             TheLatencyTestStateReader;$/;"	m	class:OVR::CAPI::HMDState
TheLock	Src/Kernel/OVR_Observer.h	/^	Lock                     TheLock;      \/\/ Lock to synchronize calls and shutdown$/;"	m	class:OVR::ObserverHash
TheLock	Src/Kernel/OVR_Observer.h	/^	mutable Lock             TheLock;    \/\/ Lock to synchronize calls and shutdown$/;"	m	class:OVR::Observer
TheObserver	Src/Kernel/OVR_Observer.h	/^	Ptr< Observer<DelegateT> > TheObserver;$/;"	m	class:OVR::ObserverScope
ThePose	Src/OVR_CAPI.h	/^    ovrPosef     ThePose;$/;"	m	struct:ovrPoseStatef_
ThePose	Src/Tracking/Tracking_PoseState.h	/^	Pose<T> ThePose;$/;"	m	class:OVR::PoseState
TheSensorStateReader	Src/CAPI/CAPI_HMDState.h	/^    Tracking::SensorStateReader         TheSensorStateReader;$/;"	m	class:OVR::CAPI::HMDState
TheSocket	Src/Net/OVR_Socket.h	/^	SocketHandle TheSocket;           \/\/ Socket handle$/;"	m	class:OVR::Net::BerkleySocket
ThisFrameSeconds	Src/OVR_CAPI.h	/^    double          ThisFrameSeconds;$/;"	m	struct:ovrFrameTiming_
ThisFrameTime	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              ThisFrameTime;$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
ThisType	Src/Kernel/OVR_Observer.h	/^    typedef Observer<DelegateT> ThisType;$/;"	t	class:OVR::Observer
Thread	Src/Kernel/OVR_Threads.h	/^    Thread(const Thread &source) : RefCountBase<Thread>() { OVR_UNUSED(source); }$/;"	f	class:OVR::Thread
Thread	Src/Kernel/OVR_Threads.h	/^class Thread : public RefCountBase<Thread>$/;"	c	namespace:OVR
Thread	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::Thread(Thread::ThreadFn threadFunction, void*  userHandle, UPInt stackSize,$/;"	f	class:OVR::Thread
Thread	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::Thread(UPInt stackSize, int processor)$/;"	f	class:OVR::Thread
Thread	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::Thread(const CreateParams& params)$/;"	f	class:OVR::Thread
ThreadChecker	Src/CAPI/CAPI_HMDState.h	/^    ThreadChecker() { }$/;"	f	class:OVR::CAPI::ThreadChecker
ThreadChecker	Src/CAPI/CAPI_HMDState.h	/^class ThreadChecker$/;"	c	namespace:OVR::CAPI
ThreadCommand	Src/Kernel/OVR_ThreadCommandQueue.h	/^    ThreadCommand(size_t size, bool waitFlag, bool exitFlag = false)$/;"	f	class:OVR::ThreadCommand
ThreadCommand	Src/Kernel/OVR_ThreadCommandQueue.h	/^class ThreadCommand$/;"	c	namespace:OVR
ThreadCommandMF0	Src/Kernel/OVR_ThreadCommandQueue.h	/^    ThreadCommandMF0(C* pclass, FnPtr fn, R* ret, bool needsWait)$/;"	f	class:OVR::ThreadCommandMF0
ThreadCommandMF0	Src/Kernel/OVR_ThreadCommandQueue.h	/^class ThreadCommandMF0 : public ThreadCommand$/;"	c	namespace:OVR
ThreadCommandMF1	Src/Kernel/OVR_ThreadCommandQueue.h	/^    ThreadCommandMF1(C* pclass, FnPtr fn, R* ret, A0 a0, bool needsWait)$/;"	f	class:OVR::ThreadCommandMF1
ThreadCommandMF1	Src/Kernel/OVR_ThreadCommandQueue.h	/^class ThreadCommandMF1 : public ThreadCommand$/;"	c	namespace:OVR
ThreadCommandMF2	Src/Kernel/OVR_ThreadCommandQueue.h	/^    ThreadCommandMF2(C* pclass, FnPtr fn, R* ret, A0 a0, A1 a1, bool needsWait)$/;"	f	class:OVR::ThreadCommandMF2
ThreadCommandMF2	Src/Kernel/OVR_ThreadCommandQueue.h	/^class ThreadCommandMF2 : public ThreadCommand$/;"	c	namespace:OVR
ThreadCommandQueue	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^ThreadCommandQueue::ThreadCommandQueue()$/;"	f	class:OVR::ThreadCommandQueue
ThreadCommandQueue	Src/Kernel/OVR_ThreadCommandQueue.h	/^class ThreadCommandQueue$/;"	c	namespace:OVR
ThreadCommandQueueImpl	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    ThreadCommandQueueImpl(ThreadCommandQueue* queue) :$/;"	f	class:OVR::ThreadCommandQueueImpl
ThreadCommandQueueImpl	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^class ThreadCommandQueueImpl : public NewOverrideBase$/;"	c	namespace:OVR	file:
ThreadFlags	Src/Kernel/OVR_Threads.h	/^    AtomicInt<uint32_t>   ThreadFlags;$/;"	m	class:OVR::Thread
ThreadFn	Src/Kernel/OVR_Threads.h	/^    typedef int (*ThreadFn)(Thread *pthread, void* h);$/;"	t	class:OVR::Thread
ThreadFunction	Src/Kernel/OVR_Threads.h	/^    ThreadFn    ThreadFunction;    $/;"	m	class:OVR::Thread
ThreadHandle	Src/Kernel/OVR_Threads.h	/^    pthread_t           ThreadHandle;$/;"	m	class:OVR::Thread
ThreadHandle	Src/Kernel/OVR_Threads.h	/^    void*               ThreadHandle;$/;"	m	class:OVR::Thread
ThreadHashOp	Src/Kernel/OVR_ThreadsPthread.cpp	/^    struct ThreadHashOp$/;"	s	class:OVR::ThreadList	file:
ThreadId	Src/Kernel/OVR_Threads.h	/^typedef void* ThreadId;$/;"	t	namespace:OVR
ThreadList	Src/Kernel/OVR_ThreadsPthread.cpp	/^    ThreadList()$/;"	f	class:OVR::ThreadList
ThreadList	Src/Kernel/OVR_ThreadsPthread.cpp	/^class ThreadList : public NewOverrideBase$/;"	c	namespace:OVR	file:
ThreadMutex	Src/Kernel/OVR_ThreadsPthread.cpp	/^    Mutex                                 ThreadMutex;$/;"	m	class:OVR::ThreadList	file:
ThreadPriority	Src/Kernel/OVR_Threads.h	/^    enum ThreadPriority$/;"	g	class:OVR::Thread
ThreadSet	Src/Kernel/OVR_ThreadsPthread.cpp	/^    HashSet<Thread*, ThreadHashOp>        ThreadSet;$/;"	m	class:OVR::ThreadList	file:
ThreadState	Src/Kernel/OVR_Threads.h	/^    enum ThreadState$/;"	g	class:OVR::Thread
Thread_PthreadStartFn	Src/Kernel/OVR_ThreadsPthread.cpp	/^void* Thread_PthreadStartFn(void* phandle)$/;"	f	namespace:OVR
ThreadsEmpty	Src/Kernel/OVR_ThreadsPthread.cpp	/^    WaitCondition                         ThreadsEmpty;$/;"	m	class:OVR::ThreadList	file:
TickState	Src/CAPI/CAPI_HSWDisplay.cpp	/^bool HSWDisplay::TickState(ovrHSWDisplayState *hswDisplayState, bool graphicsContext)$/;"	f	class:OVR::CAPI::HSWDisplay
TimeBufferSeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^    double  TimeBufferSeconds[Capacity];$/;"	m	struct:OVR::CAPI::TimeDeltaCollector
TimeCS	Src/Kernel/OVR_Timer.cpp	/^    CRITICAL_SECTION TimeCS;$/;"	m	struct:OVR::PerformanceTimer	file:
TimeConvertFactorNanos	Src/Kernel/OVR_Timer.cpp	/^double Timer::TimeConvertFactorNanos   = 0.0;$/;"	m	class:OVR::Timer	file:
TimeConvertFactorNanos	Src/Kernel/OVR_Timer.h	/^        static double TimeConvertFactorNanos;     \/\/ Conversion factor for GetTicksNanos$/;"	m	class:OVR::Timer
TimeConvertFactorSeconds	Src/Kernel/OVR_Timer.cpp	/^double Timer::TimeConvertFactorSeconds = 0.0;$/;"	m	class:OVR::Timer	file:
TimeConvertFactorSeconds	Src/Kernel/OVR_Timer.h	/^        static double TimeConvertFactorSeconds;   \/\/ Conversion factor for GetSeconds.$/;"	m	class:OVR::Timer
TimeDeltaCollector	Src/CAPI/CAPI_FrameTimeManager.h	/^    TimeDeltaCollector() : Median(-1.0), Count(0), ReCalcMedian(true) { }$/;"	f	struct:OVR::CAPI::TimeDeltaCollector
TimeDeltaCollector	Src/CAPI/CAPI_FrameTimeManager.h	/^struct TimeDeltaCollector$/;"	s	namespace:OVR::CAPI
TimeInSeconds	Src/OVR_CAPI.h	/^    double       TimeInSeconds;         \/\/ Absolute time of this state sample.$/;"	m	struct:ovrPoseStatef_
TimeInSeconds	Src/OVR_CAPI.h	/^    float          TimeInSeconds;    \/\/\/ Time when the reported IMU reading took place, in seconds.$/;"	m	struct:ovrSensorData_
TimeInSeconds	Src/Tracking/Tracking_PoseState.h	/^	double      TimeInSeconds;$/;"	m	class:OVR::PoseState
TimeManager	Src/CAPI/CAPI_DistortionRenderer.h	/^    FrameTimeManager&       TimeManager;$/;"	m	class:OVR::CAPI::DistortionRenderer
TimeManager	Src/CAPI/CAPI_HMDState.h	/^    FrameTimeManager        TimeManager;$/;"	m	class:OVR::CAPI::HMDState
TimeSeconds	Src/Util/Util_LatencyTest2State.h	/^    double TimeSeconds;$/;"	m	struct:OVR::Util::FrameTimeRecord
TimeWarpFactor	Src/OVR_CAPI.h	/^    float       TimeWarpFactor;  \/\/ Lerp factor between time-warp matrices. Can be encoded in Pos.z.$/;"	m	struct:ovrDistortionVertex_
TimeWarpStartEndTimes	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              TimeWarpStartEndTimes[2][2];$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
TimeoutSec	Src/Net/OVR_Socket.h	/^    int TimeoutUsec, TimeoutSec;$/;"	m	class:OVR::Net::BerkleySocket
TimeoutUsec	Src/Net/OVR_Socket.h	/^    int TimeoutUsec, TimeoutSec;$/;"	m	class:OVR::Net::BerkleySocket
Timer	Src/Kernel/OVR_Timer.h	/^class Timer$/;"	c	namespace:OVR
TimewarpComputePoseDelta	Src/Util/Util_Render_Stereo.cpp	/^Matrix4f TimewarpComputePoseDelta ( Matrix4f const &renderedViewFromWorld, Matrix4f const &predictedViewFromWorld, Matrix4f const&hmdToEyeViewOffset )$/;"	f	namespace:OVR::Util::Render
TimewarpComputePoseDeltaPosition	Src/Util/Util_Render_Stereo.cpp	/^Matrix4f TimewarpComputePoseDeltaPosition ( Matrix4f const &renderedViewFromWorld, Matrix4f const &predictedViewFromWorld, Matrix4f const&hmdToEyeViewOffset )$/;"	f	namespace:OVR::Util::Render
TimewarpIMUTimeSeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^        double  TimewarpIMUTimeSeconds;$/;"	m	struct:OVR::CAPI::FrameLatencyTracker::FrameTimeRecordEx
TimewarpIMUTimeSeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^    double              TimewarpIMUTimeSeconds;$/;"	m	class:OVR::CAPI::FrameTimeManager
TimewarpLatencySeconds	Src/CAPI/CAPI_FrameTimeManager.h	/^    double                TimewarpLatencySeconds;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
TimewarpLerp	Src/Util/Util_Render_Stereo.h	/^    float       TimewarpLerp;$/;"	m	struct:OVR::Util::Render::DistortionMeshVertexData
TimewarpLerp	Src/Util/Util_Render_Stereo.h	/^    float       TimewarpLerp;$/;"	m	struct:OVR::Util::Render::HeightmapMeshVertexData
TimewarpMachine	Src/Util/Util_Render_Stereo.cpp	/^TimewarpMachine::TimewarpMachine()$/;"	f	class:OVR::Util::Render::TimewarpMachine
TimewarpMachine	Src/Util/Util_Render_Stereo.h	/^class TimewarpMachine$/;"	c	namespace:OVR::Util::Render
TimewarpPointSeconds	Src/OVR_CAPI.h	/^    double          TimewarpPointSeconds;$/;"	m	struct:ovrFrameTiming_
TimewarpPointTime	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              TimewarpPointTime;$/;"	m	struct:OVR::CAPI::FrameTimeManager::Timing
TimewarpWaitDelta	Src/CAPI/CAPI_FrameTimeManager.h	/^        double              TimewarpWaitDelta;$/;"	m	struct:OVR::CAPI::FrameTimeManager::TimingInputs
Timing	Src/CAPI/CAPI_FrameTimeManager.h	/^        Timing()$/;"	f	struct:OVR::CAPI::FrameTimeManager::Timing
Timing	Src/CAPI/CAPI_FrameTimeManager.h	/^    struct Timing$/;"	s	class:OVR::CAPI::FrameTimeManager
TimingInputs	Src/CAPI/CAPI_FrameTimeManager.h	/^        TimingInputs()$/;"	f	struct:OVR::CAPI::FrameTimeManager::TimingInputs
TimingInputs	Src/CAPI/CAPI_FrameTimeManager.h	/^    struct TimingInputs$/;"	s	class:OVR::CAPI::FrameTimeManager
ToArray	Src/Kernel/OVR_Math.h	/^    void ToArray(T* arr) const$/;"	f	class:OVR::Pose
ToBase32	Src/OVR_SerialFormat.cpp	/^String DK2PrintedSerialFormat::ToBase32()$/;"	f	class:OVR::DK2PrintedSerialFormat
ToBuffer	Src/OVR_SerialFormat.cpp	/^void DK2BinarySerialFormat::ToBuffer(uint8_t buffer[12])$/;"	f	class:OVR::DK2BinarySerialFormat
ToCStr	Src/Kernel/OVR_String.h	/^    const char* ToCStr() const          { return (pData) ? pData : ""; }$/;"	f	class:OVR::StringBuffer
ToCStr	Src/Kernel/OVR_String.h	/^    const char* ToCStr() const          { return GetData()->Data; }$/;"	f	class:OVR::String
ToCStr	Src/Kernel/OVR_String.h	/^    const char* ToCStr() const { return pStr; }$/;"	f	class:OVR::StringDataPtr
ToEulerAngles	Src/Kernel/OVR_Math.h	/^    void ToEulerAngles(T *a, T *b, T *c) const$/;"	f	class:OVR::Matrix4
ToEulerAnglesABA	Src/Kernel/OVR_Math.h	/^    void ToEulerAnglesABA(T *a, T *b, T *c) const$/;"	f	class:OVR::Matrix4
ToLower	Src/Kernel/OVR_String.cpp	/^String   String::ToLower() const $/;"	f	class:OVR::String
ToString	Src/Kernel/OVR_Math.h	/^	void ToString(char* dest, size_t destsize) const$/;"	f	class:OVR::Matrix3
ToString	Src/Kernel/OVR_Math.h	/^    void ToString(char* dest, size_t destsize) const$/;"	f	class:OVR::Matrix4
ToString	Src/Net/OVR_Unix_Socket.cpp	/^String SockAddr::ToString(bool writePort, char portDelineator) const$/;"	f	class:OVR::Net::SockAddr
ToUpper	Src/Kernel/OVR_String.cpp	/^String   String::ToUpper() const $/;"	f	class:OVR::String
ToVector	Src/Kernel/OVR_Math.h	/^    inline  Vector2<T> ToVector() const     { return Vector2<T>(w, h); }$/;"	f	class:OVR::Size
Trace	Src/Kernel/OVR_Math.h	/^	inline T Trace() const { return v[0] + v[3] + v[5]; }$/;"	f	class:OVR::SymMat3
TrackerEnabled	Src/CAPI/CAPI_FrameTimeManager.h	/^    bool                  TrackerEnabled;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
Tracking	Src/Tracking/Tracking_SensorState.h	/^namespace OVR { namespace Tracking {$/;"	n	namespace:OVR
Tracking	Src/Tracking/Tracking_SensorStateReader.cpp	/^namespace OVR { namespace Tracking {$/;"	n	namespace:OVR	file:
Tracking	Src/Tracking/Tracking_SensorStateReader.h	/^namespace OVR { namespace Tracking {$/;"	n	namespace:OVR
TrackingCaps	Src/OVR_CAPI.h	/^    unsigned int TrackingCaps;$/;"	m	struct:ovrHmdDesc_
TrackingState	Src/OVR_CAPI.cpp	/^TrackingState::TrackingState(const ovrTrackingState& s)$/;"	f	class:OVR::TrackingState
TrackingState	Src/Tracking/Tracking_SensorState.h	/^	TrackingState() : HeadPose(), CameraPose(), LeveledCameraPose(), RawSensorData(), StatusFlags(0), LastVisionProcessingTime(0.0) { }$/;"	f	class:OVR::Tracking::TrackingState
TrackingState	Src/Tracking/Tracking_SensorState.h	/^class TrackingState$/;"	c	namespace:OVR::Tracking
Tracking_PoseState_h	Src/Tracking/Tracking_PoseState.h	28;"	d
Tracking_SensorStateReader_h	Src/Tracking/Tracking_SensorStateReader.h	28;"	d
Tracking_SensorState_h	Src/Tracking/Tracking_SensorState.h	28;"	d
Transform	Src/Kernel/OVR_Math.h	/^	Vector2<T> Transform(const Vector2<T>& v) const$/;"	f	class:OVR::Matrix3
Transform	Src/Kernel/OVR_Math.h	/^	Vector3<T> Transform(const Vector3<T>& v) const$/;"	f	class:OVR::Matrix3
Transform	Src/Kernel/OVR_Math.h	/^	Vector4<T> Transform(const Vector4<T>& v) const$/;"	f	class:OVR::Matrix4
Transform	Src/Kernel/OVR_Math.h	/^    Vector3<T> Transform(const Vector3<T>& v) const$/;"	f	class:OVR::Matrix4
TransformRendertargetNDCToTanFovSpace	Src/OVR_Stereo.cpp	/^Vector2f TransformRendertargetNDCToTanFovSpace( const ScaleAndOffset2D &eyeToSourceNDC,$/;"	f	namespace:OVR
TransformScreenNDCToRendertargetTexUV	Src/OVR_Stereo.cpp	/^Vector2f TransformScreenNDCToRendertargetTexUV( DistortionRenderDesc const &distortion,$/;"	f	namespace:OVR
TransformScreenNDCToTanFovSpace	Src/OVR_Stereo.cpp	/^Vector2f TransformScreenNDCToTanFovSpace( DistortionRenderDesc const &distortion,$/;"	f	namespace:OVR
TransformScreenNDCToTanFovSpaceChroma	Src/OVR_Stereo.cpp	/^void TransformScreenNDCToTanFovSpaceChroma ( Vector2f *resultR, Vector2f *resultG, Vector2f *resultB, $/;"	f	namespace:OVR
TransformScreenPixelToRendertargetTexUV	Src/OVR_Stereo.cpp	/^Vector2f TransformScreenPixelToRendertargetTexUV( Recti const &distortionViewport,$/;"	f	namespace:OVR
TransformScreenPixelToScreenNDC	Src/OVR_Stereo.cpp	/^Vector2f TransformScreenPixelToScreenNDC( Recti const &distortionViewport,$/;"	f	namespace:OVR
TransformScreenPixelToTanFovSpace	Src/OVR_Stereo.cpp	/^Vector2f TransformScreenPixelToTanFovSpace( Recti const &distortionViewport,$/;"	f	namespace:OVR
TransformTanFovSpaceToRendertargetNDC	Src/OVR_Stereo.cpp	/^Vector2f TransformTanFovSpaceToRendertargetNDC( ScaleAndOffset2D const &eyeToSourceNDC,$/;"	f	namespace:OVR
TransformTanFovSpaceToRendertargetNDC	Src/OVR_Stereo.h	/^inline Vector2f TransformTanFovSpaceToRendertargetNDC ( StereoEyeParams const &eyeParams,$/;"	f	namespace:OVR
TransformTanFovSpaceToRendertargetTexUV	Src/OVR_Stereo.cpp	/^Vector2f TransformTanFovSpaceToRendertargetTexUV( ScaleAndOffset2D const &eyeToSourceUV,$/;"	f	namespace:OVR
TransformTanFovSpaceToRendertargetTexUV	Src/OVR_Stereo.h	/^inline Vector2f TransformTanFovSpaceToRendertargetTexUV ( StereoEyeParams const &eyeParams,$/;"	f	namespace:OVR
TransformTanFovSpaceToScreenNDC	Src/OVR_Stereo.cpp	/^Vector2f TransformTanFovSpaceToScreenNDC( DistortionRenderDesc const &distortion,$/;"	f	namespace:OVR
Translate	Src/Kernel/OVR_Math.h	/^    Vector3<T> Translate(const Vector3<T>& v) const$/;"	f	class:OVR::Pose
Translation	Src/Kernel/OVR_Math.h	/^    Vector3<T> Translation;$/;"	m	class:OVR::Pose
Translation	Src/Kernel/OVR_Math.h	/^    static Matrix4 Translation(T x, T y, T z = 0.0f)$/;"	f	class:OVR::Matrix4
Translation	Src/Kernel/OVR_Math.h	/^    static Matrix4 Translation(const Vector3<T>& v)$/;"	f	class:OVR::Matrix4
Transport	Src/Net/OVR_Session.h	/^	TransportType Transport;$/;"	m	struct:OVR::Net::ConnectParameters
Transport	Src/Net/OVR_Session.h	/^    TransportType    Transport;$/;"	m	class:OVR::Net::Connection
Transport	Src/Net/OVR_Session.h	/^    TransportType Transport;$/;"	m	class:OVR::Net::ListenerDescription
Transport	Src/Net/OVR_Socket.h	/^	TransportType Transport; \/\/ Type of transport$/;"	m	class:OVR::Net::Socket
TransportType	Src/Net/OVR_Socket.h	/^enum TransportType$/;"	g	namespace:OVR::Net
TransportType_Loopback	Src/Net/OVR_Socket.h	/^	TransportType_Loopback,      \/\/ Loopback transport: Class talks to itself$/;"	e	enum:OVR::Net::TransportType
TransportType_None	Src/Net/OVR_Socket.h	/^	TransportType_None,          \/\/ No transport (useful placeholder for invalid states)$/;"	e	enum:OVR::Net::TransportType
TransportType_PacketizedTCP	Src/Net/OVR_Socket.h	/^	TransportType_PacketizedTCP  \/\/ Packetized TCP: Message framing is automatic$/;"	e	enum:OVR::Net::TransportType
TransportType_TCP	Src/Net/OVR_Socket.h	/^	TransportType_TCP,           \/\/ TCP\/IPv4\/v6$/;"	e	enum:OVR::Net::TransportType
TransportType_UDP	Src/Net/OVR_Socket.h	/^	TransportType_UDP,           \/\/ UDP\/IPv4\/v6$/;"	e	enum:OVR::Net::TransportType
Transpose	Src/Kernel/OVR_Math.h	/^	void     Transpose()$/;"	f	class:OVR::Matrix3
Transpose	Src/Kernel/OVR_Math.h	/^    void     Transpose()$/;"	f	class:OVR::Matrix4
Transposed	Src/Kernel/OVR_Math.h	/^	Matrix3 Transposed() const$/;"	f	class:OVR::Matrix3
Transposed	Src/Kernel/OVR_Math.h	/^    Matrix4 Transposed() const$/;"	f	class:OVR::Matrix4
TrimLeft	Src/Kernel/OVR_String.h	/^    StringDataPtr& TrimLeft(size_t size)$/;"	f	class:OVR::StringDataPtr
TrimRight	Src/Kernel/OVR_String.h	/^    StringDataPtr& TrimRight(size_t size)$/;"	f	class:OVR::StringDataPtr
TryLock	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Mutex::TryLock()$/;"	f	class:OVR::Mutex
TryLock	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool MutexImpl::TryLock()$/;"	f	class:OVR::MutexImpl
Type	Src/CAPI/GL/CAPI_GL_Util.h	/^		VarType     Type;$/;"	m	struct:OVR::CAPI::GL::ShaderBase::Uniform
Type	Src/CAPI/GL/CAPI_GL_Util.h	/^        int    Type; \/\/ currently number of floats in vector$/;"	m	struct:OVR::CAPI::GL::ShaderSet::Uniform
Type	Src/Kernel/OVR_Math.h	/^    typedef struct {} Type;$/;"	t	struct:OVR::CompatibleTypes	typeref:struct:OVR::CompatibleTypes::__anon20
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Matrix3<double> > { typedef ovrMatrix3d Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Matrix4<float> >  { typedef ovrMatrix4f Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Pose<double> > { typedef ovrPosed Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Pose<float> > { typedef ovrPosef Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Quat<double> >    { typedef ovrQuatd Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Quat<float> >     { typedef ovrQuatf Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Rect<int> >       { typedef ovrRecti Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Size<float> >     { typedef ovrSizef Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Size<int> >       { typedef ovrSizei Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector2<float> >  { typedef ovrVector2f Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector2<int> >    { typedef ovrVector2i Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector3<double> > { typedef ovrVector3d Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_Math.h	/^template<> struct CompatibleTypes<Vector3<float> >  { typedef ovrVector3f Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType           { typedef T Type; };$/;"	t	struct:OVR::CleanType
Type	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<T&>       { typedef T Type; };$/;"	t	struct:OVR::CleanType
Type	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<const T&> { typedef T Type; };$/;"	t	struct:OVR::CleanType
Type	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct CleanType<const T>  { typedef T Type; };$/;"	t	struct:OVR::CleanType
Type	Src/Kernel/OVR_ThreadCommandQueue.h	/^template<class T> struct SelfType { typedef T Type; };$/;"	t	struct:OVR::SelfType
Type	Src/OVR_CAPI.h	/^    ovrHmdType  Type;$/;"	m	struct:ovrHmdDesc_
Type	Src/OVR_JSON.h	/^    JSONItemType    Type;       \/\/ Type of this JSON node.$/;"	m	class:OVR::JSON
Type	Src/OVR_Stereo.h	/^		HmdShutterTypeEnum  Type;$/;"	m	struct:OVR::HMDInfo::ShutterInfo
Type	Src/OVR_Stereo.h	/^        HmdShutterTypeEnum  Type;$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
Type	Src/Tracking/Tracking_PoseState.h	/^	template<> struct CompatibleTypes<OVR::PoseState<double> > { typedef ovrPoseStated Type; };$/;"	t	struct:OVR::CompatibleTypes
Type	Src/Tracking/Tracking_PoseState.h	/^	template<> struct CompatibleTypes<OVR::PoseState<float> > { typedef ovrPoseStatef Type; };$/;"	t	struct:OVR::CompatibleTypes
U	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    float     U, V;    $/;"	m	struct:OVR::CAPI::GL::HASWVertex	file:
UByte	Src/Kernel/OVR_Types.h	/^typedef uint8_t         UByte;$/;"	t	namespace:OVR
UByte	Src/Kernel/OVR_Types.h	/^typedef unsigned char   UByte;$/;"	t	namespace:OVR
UByte	Src/Kernel/OVR_Types.h	/^typedef unsigned int    UByte  __attribute__((__mode__ (__QI__)));$/;"	t	namespace:OVR
UDPSocket	Src/Net/OVR_Unix_Socket.cpp	/^UDPSocket::UDPSocket()$/;"	f	class:OVR::Net::UDPSocket
UDPSocket	Src/Net/OVR_Unix_Socket.h	/^class UDPSocket : public UDPSocketBase$/;"	c	namespace:OVR::Net
UDPSocketBase	Src/Net/OVR_Socket.cpp	/^UDPSocketBase::UDPSocketBase()$/;"	f	class:OVR::Net::UDPSocketBase
UDPSocketBase	Src/Net/OVR_Socket.h	/^class UDPSocketBase : public BerkleySocket$/;"	c	namespace:OVR::Net
UDP_OnRecv	Src/Net/OVR_Socket.h	/^	virtual void UDP_OnRecv(Socket* pSocket, uint8_t* pData,$/;"	f	class:OVR::Net::SocketEvent_UDP
UInt16	Src/Kernel/OVR_Types.h	/^typedef uint16_t        UInt16;$/;"	t	namespace:OVR
UInt16	Src/Kernel/OVR_Types.h	/^typedef unsigned int    UInt16 __attribute__((__mode__ (__HI__)));$/;"	t	namespace:OVR
UInt16	Src/Kernel/OVR_Types.h	/^typedef unsigned short  UInt16;$/;"	t	namespace:OVR
UInt32	Src/Kernel/OVR_Types.h	/^typedef uint32_t        UInt32;$/;"	t	namespace:OVR
UInt32	Src/Kernel/OVR_Types.h	/^typedef unsigned int    UInt32 __attribute__((__mode__ (__SI__)));$/;"	t	namespace:OVR
UInt32	Src/Kernel/OVR_Types.h	/^typedef unsigned long   UInt32;$/;"	t	namespace:OVR
UInt64	Src/Kernel/OVR_Types.h	/^typedef uint64_t        UInt64;$/;"	t	namespace:OVR
UInt64	Src/Kernel/OVR_Types.h	/^typedef unsigned __int64 UInt64;$/;"	t	namespace:OVR
UInt64	Src/Kernel/OVR_Types.h	/^typedef unsigned int    UInt64 __attribute__((__mode__ (__DI__)));$/;"	t	namespace:OVR
UNKNOWN_DESCRIPTOR	Src/Displays/OVR_Linux_Display.cpp	/^static const int UNKNOWN_DESCRIPTOR    = -1;$/;"	m	namespace:OVR	file:
UPInt	Src/Kernel/OVR_Types.h	/^typedef size_t          UPInt;$/;"	t	namespace:OVR
UTF8Util	Src/Kernel/OVR_UTF8Util.cpp	/^namespace OVR { namespace UTF8Util {$/;"	n	namespace:OVR	file:
UTF8Util	Src/Kernel/OVR_UTF8Util.h	/^namespace OVR { namespace UTF8Util {$/;"	n	namespace:OVR
UTIL_IMAGEWINDOW_H	Src/Util/Util_ImageWindow.h	28;"	d
UVScaleOffset	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^		ovrVector2f			 	  UVScaleOffset[2];$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
Unbind	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Context::Unbind()$/;"	f	class:OVR::CAPI::GL::Context
UnicodeAlnumBits	Src/Kernel/OVR_Std.cpp	/^const uint16_t UnicodeAlnumBits[] = {$/;"	m	namespace:OVR	file:
UnicodeAlphaBits	Src/Kernel/OVR_Std.cpp	/^const uint16_t UnicodeAlphaBits[] = {$/;"	m	namespace:OVR	file:
UnicodeCharIs	Src/Kernel/OVR_Std.h	/^inline int OVR_CDECL UnicodeCharIs(const uint16_t* table, wchar_t charCode)$/;"	f	namespace:OVR
UnicodeDigitBits	Src/Kernel/OVR_Std.cpp	/^const uint16_t UnicodeDigitBits[] = {$/;"	m	namespace:OVR	file:
UnicodeSpaceBits	Src/Kernel/OVR_Std.cpp	/^const uint16_t UnicodeSpaceBits[] = {$/;"	m	namespace:OVR	file:
UnicodeToLowerBits	Src/Kernel/OVR_Std.cpp	/^static const uint16_t UnicodeToLowerBits[] = {$/;"	m	namespace:OVR	file:
UnicodeToLowerTable	Src/Kernel/OVR_Std.cpp	/^static const GUnicodePairType UnicodeToLowerTable[] = {$/;"	m	namespace:OVR	file:
UnicodeToUpperBits	Src/Kernel/OVR_Std.cpp	/^static const uint16_t UnicodeToUpperBits[] = {$/;"	m	namespace:OVR	file:
UnicodeToUpperTable	Src/Kernel/OVR_Std.cpp	/^static const GUnicodePairType UnicodeToUpperTable[] = {$/;"	m	namespace:OVR	file:
UnicodeXDigitBits	Src/Kernel/OVR_Std.cpp	/^const uint16_t UnicodeXDigitBits[] = {$/;"	m	namespace:OVR	file:
Uniform	Src/CAPI/GL/CAPI_GL_Util.h	/^	struct Uniform$/;"	s	class:OVR::CAPI::GL::ShaderBase
Uniform	Src/CAPI/GL/CAPI_GL_Util.h	/^    struct Uniform$/;"	s	class:OVR::CAPI::GL::ShaderSet
UniformData	Src/CAPI/GL/CAPI_GL_Util.h	/^    unsigned char*  UniformData;$/;"	m	class:OVR::CAPI::GL::ShaderBase
UniformInfo	Src/CAPI/GL/CAPI_GL_Util.h	/^    Array<Uniform> UniformInfo;$/;"	m	class:OVR::CAPI::GL::ShaderSet
UniformRefl	Src/CAPI/GL/CAPI_GL_Util.h	/^    const Uniform*  UniformRefl;$/;"	m	class:OVR::CAPI::GL::ShaderBase
UniformReflSize	Src/CAPI/GL/CAPI_GL_Util.h	/^    size_t          UniformReflSize;$/;"	m	class:OVR::CAPI::GL::ShaderBase
UniformsSize	Src/CAPI/GL/CAPI_GL_Util.h	/^    int             UniformsSize;$/;"	m	class:OVR::CAPI::GL::ShaderBase
UnitNumber	Src/OVR_SerialFormat.h	/^	int          UnitNumber;        \/\/ [2 bytes] Value that increments each time a new serial number is created.  Resets to zero each day$/;"	m	class:OVR::DK2BinarySerialFormat
UnitNumber	Src/OVR_SerialFormat.h	/^	int          UnitNumber;        \/\/ [3 char] Value that increments each time a new serial number is created.  Resets to zero each day$/;"	m	class:OVR::DK2PrintedSerialFormat
UnloadGraphics	Src/CAPI/CAPI_HSWDisplay.h	/^    virtual void UnloadGraphics() {}$/;"	f	class:OVR::CAPI::HSWDisplay
UnloadGraphics	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^void HSWDisplay::UnloadGraphics()$/;"	f	class:OVR::CAPI::GL::HSWDisplay
UnloadGraphicsRequested	Src/CAPI/CAPI_HSWDisplay.h	/^    bool                   UnloadGraphicsRequested; \/\/ If true then an unload of graphics was requested. This acts as a message from the main thread to the drawing thread so that the unload happens in the expected thread.$/;"	m	class:OVR::CAPI::HSWDisplay
Unlock	Src/Kernel/OVR_Atomic.h	/^    inline void Unlock()    { ::LeaveCriticalSection(&cs); }$/;"	f	class:OVR::Lock
Unlock	Src/Kernel/OVR_Atomic.h	/^    inline void Unlock()    { pthread_mutex_unlock(&mutex); }$/;"	f	class:OVR::Lock
Unlock	Src/Kernel/OVR_Atomic.h	/^    inline void Unlock() { }$/;"	f	class:OVR::Lock
Unlock	Src/Kernel/OVR_ThreadsPthread.cpp	/^void Mutex::Unlock()$/;"	f	class:OVR::Mutex
Unlock	Src/Kernel/OVR_ThreadsPthread.cpp	/^void MutexImpl::Unlock(Mutex* pmutex)$/;"	f	class:OVR::MutexImpl
Unmap	Src/CAPI/GL/CAPI_GL_Util.cpp	/^bool Buffer::Unmap(void*)$/;"	f	class:OVR::CAPI::GL::Buffer
UnopenedFile	Src/Kernel/OVR_SysFile.cpp	/^    UnopenedFile()  { }$/;"	f	class:OVR::UnopenedFile
UnopenedFile	Src/Kernel/OVR_SysFile.cpp	/^class UnopenedFile : public File$/;"	c	namespace:OVR	file:
UnregisterBlockingFunction	Src/Net/OVR_RPC1.cpp	/^void RPC1::UnregisterBlockingFunction(OVR::String uniqueID)$/;"	f	class:OVR::Net::Plugins::RPC1
UnsetShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void ShaderSet::UnsetShader(int stage)$/;"	f	class:OVR::CAPI::GL::ShaderSet
Unused1	Src/Kernel/OVR_Lockless.cpp	/^int          Unused1[32];$/;"	m	namespace:OVR::LocklessTest	file:
Unused2	Src/Kernel/OVR_Lockless.cpp	/^int          Unused2[32];$/;"	m	namespace:OVR::LocklessTest	file:
Unused3	Src/Kernel/OVR_Lockless.cpp	/^int          Unused3[32];$/;"	m	namespace:OVR::LocklessTest	file:
UpTan	Src/OVR_CAPI.h	/^    float UpTan;$/;"	m	struct:ovrFovPort_
UpTan	Src/OVR_Stereo.h	/^    float UpTan;$/;"	m	struct:OVR::FovPort
UpdateBegin	Src/Kernel/OVR_Lockless.h	/^    AtomicInt<int> UpdateBegin;$/;"	m	class:OVR::LocklessUpdater
UpdateComputedState	Src/Util/Util_Render_Stereo.cpp	/^void StereoConfig::UpdateComputedState()$/;"	f	class:OVR::Util::Render::StereoConfig
UpdateEnd	Src/Kernel/OVR_Lockless.h	/^    AtomicInt<int> UpdateEnd;$/;"	m	class:OVR::LocklessUpdater
UpdateFrameLatencyTrackingAfterEndFrame	Src/CAPI/CAPI_FrameTimeManager.cpp	/^void FrameTimeManager::UpdateFrameLatencyTrackingAfterEndFrame($/;"	f	class:OVR::CAPI::FrameTimeManager
UpdateImage	Src/Util/Util_ImageWindow.h	/^	void UpdateImage( const uint8_t* imageData, uint32_t width, uint32_t height ) { UpdateImageBW( imageData, width, height ); }$/;"	f	class:OVR::Util::ImageWindow
UpdateImageBW	Src/Util/Util_ImageWindow.h	/^	void UpdateImageBW( const uint8_t* imageData, uint32_t width, uint32_t height ) { OVR_UNUSED( imageData ); OVR_UNUSED( width ); OVR_UNUSED( height ); }$/;"	f	class:OVR::Util::ImageWindow
UpdateImageRGBA	Src/Util/Util_ImageWindow.h	/^	void UpdateImageRGBA( const uint8_t* imageData, uint32_t width, uint32_t height, uint32_t pitch ) { OVR_UNUSED( imageData ); OVR_UNUSED( width ); OVR_UNUSED( height ); OVR_UNUSED( pitch ); }$/;"	f	class:OVR::Util::ImageWindow
UpdatePlaceholderTexture	Src/CAPI/GL/CAPI_GL_Util.cpp	/^void Texture::UpdatePlaceholderTexture(GLuint texId, const Sizei& textureSize)$/;"	f	class:OVR::CAPI::GL::Texture
UpdateRenderProfile	Src/CAPI/CAPI_HMDState.cpp	/^void HMDState::UpdateRenderProfile(Profile* profile)$/;"	f	class:OVR::CAPI::HMDState
Updater	Src/Tracking/Tracking_SensorStateReader.h	/^	const CombinedSharedStateUpdater *Updater;$/;"	m	class:OVR::Tracking::SensorStateReader
Updater	Src/Util/Util_LatencyTest2Reader.h	/^    const Tracking::CombinedSharedStateUpdater* Updater;$/;"	m	class:OVR::Util::RecordStateReader
UpperBit	Src/Kernel/OVR_Alg.h	/^inline uint8_t UpperBit(size_t val)$/;"	f	namespace:OVR::Alg
UpperBitTable	Src/Kernel/OVR_Alg.cpp	/^extern const uint8_t UpperBitTable[256] =$/;"	m	namespace:OVR::Alg	file:
UpperBound	Src/Kernel/OVR_Alg.h	/^size_t UpperBound(const Array& arr, const Value& val)$/;"	f	namespace:OVR::Alg
UpperBound	Src/Kernel/OVR_Alg.h	/^size_t UpperBound(const Array& arr, const Value& val, Less less)$/;"	f	namespace:OVR::Alg
UpperBoundSized	Src/Kernel/OVR_Alg.h	/^size_t UpperBoundSized(const Array& arr, size_t size, const Value& val)$/;"	f	namespace:OVR::Alg
UpperBoundSliced	Src/Kernel/OVR_Alg.h	/^size_t UpperBoundSliced(const Array& arr, size_t start, size_t end, const Value& val)$/;"	f	namespace:OVR::Alg
UpperBoundSliced	Src/Kernel/OVR_Alg.h	/^size_t UpperBoundSliced(const Array& arr, size_t start, size_t end, const Value& val, Less less)$/;"	f	namespace:OVR::Alg
Use	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLenum        Use;$/;"	m	class:OVR::CAPI::GL::Buffer
UseCount	Src/Kernel/OVR_Atomic.h	/^    volatile int    UseCount;$/;"	m	class:OVR::SharedLock
UseMirroring	Src/OVR_Stereo.h	/^	int UseMirroring;$/;"	m	struct:OVR::Win32ShimInfo
UserData1	Src/CAPI/CAPI_LatencyStatistics.h	/^    String Guid, UserData1;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
UserHandle	Src/Kernel/OVR_Threads.h	/^    void*       UserHandle;$/;"	m	class:OVR::Thread
UsesLighting	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool      UsesLighting;$/;"	m	class:OVR::CAPI::GL::ShaderSet
UsingVistaOrLater	Src/Kernel/OVR_Timer.cpp	/^	bool            UsingVistaOrLater;$/;"	m	struct:OVR::PerformanceTimer	file:
Util	Src/Util/Util_ImageWindow.h	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR
Util	Src/Util/Util_LatencyTest2Reader.cpp	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR	file:
Util	Src/Util/Util_LatencyTest2Reader.h	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR
Util	Src/Util/Util_LatencyTest2State.h	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR
Util	Src/Util/Util_Render_Stereo.cpp	/^namespace OVR { namespace Util { namespace Render {$/;"	n	namespace:OVR	file:
Util	Src/Util/Util_Render_Stereo.h	/^namespace OVR { namespace Util { namespace Render {$/;"	n	namespace:OVR
Util	Src/Util/Util_SystemInfo.cpp	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR	file:
Util	Src/Util/Util_SystemInfo.h	/^namespace OVR { namespace Util {$/;"	n	namespace:OVR
V	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    float     U, V;    $/;"	m	struct:OVR::CAPI::GL::HASWVertex	file:
VAO	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        GLuint                             VAO;                 \/\/ Vertex Array Object.$/;"	m	class:OVR::CAPI::GL::HSWDisplay
VAOInitialized	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        bool                               VAOInitialized;      \/\/ True if the VAO was initialized with vertex buffer data.$/;"	m	class:OVR::CAPI::GL::HSWDisplay
VARTYPE_BOOL	Src/CAPI/GL/CAPI_GL_Util.h	/^		VARTYPE_BOOL,$/;"	e	enum:OVR::CAPI::GL::ShaderBase::VarType
VARTYPE_FLOAT	Src/CAPI/GL/CAPI_GL_Util.h	/^		VARTYPE_FLOAT,$/;"	e	enum:OVR::CAPI::GL::ShaderBase::VarType
VARTYPE_INT	Src/CAPI/GL/CAPI_GL_Util.h	/^		VARTYPE_INT,$/;"	e	enum:OVR::CAPI::GL::ShaderBase::VarType
VRServicePort	Src/Service/Service_NetSessionCommon.h	/^static const int VRServicePort = 30322; \/\/ 0x7672 = "vr" little-endian$/;"	m	namespace:OVR::Service
VSyncToScanoutDelay	Src/CAPI/CAPI_FrameTimeManager.h	/^    double              VSyncToScanoutDelay;$/;"	m	class:OVR::CAPI::FrameTimeManager
ValMap	Src/OVR_Profile.h	/^    OVR::Hash<String, JSON*, String::HashFunctor>   ValMap;$/;"	m	class:OVR::Profile
Valid	Src/Kernel/OVR_File.h	/^    bool         Valid;$/;"	m	class:OVR::MemoryFile
Valid	Src/OVR_Profile.h	/^	bool Valid;$/;"	m	struct:OVR::ProfileDeviceKey
ValidDK2PartId	Src/OVR_SerialFormat.cpp	/^static bool ValidDK2PartId(int x)$/;"	f	namespace:OVR
ValidDK2ProductId	Src/OVR_SerialFormat.cpp	/^static bool ValidDK2ProductId(int x)$/;"	f	namespace:OVR
Validate	Src/Net/OVR_Session.cpp	/^bool RPC_C2S_Hello::Validate()$/;"	f	class:OVR::Net::RPC_C2S_Hello
Validate	Src/Net/OVR_Session.cpp	/^bool RPC_S2C_Authorization::Validate()$/;"	f	class:OVR::Net::RPC_S2C_Authorization
Value	Src/Kernel/OVR_Atomic.h	/^    volatile T  Value;$/;"	m	class:OVR::AtomicValueBase
Value	Src/Kernel/OVR_Hash.h	/^    C           Value;$/;"	m	class:OVR::HashsetCachedEntry
Value	Src/Kernel/OVR_Hash.h	/^    C           Value;$/;"	m	class:OVR::HashsetEntry
Value	Src/Kernel/OVR_Hash.h	/^    C     Value;$/;"	m	class:OVR::HashsetCachedNodeEntry
Value	Src/Kernel/OVR_Hash.h	/^    C     Value;$/;"	m	class:OVR::HashsetNodeEntry
Value	Src/Kernel/OVR_Std.cpp	/^    uint16_t Key, Value;$/;"	m	struct:OVR::GUnicodePairType	file:
Value	Src/OVR_JSON.h	/^    String          Value;$/;"	m	class:OVR::JSON
ValueAt	Src/Kernel/OVR_Array.h	/^    ValueType ValueAt(size_t index) const$/;"	f	class:OVR::ArrayBase
ValueStringPair	Src/CAPI/GL/CAPI_GLE.cpp	/^    struct ValueStringPair$/;"	s	file:
ValueType	Src/Kernel/OVR_Alg.h	/^    typedef T ValueType;$/;"	t	class:OVR::Alg::ArrayAdaptor
ValueType	Src/Kernel/OVR_Alg.h	/^    typedef T ValueType;$/;"	t	class:OVR::Alg::ConstArrayAdaptor
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                                               ValueType;$/;"	t	class:OVR::ArrayCC
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                                               ValueType;$/;"	t	class:OVR::ArrayCPP
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                                               ValueType;$/;"	t	class:OVR::ArrayPOD
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                                           ValueType;$/;"	t	class:OVR::Array
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                           ValueType;$/;"	t	struct:OVR::ArrayDataBase
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T                                           ValueType;$/;"	t	struct:OVR::ArrayDataCC
ValueType	Src/Kernel/OVR_Array.h	/^    typedef T ValueType;$/;"	t	struct:OVR::ArrayData
ValueType	Src/Kernel/OVR_Array.h	/^    typedef typename ArrayData::ValueType       ValueType;$/;"	t	class:OVR::ArrayBase
ValueType	Src/Kernel/OVR_Hash.h	/^    typedef U                                                           ValueType;$/;"	t	class:OVR::Hash
ValueType	Src/Kernel/OVR_List.h	/^    typedef T ValueType;$/;"	t	class:OVR::List
ValueType	Src/Kernel/OVR_StringHash.h	/^    typedef U                                                        ValueType;$/;"	t	class:OVR::StringHash
Value_t	Src/Kernel/OVR_Math.h	/^	typedef T Value_t;$/;"	t	class:OVR::SymMat3
Values	Src/OVR_Profile.h	/^    OVR::Array<JSON*>   Values;  $/;"	m	class:OVR::Profile
VarType	Src/CAPI/GL/CAPI_GL_Util.h	/^	enum VarType$/;"	g	class:OVR::CAPI::GL::ShaderBase
Vector2	Src/Kernel/OVR_Math.h	/^    Vector2() : x(0), y(0) { }$/;"	f	class:OVR::Vector2
Vector2	Src/Kernel/OVR_Math.h	/^    Vector2(T x_, T y_) : x(x_), y(y_) { }$/;"	f	class:OVR::Vector2
Vector2	Src/Kernel/OVR_Math.h	/^    Vector2(const CompatibleType& s) : x(s.x), y(s.y) {  }$/;"	f	class:OVR::Vector2
Vector2	Src/Kernel/OVR_Math.h	/^    explicit Vector2(T s) : x(s), y(s) { }$/;"	f	class:OVR::Vector2
Vector2	Src/Kernel/OVR_Math.h	/^    explicit Vector2(const Vector2<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Vector2
Vector2	Src/Kernel/OVR_Math.h	/^class Vector2$/;"	c	namespace:OVR
Vector2d	Src/Kernel/OVR_Math.h	/^typedef Vector2<double> Vector2d;$/;"	t	namespace:OVR
Vector2f	Src/Kernel/OVR_Math.h	/^typedef Vector2<float>  Vector2f;$/;"	t	namespace:OVR
Vector2i	Src/Kernel/OVR_Math.h	/^typedef Vector2<int>    Vector2i;$/;"	t	namespace:OVR
Vector3	Src/Kernel/OVR_Math.h	/^    Vector3() : x(0), y(0), z(0) { }$/;"	f	class:OVR::Vector3
Vector3	Src/Kernel/OVR_Math.h	/^    Vector3(T x_, T y_, T z_ = 0) : x(x_), y(y_), z(z_) { }$/;"	f	class:OVR::Vector3
Vector3	Src/Kernel/OVR_Math.h	/^    Vector3(const CompatibleType& s) : x(s.x), y(s.y), z(s.z) {  }$/;"	f	class:OVR::Vector3
Vector3	Src/Kernel/OVR_Math.h	/^    explicit Vector3(T s) : x(s), y(s), z(s) { }$/;"	f	class:OVR::Vector3
Vector3	Src/Kernel/OVR_Math.h	/^    explicit Vector3(const Vector3<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Vector3
Vector3	Src/Kernel/OVR_Math.h	/^class Vector3$/;"	c	namespace:OVR
Vector3d	Src/Kernel/OVR_Math.h	/^typedef Vector3<double> Vector3d;$/;"	t	namespace:OVR
Vector3f	Src/Kernel/OVR_Math.h	/^typedef Vector3<float>  Vector3f;$/;"	t	namespace:OVR
Vector3i	Src/Kernel/OVR_Math.h	/^typedef Vector3<int32_t>  Vector3i;$/;"	t	namespace:OVR
Vector4	Src/Kernel/OVR_Math.h	/^	explicit Vector4(const Vector3<T>& v, const float w_=1) : x(v.x), y(v.y), z(v.z), w(w_) { }$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^    Vector4() : x(0), y(0), z(0), w(0) { }$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^    Vector4(T x_, T y_, T z_, T w_) : x(x_), y(y_), z(z_), w(w_) { }$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^    Vector4(const CompatibleType& s) : x(s.x), y(s.y), z(s.z), w(s.w) {  }$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^    explicit Vector4(T s) : x(s), y(s), z(s), w(s) { }$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^    explicit Vector4(const Vector4<typename Math<T>::OtherFloatType> &src)$/;"	f	class:OVR::Vector4
Vector4	Src/Kernel/OVR_Math.h	/^class Vector4$/;"	c	namespace:OVR
Vector4d	Src/Kernel/OVR_Math.h	/^typedef Vector4<double> Vector4d;$/;"	t	namespace:OVR
Vector4f	Src/Kernel/OVR_Math.h	/^typedef Vector4<float>  Vector4f;$/;"	t	namespace:OVR
Vector4i	Src/Kernel/OVR_Math.h	/^typedef Vector4<int>    Vector4i;$/;"	t	namespace:OVR
VendorId	Src/OVR_CAPI.h	/^    short       VendorId;$/;"	m	struct:ovrHmdDesc_
VendorId	Src/OVR_Stereo.h	/^    int         VendorId;$/;"	m	class:OVR::HMDInfo
VendorName	Src/Displays/OVR_Linux_Display.h	/^    String VendorName;$/;"	m	struct:OVR::Linux::DisplayEDID
Version	Src/OVR_Stereo.h	/^	unsigned    Version;$/;"	m	class:OVR::HMDInfo
VersionNumber	Src/OVR_Stereo.cpp	/^    uint16_t    VersionNumber;      \/\/ Must be LCSV_CatmullRom10Version1$/;"	m	struct:OVR::LensConfigStored_CatmullRom10Version1	file:
VertexArrayBinding	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint VertexArrayBinding;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
VertexCount	Src/OVR_CAPI.h	/^    unsigned int         VertexCount;$/;"	m	struct:ovrDistortionMesh_
VertexShader	Src/CAPI/GL/CAPI_GL_Util.h	/^typedef ShaderImpl<Shader_Vertex,  GL_VERTEX_SHADER> VertexShader;$/;"	t	namespace:OVR::CAPI::GL
View	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        Matrix4f  View;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::StandardUniformData
ViewLoc	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLint     ProjLoc, ViewLoc;$/;"	m	class:OVR::CAPI::GL::ShaderSet
Viewport	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLint Viewport[4];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
ViewportScaleAndOffset	Src/Util/Util_Render_Stereo.h	/^struct ViewportScaleAndOffset$/;"	s	namespace:OVR::Util::Render
ViewportScaleAndOffsetBothEyes	Src/Util/Util_Render_Stereo.h	/^struct ViewportScaleAndOffsetBothEyes$/;"	s	namespace:OVR::Util::Render
VignetteFactor	Src/OVR_CAPI.h	/^    float       VignetteFactor;  \/\/ Vignette fade factor. Can be encoded in Pos.w.$/;"	m	struct:ovrDistortionVertex_
VirtualHmdId	Src/Service/Service_NetSessionCommon.h	/^typedef int32_t VirtualHmdId;$/;"	t	namespace:OVR::Service
VisionFrames	Src/CAPI/CAPI_LatencyStatistics.h	/^    int                 VisionFrames;$/;"	m	class:OVR::CAPI::LagStatsCalculator
Void	Src/Kernel/OVR_ThreadCommandQueue.h	/^    Void() {}$/;"	f	struct:OVR::Void
Void	Src/Kernel/OVR_ThreadCommandQueue.h	/^    Void(int) {}$/;"	f	struct:OVR::Void
Void	Src/Kernel/OVR_ThreadCommandQueue.h	/^struct Void$/;"	s	namespace:OVR
VsyncEnabled	Src/CAPI/CAPI_FrameTimeManager.h	/^    bool                VsyncEnabled;$/;"	m	class:OVR::CAPI::FrameTimeManager
VsyncEnabled	Src/Util/Util_Render_Stereo.h	/^    bool                VsyncEnabled;$/;"	m	class:OVR::Util::Render::TimewarpMachine
VsyncToFirstScanline	Src/OVR_Stereo.h	/^		float   VsyncToFirstScanline;            \/\/ for global shutter, vsync->shutter open.$/;"	m	struct:OVR::HMDInfo::ShutterInfo
VsyncToFirstScanline	Src/OVR_Stereo.h	/^        float               VsyncToFirstScanline;            \/\/ for global shutter, vsync->shutter open.$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
VsyncToNextVsync	Src/OVR_Stereo.h	/^		float   VsyncToNextVsync;                \/\/ 1\/framerate$/;"	m	struct:OVR::HMDInfo::ShutterInfo
VsyncToNextVsync	Src/OVR_Stereo.h	/^        float               VsyncToNextVsync;                \/\/ 1\/framerate$/;"	m	struct:OVR::HmdRenderInfo::ShutterInfo
WGL_ACCELERATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3887;"	d
WGL_ACCESS_READ_ONLY_NV	Src/CAPI/GL/CAPI_GLE_GL.h	4259;"	d
WGL_ACCESS_READ_WRITE_NV	Src/CAPI/GL/CAPI_GLE_GL.h	4260;"	d
WGL_ACCESS_WRITE_DISCARD_NV	Src/CAPI/GL/CAPI_GLE_GL.h	4261;"	d
WGL_ACCUM_ALPHA_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3921;"	d
WGL_ACCUM_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3917;"	d
WGL_ACCUM_BLUE_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3920;"	d
WGL_ACCUM_GREEN_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3919;"	d
WGL_ACCUM_RED_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3918;"	d
WGL_ALPHA_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3915;"	d
WGL_ALPHA_SHIFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3916;"	d
WGL_ARB_buffer_region	Src/CAPI/GL/CAPI_GLE_GL.h	3849;"	d
WGL_ARB_create_context	Src/CAPI/GL/CAPI_GLE_GL.h	4074;"	d
WGL_ARB_create_context_profile	Src/CAPI/GL/CAPI_GLE_GL.h	4093;"	d
WGL_ARB_create_context_robustness	Src/CAPI/GL/CAPI_GLE_GL.h	4105;"	d
WGL_ARB_extensions_string	Src/CAPI/GL/CAPI_GLE_GL.h	3871;"	d
WGL_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	4048;"	d
WGL_ARB_make_current_read	Src/CAPI/GL/CAPI_GLE_GL.h	3947;"	d
WGL_ARB_pbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3963;"	d
WGL_ARB_pixel_format	Src/CAPI/GL/CAPI_GLE_GL.h	3882;"	d
WGL_ARB_pixel_format_float	Src/CAPI/GL/CAPI_GLE_GL.h	4039;"	d
WGL_ARB_render_texture	Src/CAPI/GL/CAPI_GLE_GL.h	3990;"	d
WGL_AUX0_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4015;"	d
WGL_AUX1_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4016;"	d
WGL_AUX2_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4017;"	d
WGL_AUX3_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4018;"	d
WGL_AUX4_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4019;"	d
WGL_AUX5_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4020;"	d
WGL_AUX6_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4021;"	d
WGL_AUX7_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4022;"	d
WGL_AUX8_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4023;"	d
WGL_AUX9_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4024;"	d
WGL_AUX_BUFFERS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3924;"	d
WGL_BACK_COLOR_BUFFER_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3852;"	d
WGL_BACK_LEFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4013;"	d
WGL_BACK_RIGHT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4014;"	d
WGL_BIND_TO_TEXTURE_RGBA_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3993;"	d
WGL_BIND_TO_TEXTURE_RGB_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3992;"	d
WGL_BLUE_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3913;"	d
WGL_BLUE_SHIFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3914;"	d
WGL_COLOR_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3908;"	d
WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4097;"	d
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4096;"	d
WGL_CONTEXT_DEBUG_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4076;"	d
WGL_CONTEXT_FLAGS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4081;"	d
WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4077;"	d
WGL_CONTEXT_LAYER_PLANE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4080;"	d
WGL_CONTEXT_MAJOR_VERSION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4078;"	d
WGL_CONTEXT_MINOR_VERSION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4079;"	d
WGL_CONTEXT_PROFILE_MASK_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4095;"	d
WGL_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4109;"	d
WGL_CONTEXT_ROBUST_ACCESS_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4107;"	d
WGL_CUBE_MAP_FACE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4004;"	d
WGL_DEPTH_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3922;"	d
WGL_DEPTH_BUFFER_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3853;"	d
WGL_DOUBLE_BUFFER_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3905;"	d
WGL_DRAW_TO_BITMAP_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3886;"	d
WGL_DRAW_TO_PBUFFER_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3965;"	d
WGL_DRAW_TO_WINDOW_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3885;"	d
WGL_EXT_extensions_string	Src/CAPI/GL/CAPI_GLE_GL.h	4117;"	d
WGL_EXT_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE_GL.h	4162;"	d
WGL_EXT_swap_control	Src/CAPI/GL/CAPI_GLE_GL.h	4128;"	d
WGL_FRAMEBUFFER_SRGB_CAPABLE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4050;"	d
WGL_FRAMEBUFFER_SRGB_CAPABLE_EXT	Src/CAPI/GL/CAPI_GLE_GL.h	4164;"	d
WGL_FRONT_COLOR_BUFFER_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3851;"	d
WGL_FRONT_LEFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4011;"	d
WGL_FRONT_RIGHT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4012;"	d
WGL_FULL_ACCELERATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3927;"	d
WGL_GENERIC_ACCELERATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3926;"	d
WGL_GREEN_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3911;"	d
WGL_GREEN_SHIFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3912;"	d
WGL_LOSE_CONTEXT_ON_RESET_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4108;"	d
WGL_MAX_PBUFFER_HEIGHT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3968;"	d
WGL_MAX_PBUFFER_PIXELS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3966;"	d
WGL_MAX_PBUFFER_WIDTH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3967;"	d
WGL_MIPMAP_LEVEL_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4003;"	d
WGL_MIPMAP_TEXTURE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3996;"	d
WGL_NEED_PALETTE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3888;"	d
WGL_NEED_SYSTEM_PALETTE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3889;"	d
WGL_NO_ACCELERATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3925;"	d
WGL_NO_RESET_NOTIFICATION_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4110;"	d
WGL_NO_TEXTURE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3999;"	d
WGL_NUMBER_OVERLAYS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3892;"	d
WGL_NUMBER_PIXEL_FORMATS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3884;"	d
WGL_NUMBER_UNDERLAYS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3893;"	d
WGL_NUM_VIDEO_CAPTURE_SLOTS_NV	Src/CAPI/GL/CAPI_GLE_GL.h	4218;"	d
WGL_NV_DX_interop	Src/CAPI/GL/CAPI_GLE_GL.h	4257;"	d
WGL_NV_copy_image	Src/CAPI/GL/CAPI_GLE_GL.h	4246;"	d
WGL_NV_present_video	Src/CAPI/GL/CAPI_GLE_GL.h	4057;"	d
WGL_NV_swap_group	Src/CAPI/GL/CAPI_GLE_GL.h	4194;"	d
WGL_NV_video_capture	Src/CAPI/GL/CAPI_GLE_GL.h	4215;"	d
WGL_NV_video_output	Src/CAPI/GL/CAPI_GLE_GL.h	4171;"	d
WGL_OML_sync_control	Src/CAPI/GL/CAPI_GLE_GL.h	4141;"	d
WGL_PBUFFER_HEIGHT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3971;"	d
WGL_PBUFFER_LARGEST_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3969;"	d
WGL_PBUFFER_WIDTH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3970;"	d
WGL_PIXEL_TYPE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3907;"	d
WGL_RED_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3909;"	d
WGL_RED_SHIFT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3910;"	d
WGL_SHARE_ACCUM_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3902;"	d
WGL_SHARE_DEPTH_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3900;"	d
WGL_SHARE_STENCIL_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3901;"	d
WGL_STENCIL_BITS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3923;"	d
WGL_STENCIL_BUFFER_BIT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3854;"	d
WGL_STEREO_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3906;"	d
WGL_SUPPORT_GDI_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3903;"	d
WGL_SUPPORT_OPENGL_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3904;"	d
WGL_SWAP_COPY_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3929;"	d
WGL_SWAP_EXCHANGE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3928;"	d
WGL_SWAP_LAYER_BUFFERS_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3890;"	d
WGL_SWAP_METHOD_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3891;"	d
WGL_SWAP_UNDEFINED_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3930;"	d
WGL_TEXTURE_1D_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4001;"	d
WGL_TEXTURE_2D_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4002;"	d
WGL_TEXTURE_CUBE_MAP_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4000;"	d
WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4006;"	d
WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4008;"	d
WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4010;"	d
WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4005;"	d
WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4007;"	d
WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4009;"	d
WGL_TEXTURE_FORMAT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3994;"	d
WGL_TEXTURE_RGBA_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3998;"	d
WGL_TEXTURE_RGB_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3997;"	d
WGL_TEXTURE_TARGET_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3995;"	d
WGL_TRANSPARENT_ALPHA_VALUE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3898;"	d
WGL_TRANSPARENT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3894;"	d
WGL_TRANSPARENT_BLUE_VALUE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3897;"	d
WGL_TRANSPARENT_GREEN_VALUE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3896;"	d
WGL_TRANSPARENT_INDEX_VALUE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3899;"	d
WGL_TRANSPARENT_RED_VALUE_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3895;"	d
WGL_TYPE_COLORINDEX_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3932;"	d
WGL_TYPE_RGBA_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	3931;"	d
WGL_TYPE_RGBA_FLOAT_ARB	Src/CAPI/GL/CAPI_GLE_GL.h	4041;"	d
WGL_UNIQUE_ID_NV	Src/CAPI/GL/CAPI_GLE_GL.h	4217;"	d
WIN32_LEAN_AND_MEAN	Src/CAPI/GL/CAPI_GLE.cpp	30;"	d	file:
WIN32_LEAN_AND_MEAN	Src/CAPI/GL/CAPI_GLE_GL.h	102;"	d
WIN32_LEAN_AND_MEAN	Src/CAPI/GL/CAPI_GLE_GL.h	99;"	d
WIN32_LEAN_AND_MEAN	Src/CAPI/GL/CAPI_GL_Util.h	39;"	d
WIN32_LEAN_AND_MEAN	Src/Kernel/OVR_Atomic.h	38;"	d
WIN32_LEAN_AND_MEAN	Src/Kernel/OVR_FileFILE.cpp	64;"	d	file:
WIN32_LEAN_AND_MEAN	Src/Kernel/OVR_Log.cpp	35;"	d	file:
WIN32_LEAN_AND_MEAN	Src/Kernel/OVR_Timer.cpp	31;"	d	file:
WIN32_LEAN_AND_MEAN	Src/Net/OVR_Socket.h	41;"	d
WIN32_LEAN_AND_MEAN	Src/OVR_CAPI_GL.h	28;"	d
WIN32_LEAN_AND_MEAN	Src/OVR_Profile.cpp	41;"	d	file:
WIN32_LEAN_AND_MEAN	Src/Util/GUIConsole.h	36;"	d
WIN32_LEAN_AND_MEAN	Src/Util/Util_ImageWindow.h	33;"	d
WINGDIAPI	Src/CAPI/GL/CAPI_GLE_GL.h	106;"	d
WINGDIAPI	Src/CAPI/GL/CAPI_GLE_GL.h	4583;"	d
Wait	Src/Kernel/OVR_ThreadCommandQueue.h	/^        void Wait()        { E.Wait(); }$/;"	f	class:OVR::ThreadCommand::NotifyEvent
Wait	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    WaitCondition::Wait(Mutex *pmutex, unsigned delay)$/;"	f	class:OVR::WaitCondition
Wait	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool    WaitConditionImpl::Wait(Mutex *pmutex, unsigned delay)$/;"	f	class:OVR::WaitConditionImpl
Wait	Src/Kernel/OVR_ThreadsPthread.cpp	/^bool Event::Wait(unsigned delay)$/;"	f	class:OVR::Event
WaitCondition	Src/Kernel/OVR_Threads.h	/^class WaitCondition$/;"	c	namespace:OVR
WaitCondition	Src/Kernel/OVR_ThreadsPthread.cpp	/^WaitCondition::WaitCondition()$/;"	f	class:OVR::WaitCondition
WaitConditionImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^WaitConditionImpl::WaitConditionImpl()$/;"	f	class:OVR::WaitConditionImpl
WaitConditionImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^class WaitConditionImpl : public NewOverrideBase$/;"	c	namespace:OVR	file:
WaitFlag	Src/Kernel/OVR_ThreadCommandQueue.h	/^    bool         WaitFlag; $/;"	m	class:OVR::ThreadCommand
WaitMode	Src/CAPI/CAPI_FrameTimeManager.h	/^    SampleWaitType        WaitMode;$/;"	m	class:OVR::CAPI::FrameLatencyTracker
WaitOnConnecting	Src/Net/OVR_Session.h	/^    void WaitOnConnecting()$/;"	f	class:OVR::Net::NetworkConnection
WaitTillTime	Src/CAPI/CAPI_DistortionRenderer.cpp	/^double DistortionRenderer::WaitTillTime(double absTime)$/;"	f	class:OVR::CAPI::DistortionRenderer
WaitUntilGpuIdle	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::WaitUntilGpuIdle()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
WholeVersion	Src/CAPI/GL/CAPI_GLE.h	/^        int   WholeVersion;             \/\/ Equals ((MajorVersion * 100) + MinorVersion). Example usage: if(glv.WholeVersion >= 302) \/\/ If OpenGL v3.02+ ...$/;"	m	class:OVR::GLEContext
WholeVersion	Src/CAPI/GL/CAPI_GL_Util.h	/^    int         WholeVersion;        \/\/ Equals ((MajorVersion * 100) + MinorVersion). Example usage: if(glv.WholeVersion >= 302) \/\/ If OpenGL v3.02+ ...$/;"	m	struct:OVR::CAPI::GL::GLVersionAndExtensions
Width	Src/CAPI/GL/CAPI_GL_Util.h	/^    int           Width, Height;$/;"	m	class:OVR::CAPI::GL::Texture
Win	Src/OVR_CAPI_GL.h	/^    Window     Win;$/;"	m	struct:ovrGLConfigData_s
Win32ShimInfo	Src/OVR_Stereo.h	/^	Win32ShimInfo() :$/;"	f	struct:OVR::Win32ShimInfo
Win32ShimInfo	Src/OVR_Stereo.h	/^struct Win32ShimInfo$/;"	s	namespace:OVR
Win32_PerfTimer	Src/Kernel/OVR_Timer.cpp	/^static PerformanceTimer Win32_PerfTimer;$/;"	m	namespace:OVR	file:
Window	Src/CAPI/GL/CAPI_GL_Util.h	/^    HWND   Window;$/;"	m	struct:OVR::CAPI::GL::RenderParams
Window	Src/OVR_CAPI_GL.h	/^    HWND Window;$/;"	m	struct:ovrGLConfigData_s
WindowCount	Src/Util/Util_ImageWindow.h	/^	static int					WindowCount() { return windowCount; }$/;"	f	class:OVR::Util::ImageWindow
WindowsPos	Src/OVR_CAPI.h	/^    ovrVector2i WindowsPos;$/;"	m	struct:ovrHmdDesc_
WithTimewarp	Src/Util/Util_Render_Stereo.h	/^    bool  WithTimewarp;$/;"	m	struct:OVR::Util::Render::PredictionValues
WithVsync	Src/Util/Util_Render_Stereo.h	/^    bool  WithVsync;$/;"	m	struct:OVR::Util::Render::PredictionValues
WorldAxes	Src/Kernel/OVR_Math.h	/^    WorldAxes(AxisDirection x, AxisDirection y, AxisDirection z)$/;"	f	struct:OVR::WorldAxes
WorldAxes	Src/Kernel/OVR_Math.h	/^struct WorldAxes$/;"	s	namespace:OVR
WorldFromCamera	Src/Tracking/Tracking_SensorState.h	/^    Pose<double>      WorldFromCamera;$/;"	m	struct:OVR::Tracking::LocklessSensorState
WorldFromImu	Src/Tracking/Tracking_SensorState.h	/^	PoseState<double> WorldFromImu;$/;"	m	struct:OVR::Tracking::LocklessSensorState
Write	Src/Kernel/OVR_File.cpp	/^int     BufferedFile::Write(const uint8_t *psourceBuffer, int numBytes)$/;"	f	class:OVR::BufferedFile
Write	Src/Kernel/OVR_File.h	/^    int         Write(const uint8_t *pbuffer, int numBytes)$/;"	f	class:OVR::MemoryFile
Write	Src/Kernel/OVR_File.h	/^    virtual int         Write(const uint8_t *pbuffer, int numBytes)   { return pFile->Write(pbuffer,numBytes); }  $/;"	f	class:OVR::DelegatedFile
Write	Src/Kernel/OVR_FileFILE.cpp	/^int     FILEFile::Write(const uint8_t *pbuffer, int numBytes)$/;"	f	class:OVR::FILEFile
Write	Src/Kernel/OVR_SysFile.cpp	/^    virtual int         Write(const uint8_t * \/*pbuffer*\/, int \/*numBytes*\/) { return -1; }$/;"	f	class:OVR::UnopenedFile
Write	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^uint8_t* CircularBuffer::Write(size_t size)$/;"	f	class:OVR::CircularBuffer
Write	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write( BitStream &bitStream )$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write( BitStream &bitStream, BitSize_t numberOfBits )$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write( BitStream *bitStream)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write( BitStream *bitStream, BitSize_t numberOfBits )$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write( const char* inputByteArray, const unsigned int numberOfBytes )$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^	inline void Write(char * const inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^	inline void Write(const char * const inStringVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^	inline void Write(const unsigned char * const inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^	inline void Write(unsigned char * const inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(char * const &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(const OVR::String &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(const bool &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(const char * const &inStringVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(const templateType &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(const unsigned char * const &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write	Src/Net/OVR_BitStream.h	/^inline void BitStream::Write(unsigned char * const &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
Write0	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write0( void )$/;"	f	class:OVR::Net::BitStream
Write1	Src/Net/OVR_BitStream.cpp	/^void BitStream::Write1( void )$/;"	f	class:OVR::Net::BitStream
WriteAlignedBytes	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteAlignedBytes( const unsigned char* inByteArray, const unsigned int numberOfBytesToWrite )$/;"	f	class:OVR::Net::BitStream
WriteAlignedBytesSafe	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteAlignedBytesSafe( const char *inByteArray, const unsigned int inputLength, const unsigned int maxBytesToWrite )$/;"	f	class:OVR::Net::BitStream
WriteAlignedVar16	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteAlignedVar16(const char *inByteArray)$/;"	f	class:OVR::Net::BitStream
WriteAlignedVar32	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteAlignedVar32(const char *inByteArray)$/;"	f	class:OVR::Net::BitStream
WriteAlignedVar8	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteAlignedVar8(const char *inByteArray)$/;"	f	class:OVR::Net::BitStream
WriteBits	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteBits( const unsigned char* inByteArray, BitSize_t numberOfBitsToWrite, const bool rightAlignedBits )$/;"	f	class:OVR::Net::BitStream
WriteBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^void BitStream::WriteBitsFromIntegerRange( const templateType value, const templateType minimum,const templateType maximum, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
WriteBitsFromIntegerRange	Src/Net/OVR_BitStream.h	/^void BitStream::WriteBitsFromIntegerRange( const templateType value, const templateType minimum,const templateType maximum, const int requiredBits, bool allowOutsideRange )$/;"	f	class:OVR::Net::BitStream
WriteBuffer	Src/Kernel/OVR_File.h	/^        WriteBuffer$/;"	e	enum:OVR::BufferedFile::BufferModeType
WriteCasted	Src/Net/OVR_BitStream.h	/^void BitStream::WriteCasted( const sourceType &value )$/;"	f	class:OVR::Net::BitStream
WriteCompressed	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteCompressed( const unsigned char* inByteArray,$/;"	f	class:OVR::Net::BitStream
WriteCompressed	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressed(const bool &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
WriteCompressed	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressed(const double &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
WriteCompressed	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressed(const float &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
WriteCompressed	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressed(const templateType &inTemplateVar)$/;"	f	class:OVR::Net::BitStream
WriteCompressedDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressedDelta(const bool &currentValue)$/;"	f	class:OVR::Net::BitStream
WriteCompressedDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressedDelta(const bool &currentValue, const bool &lastValue)$/;"	f	class:OVR::Net::BitStream
WriteCompressedDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressedDelta(const templateType &currentValue)$/;"	f	class:OVR::Net::BitStream
WriteCompressedDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteCompressedDelta(const templateType &currentValue, const templateType &lastValue)$/;"	f	class:OVR::Net::BitStream
WriteDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteDelta(const bool &currentValue, const bool &lastValue)$/;"	f	class:OVR::Net::BitStream
WriteDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteDelta(const templateType &currentValue)$/;"	f	class:OVR::Net::BitStream
WriteDelta	Src/Net/OVR_BitStream.h	/^inline void BitStream::WriteDelta(const templateType &currentValue, const templateType &lastValue)$/;"	f	class:OVR::Net::BitStream
WriteDouble	Src/Kernel/OVR_File.h	/^    inline void    WriteDouble(double v)       { v = Alg::ByteUtil::SystemToLE(v); Write((uint8_t*)&v, 8); }$/;"	f	class:OVR::File
WriteDoubleBE	Src/Kernel/OVR_File.h	/^    inline void    WriteDoubleBE(double v)     { v = Alg::ByteUtil::SystemToBE(v); Write((uint8_t*)&v, 8); }$/;"	f	class:OVR::File
WriteFloat	Src/Kernel/OVR_File.h	/^    inline void    WriteFloat(float v)         { v = Alg::ByteUtil::SystemToLE(v); Write((uint8_t*)&v, 4); } $/;"	f	class:OVR::File
WriteFloat16	Src/Net/OVR_BitStream.cpp	/^void BitStream::WriteFloat16( float inOutFloat, float floatMin, float floatMax )$/;"	f	class:OVR::Net::BitStream
WriteFloatBE	Src/Kernel/OVR_File.h	/^    inline void    WriteFloatBE(float v)       { v = Alg::ByteUtil::SystemToBE(v); Write((uint8_t*)&v, 4); }$/;"	f	class:OVR::File
WriteHeaderV1	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LatencyStatisticsCSV::WriteHeaderV1()$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
WriteNormQuat	Src/Net/OVR_BitStream.h	/^void BitStream::WriteNormQuat( templateType w, templateType x, templateType y, templateType z)$/;"	f	class:OVR::Net::BitStream
WriteNormVector	Src/Net/OVR_BitStream.h	/^void BitStream::WriteNormVector( templateType x, templateType y, templateType z )$/;"	f	class:OVR::Net::BitStream
WriteOrthMatrix	Src/Net/OVR_BitStream.h	/^void BitStream::WriteOrthMatrix($/;"	f	class:OVR::Net::BitStream
WritePtr	Src/Net/OVR_BitStream.h	/^inline void BitStream::WritePtr(templateType *inTemplateVar)$/;"	f	class:OVR::Net::BitStream
WriteResultsV1	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LatencyStatisticsCSV::WriteResultsV1(LatencyStatisticsResults *results)$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
WriteSByte	Src/Kernel/OVR_File.h	/^    inline void    WriteSByte(int8_t v)        { PWrite8((uint8_t)Alg::ByteUtil::SystemToLE(v));     }$/;"	f	class:OVR::File
WriteSByteBE	Src/Kernel/OVR_File.h	/^    inline void    WriteSByteBE(int8_t v)      { PWrite8((uint8_t)Alg::ByteUtil::SystemToBE(v));     }$/;"	f	class:OVR::File
WriteSInt16	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt16(int16_t v)       { PWrite16((uint16_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteSInt16BE	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt16BE(uint16_t v)     { PWrite16((uint16_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteSInt32	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt32(int32_t v)       { PWrite32((uint32_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteSInt32BE	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt32BE(uint32_t v)     { PWrite32((uint32_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteSInt64	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt64(int64_t v)       { PWrite64((uint64_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteSInt64BE	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt64BE(uint64_t v)     { PWrite64((uint64_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteSInt8	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt8(int8_t v)        { PWrite8((uint8_t)Alg::ByteUtil::SystemToLE(v));     }$/;"	f	class:OVR::File
WriteSInt8BE	Src/Kernel/OVR_File.h	/^    inline void    WriteSInt8BE(int16_t v)      { PWrite8((uint8_t)Alg::ByteUtil::SystemToBE(v));     }$/;"	f	class:OVR::File
WriteUByte	Src/Kernel/OVR_File.h	/^    inline void    WriteUByte(uint8_t v)       { PWrite8((uint8_t)Alg::ByteUtil::SystemToLE(v));     }$/;"	f	class:OVR::File
WriteUByteBE	Src/Kernel/OVR_File.h	/^    inline void    WriteUByteBE(uint8_t v)     { PWrite8((uint8_t)Alg::ByteUtil::SystemToBE(v));     }$/;"	f	class:OVR::File
WriteUInt16	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt16(uint16_t v)       { PWrite16((uint16_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteUInt16BE	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt16BE(uint16_t v)     { PWrite16((uint16_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteUInt32	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt32(uint32_t v)       { PWrite32((uint32_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteUInt32BE	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt32BE(uint32_t v)     { PWrite32((uint32_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteUInt64	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt64(uint64_t v)       { PWrite64((uint64_t)Alg::ByteUtil::SystemToLE(v));   }$/;"	f	class:OVR::File
WriteUInt64BE	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt64BE(uint64_t v)     { PWrite64((uint64_t)Alg::ByteUtil::SystemToBE(v));   }$/;"	f	class:OVR::File
WriteUInt8	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt8(uint8_t v)       { PWrite8((uint8_t)Alg::ByteUtil::SystemToLE(v));     }$/;"	f	class:OVR::File
WriteUInt8BE	Src/Kernel/OVR_File.h	/^    inline void    WriteUInt8BE(uint16_t v)      { PWrite8((uint8_t)Alg::ByteUtil::SystemToBE(v));     }$/;"	f	class:OVR::File
WriteVector	Src/Net/OVR_BitStream.h	/^void BitStream::WriteVector( templateType x, templateType y, templateType z )$/;"	f	class:OVR::Net::BitStream
XAxis	Src/Kernel/OVR_Math.h	/^    AxisDirection XAxis, YAxis, ZAxis;$/;"	m	struct:OVR::WorldAxes
YAxis	Src/Kernel/OVR_Math.h	/^    AxisDirection XAxis, YAxis, ZAxis;$/;"	m	struct:OVR::WorldAxes
ZAxis	Src/Kernel/OVR_Math.h	/^    AxisDirection XAxis, YAxis, ZAxis;$/;"	m	struct:OVR::WorldAxes
ZERO	Src/Kernel/OVR_Math.cpp	/^const Vector3<double> Vector3<double>::ZERO = Vector3<double>();$/;"	m	class:OVR::Vector3	file:
ZERO	Src/Kernel/OVR_Math.cpp	/^const Vector3<float> Vector3<float>::ZERO = Vector3<float>();$/;"	m	class:OVR::Vector3	file:
ZERO	Src/Kernel/OVR_Math.h	/^    static const Vector3 ZERO;$/;"	m	class:OVR::Vector3
ZERO	Src/Kernel/OVR_Math.h	/^    static const Vector4 ZERO;$/;"	m	class:OVR::Vector4
ZFar	Src/Util/Util_Render_Stereo.h	/^    float              ZFar;$/;"	m	class:OVR::Util::Render::StereoConfig
ZNear	Src/Util/Util_Render_Stereo.h	/^    float              ZNear;$/;"	m	class:OVR::Util::Render::StereoConfig
ZoomX	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLfloat ZoomX;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
ZoomY	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^        GLfloat ZoomY;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
_CRTDBG_MAP_ALLOC	Src/Kernel/OVR_Types.h	214;"	d
_File	Src/CAPI/CAPI_LatencyStatistics.h	/^    OVR::SysFile _File;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
_GNU_SOURCE	Src/Kernel/OVR_Types.h	200;"	d
_GPU_DEVICE	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef struct _GPU_DEVICE {$/;"	s
_Hash	Src/Kernel/OVR_Observer.h	/^	OVR::Hash< OVR::String, Ptr<Observer<DelegateT> >, OVR::String::HashFunctor > _Hash;$/;"	m	class:OVR::ObserverHash
_Ioctlsocket	Src/Net/OVR_Unix_Socket.cpp	/^void _Ioctlsocket(SocketHandle sock, unsigned long nonblocking)$/;"	f	namespace:OVR::Net
_OVR_VERSION_H	Include/OVR_Version.h	26;"	d
_Observer	Src/CAPI/CAPI_LatencyStatistics.h	/^    ObserverScope<LatencyStatisticsSlot> _Observer;$/;"	m	class:OVR::CAPI::LatencyStatisticsCSV
_PAD_0_	Src/Tracking/Tracking_SensorState.h	/^    uint32_t          _PAD_0_;$/;"	m	struct:OVR::Tracking::LocklessSensorState
_PAD_1_	Src/Tracking/Tracking_SensorState.h	/^    uint32_t          _PAD_1_;$/;"	m	struct:OVR::Tracking::LocklessSensorState
__GLEXT_H_	Src/CAPI/GL/CAPI_GLE_GL.h	76;"	d
__GLXEvent	Src/CAPI/GL/CAPI_GLE_GL.h	/^        typedef union __GLXEvent {$/;"	u
__GLX_glx_h__	Src/CAPI/GL/CAPI_GLE_GL.h	4314;"	d
__GL_H__	Src/CAPI/GL/CAPI_GLE_GL.h	71;"	d
__PLACEMENT_NEW_INLINE	Src/Kernel/OVR_Allocator.h	53;"	d
__X_GL_H	Src/CAPI/GL/CAPI_GLE_GL.h	72;"	d
__gl2_h_	Src/CAPI/GL/CAPI_GLE_GL.h	73;"	d
__gl_h_	Src/CAPI/GL/CAPI_GLE_GL.h	70;"	d
__glext_h_	Src/CAPI/GL/CAPI_GLE_GL.h	75;"	d
__gltypes_h_	Src/CAPI/GL/CAPI_GLE_GL.h	74;"	d
__glx_h__	Src/CAPI/GL/CAPI_GLE_GL.h	4315;"	d
__glxext_h_	Src/CAPI/GL/CAPI_GLE_GL.h	4308;"	d
__wglext_h_	Src/CAPI/GL/CAPI_GLE_GL.h	3794;"	d
_object	Src/Kernel/OVR_Delegates.h	/^	void *_object;$/;"	m	class:OVR::Delegate0
_object	Src/Kernel/OVR_Delegates.h	/^	void *_object;$/;"	m	class:OVR::Delegate1
_object	Src/Kernel/OVR_Delegates.h	/^	void *_object;$/;"	m	class:OVR::Delegate2
_object	Src/Kernel/OVR_Delegates.h	/^	void *_object;$/;"	m	class:OVR::Delegate3
_stub	Src/Kernel/OVR_Delegates.h	/^	StubPointer _stub;$/;"	m	class:OVR::Delegate0
_stub	Src/Kernel/OVR_Delegates.h	/^	StubPointer _stub;$/;"	m	class:OVR::Delegate1
_stub	Src/Kernel/OVR_Delegates.h	/^	StubPointer _stub;$/;"	m	class:OVR::Delegate2
_stub	Src/Kernel/OVR_Delegates.h	/^	StubPointer _stub;$/;"	m	class:OVR::Delegate3
a	Src/Kernel/OVR_Math.h	/^	T a;$/;"	m	class:OVR::Angle
accessMode	Src/Kernel/OVR_SharedMemory.h	/^		SharedMemory::AccessMode	accessMode;		\/\/ When opening\/creating, what access should this process get?$/;"	m	struct:OVR::SharedMemory::OpenParameters
add	Src/Kernel/OVR_Hash.h	/^    void add(const CRef& key, size_t hashValue)$/;"	f	class:OVR::HashSetBase
addCircle	Src/Util/Util_ImageWindow.h	/^	void addCircle( float x , float y, float radius, float r, float g, float b, bool fill ) { OVR_UNUSED( x ); OVR_UNUSED( y ); OVR_UNUSED( radius ); OVR_UNUSED( r ); OVR_UNUSED( g ); OVR_UNUSED( b ); OVR_UNUSED( fill ); }$/;"	f	class:OVR::Util::ImageWindow
addText	Src/Util/Util_ImageWindow.h	/^	void addText( float x, float y, float r, float g, float b, OVR::String text ) { OVR_UNUSED( x ); OVR_UNUSED( y ); OVR_UNUSED( r ); OVR_UNUSED( g ); OVR_UNUSED( b ); OVR_UNUSED( text ); }$/;"	f	class:OVR::Util::ImageWindow
addThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^    void addThread(Thread *pthread)$/;"	f	class:OVR::ThreadList	file:
allBlockingTcpSockets	Src/Net/OVR_Session.h	/^    Array< Ptr< Net::TCPSocket >, ArrayNoShrinkPolicy > allBlockingTcpSockets; \/\/ Preallocated blocking sockets array$/;"	m	class:OVR::Net::Session
alphaBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  alphaBits;$/;"	m	struct:OVR::FBConfig	file:
application	Src/Displays/OVR_Linux_Display.h	/^    bool                application;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
applicationDisplayCount	Src/Displays/OVR_Linux_Display.h	/^    int                 applicationDisplayCount;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
auxBuffers	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  auxBuffers;$/;"	m	struct:OVR::FBConfig	file:
aux_buffer	Src/CAPI/GL/CAPI_GLE_GL.h	/^          unsigned int aux_buffer; $/;"	m	struct:__anon1
average_out_of_range	Src/OVR_Stereo.cpp	/^static float average_out_of_range;$/;"	m	namespace:OVR	file:
average_total_out_of_range	Src/OVR_Stereo.cpp	/^static float average_total_out_of_range = 0;$/;"	m	namespace:OVR	file:
b	Src/Kernel/OVR_Math.h	/^	Vector3<T>	b[2];$/;"	m	class:OVR::Bounds3
b	Src/Util/Util_ImageWindow.h	/^		float b;$/;"	m	struct:OVR::Util::__anon16
b	Src/Util/Util_ImageWindow.h	/^		float b;$/;"	m	struct:OVR::Util::__anon17
base_iterator	Src/Kernel/OVR_StringHash.h	/^    typedef typename BaseType::Iterator base_iterator;$/;"	t	class:OVR::StringHash
blockType	Src/Displays/OVR_Linux_Display.cpp	/^static int blockType(uint8_t* block)$/;"	f	namespace:OVR
blockingOnThisConnection	Src/Net/OVR_RPC1.h	/^	Ptr<Connection> blockingOnThisConnection;$/;"	m	class:OVR::Net::Plugins::RPC1
blockingReturnValue	Src/Net/OVR_RPC1.h	/^    Net::BitStream* blockingReturnValue;$/;"	m	class:OVR::Net::Plugins::RPC1
blockingTimeout	Src/Net/OVR_Socket.h	/^    uint32_t blockingTimeout;$/;"	m	struct:OVR::Net::BerkleyBindParameters
blueBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  blueBits;$/;"	m	struct:OVR::FBConfig	file:
buffer_mask	Src/CAPI/GL/CAPI_GLE_GL.h	/^          unsigned int buffer_mask; $/;"	m	struct:__anon1
buildVisualAndWindow	Src/Displays/OVR_Linux_SDKWindow.cpp	/^void SDKWindow::buildVisualAndWindow(const LinuxDeviceScreen& devScreen)$/;"	f	class:OVR::SDKWindow
c	Src/Kernel/OVR_Atomic.h	/^    union C2T_union { C c; T t; };$/;"	m	union:OVR::AtomicOps::C2T_union
cachedDescriptorArray	Src/Displays/OVR_Linux_Display.h	/^    Linux::DisplayDesc  cachedDescriptorArray[DescArraySize];$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
calcFrameDelta	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double  FrameTimeManager::calcFrameDelta() const$/;"	f	class:OVR::CAPI::FrameTimeManager
calcPredictedPose	Src/Tracking/Tracking_SensorStateReader.cpp	/^static Pose<double> calcPredictedPose(const PoseState<double>& poseState, double predictionDt)$/;"	f	namespace:OVR::Tracking
calcScreenDelay	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double  FrameTimeManager::calcScreenDelay() const$/;"	f	class:OVR::CAPI::FrameTimeManager
calcTimewarpWaitDelta	Src/CAPI/CAPI_FrameTimeManager.cpp	/^double FrameTimeManager::calcTimewarpWaitDelta() const$/;"	f	class:OVR::CAPI::FrameTimeManager
calculateResults	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::calculateResults()$/;"	f	class:OVR::CAPI::LagStatsCalculator
calculateResultsLock	Src/CAPI/CAPI_LatencyStatistics.h	/^    OVR::Lock calculateResultsLock;$/;"	m	class:OVR::CAPI::LagStatsCalculator
calculateResultsSubject	Src/CAPI/CAPI_LatencyStatistics.h	/^    OVR::ObserverScope<LatencyStatisticsSlot> calculateResultsSubject;$/;"	m	class:OVR::CAPI::LagStatsCalculator
callBlockingMutex	Src/Net/OVR_RPC1.h	/^    Mutex           callBlockingMutex;$/;"	m	class:OVR::Net::Plugins::RPC1
callBlockingWait	Src/Net/OVR_RPC1.h	/^    WaitCondition   callBlockingWait;$/;"	m	class:OVR::Net::Plugins::RPC1
cb	Src/CAPI/GL/CAPI_GLE_GL.h	/^            DWORD  cb;$/;"	m	struct:_GPU_DEVICE
checkBeginFrameScope	Src/CAPI/CAPI_HMDState.h	/^    void checkBeginFrameScope(const char* functionName)$/;"	f	class:OVR::CAPI::HMDState
checkBeginFrameTimingScope	Src/CAPI/CAPI_HMDState.h	/^    void checkBeginFrameTimingScope(const char* functionName)$/;"	f	class:OVR::CAPI::HMDState
checkInvalidDelete	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE static void checkInvalidDelete(RefCountNTSImplCore *) { }$/;"	f	class:OVR::RefCountNTSImplCore
checkInvalidDelete	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE static void checkInvalidDelete(RefCountNTSImplCore *pmem)$/;"	f	class:OVR::RefCountNTSImplCore
checkInvalidDelete	Src/Kernel/OVR_RefCount.h	/^    inline static void checkInvalidDelete(RefCountImplCore *) { }$/;"	f	class:OVR::RefCountImplCore
checkInvalidDelete	Src/Kernel/OVR_RefCount.h	/^    inline static void checkInvalidDelete(RefCountImplCore *pmem)$/;"	f	class:OVR::RefCountImplCore
checkRenderingConfigured	Src/CAPI/CAPI_HMDState.h	/^    void checkRenderingConfigured(const char* functionName)$/;"	f	class:OVR::CAPI::HMDState
check_equal	Src/Kernel/OVR_UTF8Util.cpp	/^bool    check_equal(const char* utf8_in, const uint32_t* ucs_in)$/;"	f	namespace:OVR::UTF8Util
chooseVisual	Src/Displays/OVR_Linux_SDKWindow.cpp	/^XVisualInfo* SDKWindow::chooseVisual(_XDisplay* display, int xscreen,$/;"	f	class:OVR::SDKWindow
colorBitmap	Src/Util/Util_ImageWindow.h	/^	ID2D1Bitmap*				colorBitmap;$/;"	m	class:OVR::Util::ImageWindow
colorImageData	Src/Util/Util_ImageWindow.h	/^		void*			  colorImageData;$/;"	m	class:OVR::Util::Frame
colorPitch	Src/Util/Util_ImageWindow.h	/^		int				  colorPitch;$/;"	m	class:OVR::Util::Frame
constructWindow	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static Window constructWindow(_XDisplay* xDisp, int xScreen,$/;"	f	namespace:OVR
copyData	Src/Net/OVR_BitStream.h	/^	bool copyData;$/;"	m	class:OVR::Net::BitStream
count	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int count; $/;"	m	struct:__anon1
createDrawQuad	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::createDrawQuad()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
crtcid	Src/Displays/OVR_Linux_SDKWindow.h	/^    XID                 crtcid;   \/\/\/< XID uniquely identifying this device on XDisplay.$/;"	m	struct:OVR::LinuxDeviceScreen
cs	Src/Kernel/OVR_Atomic.h	/^    CRITICAL_SECTION cs;$/;"	m	class:OVR::Lock
dValue	Src/OVR_JSON.h	/^    double          dValue;$/;"	m	class:OVR::JSON
data	Src/Net/OVR_BitStream.h	/^	unsigned char *data;$/;"	m	class:OVR::Net::BitStream
depthBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  depthBits;$/;"	m	struct:OVR::FBConfig	file:
destroy	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::destroy()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
discoverExtendedRifts	Src/Displays/OVR_Linux_Display.cpp	/^static int discoverExtendedRifts(OVR::Linux::DisplayDesc* descriptorArray, int inputArraySize, bool \/*edidInfo*\/)$/;"	f	namespace:OVR
display	Src/CAPI/GL/CAPI_GLE_GL.h	/^          Display *display; $/;"	m	struct:__anon1
displayCount	Src/Displays/OVR_Linux_Display.h	/^    int                 displayCount;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
distortionContext	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Context             distortionContext;$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
doubleBuffer	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  bool doubleBuffer;$/;"	m	struct:OVR::FBConfig	file:
draw_type	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int draw_type; $/;"	m	struct:__anon1
drawable	Src/CAPI/GL/CAPI_GLE_GL.h	/^          GLXDrawable drawable; $/;"	m	struct:__anon1
eachEye	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^	} eachEye[2];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer	typeref:struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
edid_v1_descriptor_flag	Src/Displays/OVR_Linux_Display.cpp	/^static const uint8_t edid_v1_descriptor_flag[] = { 0x00, 0x00 };$/;"	m	namespace:OVR	file:
edid_v1_header	Src/Displays/OVR_Linux_Display.cpp	/^static const uint8_t edid_v1_header[] = { 0x00, 0xff, 0xff, 0xff,$/;"	m	namespace:OVR	file:
event_type	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int event_type; $/;"	m	struct:__anon1
exceptionFD	Src/Net/OVR_Unix_Socket.h	/^    fd_set readFD, exceptionFD, writeFD;$/;"	m	class:OVR::Net::TCPSocketPollState
executeImpl	Src/Kernel/OVR_ThreadCommandQueue.h	/^    void executeImpl() const$/;"	f	class:OVR::ThreadCommandMF0
executeImpl	Src/Kernel/OVR_ThreadCommandQueue.h	/^    void executeImpl() const$/;"	f	class:OVR::ThreadCommandMF1
executeImpl	Src/Kernel/OVR_ThreadCommandQueue.h	/^    void executeImpl() const$/;"	f	class:OVR::ThreadCommandMF2
extended	Src/Displays/OVR_Linux_Display.h	/^    bool                extended;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
extendedDisplayCount	Src/Displays/OVR_Linux_Display.h	/^    int                 extendedDisplayCount;$/;"	m	class:OVR::Linux::LinuxDisplaySearchHandle
fbCalcContrib	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static int fbCalcContrib(int desired, int current)$/;"	f	namespace:OVR
fill	Src/Util/Util_ImageWindow.h	/^		bool  fill;$/;"	m	struct:OVR::Util::__anon16
findConnectionBySockAddr	Src/Net/OVR_Session.cpp	/^Ptr<PacketizedTCPConnection> Session::findConnectionBySockAddr(SockAddr* address)$/;"	f	class:OVR::Net::Session
findConnectionBySocket	Src/Net/OVR_Session.cpp	/^Ptr<PacketizedTCPConnection> Session::findConnectionBySocket(Array< Ptr<Connection> >& connectionArray, Socket* s, int *connectionIndex)$/;"	f	class:OVR::Net::Session
findDevScreenForDevID	Src/Displays/OVR_Linux_SDKWindow.cpp	/^LinuxDeviceScreen SDKWindow::findDevScreenForDevID(const char* deviceIDIn)$/;"	f	class:OVR::SDKWindow
findDevScreenForHMD	Src/Displays/OVR_Linux_SDKWindow.cpp	/^LinuxDeviceScreen SDKWindow::findDevScreenForHMD(const ovrHmd& hmd)$/;"	f	class:OVR::SDKWindow
findIndex	Src/Kernel/OVR_Hash.h	/^    intptr_t findIndex(const K& key) const$/;"	f	class:OVR::HashSetBase
findIndexAlt	Src/Kernel/OVR_Hash.h	/^    intptr_t findIndexAlt(const K& key) const$/;"	f	class:OVR::HashSetBase
findIndexCore	Src/Kernel/OVR_Hash.h	/^    intptr_t findIndexCore(const K& key, size_t hashValue) const$/;"	f	class:OVR::HashSetBase
findModeByXID	Src/Displays/OVR_Linux_Display.cpp	/^static XRRModeInfo* findModeByXID(XRRScreenResources* screen, RRMode xid)$/;"	f	namespace:OVR
findModeByXID	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static XRRModeInfo* findModeByXID(XRRScreenResources* screen, RRMode xid)$/;"	f	namespace:OVR
finishAllThreads	Src/Kernel/OVR_ThreadsPthread.cpp	/^    void finishAllThreads()$/;"	f	class:OVR::ThreadList	file:
firstByteMark	Src/OVR_JSON.cpp	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	m	namespace:OVR	file:
frameNumber	Src/Util/Util_ImageWindow.h	/^	int						frameNumber;$/;"	m	class:OVR::Util::Frame
frames	Src/Util/Util_ImageWindow.h	/^	InPlaceMutableDeque< Ptr<Frame> >	frames;$/;"	m	class:OVR::Util::ImageWindow
frontBufferMutex	Src/Util/Util_ImageWindow.h	/^	Mutex*						frontBufferMutex;$/;"	m	class:OVR::Util::ImageWindow
fs	Src/Kernel/OVR_FileFILE.cpp	/^    FILE*       fs;$/;"	m	class:OVR::FILEFile	file:
g	Src/Util/Util_ImageWindow.h	/^		float g;$/;"	m	struct:OVR::Util::__anon16
g	Src/Util/Util_ImageWindow.h	/^		float g;$/;"	m	struct:OVR::Util::__anon17
gXLastError	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static int gXLastError = -1;$/;"	m	namespace:OVR	file:
getBoolValue	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::getBoolValue(const char* propertyName, bool defaultVal)$/;"	f	class:OVR::CAPI::HMDState
getCenteredFromWorld	Src/Tracking/Tracking_SensorStateReader.h	/^    const Posed getCenteredFromWorld()$/;"	f	class:OVR::Tracking::SensorStateReader
getDeviceScreens	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static int getDeviceScreens(LinuxDeviceScreen* screens, int maxNumDevices)$/;"	f	namespace:OVR
getFloatArray	Src/CAPI/CAPI_HMDState.cpp	/^unsigned HMDState::getFloatArray(const char* propertyName, float values[], unsigned arraySize)$/;"	f	class:OVR::CAPI::HMDState
getFloatValue	Src/CAPI/CAPI_HMDState.cpp	/^float HMDState::getFloatValue(const char* propertyName, float defaultVal)$/;"	f	class:OVR::CAPI::HMDState
getFrequency	Src/Kernel/OVR_Timer.cpp	/^    UINT64 getFrequency()$/;"	f	struct:OVR::PerformanceTimer
getHSWTimeKey	Src/CAPI/CAPI_HSWDisplay.cpp	/^static String getHSWTimeKey(const char* userName)$/;"	f	namespace:OVR::CAPI
getIntValue	Src/CAPI/CAPI_HMDState.cpp	/^int HMDState::getIntValue(const char* propertyName, int defaultVal)$/;"	f	class:OVR::CAPI::HMDState
getMonitorName	Src/Displays/OVR_Linux_Display.cpp	/^static char* getMonitorName(const uint8_t* block)$/;"	f	namespace:OVR
getRotation	Src/Displays/OVR_Linux_SDKWindow.cpp	/^DistortionRotation SDKWindow::getRotation(const ovrHmd& hmd)$/;"	f	class:OVR::SDKWindow
getString	Src/CAPI/CAPI_HMDState.cpp	/^const char* HMDState::getString(const char* propertyName, const char* defaultVal)$/;"	f	class:OVR::CAPI::HMDState
getVisualFromDrawable	Src/Displays/OVR_Linux_SDKWindow.cpp	/^bool SDKWindow::getVisualFromDrawable(GLXDrawable drawable, XVisualInfo* vinfoOut)$/;"	f	class:OVR::SDKWindow
getXRRProperty	Src/Displays/OVR_Linux_Display.cpp	/^static int getXRRProperty(_XDisplay* display, RROutput output, Atom atom,$/;"	f	namespace:OVR
glAccum	Src/CAPI/GL/CAPI_GLE.cpp	1026;"	d	file:
glAccum	Src/CAPI/GL/CAPI_GLE_GL.h	725;"	d
glAccum_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glAccum_Hook(GLenum op, GLfloat value)$/;"	f	class:OVR::GLEContext
glActiveTexture	Src/CAPI/GL/CAPI_GLE_GL.h	1652;"	d
glActiveTexture	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLACTIVETEXTUREPROC                   glActiveTexture;$/;"	m	namespace:OVR::CAPI::GL	file:
glActiveTexture_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glActiveTexture_Hook(GLenum texture)$/;"	f	class:OVR::GLEContext
glActiveTexture_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLACTIVETEXTUREPROC glActiveTexture_Impl;$/;"	m	class:OVR::GLEContext
glAddSwapHintRectWIN	Src/CAPI/GL/CAPI_GLE_GL.h	3779;"	d
glAddSwapHintRectWIN_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glAddSwapHintRectWIN_Hook(GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glAddSwapHintRectWIN_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLADDSWAPHINTRECTWINPROC glAddSwapHintRectWIN_Impl;$/;"	m	class:OVR::GLEContext
glAlphaFunc	Src/CAPI/GL/CAPI_GLE.cpp	1034;"	d	file:
glAlphaFunc	Src/CAPI/GL/CAPI_GLE_GL.h	726;"	d
glAlphaFunc_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glAlphaFunc_Hook(GLenum func, GLclampf ref)$/;"	f	class:OVR::GLEContext
glAreTexturesResident	Src/CAPI/GL/CAPI_GLE.cpp	1042;"	d	file:
glAreTexturesResident	Src/CAPI/GL/CAPI_GLE_GL.h	727;"	d
glAreTexturesResident_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glAreTexturesResident_Hook(GLsizei n, const GLuint *textures, GLboolean *residences)$/;"	f	class:OVR::GLEContext
glArrayElement	Src/CAPI/GL/CAPI_GLE.cpp	1051;"	d	file:
glArrayElement	Src/CAPI/GL/CAPI_GLE_GL.h	728;"	d
glArrayElement_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glArrayElement_Hook(GLint i)$/;"	f	class:OVR::GLEContext
glAttachShader	Src/CAPI/GL/CAPI_GLE_GL.h	2130;"	d
glAttachShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLATTACHSHADERPROC                    glAttachShader;$/;"	m	namespace:OVR::CAPI::GL	file:
glAttachShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glAttachShader_Hook(GLuint program, GLuint shader)$/;"	f	class:OVR::GLEContext
glAttachShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLATTACHSHADERPROC glAttachShader_Impl;$/;"	m	class:OVR::GLEContext
glBegin	Src/CAPI/GL/CAPI_GLE.cpp	1059;"	d	file:
glBegin	Src/CAPI/GL/CAPI_GLE_GL.h	729;"	d
glBeginConditionalRender	Src/CAPI/GL/CAPI_GLE_GL.h	2442;"	d
glBeginConditionalRender_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBeginConditionalRender_Hook(GLuint id, GLenum mode)$/;"	f	class:OVR::GLEContext
glBeginConditionalRender_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender_Impl;$/;"	m	class:OVR::GLEContext
glBeginQuery	Src/CAPI/GL/CAPI_GLE_GL.h	1923;"	d
glBeginQuery_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBeginQuery_Hook(GLenum target, GLuint id)$/;"	f	class:OVR::GLEContext
glBeginQuery_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBEGINQUERYPROC glBeginQuery_Impl;$/;"	m	class:OVR::GLEContext
glBeginTransformFeedback	Src/CAPI/GL/CAPI_GLE_GL.h	2443;"	d
glBeginTransformFeedback_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBeginTransformFeedback_Hook(GLenum primitiveMode)$/;"	f	class:OVR::GLEContext
glBeginTransformFeedback_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback_Impl;$/;"	m	class:OVR::GLEContext
glBegin_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBegin_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glBindAttribLocation	Src/CAPI/GL/CAPI_GLE_GL.h	2131;"	d
glBindAttribLocation	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBINDATTRIBLOCATIONPROC              glBindAttribLocation;$/;"	m	namespace:OVR::CAPI::GL	file:
glBindAttribLocation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindAttribLocation_Hook(GLuint program, GLuint index, const GLchar *name)$/;"	f	class:OVR::GLEContext
glBindAttribLocation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation_Impl;$/;"	m	class:OVR::GLEContext
glBindBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	1924;"	d
glBindBuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBINDBUFFERPROC                      glBindBuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glBindBufferBase_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindBufferBase_Hook(GLenum target, GLuint index, GLuint buffer)$/;"	f	class:OVR::GLEContext
glBindBufferBase_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDBUFFERBASEPROC glBindBufferBase_Impl;$/;"	m	class:OVR::GLEContext
glBindBufferRange_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindBufferRange_Hook(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)$/;"	f	class:OVR::GLEContext
glBindBufferRange_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDBUFFERRANGEPROC glBindBufferRange_Impl;$/;"	m	class:OVR::GLEContext
glBindBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindBuffer_Hook(GLenum target, GLuint buffer)$/;"	f	class:OVR::GLEContext
glBindBuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDBUFFERPROC glBindBuffer_Impl;$/;"	m	class:OVR::GLEContext
glBindFragDataLocation	Src/CAPI/GL/CAPI_GLE_GL.h	2444;"	d
glBindFragDataLocation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindFragDataLocation_Hook(GLuint program, GLuint color, const GLchar *name)$/;"	f	class:OVR::GLEContext
glBindFragDataLocation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation_Impl;$/;"	m	class:OVR::GLEContext
glBindFramebuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3450;"	d
glBindFramebuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBINDFRAMEBUFFERPROC                 glBindFramebuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glBindFramebuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindFramebuffer_Hook(GLenum target, GLuint framebuffer)$/;"	f	class:OVR::GLEContext
glBindFramebuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer_Impl;$/;"	m	class:OVR::GLEContext
glBindRenderbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3451;"	d
glBindRenderbuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindRenderbuffer_Hook(GLenum target, GLuint renderbuffer)$/;"	f	class:OVR::GLEContext
glBindRenderbuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer_Impl;$/;"	m	class:OVR::GLEContext
glBindTexture	Src/CAPI/GL/CAPI_GLE.cpp	1067;"	d	file:
glBindTexture	Src/CAPI/GL/CAPI_GLE_GL.h	730;"	d
glBindTexture	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBINDTEXTUREPROC                     glBindTexture;$/;"	m	namespace:OVR::CAPI::GL	file:
glBindTexture_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindTexture_Hook(GLenum target, GLuint texture)$/;"	f	class:OVR::GLEContext
glBindVertexArray	Src/CAPI/GL/CAPI_GLE_GL.h	3566;"	d
glBindVertexArray	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBINDVERTEXARRAYPROC                 glBindVertexArray;$/;"	m	namespace:OVR::CAPI::GL	file:
glBindVertexArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2993;"	d
glBindVertexArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindVertexArrayAPPLE_Hook(GLuint array)$/;"	f	class:OVR::GLEContext
glBindVertexArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glBindVertexArray_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBindVertexArray_Hook(GLuint array)$/;"	f	class:OVR::GLEContext
glBindVertexArray_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBINDVERTEXARRAYPROC glBindVertexArray_Impl;$/;"	m	class:OVR::GLEContext
glBitmap	Src/CAPI/GL/CAPI_GLE.cpp	1075;"	d	file:
glBitmap	Src/CAPI/GL/CAPI_GLE_GL.h	731;"	d
glBitmap_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBitmap_Hook(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)$/;"	f	class:OVR::GLEContext
glBlendColor	Src/CAPI/GL/CAPI_GLE_GL.h	1794;"	d
glBlendColor_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendColor_Hook(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)$/;"	f	class:OVR::GLEContext
glBlendColor_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDCOLORPROC glBlendColor_Impl;$/;"	m	class:OVR::GLEContext
glBlendEquation	Src/CAPI/GL/CAPI_GLE_GL.h	1795;"	d
glBlendEquationSeparate	Src/CAPI/GL/CAPI_GLE_GL.h	2132;"	d
glBlendEquationSeparate_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendEquationSeparate_Hook(GLenum modeRGB, GLenum modeAlpha)$/;"	f	class:OVR::GLEContext
glBlendEquationSeparate_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate_Impl;$/;"	m	class:OVR::GLEContext
glBlendEquationSeparatei	Src/CAPI/GL/CAPI_GLE_GL.h	2633;"	d
glBlendEquationSeparatei_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendEquationSeparatei_Hook(GLuint buf, GLenum modeRGB, GLenum modeAlpha)$/;"	f	class:OVR::GLEContext
glBlendEquationSeparatei_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei_Impl;$/;"	m	class:OVR::GLEContext
glBlendEquation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendEquation_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glBlendEquation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDEQUATIONPROC glBlendEquation_Impl;$/;"	m	class:OVR::GLEContext
glBlendEquationi	Src/CAPI/GL/CAPI_GLE_GL.h	2634;"	d
glBlendEquationi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendEquationi_Hook(GLuint buf, GLenum mode)$/;"	f	class:OVR::GLEContext
glBlendEquationi_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDEQUATIONIPROC glBlendEquationi_Impl;$/;"	m	class:OVR::GLEContext
glBlendFunc	Src/CAPI/GL/CAPI_GLE.cpp	1083;"	d	file:
glBlendFunc	Src/CAPI/GL/CAPI_GLE_GL.h	732;"	d
glBlendFunc	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBLENDFUNCPROC                       glBlendFunc;$/;"	m	namespace:OVR::CAPI::GL	file:
glBlendFuncSeparate	Src/CAPI/GL/CAPI_GLE_GL.h	1796;"	d
glBlendFuncSeparate	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBLENDFUNCSEPARATEPROC               glBlendFuncSeparate;$/;"	m	namespace:OVR::CAPI::GL	file:
glBlendFuncSeparate_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendFuncSeparate_Hook(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)$/;"	f	class:OVR::GLEContext
glBlendFuncSeparate_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate_Impl;$/;"	m	class:OVR::GLEContext
glBlendFuncSeparatei	Src/CAPI/GL/CAPI_GLE_GL.h	2635;"	d
glBlendFuncSeparatei_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendFuncSeparatei_Hook(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)$/;"	f	class:OVR::GLEContext
glBlendFuncSeparatei_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei_Impl;$/;"	m	class:OVR::GLEContext
glBlendFunc_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendFunc_Hook(GLenum sfactor, GLenum dfactor)$/;"	f	class:OVR::GLEContext
glBlendFunci	Src/CAPI/GL/CAPI_GLE_GL.h	2636;"	d
glBlendFunci_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlendFunci_Hook(GLuint buf, GLenum src, GLenum dst)$/;"	f	class:OVR::GLEContext
glBlendFunci_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLENDFUNCIPROC glBlendFunci_Impl;$/;"	m	class:OVR::GLEContext
glBlitFramebuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3452;"	d
glBlitFramebuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBLITFRAMEBUFFEREXTPROC              glBlitFramebuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glBlitFramebuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBlitFramebuffer_Hook(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)$/;"	f	class:OVR::GLEContext
glBlitFramebuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer_Impl;$/;"	m	class:OVR::GLEContext
glBufferData	Src/CAPI/GL/CAPI_GLE_GL.h	1925;"	d
glBufferData	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLBUFFERDATAPROC                      glBufferData;$/;"	m	namespace:OVR::CAPI::GL	file:
glBufferData_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBufferData_Hook(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)$/;"	f	class:OVR::GLEContext
glBufferData_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBUFFERDATAPROC glBufferData_Impl;$/;"	m	class:OVR::GLEContext
glBufferParameteriAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2873;"	d
glBufferParameteriAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBufferParameteriAPPLE_Hook(GLenum target, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glBufferParameteriAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glBufferSubData	Src/CAPI/GL/CAPI_GLE_GL.h	1926;"	d
glBufferSubData_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glBufferSubData_Hook(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glBufferSubData_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLBUFFERSUBDATAPROC glBufferSubData_Impl;$/;"	m	class:OVR::GLEContext
glCallList	Src/CAPI/GL/CAPI_GLE.cpp	1091;"	d	file:
glCallList	Src/CAPI/GL/CAPI_GLE_GL.h	733;"	d
glCallList_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCallList_Hook(GLuint list)$/;"	f	class:OVR::GLEContext
glCallLists	Src/CAPI/GL/CAPI_GLE.cpp	1099;"	d	file:
glCallLists	Src/CAPI/GL/CAPI_GLE_GL.h	734;"	d
glCallLists_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCallLists_Hook(GLsizei n, GLenum type, const void *lists)$/;"	f	class:OVR::GLEContext
glCheckFramebufferStatus	Src/CAPI/GL/CAPI_GLE_GL.h	3453;"	d
glCheckFramebufferStatus	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC          glCheckFramebufferStatus;$/;"	m	namespace:OVR::CAPI::GL	file:
glCheckFramebufferStatus_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLenum OVR::GLEContext::glCheckFramebufferStatus_Hook(GLenum target)$/;"	f	class:OVR::GLEContext
glCheckFramebufferStatus_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus_Impl;$/;"	m	class:OVR::GLEContext
glClampColor	Src/CAPI/GL/CAPI_GLE_GL.h	2445;"	d
glClampColor_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClampColor_Hook(GLenum target, GLenum clamp)$/;"	f	class:OVR::GLEContext
glClampColor_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLAMPCOLORPROC glClampColor_Impl;$/;"	m	class:OVR::GLEContext
glClear	Src/CAPI/GL/CAPI_GLE.cpp	1107;"	d	file:
glClear	Src/CAPI/GL/CAPI_GLE_GL.h	735;"	d
glClear	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCLEARPROC                           glClear;$/;"	m	namespace:OVR::CAPI::GL	file:
glClearAccum	Src/CAPI/GL/CAPI_GLE.cpp	1115;"	d	file:
glClearAccum	Src/CAPI/GL/CAPI_GLE_GL.h	736;"	d
glClearAccum_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearAccum_Hook(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)$/;"	f	class:OVR::GLEContext
glClearBufferfi	Src/CAPI/GL/CAPI_GLE_GL.h	2446;"	d
glClearBufferfi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearBufferfi_Hook(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)$/;"	f	class:OVR::GLEContext
glClearBufferfi_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLEARBUFFERFIPROC glClearBufferfi_Impl;$/;"	m	class:OVR::GLEContext
glClearBufferfv	Src/CAPI/GL/CAPI_GLE_GL.h	2447;"	d
glClearBufferfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearBufferfv_Hook(GLenum buffer, GLint drawbuffer, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glClearBufferfv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLEARBUFFERFVPROC glClearBufferfv_Impl;$/;"	m	class:OVR::GLEContext
glClearBufferiv	Src/CAPI/GL/CAPI_GLE_GL.h	2448;"	d
glClearBufferiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearBufferiv_Hook(GLenum buffer, GLint drawbuffer, const GLint *value)$/;"	f	class:OVR::GLEContext
glClearBufferiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLEARBUFFERIVPROC glClearBufferiv_Impl;$/;"	m	class:OVR::GLEContext
glClearBufferuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2449;"	d
glClearBufferuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearBufferuiv_Hook(GLenum buffer, GLint drawbuffer, const GLuint *value)$/;"	f	class:OVR::GLEContext
glClearBufferuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLEARBUFFERUIVPROC glClearBufferuiv_Impl;$/;"	m	class:OVR::GLEContext
glClearColor	Src/CAPI/GL/CAPI_GLE.cpp	1123;"	d	file:
glClearColor	Src/CAPI/GL/CAPI_GLE_GL.h	737;"	d
glClearColor	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCLEARCOLORPROC                      glClearColor;$/;"	m	namespace:OVR::CAPI::GL	file:
glClearColor_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearColor_Hook(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)$/;"	f	class:OVR::GLEContext
glClearDepth	Src/CAPI/GL/CAPI_GLE.cpp	1131;"	d	file:
glClearDepth	Src/CAPI/GL/CAPI_GLE_GL.h	738;"	d
glClearDepth	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCLEARDEPTHPROC                      glClearDepth;$/;"	m	namespace:OVR::CAPI::GL	file:
glClearDepth_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearDepth_Hook(GLclampd depth)$/;"	f	class:OVR::GLEContext
glClearDepthf	Src/CAPI/GL/CAPI_GLE_GL.h	3339;"	d
glClearDepthf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearDepthf_Hook(GLclampf d)$/;"	f	class:OVR::GLEContext
glClearDepthf_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLEARDEPTHFPROC glClearDepthf_Impl;$/;"	m	class:OVR::GLEContext
glClearIndex	Src/CAPI/GL/CAPI_GLE.cpp	1139;"	d	file:
glClearIndex	Src/CAPI/GL/CAPI_GLE_GL.h	739;"	d
glClearIndex_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearIndex_Hook(GLfloat c)$/;"	f	class:OVR::GLEContext
glClearStencil	Src/CAPI/GL/CAPI_GLE.cpp	1147;"	d	file:
glClearStencil	Src/CAPI/GL/CAPI_GLE_GL.h	740;"	d
glClearStencil_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClearStencil_Hook(GLint s)$/;"	f	class:OVR::GLEContext
glClear_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClear_Hook(GLbitfield mask)$/;"	f	class:OVR::GLEContext
glClientActiveTexture	Src/CAPI/GL/CAPI_GLE_GL.h	1653;"	d
glClientActiveTexture_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClientActiveTexture_Hook(GLenum texture)$/;"	f	class:OVR::GLEContext
glClientActiveTexture_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture_Impl;$/;"	m	class:OVR::GLEContext
glClipPlane	Src/CAPI/GL/CAPI_GLE.cpp	1155;"	d	file:
glClipPlane	Src/CAPI/GL/CAPI_GLE_GL.h	741;"	d
glClipPlane_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glClipPlane_Hook(GLenum plane, const GLdouble *equation)$/;"	f	class:OVR::GLEContext
glColor3b	Src/CAPI/GL/CAPI_GLE.cpp	1163;"	d	file:
glColor3b	Src/CAPI/GL/CAPI_GLE_GL.h	742;"	d
glColor3b_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3b_Hook(GLbyte red, GLbyte green, GLbyte blue)$/;"	f	class:OVR::GLEContext
glColor3bv	Src/CAPI/GL/CAPI_GLE.cpp	1171;"	d	file:
glColor3bv	Src/CAPI/GL/CAPI_GLE_GL.h	743;"	d
glColor3bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3bv_Hook(const GLbyte *v)$/;"	f	class:OVR::GLEContext
glColor3d	Src/CAPI/GL/CAPI_GLE.cpp	1179;"	d	file:
glColor3d	Src/CAPI/GL/CAPI_GLE_GL.h	744;"	d
glColor3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3d_Hook(GLdouble red, GLdouble green, GLdouble blue)$/;"	f	class:OVR::GLEContext
glColor3dv	Src/CAPI/GL/CAPI_GLE.cpp	1187;"	d	file:
glColor3dv	Src/CAPI/GL/CAPI_GLE_GL.h	745;"	d
glColor3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glColor3f	Src/CAPI/GL/CAPI_GLE.cpp	1195;"	d	file:
glColor3f	Src/CAPI/GL/CAPI_GLE_GL.h	746;"	d
glColor3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3f_Hook(GLfloat red, GLfloat green, GLfloat blue)$/;"	f	class:OVR::GLEContext
glColor3fv	Src/CAPI/GL/CAPI_GLE.cpp	1203;"	d	file:
glColor3fv	Src/CAPI/GL/CAPI_GLE_GL.h	747;"	d
glColor3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glColor3i	Src/CAPI/GL/CAPI_GLE.cpp	1211;"	d	file:
glColor3i	Src/CAPI/GL/CAPI_GLE_GL.h	748;"	d
glColor3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3i_Hook(GLint red, GLint green, GLint blue)$/;"	f	class:OVR::GLEContext
glColor3iv	Src/CAPI/GL/CAPI_GLE.cpp	1219;"	d	file:
glColor3iv	Src/CAPI/GL/CAPI_GLE_GL.h	749;"	d
glColor3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glColor3s	Src/CAPI/GL/CAPI_GLE.cpp	1227;"	d	file:
glColor3s	Src/CAPI/GL/CAPI_GLE_GL.h	750;"	d
glColor3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3s_Hook(GLshort red, GLshort green, GLshort blue)$/;"	f	class:OVR::GLEContext
glColor3sv	Src/CAPI/GL/CAPI_GLE.cpp	1235;"	d	file:
glColor3sv	Src/CAPI/GL/CAPI_GLE_GL.h	751;"	d
glColor3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glColor3ub	Src/CAPI/GL/CAPI_GLE.cpp	1243;"	d	file:
glColor3ub	Src/CAPI/GL/CAPI_GLE_GL.h	752;"	d
glColor3ub_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3ub_Hook(GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:OVR::GLEContext
glColor3ubv	Src/CAPI/GL/CAPI_GLE.cpp	1251;"	d	file:
glColor3ubv	Src/CAPI/GL/CAPI_GLE_GL.h	753;"	d
glColor3ubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3ubv_Hook(const GLubyte *v)$/;"	f	class:OVR::GLEContext
glColor3ui	Src/CAPI/GL/CAPI_GLE.cpp	1259;"	d	file:
glColor3ui	Src/CAPI/GL/CAPI_GLE_GL.h	754;"	d
glColor3ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3ui_Hook(GLuint red, GLuint green, GLuint blue)$/;"	f	class:OVR::GLEContext
glColor3uiv	Src/CAPI/GL/CAPI_GLE.cpp	1267;"	d	file:
glColor3uiv	Src/CAPI/GL/CAPI_GLE_GL.h	755;"	d
glColor3uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3uiv_Hook(const GLuint *v)$/;"	f	class:OVR::GLEContext
glColor3us	Src/CAPI/GL/CAPI_GLE.cpp	1275;"	d	file:
glColor3us	Src/CAPI/GL/CAPI_GLE_GL.h	756;"	d
glColor3us_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3us_Hook(GLushort red, GLushort green, GLushort blue)$/;"	f	class:OVR::GLEContext
glColor3usv	Src/CAPI/GL/CAPI_GLE.cpp	1283;"	d	file:
glColor3usv	Src/CAPI/GL/CAPI_GLE_GL.h	757;"	d
glColor3usv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor3usv_Hook(const GLushort *v)$/;"	f	class:OVR::GLEContext
glColor4b	Src/CAPI/GL/CAPI_GLE.cpp	1291;"	d	file:
glColor4b	Src/CAPI/GL/CAPI_GLE_GL.h	758;"	d
glColor4b_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4b_Hook(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)$/;"	f	class:OVR::GLEContext
glColor4bv	Src/CAPI/GL/CAPI_GLE.cpp	1299;"	d	file:
glColor4bv	Src/CAPI/GL/CAPI_GLE_GL.h	759;"	d
glColor4bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4bv_Hook(const GLbyte *v)$/;"	f	class:OVR::GLEContext
glColor4d	Src/CAPI/GL/CAPI_GLE.cpp	1307;"	d	file:
glColor4d	Src/CAPI/GL/CAPI_GLE_GL.h	760;"	d
glColor4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4d_Hook(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)$/;"	f	class:OVR::GLEContext
glColor4dv	Src/CAPI/GL/CAPI_GLE.cpp	1315;"	d	file:
glColor4dv	Src/CAPI/GL/CAPI_GLE_GL.h	761;"	d
glColor4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glColor4f	Src/CAPI/GL/CAPI_GLE.cpp	1323;"	d	file:
glColor4f	Src/CAPI/GL/CAPI_GLE_GL.h	762;"	d
glColor4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4f_Hook(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)$/;"	f	class:OVR::GLEContext
glColor4fv	Src/CAPI/GL/CAPI_GLE.cpp	1331;"	d	file:
glColor4fv	Src/CAPI/GL/CAPI_GLE_GL.h	763;"	d
glColor4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glColor4i	Src/CAPI/GL/CAPI_GLE.cpp	1339;"	d	file:
glColor4i	Src/CAPI/GL/CAPI_GLE_GL.h	764;"	d
glColor4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4i_Hook(GLint red, GLint green, GLint blue, GLint alpha)$/;"	f	class:OVR::GLEContext
glColor4iv	Src/CAPI/GL/CAPI_GLE.cpp	1347;"	d	file:
glColor4iv	Src/CAPI/GL/CAPI_GLE_GL.h	765;"	d
glColor4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glColor4s	Src/CAPI/GL/CAPI_GLE.cpp	1355;"	d	file:
glColor4s	Src/CAPI/GL/CAPI_GLE_GL.h	766;"	d
glColor4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4s_Hook(GLshort red, GLshort green, GLshort blue, GLshort alpha)$/;"	f	class:OVR::GLEContext
glColor4sv	Src/CAPI/GL/CAPI_GLE.cpp	1363;"	d	file:
glColor4sv	Src/CAPI/GL/CAPI_GLE_GL.h	767;"	d
glColor4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glColor4ub	Src/CAPI/GL/CAPI_GLE.cpp	1371;"	d	file:
glColor4ub	Src/CAPI/GL/CAPI_GLE_GL.h	768;"	d
glColor4ub_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4ub_Hook(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)$/;"	f	class:OVR::GLEContext
glColor4ubv	Src/CAPI/GL/CAPI_GLE.cpp	1379;"	d	file:
glColor4ubv	Src/CAPI/GL/CAPI_GLE_GL.h	769;"	d
glColor4ubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4ubv_Hook(const GLubyte *v)$/;"	f	class:OVR::GLEContext
glColor4ui	Src/CAPI/GL/CAPI_GLE.cpp	1387;"	d	file:
glColor4ui	Src/CAPI/GL/CAPI_GLE_GL.h	770;"	d
glColor4ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4ui_Hook(GLuint red, GLuint green, GLuint blue, GLuint alpha)$/;"	f	class:OVR::GLEContext
glColor4uiv	Src/CAPI/GL/CAPI_GLE.cpp	1395;"	d	file:
glColor4uiv	Src/CAPI/GL/CAPI_GLE_GL.h	771;"	d
glColor4uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4uiv_Hook(const GLuint *v)$/;"	f	class:OVR::GLEContext
glColor4us	Src/CAPI/GL/CAPI_GLE.cpp	1403;"	d	file:
glColor4us	Src/CAPI/GL/CAPI_GLE_GL.h	772;"	d
glColor4us_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4us_Hook(GLushort red, GLushort green, GLushort blue, GLushort alpha)$/;"	f	class:OVR::GLEContext
glColor4usv	Src/CAPI/GL/CAPI_GLE.cpp	1411;"	d	file:
glColor4usv	Src/CAPI/GL/CAPI_GLE_GL.h	773;"	d
glColor4usv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColor4usv_Hook(const GLushort *v)$/;"	f	class:OVR::GLEContext
glColorMask	Src/CAPI/GL/CAPI_GLE.cpp	1419;"	d	file:
glColorMask	Src/CAPI/GL/CAPI_GLE_GL.h	774;"	d
glColorMask	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCOLORMASKPROC                       glColorMask;$/;"	m	namespace:OVR::CAPI::GL	file:
glColorMaskIndexedEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3630;"	d
glColorMaskIndexedEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColorMaskIndexedEXT_Hook(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)$/;"	f	class:OVR::GLEContext
glColorMaskIndexedEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT_Impl;$/;"	m	class:OVR::GLEContext
glColorMask_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColorMask_Hook(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)$/;"	f	class:OVR::GLEContext
glColorMaski	Src/CAPI/GL/CAPI_GLE_GL.h	2450;"	d
glColorMaski	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCOLORMASKIPROC                      glColorMaski;$/;"	m	namespace:OVR::CAPI::GL	file:
glColorMaski_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColorMaski_Hook(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)$/;"	f	class:OVR::GLEContext
glColorMaski_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOLORMASKIPROC glColorMaski_Impl;$/;"	m	class:OVR::GLEContext
glColorMaterial	Src/CAPI/GL/CAPI_GLE.cpp	1427;"	d	file:
glColorMaterial	Src/CAPI/GL/CAPI_GLE_GL.h	775;"	d
glColorMaterial_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColorMaterial_Hook(GLenum face, GLenum mode)$/;"	f	class:OVR::GLEContext
glColorPointer	Src/CAPI/GL/CAPI_GLE.cpp	1435;"	d	file:
glColorPointer	Src/CAPI/GL/CAPI_GLE_GL.h	776;"	d
glColorPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glColorPointer_Hook(GLint size, GLenum type, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glCompileShader	Src/CAPI/GL/CAPI_GLE_GL.h	2133;"	d
glCompileShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCOMPILESHADERPROC                   glCompileShader;$/;"	m	namespace:OVR::CAPI::GL	file:
glCompileShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompileShader_Hook(GLuint shader)$/;"	f	class:OVR::GLEContext
glCompileShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPILESHADERPROC glCompileShader_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	1654;"	d
glCompressedTexImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexImage1D_Hook(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexImage1D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	1655;"	d
glCompressedTexImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexImage2D_Hook(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexImage2D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexImage3D	Src/CAPI/GL/CAPI_GLE_GL.h	1656;"	d
glCompressedTexImage3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexImage3D_Hook(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexImage3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexSubImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	1657;"	d
glCompressedTexSubImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexSubImage1D_Hook(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexSubImage1D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexSubImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	1658;"	d
glCompressedTexSubImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexSubImage2D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexSubImage2D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D_Impl;$/;"	m	class:OVR::GLEContext
glCompressedTexSubImage3D	Src/CAPI/GL/CAPI_GLE_GL.h	1659;"	d
glCompressedTexSubImage3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCompressedTexSubImage3D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)$/;"	f	class:OVR::GLEContext
glCompressedTexSubImage3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D_Impl;$/;"	m	class:OVR::GLEContext
glCopyPixels	Src/CAPI/GL/CAPI_GLE.cpp	1443;"	d	file:
glCopyPixels	Src/CAPI/GL/CAPI_GLE_GL.h	777;"	d
glCopyPixels_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyPixels_Hook(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)$/;"	f	class:OVR::GLEContext
glCopyTexImage1D	Src/CAPI/GL/CAPI_GLE.cpp	1451;"	d	file:
glCopyTexImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	778;"	d
glCopyTexImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyTexImage1D_Hook(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border)$/;"	f	class:OVR::GLEContext
glCopyTexImage2D	Src/CAPI/GL/CAPI_GLE.cpp	1459;"	d	file:
glCopyTexImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	779;"	d
glCopyTexImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyTexImage2D_Hook(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)$/;"	f	class:OVR::GLEContext
glCopyTexSubImage1D	Src/CAPI/GL/CAPI_GLE.cpp	1467;"	d	file:
glCopyTexSubImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	780;"	d
glCopyTexSubImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyTexSubImage1D_Hook(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)$/;"	f	class:OVR::GLEContext
glCopyTexSubImage2D	Src/CAPI/GL/CAPI_GLE.cpp	1475;"	d	file:
glCopyTexSubImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	781;"	d
glCopyTexSubImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyTexSubImage2D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glCopyTexSubImage3D	Src/CAPI/GL/CAPI_GLE_GL.h	1459;"	d
glCopyTexSubImage3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCopyTexSubImage3D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glCopyTexSubImage3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D_Impl;$/;"	m	class:OVR::GLEContext
glCreateProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2134;"	d
glCreateProgram	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCREATEPROGRAMPROC                   glCreateProgram;$/;"	m	namespace:OVR::CAPI::GL	file:
glCreateProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glCreateProgram_Hook()$/;"	f	class:OVR::GLEContext
glCreateProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCREATEPROGRAMPROC glCreateProgram_Impl;$/;"	m	class:OVR::GLEContext
glCreateShader	Src/CAPI/GL/CAPI_GLE_GL.h	2135;"	d
glCreateShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLCREATESHADERPROC                    glCreateShader;$/;"	m	namespace:OVR::CAPI::GL	file:
glCreateShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glCreateShader_Hook(GLenum type)$/;"	f	class:OVR::GLEContext
glCreateShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLCREATESHADERPROC glCreateShader_Impl;$/;"	m	class:OVR::GLEContext
glCullFace	Src/CAPI/GL/CAPI_GLE.cpp	1483;"	d	file:
glCullFace	Src/CAPI/GL/CAPI_GLE_GL.h	782;"	d
glCullFace_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glCullFace_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glDebugMessageCallback	Src/CAPI/GL/CAPI_GLE_GL.h	3720;"	d
glDebugMessageCallbackAMD	Src/CAPI/GL/CAPI_GLE_GL.h	2713;"	d
glDebugMessageCallbackAMD_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageCallbackAMD_Hook(GLDEBUGPROCAMD callback, GLvoid *userParam)$/;"	f	class:OVR::GLEContext
glDebugMessageCallbackAMD_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageCallbackARB	Src/CAPI/GL/CAPI_GLE_GL.h	3097;"	d
glDebugMessageCallbackARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageCallbackARB_Hook(GLDEBUGPROCARB callback, const GLvoid *userParam)$/;"	f	class:OVR::GLEContext
glDebugMessageCallbackARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageCallback_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageCallback_Hook(GLDEBUGPROC callback, const void* userParam)$/;"	f	class:OVR::GLEContext
glDebugMessageCallback_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageControl	Src/CAPI/GL/CAPI_GLE_GL.h	3721;"	d
glDebugMessageControlARB	Src/CAPI/GL/CAPI_GLE_GL.h	3098;"	d
glDebugMessageControlARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageControlARB_Hook(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)$/;"	f	class:OVR::GLEContext
glDebugMessageControlARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageControl_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageControl_Hook(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled)$/;"	f	class:OVR::GLEContext
glDebugMessageControl_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageEnableAMD	Src/CAPI/GL/CAPI_GLE_GL.h	2714;"	d
glDebugMessageEnableAMD_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageEnableAMD_Hook(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)$/;"	f	class:OVR::GLEContext
glDebugMessageEnableAMD_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageInsert	Src/CAPI/GL/CAPI_GLE_GL.h	3722;"	d
glDebugMessageInsertAMD	Src/CAPI/GL/CAPI_GLE_GL.h	2715;"	d
glDebugMessageInsertAMD_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageInsertAMD_Hook(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)$/;"	f	class:OVR::GLEContext
glDebugMessageInsertAMD_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageInsertARB	Src/CAPI/GL/CAPI_GLE_GL.h	3099;"	d
glDebugMessageInsertARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageInsertARB_Hook(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)$/;"	f	class:OVR::GLEContext
glDebugMessageInsertARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB_Impl;$/;"	m	class:OVR::GLEContext
glDebugMessageInsert_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDebugMessageInsert_Hook(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const char* buf)$/;"	f	class:OVR::GLEContext
glDebugMessageInsert_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert_Impl;$/;"	m	class:OVR::GLEContext
glDeleteBuffers	Src/CAPI/GL/CAPI_GLE_GL.h	1927;"	d
glDeleteBuffers	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETEBUFFERSPROC                   glDeleteBuffers;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteBuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteBuffers_Hook(GLsizei n, const GLuint *buffers)$/;"	f	class:OVR::GLEContext
glDeleteBuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEBUFFERSPROC glDeleteBuffers_Impl;$/;"	m	class:OVR::GLEContext
glDeleteFencesAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2826;"	d
glDeleteFencesAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteFencesAPPLE_Hook(GLsizei n, const GLuint *fences)$/;"	f	class:OVR::GLEContext
glDeleteFencesAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glDeleteFramebuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3454;"	d
glDeleteFramebuffers	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETEFRAMEBUFFERSPROC              glDeleteFramebuffers;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteFramebuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteFramebuffers_Hook(GLsizei n, const GLuint *framebuffers)$/;"	f	class:OVR::GLEContext
glDeleteFramebuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers_Impl;$/;"	m	class:OVR::GLEContext
glDeleteLists	Src/CAPI/GL/CAPI_GLE.cpp	1491;"	d	file:
glDeleteLists	Src/CAPI/GL/CAPI_GLE_GL.h	783;"	d
glDeleteLists_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteLists_Hook(GLuint list, GLsizei range)$/;"	f	class:OVR::GLEContext
glDeleteProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2136;"	d
glDeleteProgram	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETEPROGRAMPROC                   glDeleteProgram;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteProgram_Hook(GLuint program)$/;"	f	class:OVR::GLEContext
glDeleteProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEPROGRAMPROC glDeleteProgram_Impl;$/;"	m	class:OVR::GLEContext
glDeleteQueries	Src/CAPI/GL/CAPI_GLE_GL.h	1928;"	d
glDeleteQueries_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteQueries_Hook(GLsizei n, const GLuint *ids)$/;"	f	class:OVR::GLEContext
glDeleteQueries_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEQUERIESPROC glDeleteQueries_Impl;$/;"	m	class:OVR::GLEContext
glDeleteRenderbuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3455;"	d
glDeleteRenderbuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteRenderbuffers_Hook(GLsizei n, const GLuint *renderbuffers)$/;"	f	class:OVR::GLEContext
glDeleteRenderbuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers_Impl;$/;"	m	class:OVR::GLEContext
glDeleteShader	Src/CAPI/GL/CAPI_GLE_GL.h	2137;"	d
glDeleteShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETESHADERPROC                    glDeleteShader;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteShader_Hook(GLuint shader)$/;"	f	class:OVR::GLEContext
glDeleteShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETESHADERPROC glDeleteShader_Impl;$/;"	m	class:OVR::GLEContext
glDeleteTextures	Src/CAPI/GL/CAPI_GLE.cpp	1499;"	d	file:
glDeleteTextures	Src/CAPI/GL/CAPI_GLE_GL.h	784;"	d
glDeleteTextures	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETETEXTURESPROC                  glDeleteTextures;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteTextures_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteTextures_Hook(GLsizei n, const GLuint *textures)$/;"	f	class:OVR::GLEContext
glDeleteVertexArrays	Src/CAPI/GL/CAPI_GLE_GL.h	3567;"	d
glDeleteVertexArrays	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDELETEVERTEXARRAYSPROC              glDeleteVertexArrays;$/;"	m	namespace:OVR::CAPI::GL	file:
glDeleteVertexArraysAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2994;"	d
glDeleteVertexArraysAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteVertexArraysAPPLE_Hook(GLsizei n, const GLuint *arrays)$/;"	f	class:OVR::GLEContext
glDeleteVertexArraysAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glDeleteVertexArrays_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDeleteVertexArrays_Hook(GLsizei n, const GLuint *arrays)$/;"	f	class:OVR::GLEContext
glDeleteVertexArrays_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays_Impl;$/;"	m	class:OVR::GLEContext
glDepthFunc	Src/CAPI/GL/CAPI_GLE.cpp	1507;"	d	file:
glDepthFunc	Src/CAPI/GL/CAPI_GLE_GL.h	785;"	d
glDepthFunc_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDepthFunc_Hook(GLenum func)$/;"	f	class:OVR::GLEContext
glDepthMask	Src/CAPI/GL/CAPI_GLE.cpp	1515;"	d	file:
glDepthMask	Src/CAPI/GL/CAPI_GLE_GL.h	786;"	d
glDepthMask	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDEPTHMASKPROC                       glDepthMask;$/;"	m	namespace:OVR::CAPI::GL	file:
glDepthMask_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDepthMask_Hook(GLboolean flag)$/;"	f	class:OVR::GLEContext
glDepthRange	Src/CAPI/GL/CAPI_GLE.cpp	1523;"	d	file:
glDepthRange	Src/CAPI/GL/CAPI_GLE_GL.h	787;"	d
glDepthRange	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDEPTHRANGEPROC                      glDepthRange;$/;"	m	namespace:OVR::CAPI::GL	file:
glDepthRange_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDepthRange_Hook(GLclampd zNear, GLclampd zFar)$/;"	f	class:OVR::GLEContext
glDepthRangef	Src/CAPI/GL/CAPI_GLE_GL.h	3340;"	d
glDepthRangef	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDEPTHRANGEFPROC                     glDepthRangef;$/;"	m	namespace:OVR::CAPI::GL	file:
glDepthRangef_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDepthRangef_Hook(GLclampf n, GLclampf f)$/;"	f	class:OVR::GLEContext
glDepthRangef_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDEPTHRANGEFPROC glDepthRangef_Impl;$/;"	m	class:OVR::GLEContext
glDetachShader	Src/CAPI/GL/CAPI_GLE_GL.h	2138;"	d
glDetachShader	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDETACHSHADERPROC                    glDetachShader;$/;"	m	namespace:OVR::CAPI::GL	file:
glDetachShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDetachShader_Hook(GLuint program, GLuint shader)$/;"	f	class:OVR::GLEContext
glDetachShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDETACHSHADERPROC glDetachShader_Impl;$/;"	m	class:OVR::GLEContext
glDisable	Src/CAPI/GL/CAPI_GLE.cpp	1531;"	d	file:
glDisable	Src/CAPI/GL/CAPI_GLE_GL.h	788;"	d
glDisable	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDISABLEPROC                         glDisable;$/;"	m	namespace:OVR::CAPI::GL	file:
glDisableClientState	Src/CAPI/GL/CAPI_GLE.cpp	1539;"	d	file:
glDisableClientState	Src/CAPI/GL/CAPI_GLE_GL.h	789;"	d
glDisableClientState_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisableClientState_Hook(GLenum array)$/;"	f	class:OVR::GLEContext
glDisableIndexedEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3631;"	d
glDisableIndexedEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisableIndexedEXT_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glDisableIndexedEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT_Impl;$/;"	m	class:OVR::GLEContext
glDisableVertexAttribAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3050;"	d
glDisableVertexAttribAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisableVertexAttribAPPLE_Hook(GLuint index, GLenum pname)$/;"	f	class:OVR::GLEContext
glDisableVertexAttribAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glDisableVertexAttribArray	Src/CAPI/GL/CAPI_GLE_GL.h	2139;"	d
glDisableVertexAttribArray	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC        glDisableVertexAttribArray;$/;"	m	namespace:OVR::CAPI::GL	file:
glDisableVertexAttribArray_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisableVertexAttribArray_Hook(GLuint index)$/;"	f	class:OVR::GLEContext
glDisableVertexAttribArray_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray_Impl;$/;"	m	class:OVR::GLEContext
glDisable_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisable_Hook(GLenum cap)$/;"	f	class:OVR::GLEContext
glDisablei	Src/CAPI/GL/CAPI_GLE_GL.h	2451;"	d
glDisablei	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDISABLEIPROC                        glDisablei;$/;"	m	namespace:OVR::CAPI::GL	file:
glDisablei_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDisablei_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glDisablei_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDISABLEIPROC glDisablei_Impl;$/;"	m	class:OVR::GLEContext
glDrawArrays	Src/CAPI/GL/CAPI_GLE.cpp	1547;"	d	file:
glDrawArrays	Src/CAPI/GL/CAPI_GLE_GL.h	790;"	d
glDrawArrays	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDRAWARRAYSPROC                      glDrawArrays;$/;"	m	namespace:OVR::CAPI::GL	file:
glDrawArraysInstanced	Src/CAPI/GL/CAPI_GLE_GL.h	2547;"	d
glDrawArraysInstanced_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawArraysInstanced_Hook(GLenum mode, GLint first, GLsizei count, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glDrawArraysInstanced_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced_Impl;$/;"	m	class:OVR::GLEContext
glDrawArrays_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawArrays_Hook(GLenum mode, GLint first, GLsizei count)$/;"	f	class:OVR::GLEContext
glDrawBuffer	Src/CAPI/GL/CAPI_GLE.cpp	1555;"	d	file:
glDrawBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	791;"	d
glDrawBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawBuffer_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glDrawBuffers	Src/CAPI/GL/CAPI_GLE_GL.h	2140;"	d
glDrawBuffers	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDRAWBUFFERSPROC                     glDrawBuffers;$/;"	m	namespace:OVR::CAPI::GL	file:
glDrawBuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawBuffers_Hook(GLsizei n, const GLenum *bufs)$/;"	f	class:OVR::GLEContext
glDrawBuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWBUFFERSPROC glDrawBuffers_Impl;$/;"	m	class:OVR::GLEContext
glDrawElementArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2800;"	d
glDrawElementArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawElementArrayAPPLE_Hook(GLenum mode, GLint first, GLsizei count)$/;"	f	class:OVR::GLEContext
glDrawElementArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glDrawElements	Src/CAPI/GL/CAPI_GLE.cpp	1563;"	d	file:
glDrawElements	Src/CAPI/GL/CAPI_GLE_GL.h	792;"	d
glDrawElements	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLDRAWELEMENTSPROC                    glDrawElements;$/;"	m	namespace:OVR::CAPI::GL	file:
glDrawElementsInstanced	Src/CAPI/GL/CAPI_GLE_GL.h	2548;"	d
glDrawElementsInstanced_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawElementsInstanced_Hook(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glDrawElementsInstanced_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced_Impl;$/;"	m	class:OVR::GLEContext
glDrawElements_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawElements_Hook(GLenum mode, GLsizei count, GLenum type, const void *indices)$/;"	f	class:OVR::GLEContext
glDrawPixels	Src/CAPI/GL/CAPI_GLE.cpp	1571;"	d	file:
glDrawPixels	Src/CAPI/GL/CAPI_GLE_GL.h	793;"	d
glDrawPixels_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawPixels_Hook(GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)$/;"	f	class:OVR::GLEContext
glDrawRangeElementArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2801;"	d
glDrawRangeElementArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawRangeElementArrayAPPLE_Hook(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)$/;"	f	class:OVR::GLEContext
glDrawRangeElementArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glDrawRangeElements	Src/CAPI/GL/CAPI_GLE_GL.h	1460;"	d
glDrawRangeElements_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glDrawRangeElements_Hook(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)$/;"	f	class:OVR::GLEContext
glDrawRangeElements_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements_Impl;$/;"	m	class:OVR::GLEContext
glEdgeFlag	Src/CAPI/GL/CAPI_GLE.cpp	1579;"	d	file:
glEdgeFlag	Src/CAPI/GL/CAPI_GLE_GL.h	794;"	d
glEdgeFlagPointer	Src/CAPI/GL/CAPI_GLE.cpp	1587;"	d	file:
glEdgeFlagPointer	Src/CAPI/GL/CAPI_GLE_GL.h	795;"	d
glEdgeFlagPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEdgeFlagPointer_Hook(GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glEdgeFlag_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEdgeFlag_Hook(GLboolean flag)$/;"	f	class:OVR::GLEContext
glEdgeFlagv	Src/CAPI/GL/CAPI_GLE.cpp	1595;"	d	file:
glEdgeFlagv	Src/CAPI/GL/CAPI_GLE_GL.h	796;"	d
glEdgeFlagv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEdgeFlagv_Hook(const GLboolean *flag)$/;"	f	class:OVR::GLEContext
glElementPointerAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2802;"	d
glElementPointerAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glElementPointerAPPLE_Hook(GLenum type, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glElementPointerAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glEnable	Src/CAPI/GL/CAPI_GLE.cpp	1603;"	d	file:
glEnable	Src/CAPI/GL/CAPI_GLE_GL.h	797;"	d
glEnable	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLENABLEPROC                          glEnable;$/;"	m	namespace:OVR::CAPI::GL	file:
glEnableClientState	Src/CAPI/GL/CAPI_GLE.cpp	1613;"	d	file:
glEnableClientState	Src/CAPI/GL/CAPI_GLE_GL.h	798;"	d
glEnableClientState_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnableClientState_Hook(GLenum array)$/;"	f	class:OVR::GLEContext
glEnableIndexedEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3632;"	d
glEnableIndexedEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnableIndexedEXT_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glEnableIndexedEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT_Impl;$/;"	m	class:OVR::GLEContext
glEnableVertexAttribAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3051;"	d
glEnableVertexAttribAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnableVertexAttribAPPLE_Hook(GLuint index, GLenum pname)$/;"	f	class:OVR::GLEContext
glEnableVertexAttribAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glEnableVertexAttribArray	Src/CAPI/GL/CAPI_GLE_GL.h	2141;"	d
glEnableVertexAttribArray	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLENABLEVERTEXATTRIBARRAYPROC         glEnableVertexAttribArray;$/;"	m	namespace:OVR::CAPI::GL	file:
glEnableVertexAttribArray_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnableVertexAttribArray_Hook(GLuint index)$/;"	f	class:OVR::GLEContext
glEnableVertexAttribArray_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray_Impl;$/;"	m	class:OVR::GLEContext
glEnable_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void GLEContext::glEnable_Hook(GLenum cap)$/;"	f	class:OVR::GLEContext
glEnablei	Src/CAPI/GL/CAPI_GLE_GL.h	2452;"	d
glEnablei	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLENABLEIPROC                         glEnablei;$/;"	m	namespace:OVR::CAPI::GL	file:
glEnablei_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnablei_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glEnablei_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENABLEIPROC glEnablei_Impl;$/;"	m	class:OVR::GLEContext
glEnd	Src/CAPI/GL/CAPI_GLE.cpp	1621;"	d	file:
glEnd	Src/CAPI/GL/CAPI_GLE_GL.h	799;"	d
glEndConditionalRender	Src/CAPI/GL/CAPI_GLE_GL.h	2453;"	d
glEndConditionalRender_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEndConditionalRender_Hook()$/;"	f	class:OVR::GLEContext
glEndConditionalRender_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender_Impl;$/;"	m	class:OVR::GLEContext
glEndList	Src/CAPI/GL/CAPI_GLE.cpp	1629;"	d	file:
glEndList	Src/CAPI/GL/CAPI_GLE_GL.h	800;"	d
glEndList_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEndList_Hook()$/;"	f	class:OVR::GLEContext
glEndQuery	Src/CAPI/GL/CAPI_GLE_GL.h	1929;"	d
glEndQuery_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEndQuery_Hook(GLenum target)$/;"	f	class:OVR::GLEContext
glEndQuery_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENDQUERYPROC glEndQuery_Impl;$/;"	m	class:OVR::GLEContext
glEndTransformFeedback	Src/CAPI/GL/CAPI_GLE_GL.h	2454;"	d
glEndTransformFeedback_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEndTransformFeedback_Hook()$/;"	f	class:OVR::GLEContext
glEndTransformFeedback_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback_Impl;$/;"	m	class:OVR::GLEContext
glEnd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEnd_Hook()$/;"	f	class:OVR::GLEContext
glEvalCoord1d	Src/CAPI/GL/CAPI_GLE.cpp	1637;"	d	file:
glEvalCoord1d	Src/CAPI/GL/CAPI_GLE_GL.h	801;"	d
glEvalCoord1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord1d_Hook(GLdouble u)$/;"	f	class:OVR::GLEContext
glEvalCoord1dv	Src/CAPI/GL/CAPI_GLE.cpp	1645;"	d	file:
glEvalCoord1dv	Src/CAPI/GL/CAPI_GLE_GL.h	802;"	d
glEvalCoord1dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord1dv_Hook(const GLdouble *u)$/;"	f	class:OVR::GLEContext
glEvalCoord1f	Src/CAPI/GL/CAPI_GLE.cpp	1653;"	d	file:
glEvalCoord1f	Src/CAPI/GL/CAPI_GLE_GL.h	803;"	d
glEvalCoord1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord1f_Hook(GLfloat u)$/;"	f	class:OVR::GLEContext
glEvalCoord1fv	Src/CAPI/GL/CAPI_GLE.cpp	1661;"	d	file:
glEvalCoord1fv	Src/CAPI/GL/CAPI_GLE_GL.h	804;"	d
glEvalCoord1fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord1fv_Hook(const GLfloat *u)$/;"	f	class:OVR::GLEContext
glEvalCoord2d	Src/CAPI/GL/CAPI_GLE.cpp	1669;"	d	file:
glEvalCoord2d	Src/CAPI/GL/CAPI_GLE_GL.h	805;"	d
glEvalCoord2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord2d_Hook(GLdouble u, GLdouble v)$/;"	f	class:OVR::GLEContext
glEvalCoord2dv	Src/CAPI/GL/CAPI_GLE.cpp	1677;"	d	file:
glEvalCoord2dv	Src/CAPI/GL/CAPI_GLE_GL.h	806;"	d
glEvalCoord2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord2dv_Hook(const GLdouble *u)$/;"	f	class:OVR::GLEContext
glEvalCoord2f	Src/CAPI/GL/CAPI_GLE.cpp	1685;"	d	file:
glEvalCoord2f	Src/CAPI/GL/CAPI_GLE_GL.h	807;"	d
glEvalCoord2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord2f_Hook(GLfloat u, GLfloat v)$/;"	f	class:OVR::GLEContext
glEvalCoord2fv	Src/CAPI/GL/CAPI_GLE.cpp	1693;"	d	file:
glEvalCoord2fv	Src/CAPI/GL/CAPI_GLE_GL.h	808;"	d
glEvalCoord2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalCoord2fv_Hook(const GLfloat *u)$/;"	f	class:OVR::GLEContext
glEvalMesh1	Src/CAPI/GL/CAPI_GLE.cpp	1701;"	d	file:
glEvalMesh1	Src/CAPI/GL/CAPI_GLE_GL.h	809;"	d
glEvalMesh1_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalMesh1_Hook(GLenum mode, GLint i1, GLint i2)$/;"	f	class:OVR::GLEContext
glEvalMesh2	Src/CAPI/GL/CAPI_GLE.cpp	1709;"	d	file:
glEvalMesh2	Src/CAPI/GL/CAPI_GLE_GL.h	810;"	d
glEvalMesh2_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalMesh2_Hook(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)$/;"	f	class:OVR::GLEContext
glEvalPoint1	Src/CAPI/GL/CAPI_GLE.cpp	1717;"	d	file:
glEvalPoint1	Src/CAPI/GL/CAPI_GLE_GL.h	811;"	d
glEvalPoint1_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalPoint1_Hook(GLint i)$/;"	f	class:OVR::GLEContext
glEvalPoint2	Src/CAPI/GL/CAPI_GLE.cpp	1725;"	d	file:
glEvalPoint2	Src/CAPI/GL/CAPI_GLE_GL.h	812;"	d
glEvalPoint2_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glEvalPoint2_Hook(GLint i, GLint j)$/;"	f	class:OVR::GLEContext
glFeedbackBuffer	Src/CAPI/GL/CAPI_GLE.cpp	1733;"	d	file:
glFeedbackBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	813;"	d
glFeedbackBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFeedbackBuffer_Hook(GLsizei size, GLenum type, GLfloat *buffer)$/;"	f	class:OVR::GLEContext
glFinish	Src/CAPI/GL/CAPI_GLE.cpp	1741;"	d	file:
glFinish	Src/CAPI/GL/CAPI_GLE_GL.h	814;"	d
glFinish	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLFINISHPROC                          glFinish;$/;"	m	namespace:OVR::CAPI::GL	file:
glFinishFenceAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2827;"	d
glFinishFenceAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFinishFenceAPPLE_Hook(GLuint fence)$/;"	f	class:OVR::GLEContext
glFinishFenceAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glFinishObjectAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2828;"	d
glFinishObjectAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFinishObjectAPPLE_Hook(GLenum object, GLint name)$/;"	f	class:OVR::GLEContext
glFinishObjectAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glFinish_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFinish_Hook()$/;"	f	class:OVR::GLEContext
glFlush	Src/CAPI/GL/CAPI_GLE.cpp	1749;"	d	file:
glFlush	Src/CAPI/GL/CAPI_GLE_GL.h	815;"	d
glFlush	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLFLUSHPROC                           glFlush;$/;"	m	namespace:OVR::CAPI::GL	file:
glFlushMappedBufferRangeAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2874;"	d
glFlushMappedBufferRangeAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFlushMappedBufferRangeAPPLE_Hook(GLenum target, GLintptr offset, GLsizeiptr size)$/;"	f	class:OVR::GLEContext
glFlushMappedBufferRangeAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glFlushVertexArrayRangeAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3019;"	d
glFlushVertexArrayRangeAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFlushVertexArrayRangeAPPLE_Hook(GLsizei length, GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glFlushVertexArrayRangeAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glFlush_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFlush_Hook()$/;"	f	class:OVR::GLEContext
glFogCoordPointer	Src/CAPI/GL/CAPI_GLE_GL.h	1797;"	d
glFogCoordPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogCoordPointer_Hook(GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glFogCoordPointer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFOGCOORDPOINTERPROC glFogCoordPointer_Impl;$/;"	m	class:OVR::GLEContext
glFogCoordd	Src/CAPI/GL/CAPI_GLE_GL.h	1798;"	d
glFogCoordd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogCoordd_Hook(GLdouble coord)$/;"	f	class:OVR::GLEContext
glFogCoordd_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFOGCOORDDPROC glFogCoordd_Impl;$/;"	m	class:OVR::GLEContext
glFogCoorddv	Src/CAPI/GL/CAPI_GLE_GL.h	1799;"	d
glFogCoorddv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogCoorddv_Hook(const GLdouble *coord)$/;"	f	class:OVR::GLEContext
glFogCoorddv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFOGCOORDDVPROC glFogCoorddv_Impl;$/;"	m	class:OVR::GLEContext
glFogCoordf	Src/CAPI/GL/CAPI_GLE_GL.h	1800;"	d
glFogCoordf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogCoordf_Hook(GLfloat coord)$/;"	f	class:OVR::GLEContext
glFogCoordf_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFOGCOORDFPROC glFogCoordf_Impl;$/;"	m	class:OVR::GLEContext
glFogCoordfv	Src/CAPI/GL/CAPI_GLE_GL.h	1801;"	d
glFogCoordfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogCoordfv_Hook(const GLfloat *coord)$/;"	f	class:OVR::GLEContext
glFogCoordfv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFOGCOORDFVPROC glFogCoordfv_Impl;$/;"	m	class:OVR::GLEContext
glFogf	Src/CAPI/GL/CAPI_GLE.cpp	1757;"	d	file:
glFogf	Src/CAPI/GL/CAPI_GLE_GL.h	816;"	d
glFogf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogf_Hook(GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glFogfv	Src/CAPI/GL/CAPI_GLE.cpp	1765;"	d	file:
glFogfv	Src/CAPI/GL/CAPI_GLE_GL.h	817;"	d
glFogfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogfv_Hook(GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glFogi	Src/CAPI/GL/CAPI_GLE.cpp	1773;"	d	file:
glFogi	Src/CAPI/GL/CAPI_GLE_GL.h	818;"	d
glFogi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogi_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glFogiv	Src/CAPI/GL/CAPI_GLE.cpp	1781;"	d	file:
glFogiv	Src/CAPI/GL/CAPI_GLE_GL.h	819;"	d
glFogiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFogiv_Hook(GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glFramebufferRenderbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3456;"	d
glFramebufferRenderbuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC         glFramebufferRenderbuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glFramebufferRenderbuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferRenderbuffer_Hook(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)$/;"	f	class:OVR::GLEContext
glFramebufferRenderbuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer_Impl;$/;"	m	class:OVR::GLEContext
glFramebufferTexture	Src/CAPI/GL/CAPI_GLE_GL.h	2588;"	d
glFramebufferTexture1D	Src/CAPI/GL/CAPI_GLE_GL.h	3457;"	d
glFramebufferTexture1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferTexture1D_Hook(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)$/;"	f	class:OVR::GLEContext
glFramebufferTexture1D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D_Impl;$/;"	m	class:OVR::GLEContext
glFramebufferTexture2D	Src/CAPI/GL/CAPI_GLE_GL.h	3458;"	d
glFramebufferTexture2D	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLFRAMEBUFFERTEXTURE2DPROC            glFramebufferTexture2D;$/;"	m	namespace:OVR::CAPI::GL	file:
glFramebufferTexture2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferTexture2D_Hook(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)$/;"	f	class:OVR::GLEContext
glFramebufferTexture2D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D_Impl;$/;"	m	class:OVR::GLEContext
glFramebufferTexture3D	Src/CAPI/GL/CAPI_GLE_GL.h	3459;"	d
glFramebufferTexture3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferTexture3D_Hook(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)$/;"	f	class:OVR::GLEContext
glFramebufferTexture3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D_Impl;$/;"	m	class:OVR::GLEContext
glFramebufferTextureLayer	Src/CAPI/GL/CAPI_GLE_GL.h	3460;"	d
glFramebufferTextureLayer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferTextureLayer_Hook(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)$/;"	f	class:OVR::GLEContext
glFramebufferTextureLayer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer_Impl;$/;"	m	class:OVR::GLEContext
glFramebufferTexture_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFramebufferTexture_Hook(GLenum target, GLenum attachment, GLuint texture, GLint level)$/;"	f	class:OVR::GLEContext
glFramebufferTexture_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture_Impl;$/;"	m	class:OVR::GLEContext
glFrontFace	Src/CAPI/GL/CAPI_GLE.cpp	1789;"	d	file:
glFrontFace	Src/CAPI/GL/CAPI_GLE_GL.h	820;"	d
glFrontFace	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLFRONTFACEPROC                       glFrontFace;$/;"	m	namespace:OVR::CAPI::GL	file:
glFrontFace_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFrontFace_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glFrustum	Src/CAPI/GL/CAPI_GLE.cpp	1797;"	d	file:
glFrustum	Src/CAPI/GL/CAPI_GLE_GL.h	821;"	d
glFrustum_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glFrustum_Hook(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)$/;"	f	class:OVR::GLEContext
glGenBuffers	Src/CAPI/GL/CAPI_GLE_GL.h	1930;"	d
glGenBuffers	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGENBUFFERSPROC                      glGenBuffers;$/;"	m	namespace:OVR::CAPI::GL	file:
glGenBuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenBuffers_Hook(GLsizei n, GLuint *buffers)$/;"	f	class:OVR::GLEContext
glGenBuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENBUFFERSPROC glGenBuffers_Impl;$/;"	m	class:OVR::GLEContext
glGenFencesAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2829;"	d
glGenFencesAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenFencesAPPLE_Hook(GLsizei n, GLuint *fences)$/;"	f	class:OVR::GLEContext
glGenFencesAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glGenFramebuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3461;"	d
glGenFramebuffers	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGENFRAMEBUFFERSPROC                 glGenFramebuffers;$/;"	m	namespace:OVR::CAPI::GL	file:
glGenFramebuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenFramebuffers_Hook(GLsizei n, GLuint *framebuffers)$/;"	f	class:OVR::GLEContext
glGenFramebuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers_Impl;$/;"	m	class:OVR::GLEContext
glGenLists	Src/CAPI/GL/CAPI_GLE.cpp	1805;"	d	file:
glGenLists	Src/CAPI/GL/CAPI_GLE_GL.h	822;"	d
glGenLists_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glGenLists_Hook(GLsizei range)$/;"	f	class:OVR::GLEContext
glGenQueries	Src/CAPI/GL/CAPI_GLE_GL.h	1931;"	d
glGenQueries_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenQueries_Hook(GLsizei n, GLuint *ids)$/;"	f	class:OVR::GLEContext
glGenQueries_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENQUERIESPROC glGenQueries_Impl;$/;"	m	class:OVR::GLEContext
glGenRenderbuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3462;"	d
glGenRenderbuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenRenderbuffers_Hook(GLsizei n, GLuint *renderbuffers)$/;"	f	class:OVR::GLEContext
glGenRenderbuffers_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers_Impl;$/;"	m	class:OVR::GLEContext
glGenTextures	Src/CAPI/GL/CAPI_GLE.cpp	1814;"	d	file:
glGenTextures	Src/CAPI/GL/CAPI_GLE_GL.h	823;"	d
glGenTextures	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGENTEXTURESPROC                     glGenTextures;$/;"	m	namespace:OVR::CAPI::GL	file:
glGenTextures_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenTextures_Hook(GLsizei n, GLuint *textures)$/;"	f	class:OVR::GLEContext
glGenVertexArrays	Src/CAPI/GL/CAPI_GLE_GL.h	3568;"	d
glGenVertexArrays	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGENVERTEXARRAYSPROC                 glGenVertexArrays;$/;"	m	namespace:OVR::CAPI::GL	file:
glGenVertexArraysAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2995;"	d
glGenVertexArraysAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenVertexArraysAPPLE_Hook(GLsizei n, GLuint *arrays)$/;"	f	class:OVR::GLEContext
glGenVertexArraysAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glGenVertexArrays_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenVertexArrays_Hook(GLsizei n, GLuint *arrays)$/;"	f	class:OVR::GLEContext
glGenVertexArrays_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENVERTEXARRAYSPROC glGenVertexArrays_Impl;$/;"	m	class:OVR::GLEContext
glGenerateMipmap	Src/CAPI/GL/CAPI_GLE_GL.h	3463;"	d
glGenerateMipmap_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGenerateMipmap_Hook(GLenum target)$/;"	f	class:OVR::GLEContext
glGenerateMipmap_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGENERATEMIPMAPPROC glGenerateMipmap_Impl;$/;"	m	class:OVR::GLEContext
glGetActiveAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	2142;"	d
glGetActiveAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetActiveAttrib_Hook(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)$/;"	f	class:OVR::GLEContext
glGetActiveAttrib_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib_Impl;$/;"	m	class:OVR::GLEContext
glGetActiveUniform	Src/CAPI/GL/CAPI_GLE_GL.h	2143;"	d
glGetActiveUniform	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETACTIVEUNIFORMPROC                glGetActiveUniform;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetActiveUniform_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetActiveUniform_Hook(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)$/;"	f	class:OVR::GLEContext
glGetActiveUniform_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform_Impl;$/;"	m	class:OVR::GLEContext
glGetAttachedShaders	Src/CAPI/GL/CAPI_GLE_GL.h	2144;"	d
glGetAttachedShaders_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetAttachedShaders_Hook(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)$/;"	f	class:OVR::GLEContext
glGetAttachedShaders_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders_Impl;$/;"	m	class:OVR::GLEContext
glGetAttribLocation	Src/CAPI/GL/CAPI_GLE_GL.h	2145;"	d
glGetAttribLocation	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETATTRIBLOCATIONPROC               glGetAttribLocation;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetAttribLocation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLint OVR::GLEContext::glGetAttribLocation_Hook(GLuint program, const GLchar *name)$/;"	f	class:OVR::GLEContext
glGetAttribLocation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation_Impl;$/;"	m	class:OVR::GLEContext
glGetBooleanIndexedvEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3633;"	d
glGetBooleanIndexedvEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBooleanIndexedvEXT_Hook(GLenum target, GLuint index, GLboolean *data)$/;"	f	class:OVR::GLEContext
glGetBooleanIndexedvEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT_Impl;$/;"	m	class:OVR::GLEContext
glGetBooleani_v	Src/CAPI/GL/CAPI_GLE_GL.h	2455;"	d
glGetBooleani_v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBooleani_v_Hook(GLenum target, GLuint index, GLboolean *data)$/;"	f	class:OVR::GLEContext
glGetBooleani_v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBOOLEANI_VPROC glGetBooleani_v_Impl;$/;"	m	class:OVR::GLEContext
glGetBooleanv	Src/CAPI/GL/CAPI_GLE.cpp	1822;"	d	file:
glGetBooleanv	Src/CAPI/GL/CAPI_GLE_GL.h	824;"	d
glGetBooleanv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBooleanv_Hook(GLenum pname, GLboolean *params)$/;"	f	class:OVR::GLEContext
glGetBufferParameteri64v	Src/CAPI/GL/CAPI_GLE_GL.h	2589;"	d
glGetBufferParameteri64v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBufferParameteri64v_Hook(GLenum target, GLenum pname, GLint64 *params)$/;"	f	class:OVR::GLEContext
glGetBufferParameteri64v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v_Impl;$/;"	m	class:OVR::GLEContext
glGetBufferParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	1932;"	d
glGetBufferParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBufferParameteriv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetBufferParameteriv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv_Impl;$/;"	m	class:OVR::GLEContext
glGetBufferPointerv	Src/CAPI/GL/CAPI_GLE_GL.h	1933;"	d
glGetBufferPointerv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBufferPointerv_Hook(GLenum target, GLenum pname, GLvoid* *params)$/;"	f	class:OVR::GLEContext
glGetBufferPointerv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv_Impl;$/;"	m	class:OVR::GLEContext
glGetBufferSubData	Src/CAPI/GL/CAPI_GLE_GL.h	1934;"	d
glGetBufferSubData_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetBufferSubData_Hook(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)$/;"	f	class:OVR::GLEContext
glGetBufferSubData_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData_Impl;$/;"	m	class:OVR::GLEContext
glGetClipPlane	Src/CAPI/GL/CAPI_GLE.cpp	1830;"	d	file:
glGetClipPlane	Src/CAPI/GL/CAPI_GLE_GL.h	825;"	d
glGetClipPlane_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetClipPlane_Hook(GLenum plane, GLdouble *equation)$/;"	f	class:OVR::GLEContext
glGetCompressedTexImage	Src/CAPI/GL/CAPI_GLE_GL.h	1660;"	d
glGetCompressedTexImage_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetCompressedTexImage_Hook(GLenum target, GLint level, GLvoid *img)$/;"	f	class:OVR::GLEContext
glGetCompressedTexImage_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage_Impl;$/;"	m	class:OVR::GLEContext
glGetDebugMessageLog	Src/CAPI/GL/CAPI_GLE_GL.h	3723;"	d
glGetDebugMessageLogAMD	Src/CAPI/GL/CAPI_GLE_GL.h	2716;"	d
glGetDebugMessageLogAMD_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glGetDebugMessageLogAMD_Hook(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)$/;"	f	class:OVR::GLEContext
glGetDebugMessageLogAMD_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD_Impl;$/;"	m	class:OVR::GLEContext
glGetDebugMessageLogARB	Src/CAPI/GL/CAPI_GLE_GL.h	3100;"	d
glGetDebugMessageLogARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glGetDebugMessageLogARB_Hook(GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)$/;"	f	class:OVR::GLEContext
glGetDebugMessageLogARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB_Impl;$/;"	m	class:OVR::GLEContext
glGetDebugMessageLog_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLuint OVR::GLEContext::glGetDebugMessageLog_Hook(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths,  char* messageLog)$/;"	f	class:OVR::GLEContext
glGetDebugMessageLog_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog_Impl;$/;"	m	class:OVR::GLEContext
glGetDoublev	Src/CAPI/GL/CAPI_GLE.cpp	1838;"	d	file:
glGetDoublev	Src/CAPI/GL/CAPI_GLE_GL.h	826;"	d
glGetDoublev	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETDOUBLEVPROC                      glGetDoublev;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetDoublev_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetDoublev_Hook(GLenum pname, GLdouble *params)$/;"	f	class:OVR::GLEContext
glGetError	Src/CAPI/GL/CAPI_GLE.cpp	1013;"	d	file:
glGetError	Src/CAPI/GL/CAPI_GLE_GL.h	827;"	d
glGetError	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETERRORPROC                        glGetError;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetError_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLenum OVR::GLEContext::glGetError_Hook()$/;"	f	class:OVR::GLEContext
glGetFloatv	Src/CAPI/GL/CAPI_GLE.cpp	1855;"	d	file:
glGetFloatv	Src/CAPI/GL/CAPI_GLE_GL.h	828;"	d
glGetFloatv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETFLOATVPROC                       glGetFloatv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetFloatv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetFloatv_Hook(GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetFragDataLocation	Src/CAPI/GL/CAPI_GLE_GL.h	2457;"	d
glGetFragDataLocation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLint OVR::GLEContext::glGetFragDataLocation_Hook(GLuint program, const GLchar *name)$/;"	f	class:OVR::GLEContext
glGetFragDataLocation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation_Impl;$/;"	m	class:OVR::GLEContext
glGetFramebufferAttachmentParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	3464;"	d
glGetFramebufferAttachmentParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetFramebufferAttachmentParameteriv_Hook(GLenum target, GLenum attachment, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetFramebufferAttachmentParameteriv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv_Impl;$/;"	m	class:OVR::GLEContext
glGetInteger64i_v	Src/CAPI/GL/CAPI_GLE_GL.h	2590;"	d
glGetInteger64i_v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetInteger64i_v_Hook(GLenum target, GLuint index, GLint64 *data)$/;"	f	class:OVR::GLEContext
glGetInteger64i_v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETINTEGER64I_VPROC glGetInteger64i_v_Impl;$/;"	m	class:OVR::GLEContext
glGetIntegerIndexedvEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3634;"	d
glGetIntegerIndexedvEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetIntegerIndexedvEXT_Hook(GLenum target, GLuint index, GLint *data)$/;"	f	class:OVR::GLEContext
glGetIntegerIndexedvEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT_Impl;$/;"	m	class:OVR::GLEContext
glGetIntegeri_v	Src/CAPI/GL/CAPI_GLE_GL.h	2456;"	d
glGetIntegeri_v	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETINTEGERI_VPROC                   glGetIntegeri_v;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetIntegeri_v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetIntegeri_v_Hook(GLenum target, GLuint index, GLint *data)$/;"	f	class:OVR::GLEContext
glGetIntegeri_v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETINTEGERI_VPROC glGetIntegeri_v_Impl;$/;"	m	class:OVR::GLEContext
glGetIntegerv	Src/CAPI/GL/CAPI_GLE.cpp	1863;"	d	file:
glGetIntegerv	Src/CAPI/GL/CAPI_GLE_GL.h	829;"	d
glGetIntegerv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETINTEGERVPROC                     glGetIntegerv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetIntegerv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetIntegerv_Hook(GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetLightfv	Src/CAPI/GL/CAPI_GLE.cpp	1871;"	d	file:
glGetLightfv	Src/CAPI/GL/CAPI_GLE_GL.h	830;"	d
glGetLightfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetLightfv_Hook(GLenum light, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetLightiv	Src/CAPI/GL/CAPI_GLE.cpp	1879;"	d	file:
glGetLightiv	Src/CAPI/GL/CAPI_GLE_GL.h	831;"	d
glGetLightiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetLightiv_Hook(GLenum light, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetMapdv	Src/CAPI/GL/CAPI_GLE.cpp	1887;"	d	file:
glGetMapdv	Src/CAPI/GL/CAPI_GLE_GL.h	832;"	d
glGetMapdv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMapdv_Hook(GLenum target, GLenum query, GLdouble *v)$/;"	f	class:OVR::GLEContext
glGetMapfv	Src/CAPI/GL/CAPI_GLE.cpp	1895;"	d	file:
glGetMapfv	Src/CAPI/GL/CAPI_GLE_GL.h	833;"	d
glGetMapfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMapfv_Hook(GLenum target, GLenum query, GLfloat *v)$/;"	f	class:OVR::GLEContext
glGetMapiv	Src/CAPI/GL/CAPI_GLE.cpp	1903;"	d	file:
glGetMapiv	Src/CAPI/GL/CAPI_GLE_GL.h	834;"	d
glGetMapiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMapiv_Hook(GLenum target, GLenum query, GLint *v)$/;"	f	class:OVR::GLEContext
glGetMaterialfv	Src/CAPI/GL/CAPI_GLE.cpp	1911;"	d	file:
glGetMaterialfv	Src/CAPI/GL/CAPI_GLE_GL.h	835;"	d
glGetMaterialfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMaterialfv_Hook(GLenum face, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetMaterialiv	Src/CAPI/GL/CAPI_GLE.cpp	1919;"	d	file:
glGetMaterialiv	Src/CAPI/GL/CAPI_GLE_GL.h	836;"	d
glGetMaterialiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMaterialiv_Hook(GLenum face, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetMultisamplefv	Src/CAPI/GL/CAPI_GLE_GL.h	3518;"	d
glGetMultisamplefv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetMultisamplefv_Hook(GLenum pname, GLuint index, GLfloat *val)$/;"	f	class:OVR::GLEContext
glGetMultisamplefv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv_Impl;$/;"	m	class:OVR::GLEContext
glGetObjectLabel	Src/CAPI/GL/CAPI_GLE_GL.h	3724;"	d
glGetObjectLabel_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetObjectLabel_Hook(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, char *label)$/;"	f	class:OVR::GLEContext
glGetObjectLabel_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETOBJECTLABELPROC glGetObjectLabel_Impl;$/;"	m	class:OVR::GLEContext
glGetObjectParameterivAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2895;"	d
glGetObjectParameterivAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetObjectParameterivAPPLE_Hook(GLenum objectType, GLuint name, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetObjectParameterivAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glGetObjectPtrLabel	Src/CAPI/GL/CAPI_GLE_GL.h	3725;"	d
glGetObjectPtrLabel_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetObjectPtrLabel_Hook(void* ptr, GLsizei bufSize, GLsizei *length, char *label)$/;"	f	class:OVR::GLEContext
glGetObjectPtrLabel_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel_Impl;$/;"	m	class:OVR::GLEContext
glGetPixelMapfv	Src/CAPI/GL/CAPI_GLE.cpp	1927;"	d	file:
glGetPixelMapfv	Src/CAPI/GL/CAPI_GLE_GL.h	837;"	d
glGetPixelMapfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetPixelMapfv_Hook(GLenum map, GLfloat *values)$/;"	f	class:OVR::GLEContext
glGetPixelMapuiv	Src/CAPI/GL/CAPI_GLE.cpp	1935;"	d	file:
glGetPixelMapuiv	Src/CAPI/GL/CAPI_GLE_GL.h	838;"	d
glGetPixelMapuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetPixelMapuiv_Hook(GLenum map, GLuint *values)$/;"	f	class:OVR::GLEContext
glGetPixelMapusv	Src/CAPI/GL/CAPI_GLE.cpp	1943;"	d	file:
glGetPixelMapusv	Src/CAPI/GL/CAPI_GLE_GL.h	839;"	d
glGetPixelMapusv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetPixelMapusv_Hook(GLenum map, GLushort *values)$/;"	f	class:OVR::GLEContext
glGetPointerv	Src/CAPI/GL/CAPI_GLE.cpp	1951;"	d	file:
glGetPointerv	Src/CAPI/GL/CAPI_GLE_GL.h	840;"	d
glGetPointerv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetPointerv_Hook(GLenum pname, void* *params)$/;"	f	class:OVR::GLEContext
glGetPolygonStipple	Src/CAPI/GL/CAPI_GLE.cpp	1959;"	d	file:
glGetPolygonStipple	Src/CAPI/GL/CAPI_GLE_GL.h	841;"	d
glGetPolygonStipple_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetPolygonStipple_Hook(GLubyte *mask)$/;"	f	class:OVR::GLEContext
glGetProgramInfoLog	Src/CAPI/GL/CAPI_GLE_GL.h	2146;"	d
glGetProgramInfoLog	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETPROGRAMINFOLOGPROC               glGetProgramInfoLog;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetProgramInfoLog_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetProgramInfoLog_Hook(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)$/;"	f	class:OVR::GLEContext
glGetProgramInfoLog_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog_Impl;$/;"	m	class:OVR::GLEContext
glGetProgramiv	Src/CAPI/GL/CAPI_GLE_GL.h	2147;"	d
glGetProgramiv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETPROGRAMIVPROC                    glGetProgramiv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetProgramiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetProgramiv_Hook(GLuint program, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetProgramiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETPROGRAMIVPROC glGetProgramiv_Impl;$/;"	m	class:OVR::GLEContext
glGetQueryObjecti64v	Src/CAPI/GL/CAPI_GLE_GL.h	3547;"	d
glGetQueryObjecti64v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetQueryObjecti64v_Hook(GLuint id, GLenum pname, GLint64 *params)$/;"	f	class:OVR::GLEContext
glGetQueryObjecti64v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v_Impl;$/;"	m	class:OVR::GLEContext
glGetQueryObjectiv	Src/CAPI/GL/CAPI_GLE_GL.h	1935;"	d
glGetQueryObjectiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetQueryObjectiv_Hook(GLuint id, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetQueryObjectiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv_Impl;$/;"	m	class:OVR::GLEContext
glGetQueryObjectui64v	Src/CAPI/GL/CAPI_GLE_GL.h	3548;"	d
glGetQueryObjectui64v_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetQueryObjectui64v_Hook(GLuint id, GLenum pname, GLuint64 *params)$/;"	f	class:OVR::GLEContext
glGetQueryObjectui64v_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v_Impl;$/;"	m	class:OVR::GLEContext
glGetQueryObjectuiv	Src/CAPI/GL/CAPI_GLE_GL.h	1936;"	d
glGetQueryObjectuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetQueryObjectuiv_Hook(GLuint id, GLenum pname, GLuint *params)$/;"	f	class:OVR::GLEContext
glGetQueryObjectuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv_Impl;$/;"	m	class:OVR::GLEContext
glGetQueryiv	Src/CAPI/GL/CAPI_GLE_GL.h	1937;"	d
glGetQueryiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetQueryiv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetQueryiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETQUERYIVPROC glGetQueryiv_Impl;$/;"	m	class:OVR::GLEContext
glGetRenderbufferParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	3465;"	d
glGetRenderbufferParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetRenderbufferParameteriv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetRenderbufferParameteriv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv_Impl;$/;"	m	class:OVR::GLEContext
glGetShaderInfoLog	Src/CAPI/GL/CAPI_GLE_GL.h	2148;"	d
glGetShaderInfoLog	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETSHADERINFOLOGPROC                glGetShaderInfoLog;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetShaderInfoLog_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetShaderInfoLog_Hook(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)$/;"	f	class:OVR::GLEContext
glGetShaderInfoLog_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog_Impl;$/;"	m	class:OVR::GLEContext
glGetShaderPrecisionFormat	Src/CAPI/GL/CAPI_GLE_GL.h	3341;"	d
glGetShaderPrecisionFormat_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetShaderPrecisionFormat_Hook(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)$/;"	f	class:OVR::GLEContext
glGetShaderPrecisionFormat_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat_Impl;$/;"	m	class:OVR::GLEContext
glGetShaderSource	Src/CAPI/GL/CAPI_GLE_GL.h	2149;"	d
glGetShaderSource_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetShaderSource_Hook(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)$/;"	f	class:OVR::GLEContext
glGetShaderSource_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETSHADERSOURCEPROC glGetShaderSource_Impl;$/;"	m	class:OVR::GLEContext
glGetShaderiv	Src/CAPI/GL/CAPI_GLE_GL.h	2150;"	d
glGetShaderiv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETSHADERIVPROC                     glGetShaderiv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetShaderiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetShaderiv_Hook(GLuint shader, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetShaderiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETSHADERIVPROC glGetShaderiv_Impl;$/;"	m	class:OVR::GLEContext
glGetString	Src/CAPI/GL/CAPI_GLE.cpp	76;"	d	file:
glGetString	Src/CAPI/GL/CAPI_GLE_GL.h	842;"	d
glGetString	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETSTRINGPROC                       glGetString;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetString_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        const GLubyte * OVR::GLEContext::glGetString_Hook(GLenum name)$/;"	f	class:OVR::GLEContext
glGetStringi	Src/CAPI/GL/CAPI_GLE_GL.h	2458;"	d
glGetStringi	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETSTRINGIPROC                      glGetStringi;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetStringi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        const GLubyte* OVR::GLEContext::glGetStringi_Hook(GLenum name, GLuint index)$/;"	f	class:OVR::GLEContext
glGetStringi_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETSTRINGIPROC glGetStringi_Impl;$/;"	m	class:OVR::GLEContext
glGetTexEnvfv	Src/CAPI/GL/CAPI_GLE.cpp	1976;"	d	file:
glGetTexEnvfv	Src/CAPI/GL/CAPI_GLE_GL.h	843;"	d
glGetTexEnvfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexEnvfv_Hook(GLenum target, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetTexEnviv	Src/CAPI/GL/CAPI_GLE.cpp	1984;"	d	file:
glGetTexEnviv	Src/CAPI/GL/CAPI_GLE_GL.h	844;"	d
glGetTexEnviv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexEnviv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetTexGendv	Src/CAPI/GL/CAPI_GLE.cpp	1992;"	d	file:
glGetTexGendv	Src/CAPI/GL/CAPI_GLE_GL.h	845;"	d
glGetTexGendv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexGendv_Hook(GLenum coord, GLenum pname, GLdouble *params)$/;"	f	class:OVR::GLEContext
glGetTexGenfv	Src/CAPI/GL/CAPI_GLE.cpp	2000;"	d	file:
glGetTexGenfv	Src/CAPI/GL/CAPI_GLE_GL.h	846;"	d
glGetTexGenfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexGenfv_Hook(GLenum coord, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetTexGeniv	Src/CAPI/GL/CAPI_GLE.cpp	2008;"	d	file:
glGetTexGeniv	Src/CAPI/GL/CAPI_GLE_GL.h	847;"	d
glGetTexGeniv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexGeniv_Hook(GLenum coord, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetTexImage	Src/CAPI/GL/CAPI_GLE.cpp	2016;"	d	file:
glGetTexImage	Src/CAPI/GL/CAPI_GLE_GL.h	848;"	d
glGetTexImage_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexImage_Hook(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)$/;"	f	class:OVR::GLEContext
glGetTexLevelParameterfv	Src/CAPI/GL/CAPI_GLE.cpp	2024;"	d	file:
glGetTexLevelParameterfv	Src/CAPI/GL/CAPI_GLE_GL.h	849;"	d
glGetTexLevelParameterfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexLevelParameterfv_Hook(GLenum target, GLint level, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetTexLevelParameteriv	Src/CAPI/GL/CAPI_GLE.cpp	2032;"	d	file:
glGetTexLevelParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	850;"	d
glGetTexLevelParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexLevelParameteriv_Hook(GLenum target, GLint level, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetTexParameterIiv	Src/CAPI/GL/CAPI_GLE_GL.h	2459;"	d
glGetTexParameterIiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexParameterIiv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetTexParameterIiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv_Impl;$/;"	m	class:OVR::GLEContext
glGetTexParameterIuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2460;"	d
glGetTexParameterIuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexParameterIuiv_Hook(GLenum target, GLenum pname, GLuint *params)$/;"	f	class:OVR::GLEContext
glGetTexParameterIuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv_Impl;$/;"	m	class:OVR::GLEContext
glGetTexParameterPointervAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2961;"	d
glGetTexParameterPointervAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexParameterPointervAPPLE_Hook(GLenum target, GLenum pname, GLvoid **params)$/;"	f	class:OVR::GLEContext
glGetTexParameterPointervAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glGetTexParameterfv	Src/CAPI/GL/CAPI_GLE.cpp	2040;"	d	file:
glGetTexParameterfv	Src/CAPI/GL/CAPI_GLE_GL.h	851;"	d
glGetTexParameterfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexParameterfv_Hook(GLenum target, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetTexParameteriv	Src/CAPI/GL/CAPI_GLE.cpp	2048;"	d	file:
glGetTexParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	852;"	d
glGetTexParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTexParameteriv_Hook(GLenum target, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetTransformFeedbackVarying	Src/CAPI/GL/CAPI_GLE_GL.h	2461;"	d
glGetTransformFeedbackVarying_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetTransformFeedbackVarying_Hook(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)$/;"	f	class:OVR::GLEContext
glGetTransformFeedbackVarying_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying_Impl;$/;"	m	class:OVR::GLEContext
glGetUniformLocation	Src/CAPI/GL/CAPI_GLE_GL.h	2151;"	d
glGetUniformLocation	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETUNIFORMLOCATIONPROC              glGetUniformLocation;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetUniformLocation_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLint OVR::GLEContext::glGetUniformLocation_Hook(GLuint program, const GLchar *name)$/;"	f	class:OVR::GLEContext
glGetUniformLocation_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation_Impl;$/;"	m	class:OVR::GLEContext
glGetUniformfv	Src/CAPI/GL/CAPI_GLE_GL.h	2152;"	d
glGetUniformfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetUniformfv_Hook(GLuint program, GLint location, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetUniformfv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETUNIFORMFVPROC glGetUniformfv_Impl;$/;"	m	class:OVR::GLEContext
glGetUniformiv	Src/CAPI/GL/CAPI_GLE_GL.h	2153;"	d
glGetUniformiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetUniformiv_Hook(GLuint program, GLint location, GLint *params)$/;"	f	class:OVR::GLEContext
glGetUniformiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETUNIFORMIVPROC glGetUniformiv_Impl;$/;"	m	class:OVR::GLEContext
glGetUniformuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2462;"	d
glGetUniformuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetUniformuiv_Hook(GLuint program, GLint location, GLuint *params)$/;"	f	class:OVR::GLEContext
glGetUniformuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETUNIFORMUIVPROC glGetUniformuiv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribIiv	Src/CAPI/GL/CAPI_GLE_GL.h	2463;"	d
glGetVertexAttribIiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribIiv_Hook(GLuint index, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetVertexAttribIiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribIuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2464;"	d
glGetVertexAttribIuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribIuiv_Hook(GLuint index, GLenum pname, GLuint *params)$/;"	f	class:OVR::GLEContext
glGetVertexAttribIuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribPointerv	Src/CAPI/GL/CAPI_GLE_GL.h	2154;"	d
glGetVertexAttribPointerv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETVERTEXATTRIBPOINTERVPROC         glGetVertexAttribPointerv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetVertexAttribPointerv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribPointerv_Hook(GLuint index, GLenum pname, GLvoid* *pointer)$/;"	f	class:OVR::GLEContext
glGetVertexAttribPointerv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribdv	Src/CAPI/GL/CAPI_GLE_GL.h	2155;"	d
glGetVertexAttribdv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribdv_Hook(GLuint index, GLenum pname, GLdouble *params)$/;"	f	class:OVR::GLEContext
glGetVertexAttribdv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribfv	Src/CAPI/GL/CAPI_GLE_GL.h	2156;"	d
glGetVertexAttribfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribfv_Hook(GLuint index, GLenum pname, GLfloat *params)$/;"	f	class:OVR::GLEContext
glGetVertexAttribfv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv_Impl;$/;"	m	class:OVR::GLEContext
glGetVertexAttribiv	Src/CAPI/GL/CAPI_GLE_GL.h	2157;"	d
glGetVertexAttribiv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLGETVERTEXATTRIBIVPROC               glGetVertexAttribiv;$/;"	m	namespace:OVR::CAPI::GL	file:
glGetVertexAttribiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glGetVertexAttribiv_Hook(GLuint index, GLenum pname, GLint *params)$/;"	f	class:OVR::GLEContext
glGetVertexAttribiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv_Impl;$/;"	m	class:OVR::GLEContext
glHint	Src/CAPI/GL/CAPI_GLE.cpp	2056;"	d	file:
glHint	Src/CAPI/GL/CAPI_GLE_GL.h	853;"	d
glHint_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glHint_Hook(GLenum target, GLenum mode)$/;"	f	class:OVR::GLEContext
glIndexMask	Src/CAPI/GL/CAPI_GLE.cpp	2064;"	d	file:
glIndexMask	Src/CAPI/GL/CAPI_GLE_GL.h	854;"	d
glIndexMask_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexMask_Hook(GLuint mask)$/;"	f	class:OVR::GLEContext
glIndexPointer	Src/CAPI/GL/CAPI_GLE.cpp	2072;"	d	file:
glIndexPointer	Src/CAPI/GL/CAPI_GLE_GL.h	855;"	d
glIndexPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexPointer_Hook(GLenum type, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glIndexd	Src/CAPI/GL/CAPI_GLE.cpp	2080;"	d	file:
glIndexd	Src/CAPI/GL/CAPI_GLE_GL.h	856;"	d
glIndexd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexd_Hook(GLdouble c)$/;"	f	class:OVR::GLEContext
glIndexdv	Src/CAPI/GL/CAPI_GLE.cpp	2088;"	d	file:
glIndexdv	Src/CAPI/GL/CAPI_GLE_GL.h	857;"	d
glIndexdv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexdv_Hook(const GLdouble *c)$/;"	f	class:OVR::GLEContext
glIndexf	Src/CAPI/GL/CAPI_GLE.cpp	2096;"	d	file:
glIndexf	Src/CAPI/GL/CAPI_GLE_GL.h	858;"	d
glIndexf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexf_Hook(GLfloat c)$/;"	f	class:OVR::GLEContext
glIndexfv	Src/CAPI/GL/CAPI_GLE.cpp	2104;"	d	file:
glIndexfv	Src/CAPI/GL/CAPI_GLE_GL.h	859;"	d
glIndexfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexfv_Hook(const GLfloat *c)$/;"	f	class:OVR::GLEContext
glIndexi	Src/CAPI/GL/CAPI_GLE.cpp	2112;"	d	file:
glIndexi	Src/CAPI/GL/CAPI_GLE_GL.h	860;"	d
glIndexi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexi_Hook(GLint c)$/;"	f	class:OVR::GLEContext
glIndexiv	Src/CAPI/GL/CAPI_GLE.cpp	2120;"	d	file:
glIndexiv	Src/CAPI/GL/CAPI_GLE_GL.h	861;"	d
glIndexiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexiv_Hook(const GLint *c)$/;"	f	class:OVR::GLEContext
glIndexs	Src/CAPI/GL/CAPI_GLE.cpp	2128;"	d	file:
glIndexs	Src/CAPI/GL/CAPI_GLE_GL.h	862;"	d
glIndexs_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexs_Hook(GLshort c)$/;"	f	class:OVR::GLEContext
glIndexsv	Src/CAPI/GL/CAPI_GLE.cpp	2136;"	d	file:
glIndexsv	Src/CAPI/GL/CAPI_GLE_GL.h	863;"	d
glIndexsv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexsv_Hook(const GLshort *c)$/;"	f	class:OVR::GLEContext
glIndexub	Src/CAPI/GL/CAPI_GLE.cpp	2144;"	d	file:
glIndexub	Src/CAPI/GL/CAPI_GLE_GL.h	864;"	d
glIndexub_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexub_Hook(GLubyte c)$/;"	f	class:OVR::GLEContext
glIndexubv	Src/CAPI/GL/CAPI_GLE.cpp	2152;"	d	file:
glIndexubv	Src/CAPI/GL/CAPI_GLE_GL.h	865;"	d
glIndexubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glIndexubv_Hook(const GLubyte *c)$/;"	f	class:OVR::GLEContext
glInitNames	Src/CAPI/GL/CAPI_GLE.cpp	2160;"	d	file:
glInitNames	Src/CAPI/GL/CAPI_GLE_GL.h	866;"	d
glInitNames_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glInitNames_Hook()$/;"	f	class:OVR::GLEContext
glInterleavedArrays	Src/CAPI/GL/CAPI_GLE.cpp	2168;"	d	file:
glInterleavedArrays	Src/CAPI/GL/CAPI_GLE_GL.h	867;"	d
glInterleavedArrays_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glInterleavedArrays_Hook(GLenum format, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glIsBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	1938;"	d
glIsBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsBuffer_Hook(GLuint buffer)$/;"	f	class:OVR::GLEContext
glIsBuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISBUFFERPROC glIsBuffer_Impl;$/;"	m	class:OVR::GLEContext
glIsEnabled	Src/CAPI/GL/CAPI_GLE.cpp	2176;"	d	file:
glIsEnabled	Src/CAPI/GL/CAPI_GLE_GL.h	868;"	d
glIsEnabledIndexedEXT	Src/CAPI/GL/CAPI_GLE_GL.h	3635;"	d
glIsEnabledIndexedEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsEnabledIndexedEXT_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glIsEnabledIndexedEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT_Impl;$/;"	m	class:OVR::GLEContext
glIsEnabled_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsEnabled_Hook(GLenum cap)$/;"	f	class:OVR::GLEContext
glIsEnabledi	Src/CAPI/GL/CAPI_GLE_GL.h	2465;"	d
glIsEnabledi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsEnabledi_Hook(GLenum target, GLuint index)$/;"	f	class:OVR::GLEContext
glIsEnabledi_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISENABLEDIPROC glIsEnabledi_Impl;$/;"	m	class:OVR::GLEContext
glIsFenceAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2830;"	d
glIsFenceAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsFenceAPPLE_Hook(GLuint fence)$/;"	f	class:OVR::GLEContext
glIsFenceAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISFENCEAPPLEPROC glIsFenceAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glIsFramebuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3466;"	d
glIsFramebuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsFramebuffer_Hook(GLuint framebuffer)$/;"	f	class:OVR::GLEContext
glIsFramebuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISFRAMEBUFFERPROC glIsFramebuffer_Impl;$/;"	m	class:OVR::GLEContext
glIsList	Src/CAPI/GL/CAPI_GLE.cpp	2185;"	d	file:
glIsList	Src/CAPI/GL/CAPI_GLE_GL.h	869;"	d
glIsList_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsList_Hook(GLuint list)$/;"	f	class:OVR::GLEContext
glIsProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2158;"	d
glIsProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsProgram_Hook(GLuint program)$/;"	f	class:OVR::GLEContext
glIsProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISPROGRAMPROC glIsProgram_Impl;$/;"	m	class:OVR::GLEContext
glIsQuery	Src/CAPI/GL/CAPI_GLE_GL.h	1939;"	d
glIsQuery_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsQuery_Hook(GLuint id)$/;"	f	class:OVR::GLEContext
glIsQuery_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISQUERYPROC glIsQuery_Impl;$/;"	m	class:OVR::GLEContext
glIsRenderbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	3467;"	d
glIsRenderbuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsRenderbuffer_Hook(GLuint renderbuffer)$/;"	f	class:OVR::GLEContext
glIsRenderbuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISRENDERBUFFERPROC glIsRenderbuffer_Impl;$/;"	m	class:OVR::GLEContext
glIsShader	Src/CAPI/GL/CAPI_GLE_GL.h	2159;"	d
glIsShader_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsShader_Hook(GLuint shader)$/;"	f	class:OVR::GLEContext
glIsShader_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISSHADERPROC glIsShader_Impl;$/;"	m	class:OVR::GLEContext
glIsTexture	Src/CAPI/GL/CAPI_GLE.cpp	2194;"	d	file:
glIsTexture	Src/CAPI/GL/CAPI_GLE_GL.h	870;"	d
glIsTexture_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsTexture_Hook(GLuint texture)$/;"	f	class:OVR::GLEContext
glIsVertexArray	Src/CAPI/GL/CAPI_GLE_GL.h	3569;"	d
glIsVertexArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2996;"	d
glIsVertexArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsVertexArrayAPPLE_Hook(GLuint array)$/;"	f	class:OVR::GLEContext
glIsVertexArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glIsVertexArray_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsVertexArray_Hook(GLuint array)$/;"	f	class:OVR::GLEContext
glIsVertexArray_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISVERTEXARRAYPROC glIsVertexArray_Impl;$/;"	m	class:OVR::GLEContext
glIsVertexAttribEnabledAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3052;"	d
glIsVertexAttribEnabledAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glIsVertexAttribEnabledAPPLE_Hook(GLuint index, GLenum pname)$/;"	f	class:OVR::GLEContext
glIsVertexAttribEnabledAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glLightModelf	Src/CAPI/GL/CAPI_GLE.cpp	2203;"	d	file:
glLightModelf	Src/CAPI/GL/CAPI_GLE_GL.h	871;"	d
glLightModelf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightModelf_Hook(GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glLightModelfv	Src/CAPI/GL/CAPI_GLE.cpp	2211;"	d	file:
glLightModelfv	Src/CAPI/GL/CAPI_GLE_GL.h	872;"	d
glLightModelfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightModelfv_Hook(GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glLightModeli	Src/CAPI/GL/CAPI_GLE.cpp	2219;"	d	file:
glLightModeli	Src/CAPI/GL/CAPI_GLE_GL.h	873;"	d
glLightModeli_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightModeli_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glLightModeliv	Src/CAPI/GL/CAPI_GLE.cpp	2227;"	d	file:
glLightModeliv	Src/CAPI/GL/CAPI_GLE_GL.h	874;"	d
glLightModeliv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightModeliv_Hook(GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glLightf	Src/CAPI/GL/CAPI_GLE.cpp	2235;"	d	file:
glLightf	Src/CAPI/GL/CAPI_GLE_GL.h	875;"	d
glLightf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightf_Hook(GLenum light, GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glLightfv	Src/CAPI/GL/CAPI_GLE.cpp	2243;"	d	file:
glLightfv	Src/CAPI/GL/CAPI_GLE_GL.h	876;"	d
glLightfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightfv_Hook(GLenum light, GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glLighti	Src/CAPI/GL/CAPI_GLE.cpp	2251;"	d	file:
glLighti	Src/CAPI/GL/CAPI_GLE_GL.h	877;"	d
glLighti_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLighti_Hook(GLenum light, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glLightiv	Src/CAPI/GL/CAPI_GLE.cpp	2259;"	d	file:
glLightiv	Src/CAPI/GL/CAPI_GLE_GL.h	878;"	d
glLightiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLightiv_Hook(GLenum light, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glLineStipple	Src/CAPI/GL/CAPI_GLE.cpp	2267;"	d	file:
glLineStipple	Src/CAPI/GL/CAPI_GLE_GL.h	879;"	d
glLineStipple_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLineStipple_Hook(GLint factor, GLushort pattern)$/;"	f	class:OVR::GLEContext
glLineWidth	Src/CAPI/GL/CAPI_GLE.cpp	2275;"	d	file:
glLineWidth	Src/CAPI/GL/CAPI_GLE_GL.h	880;"	d
glLineWidth_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLineWidth_Hook(GLfloat width)$/;"	f	class:OVR::GLEContext
glLinkProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2160;"	d
glLinkProgram	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLLINKPROGRAMPROC                     glLinkProgram;$/;"	m	namespace:OVR::CAPI::GL	file:
glLinkProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLinkProgram_Hook(GLuint program)$/;"	f	class:OVR::GLEContext
glLinkProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLLINKPROGRAMPROC glLinkProgram_Impl;$/;"	m	class:OVR::GLEContext
glListBase	Src/CAPI/GL/CAPI_GLE.cpp	2283;"	d	file:
glListBase	Src/CAPI/GL/CAPI_GLE_GL.h	881;"	d
glListBase_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glListBase_Hook(GLuint base)$/;"	f	class:OVR::GLEContext
glLoadIdentity	Src/CAPI/GL/CAPI_GLE.cpp	2291;"	d	file:
glLoadIdentity	Src/CAPI/GL/CAPI_GLE_GL.h	882;"	d
glLoadIdentity_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadIdentity_Hook()$/;"	f	class:OVR::GLEContext
glLoadMatrixd	Src/CAPI/GL/CAPI_GLE.cpp	2299;"	d	file:
glLoadMatrixd	Src/CAPI/GL/CAPI_GLE_GL.h	883;"	d
glLoadMatrixd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadMatrixd_Hook(const GLdouble *m)$/;"	f	class:OVR::GLEContext
glLoadMatrixf	Src/CAPI/GL/CAPI_GLE.cpp	2307;"	d	file:
glLoadMatrixf	Src/CAPI/GL/CAPI_GLE_GL.h	884;"	d
glLoadMatrixf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadMatrixf_Hook(const GLfloat *m)$/;"	f	class:OVR::GLEContext
glLoadName	Src/CAPI/GL/CAPI_GLE.cpp	2315;"	d	file:
glLoadName	Src/CAPI/GL/CAPI_GLE_GL.h	885;"	d
glLoadName_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadName_Hook(GLuint name)$/;"	f	class:OVR::GLEContext
glLoadTransposeMatrixd	Src/CAPI/GL/CAPI_GLE_GL.h	1661;"	d
glLoadTransposeMatrixd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadTransposeMatrixd_Hook(const GLdouble *m)$/;"	f	class:OVR::GLEContext
glLoadTransposeMatrixd_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd_Impl;$/;"	m	class:OVR::GLEContext
glLoadTransposeMatrixf	Src/CAPI/GL/CAPI_GLE_GL.h	1662;"	d
glLoadTransposeMatrixf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLoadTransposeMatrixf_Hook(const GLfloat *m)$/;"	f	class:OVR::GLEContext
glLoadTransposeMatrixf_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf_Impl;$/;"	m	class:OVR::GLEContext
glLogicOp	Src/CAPI/GL/CAPI_GLE.cpp	2323;"	d	file:
glLogicOp	Src/CAPI/GL/CAPI_GLE_GL.h	886;"	d
glLogicOp_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glLogicOp_Hook(GLenum opcode)$/;"	f	class:OVR::GLEContext
glMap1d	Src/CAPI/GL/CAPI_GLE.cpp	2331;"	d	file:
glMap1d	Src/CAPI/GL/CAPI_GLE_GL.h	887;"	d
glMap1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMap1d_Hook(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)$/;"	f	class:OVR::GLEContext
glMap1f	Src/CAPI/GL/CAPI_GLE.cpp	2339;"	d	file:
glMap1f	Src/CAPI/GL/CAPI_GLE_GL.h	888;"	d
glMap1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMap1f_Hook(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)$/;"	f	class:OVR::GLEContext
glMap2d	Src/CAPI/GL/CAPI_GLE.cpp	2347;"	d	file:
glMap2d	Src/CAPI/GL/CAPI_GLE_GL.h	889;"	d
glMap2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMap2d_Hook(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)$/;"	f	class:OVR::GLEContext
glMap2f	Src/CAPI/GL/CAPI_GLE.cpp	2355;"	d	file:
glMap2f	Src/CAPI/GL/CAPI_GLE_GL.h	890;"	d
glMap2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMap2f_Hook(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)$/;"	f	class:OVR::GLEContext
glMapBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	1940;"	d
glMapBuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLMAPBUFFERPROC                       glMapBuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glMapBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLvoid* OVR::GLEContext::glMapBuffer_Hook(GLenum target, GLenum access)$/;"	f	class:OVR::GLEContext
glMapBuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMAPBUFFERPROC glMapBuffer_Impl;$/;"	m	class:OVR::GLEContext
glMapGrid1d	Src/CAPI/GL/CAPI_GLE.cpp	2363;"	d	file:
glMapGrid1d	Src/CAPI/GL/CAPI_GLE_GL.h	891;"	d
glMapGrid1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapGrid1d_Hook(GLint un, GLdouble u1, GLdouble u2)$/;"	f	class:OVR::GLEContext
glMapGrid1f	Src/CAPI/GL/CAPI_GLE.cpp	2371;"	d	file:
glMapGrid1f	Src/CAPI/GL/CAPI_GLE_GL.h	892;"	d
glMapGrid1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapGrid1f_Hook(GLint un, GLfloat u1, GLfloat u2)$/;"	f	class:OVR::GLEContext
glMapGrid2d	Src/CAPI/GL/CAPI_GLE.cpp	2379;"	d	file:
glMapGrid2d	Src/CAPI/GL/CAPI_GLE_GL.h	893;"	d
glMapGrid2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapGrid2d_Hook(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)$/;"	f	class:OVR::GLEContext
glMapGrid2f	Src/CAPI/GL/CAPI_GLE.cpp	2387;"	d	file:
glMapGrid2f	Src/CAPI/GL/CAPI_GLE_GL.h	894;"	d
glMapGrid2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapGrid2f_Hook(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)$/;"	f	class:OVR::GLEContext
glMapVertexAttrib1dAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3053;"	d
glMapVertexAttrib1dAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapVertexAttrib1dAPPLE_Hook(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)$/;"	f	class:OVR::GLEContext
glMapVertexAttrib1dAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMapVertexAttrib1fAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3054;"	d
glMapVertexAttrib1fAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapVertexAttrib1fAPPLE_Hook(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)$/;"	f	class:OVR::GLEContext
glMapVertexAttrib1fAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMapVertexAttrib2dAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3055;"	d
glMapVertexAttrib2dAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapVertexAttrib2dAPPLE_Hook(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)$/;"	f	class:OVR::GLEContext
glMapVertexAttrib2dAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMapVertexAttrib2fAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3056;"	d
glMapVertexAttrib2fAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMapVertexAttrib2fAPPLE_Hook(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)$/;"	f	class:OVR::GLEContext
glMapVertexAttrib2fAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMaterialf	Src/CAPI/GL/CAPI_GLE.cpp	2395;"	d	file:
glMaterialf	Src/CAPI/GL/CAPI_GLE_GL.h	895;"	d
glMaterialf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMaterialf_Hook(GLenum face, GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glMaterialfv	Src/CAPI/GL/CAPI_GLE.cpp	2403;"	d	file:
glMaterialfv	Src/CAPI/GL/CAPI_GLE_GL.h	896;"	d
glMaterialfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMaterialfv_Hook(GLenum face, GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glMateriali	Src/CAPI/GL/CAPI_GLE.cpp	2411;"	d	file:
glMateriali	Src/CAPI/GL/CAPI_GLE_GL.h	897;"	d
glMateriali_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMateriali_Hook(GLenum face, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glMaterialiv	Src/CAPI/GL/CAPI_GLE.cpp	2419;"	d	file:
glMaterialiv	Src/CAPI/GL/CAPI_GLE_GL.h	898;"	d
glMaterialiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMaterialiv_Hook(GLenum face, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glMatrixMode	Src/CAPI/GL/CAPI_GLE.cpp	2427;"	d	file:
glMatrixMode	Src/CAPI/GL/CAPI_GLE_GL.h	899;"	d
glMatrixMode_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMatrixMode_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glMinSampleShading	Src/CAPI/GL/CAPI_GLE_GL.h	2637;"	d
glMinSampleShading_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMinSampleShading_Hook(GLclampf value)$/;"	f	class:OVR::GLEContext
glMinSampleShading_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMINSAMPLESHADINGPROC glMinSampleShading_Impl;$/;"	m	class:OVR::GLEContext
glMultMatrixd	Src/CAPI/GL/CAPI_GLE.cpp	2435;"	d	file:
glMultMatrixd	Src/CAPI/GL/CAPI_GLE_GL.h	900;"	d
glMultMatrixd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultMatrixd_Hook(const GLdouble *m)$/;"	f	class:OVR::GLEContext
glMultMatrixf	Src/CAPI/GL/CAPI_GLE.cpp	2443;"	d	file:
glMultMatrixf	Src/CAPI/GL/CAPI_GLE_GL.h	901;"	d
glMultMatrixf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultMatrixf_Hook(const GLfloat *m)$/;"	f	class:OVR::GLEContext
glMultTransposeMatrixd	Src/CAPI/GL/CAPI_GLE_GL.h	1663;"	d
glMultTransposeMatrixd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultTransposeMatrixd_Hook(const GLdouble *m)$/;"	f	class:OVR::GLEContext
glMultTransposeMatrixd_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd_Impl;$/;"	m	class:OVR::GLEContext
glMultTransposeMatrixf	Src/CAPI/GL/CAPI_GLE_GL.h	1664;"	d
glMultTransposeMatrixf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultTransposeMatrixf_Hook(const GLfloat *m)$/;"	f	class:OVR::GLEContext
glMultTransposeMatrixf_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf_Impl;$/;"	m	class:OVR::GLEContext
glMultiDrawArrays	Src/CAPI/GL/CAPI_GLE_GL.h	1802;"	d
glMultiDrawArrays_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiDrawArrays_Hook(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glMultiDrawArrays_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays_Impl;$/;"	m	class:OVR::GLEContext
glMultiDrawElementArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2803;"	d
glMultiDrawElementArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiDrawElementArrayAPPLE_Hook(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glMultiDrawElementArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMultiDrawElements	Src/CAPI/GL/CAPI_GLE_GL.h	1803;"	d
glMultiDrawElements_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiDrawElements_Hook(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glMultiDrawElements_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements_Impl;$/;"	m	class:OVR::GLEContext
glMultiDrawRangeElementArrayAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2804;"	d
glMultiDrawRangeElementArrayAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiDrawRangeElementArrayAPPLE_Hook(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)$/;"	f	class:OVR::GLEContext
glMultiDrawRangeElementArrayAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1d	Src/CAPI/GL/CAPI_GLE_GL.h	1665;"	d
glMultiTexCoord1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1d_Hook(GLenum target, GLdouble s)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1dv	Src/CAPI/GL/CAPI_GLE_GL.h	1666;"	d
glMultiTexCoord1dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1dv_Hook(GLenum target, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1f	Src/CAPI/GL/CAPI_GLE_GL.h	1667;"	d
glMultiTexCoord1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1f_Hook(GLenum target, GLfloat s)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1fv	Src/CAPI/GL/CAPI_GLE_GL.h	1668;"	d
glMultiTexCoord1fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1fv_Hook(GLenum target, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1i	Src/CAPI/GL/CAPI_GLE_GL.h	1669;"	d
glMultiTexCoord1i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1i_Hook(GLenum target, GLint s)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1iv	Src/CAPI/GL/CAPI_GLE_GL.h	1670;"	d
glMultiTexCoord1iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1iv_Hook(GLenum target, const GLint *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1s	Src/CAPI/GL/CAPI_GLE_GL.h	1671;"	d
glMultiTexCoord1s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1s_Hook(GLenum target, GLshort s)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord1sv	Src/CAPI/GL/CAPI_GLE_GL.h	1672;"	d
glMultiTexCoord1sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord1sv_Hook(GLenum target, const GLshort *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord1sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2d	Src/CAPI/GL/CAPI_GLE_GL.h	1673;"	d
glMultiTexCoord2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2d_Hook(GLenum target, GLdouble s, GLdouble t)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2dv	Src/CAPI/GL/CAPI_GLE_GL.h	1674;"	d
glMultiTexCoord2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2dv_Hook(GLenum target, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2f	Src/CAPI/GL/CAPI_GLE_GL.h	1675;"	d
glMultiTexCoord2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2f_Hook(GLenum target, GLfloat s, GLfloat t)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2fv	Src/CAPI/GL/CAPI_GLE_GL.h	1676;"	d
glMultiTexCoord2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2fv_Hook(GLenum target, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2i	Src/CAPI/GL/CAPI_GLE_GL.h	1677;"	d
glMultiTexCoord2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2i_Hook(GLenum target, GLint s, GLint t)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2iv	Src/CAPI/GL/CAPI_GLE_GL.h	1678;"	d
glMultiTexCoord2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2iv_Hook(GLenum target, const GLint *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2s	Src/CAPI/GL/CAPI_GLE_GL.h	1679;"	d
glMultiTexCoord2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2s_Hook(GLenum target, GLshort s, GLshort t)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord2sv	Src/CAPI/GL/CAPI_GLE_GL.h	1680;"	d
glMultiTexCoord2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord2sv_Hook(GLenum target, const GLshort *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord2sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3d	Src/CAPI/GL/CAPI_GLE_GL.h	1681;"	d
glMultiTexCoord3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3d_Hook(GLenum target, GLdouble s, GLdouble t, GLdouble r)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3dv	Src/CAPI/GL/CAPI_GLE_GL.h	1682;"	d
glMultiTexCoord3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3dv_Hook(GLenum target, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3f	Src/CAPI/GL/CAPI_GLE_GL.h	1683;"	d
glMultiTexCoord3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3f_Hook(GLenum target, GLfloat s, GLfloat t, GLfloat r)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3fv	Src/CAPI/GL/CAPI_GLE_GL.h	1684;"	d
glMultiTexCoord3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3fv_Hook(GLenum target, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3i	Src/CAPI/GL/CAPI_GLE_GL.h	1685;"	d
glMultiTexCoord3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3i_Hook(GLenum target, GLint s, GLint t, GLint r)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3iv	Src/CAPI/GL/CAPI_GLE_GL.h	1686;"	d
glMultiTexCoord3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3iv_Hook(GLenum target, const GLint *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3s	Src/CAPI/GL/CAPI_GLE_GL.h	1687;"	d
glMultiTexCoord3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3s_Hook(GLenum target, GLshort s, GLshort t, GLshort r)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord3sv	Src/CAPI/GL/CAPI_GLE_GL.h	1688;"	d
glMultiTexCoord3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord3sv_Hook(GLenum target, const GLshort *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord3sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4d	Src/CAPI/GL/CAPI_GLE_GL.h	1689;"	d
glMultiTexCoord4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4d_Hook(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4dv	Src/CAPI/GL/CAPI_GLE_GL.h	1690;"	d
glMultiTexCoord4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4dv_Hook(GLenum target, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4f	Src/CAPI/GL/CAPI_GLE_GL.h	1691;"	d
glMultiTexCoord4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4f_Hook(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4fv	Src/CAPI/GL/CAPI_GLE_GL.h	1692;"	d
glMultiTexCoord4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4fv_Hook(GLenum target, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4i	Src/CAPI/GL/CAPI_GLE_GL.h	1693;"	d
glMultiTexCoord4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4i_Hook(GLenum target, GLint s, GLint t, GLint r, GLint q)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4iv	Src/CAPI/GL/CAPI_GLE_GL.h	1694;"	d
glMultiTexCoord4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4iv_Hook(GLenum target, const GLint *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4s	Src/CAPI/GL/CAPI_GLE_GL.h	1695;"	d
glMultiTexCoord4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4s_Hook(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s_Impl;$/;"	m	class:OVR::GLEContext
glMultiTexCoord4sv	Src/CAPI/GL/CAPI_GLE_GL.h	1696;"	d
glMultiTexCoord4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glMultiTexCoord4sv_Hook(GLenum target, const GLshort *v)$/;"	f	class:OVR::GLEContext
glMultiTexCoord4sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv_Impl;$/;"	m	class:OVR::GLEContext
glNewList	Src/CAPI/GL/CAPI_GLE.cpp	2451;"	d	file:
glNewList	Src/CAPI/GL/CAPI_GLE_GL.h	902;"	d
glNewList_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNewList_Hook(GLuint list, GLenum mode)$/;"	f	class:OVR::GLEContext
glNormal3b	Src/CAPI/GL/CAPI_GLE.cpp	2459;"	d	file:
glNormal3b	Src/CAPI/GL/CAPI_GLE_GL.h	903;"	d
glNormal3b_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3b_Hook(GLbyte nx, GLbyte ny, GLbyte nz)$/;"	f	class:OVR::GLEContext
glNormal3bv	Src/CAPI/GL/CAPI_GLE.cpp	2467;"	d	file:
glNormal3bv	Src/CAPI/GL/CAPI_GLE_GL.h	904;"	d
glNormal3bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3bv_Hook(const GLbyte *v)$/;"	f	class:OVR::GLEContext
glNormal3d	Src/CAPI/GL/CAPI_GLE.cpp	2475;"	d	file:
glNormal3d	Src/CAPI/GL/CAPI_GLE_GL.h	905;"	d
glNormal3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3d_Hook(GLdouble nx, GLdouble ny, GLdouble nz)$/;"	f	class:OVR::GLEContext
glNormal3dv	Src/CAPI/GL/CAPI_GLE.cpp	2483;"	d	file:
glNormal3dv	Src/CAPI/GL/CAPI_GLE_GL.h	906;"	d
glNormal3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glNormal3f	Src/CAPI/GL/CAPI_GLE.cpp	2491;"	d	file:
glNormal3f	Src/CAPI/GL/CAPI_GLE_GL.h	907;"	d
glNormal3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3f_Hook(GLfloat nx, GLfloat ny, GLfloat nz)$/;"	f	class:OVR::GLEContext
glNormal3fv	Src/CAPI/GL/CAPI_GLE.cpp	2499;"	d	file:
glNormal3fv	Src/CAPI/GL/CAPI_GLE_GL.h	908;"	d
glNormal3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glNormal3i	Src/CAPI/GL/CAPI_GLE.cpp	2507;"	d	file:
glNormal3i	Src/CAPI/GL/CAPI_GLE_GL.h	909;"	d
glNormal3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3i_Hook(GLint nx, GLint ny, GLint nz)$/;"	f	class:OVR::GLEContext
glNormal3iv	Src/CAPI/GL/CAPI_GLE.cpp	2515;"	d	file:
glNormal3iv	Src/CAPI/GL/CAPI_GLE_GL.h	910;"	d
glNormal3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glNormal3s	Src/CAPI/GL/CAPI_GLE.cpp	2523;"	d	file:
glNormal3s	Src/CAPI/GL/CAPI_GLE_GL.h	911;"	d
glNormal3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3s_Hook(GLshort nx, GLshort ny, GLshort nz)$/;"	f	class:OVR::GLEContext
glNormal3sv	Src/CAPI/GL/CAPI_GLE.cpp	2531;"	d	file:
glNormal3sv	Src/CAPI/GL/CAPI_GLE_GL.h	912;"	d
glNormal3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormal3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glNormalPointer	Src/CAPI/GL/CAPI_GLE.cpp	2539;"	d	file:
glNormalPointer	Src/CAPI/GL/CAPI_GLE_GL.h	913;"	d
glNormalPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glNormalPointer_Hook(GLenum type, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glObjectLabel	Src/CAPI/GL/CAPI_GLE_GL.h	3726;"	d
glObjectLabel_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glObjectLabel_Hook(GLenum identifier, GLuint name, GLsizei length, const char *label)$/;"	f	class:OVR::GLEContext
glObjectLabel_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLOBJECTLABELPROC glObjectLabel_Impl;$/;"	m	class:OVR::GLEContext
glObjectPtrLabel	Src/CAPI/GL/CAPI_GLE_GL.h	3727;"	d
glObjectPtrLabel_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glObjectPtrLabel_Hook(void* ptr, GLsizei length, const char *label)$/;"	f	class:OVR::GLEContext
glObjectPtrLabel_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLOBJECTPTRLABELPROC glObjectPtrLabel_Impl;$/;"	m	class:OVR::GLEContext
glObjectPurgeableAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2896;"	d
glObjectPurgeableAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLenum OVR::GLEContext::glObjectPurgeableAPPLE_Hook(GLenum objectType, GLuint name, GLenum option)$/;"	f	class:OVR::GLEContext
glObjectPurgeableAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glObjectUnpurgeableAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2897;"	d
glObjectUnpurgeableAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLenum OVR::GLEContext::glObjectUnpurgeableAPPLE_Hook(GLenum objectType, GLuint name, GLenum option)$/;"	f	class:OVR::GLEContext
glObjectUnpurgeableAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glOrtho	Src/CAPI/GL/CAPI_GLE.cpp	2547;"	d	file:
glOrtho	Src/CAPI/GL/CAPI_GLE_GL.h	914;"	d
glOrtho_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glOrtho_Hook(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)$/;"	f	class:OVR::GLEContext
glPassThrough	Src/CAPI/GL/CAPI_GLE.cpp	2555;"	d	file:
glPassThrough	Src/CAPI/GL/CAPI_GLE_GL.h	915;"	d
glPassThrough_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPassThrough_Hook(GLfloat token)$/;"	f	class:OVR::GLEContext
glPixelMapfv	Src/CAPI/GL/CAPI_GLE.cpp	2563;"	d	file:
glPixelMapfv	Src/CAPI/GL/CAPI_GLE_GL.h	916;"	d
glPixelMapfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelMapfv_Hook(GLenum map, GLsizei mapsize, const GLfloat *values)$/;"	f	class:OVR::GLEContext
glPixelMapuiv	Src/CAPI/GL/CAPI_GLE.cpp	2571;"	d	file:
glPixelMapuiv	Src/CAPI/GL/CAPI_GLE_GL.h	917;"	d
glPixelMapuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelMapuiv_Hook(GLenum map, GLsizei mapsize, const GLuint *values)$/;"	f	class:OVR::GLEContext
glPixelMapusv	Src/CAPI/GL/CAPI_GLE.cpp	2579;"	d	file:
glPixelMapusv	Src/CAPI/GL/CAPI_GLE_GL.h	918;"	d
glPixelMapusv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelMapusv_Hook(GLenum map, GLsizei mapsize, const GLushort *values)$/;"	f	class:OVR::GLEContext
glPixelStoref	Src/CAPI/GL/CAPI_GLE.cpp	2587;"	d	file:
glPixelStoref	Src/CAPI/GL/CAPI_GLE_GL.h	919;"	d
glPixelStoref_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelStoref_Hook(GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glPixelStorei	Src/CAPI/GL/CAPI_GLE.cpp	2595;"	d	file:
glPixelStorei	Src/CAPI/GL/CAPI_GLE_GL.h	920;"	d
glPixelStorei_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelStorei_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glPixelTransferf	Src/CAPI/GL/CAPI_GLE.cpp	2603;"	d	file:
glPixelTransferf	Src/CAPI/GL/CAPI_GLE_GL.h	921;"	d
glPixelTransferf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelTransferf_Hook(GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glPixelTransferi	Src/CAPI/GL/CAPI_GLE.cpp	2611;"	d	file:
glPixelTransferi	Src/CAPI/GL/CAPI_GLE_GL.h	922;"	d
glPixelTransferi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelTransferi_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glPixelZoom	Src/CAPI/GL/CAPI_GLE.cpp	2619;"	d	file:
glPixelZoom	Src/CAPI/GL/CAPI_GLE_GL.h	923;"	d
glPixelZoom_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPixelZoom_Hook(GLfloat xfactor, GLfloat yfactor)$/;"	f	class:OVR::GLEContext
glPointParameterf	Src/CAPI/GL/CAPI_GLE_GL.h	1804;"	d
glPointParameterf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPointParameterf_Hook(GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glPointParameterf_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPOINTPARAMETERFPROC glPointParameterf_Impl;$/;"	m	class:OVR::GLEContext
glPointParameterfv	Src/CAPI/GL/CAPI_GLE_GL.h	1805;"	d
glPointParameterfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPointParameterfv_Hook(GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glPointParameterfv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPOINTPARAMETERFVPROC glPointParameterfv_Impl;$/;"	m	class:OVR::GLEContext
glPointParameteri	Src/CAPI/GL/CAPI_GLE_GL.h	1806;"	d
glPointParameteri_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPointParameteri_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glPointParameteri_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPOINTPARAMETERIPROC glPointParameteri_Impl;$/;"	m	class:OVR::GLEContext
glPointParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	1807;"	d
glPointParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPointParameteriv_Hook(GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glPointParameteriv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPOINTPARAMETERIVPROC glPointParameteriv_Impl;$/;"	m	class:OVR::GLEContext
glPointSize	Src/CAPI/GL/CAPI_GLE.cpp	2627;"	d	file:
glPointSize	Src/CAPI/GL/CAPI_GLE_GL.h	924;"	d
glPointSize_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPointSize_Hook(GLfloat size)$/;"	f	class:OVR::GLEContext
glPolygonMode	Src/CAPI/GL/CAPI_GLE.cpp	2635;"	d	file:
glPolygonMode	Src/CAPI/GL/CAPI_GLE_GL.h	925;"	d
glPolygonMode	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLPOLYGONMODEPROC                     glPolygonMode;$/;"	m	namespace:OVR::CAPI::GL	file:
glPolygonMode_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPolygonMode_Hook(GLenum face, GLenum mode)$/;"	f	class:OVR::GLEContext
glPolygonOffset	Src/CAPI/GL/CAPI_GLE.cpp	2643;"	d	file:
glPolygonOffset	Src/CAPI/GL/CAPI_GLE_GL.h	926;"	d
glPolygonOffset_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPolygonOffset_Hook(GLfloat factor, GLfloat units)$/;"	f	class:OVR::GLEContext
glPolygonStipple	Src/CAPI/GL/CAPI_GLE.cpp	2651;"	d	file:
glPolygonStipple	Src/CAPI/GL/CAPI_GLE_GL.h	927;"	d
glPolygonStipple_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPolygonStipple_Hook(const GLubyte *mask)$/;"	f	class:OVR::GLEContext
glPopAttrib	Src/CAPI/GL/CAPI_GLE.cpp	2659;"	d	file:
glPopAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	928;"	d
glPopAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPopAttrib_Hook()$/;"	f	class:OVR::GLEContext
glPopClientAttrib	Src/CAPI/GL/CAPI_GLE.cpp	2667;"	d	file:
glPopClientAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	929;"	d
glPopClientAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPopClientAttrib_Hook()$/;"	f	class:OVR::GLEContext
glPopDebugGroup	Src/CAPI/GL/CAPI_GLE_GL.h	3728;"	d
glPopDebugGroup_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPopDebugGroup_Hook()$/;"	f	class:OVR::GLEContext
glPopDebugGroup_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPOPDEBUGGROUPPROC glPopDebugGroup_Impl;$/;"	m	class:OVR::GLEContext
glPopMatrix	Src/CAPI/GL/CAPI_GLE.cpp	2675;"	d	file:
glPopMatrix	Src/CAPI/GL/CAPI_GLE_GL.h	930;"	d
glPopMatrix_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPopMatrix_Hook()$/;"	f	class:OVR::GLEContext
glPopName	Src/CAPI/GL/CAPI_GLE.cpp	2683;"	d	file:
glPopName	Src/CAPI/GL/CAPI_GLE_GL.h	931;"	d
glPopName_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPopName_Hook()$/;"	f	class:OVR::GLEContext
glPrimitiveRestartIndex	Src/CAPI/GL/CAPI_GLE_GL.h	2549;"	d
glPrimitiveRestartIndex_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPrimitiveRestartIndex_Hook(GLuint index)$/;"	f	class:OVR::GLEContext
glPrimitiveRestartIndex_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex_Impl;$/;"	m	class:OVR::GLEContext
glPrioritizeTextures	Src/CAPI/GL/CAPI_GLE.cpp	2691;"	d	file:
glPrioritizeTextures	Src/CAPI/GL/CAPI_GLE_GL.h	932;"	d
glPrioritizeTextures_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPrioritizeTextures_Hook(GLsizei n, const GLuint *textures, const GLclampf *priorities)$/;"	f	class:OVR::GLEContext
glPushAttrib	Src/CAPI/GL/CAPI_GLE.cpp	2699;"	d	file:
glPushAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	933;"	d
glPushAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPushAttrib_Hook(GLbitfield mask)$/;"	f	class:OVR::GLEContext
glPushClientAttrib	Src/CAPI/GL/CAPI_GLE.cpp	2707;"	d	file:
glPushClientAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	934;"	d
glPushClientAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPushClientAttrib_Hook(GLbitfield mask)$/;"	f	class:OVR::GLEContext
glPushDebugGroup	Src/CAPI/GL/CAPI_GLE_GL.h	3729;"	d
glPushDebugGroup_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPushDebugGroup_Hook(GLenum source, GLuint id, GLsizei length, const char * message)$/;"	f	class:OVR::GLEContext
glPushDebugGroup_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup_Impl;$/;"	m	class:OVR::GLEContext
glPushMatrix	Src/CAPI/GL/CAPI_GLE.cpp	2715;"	d	file:
glPushMatrix	Src/CAPI/GL/CAPI_GLE_GL.h	935;"	d
glPushMatrix_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPushMatrix_Hook()$/;"	f	class:OVR::GLEContext
glPushName	Src/CAPI/GL/CAPI_GLE.cpp	2723;"	d	file:
glPushName	Src/CAPI/GL/CAPI_GLE_GL.h	936;"	d
glPushName_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glPushName_Hook(GLuint name)$/;"	f	class:OVR::GLEContext
glQueryCounter	Src/CAPI/GL/CAPI_GLE_GL.h	3549;"	d
glQueryCounter_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glQueryCounter_Hook(GLuint id, GLenum target)$/;"	f	class:OVR::GLEContext
glQueryCounter_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLQUERYCOUNTERPROC glQueryCounter_Impl;$/;"	m	class:OVR::GLEContext
glRasterPos2d	Src/CAPI/GL/CAPI_GLE.cpp	2731;"	d	file:
glRasterPos2d	Src/CAPI/GL/CAPI_GLE_GL.h	937;"	d
glRasterPos2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2d_Hook(GLdouble x, GLdouble y)$/;"	f	class:OVR::GLEContext
glRasterPos2dv	Src/CAPI/GL/CAPI_GLE.cpp	2739;"	d	file:
glRasterPos2dv	Src/CAPI/GL/CAPI_GLE_GL.h	938;"	d
glRasterPos2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glRasterPos2f	Src/CAPI/GL/CAPI_GLE.cpp	2747;"	d	file:
glRasterPos2f	Src/CAPI/GL/CAPI_GLE_GL.h	939;"	d
glRasterPos2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2f_Hook(GLfloat x, GLfloat y)$/;"	f	class:OVR::GLEContext
glRasterPos2fv	Src/CAPI/GL/CAPI_GLE.cpp	2755;"	d	file:
glRasterPos2fv	Src/CAPI/GL/CAPI_GLE_GL.h	940;"	d
glRasterPos2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glRasterPos2i	Src/CAPI/GL/CAPI_GLE.cpp	2763;"	d	file:
glRasterPos2i	Src/CAPI/GL/CAPI_GLE_GL.h	941;"	d
glRasterPos2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2i_Hook(GLint x, GLint y)$/;"	f	class:OVR::GLEContext
glRasterPos2iv	Src/CAPI/GL/CAPI_GLE.cpp	2771;"	d	file:
glRasterPos2iv	Src/CAPI/GL/CAPI_GLE_GL.h	942;"	d
glRasterPos2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glRasterPos2s	Src/CAPI/GL/CAPI_GLE.cpp	2779;"	d	file:
glRasterPos2s	Src/CAPI/GL/CAPI_GLE_GL.h	943;"	d
glRasterPos2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2s_Hook(GLshort x, GLshort y)$/;"	f	class:OVR::GLEContext
glRasterPos2sv	Src/CAPI/GL/CAPI_GLE.cpp	2787;"	d	file:
glRasterPos2sv	Src/CAPI/GL/CAPI_GLE_GL.h	944;"	d
glRasterPos2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos2sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glRasterPos3d	Src/CAPI/GL/CAPI_GLE.cpp	2795;"	d	file:
glRasterPos3d	Src/CAPI/GL/CAPI_GLE_GL.h	945;"	d
glRasterPos3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3d_Hook(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glRasterPos3dv	Src/CAPI/GL/CAPI_GLE.cpp	2803;"	d	file:
glRasterPos3dv	Src/CAPI/GL/CAPI_GLE_GL.h	946;"	d
glRasterPos3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glRasterPos3f	Src/CAPI/GL/CAPI_GLE.cpp	2811;"	d	file:
glRasterPos3f	Src/CAPI/GL/CAPI_GLE_GL.h	947;"	d
glRasterPos3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3f_Hook(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glRasterPos3fv	Src/CAPI/GL/CAPI_GLE.cpp	2819;"	d	file:
glRasterPos3fv	Src/CAPI/GL/CAPI_GLE_GL.h	948;"	d
glRasterPos3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glRasterPos3i	Src/CAPI/GL/CAPI_GLE.cpp	2827;"	d	file:
glRasterPos3i	Src/CAPI/GL/CAPI_GLE_GL.h	949;"	d
glRasterPos3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3i_Hook(GLint x, GLint y, GLint z)$/;"	f	class:OVR::GLEContext
glRasterPos3iv	Src/CAPI/GL/CAPI_GLE.cpp	2835;"	d	file:
glRasterPos3iv	Src/CAPI/GL/CAPI_GLE_GL.h	950;"	d
glRasterPos3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glRasterPos3s	Src/CAPI/GL/CAPI_GLE.cpp	2843;"	d	file:
glRasterPos3s	Src/CAPI/GL/CAPI_GLE_GL.h	951;"	d
glRasterPos3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3s_Hook(GLshort x, GLshort y, GLshort z)$/;"	f	class:OVR::GLEContext
glRasterPos3sv	Src/CAPI/GL/CAPI_GLE.cpp	2851;"	d	file:
glRasterPos3sv	Src/CAPI/GL/CAPI_GLE_GL.h	952;"	d
glRasterPos3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glRasterPos4d	Src/CAPI/GL/CAPI_GLE.cpp	2859;"	d	file:
glRasterPos4d	Src/CAPI/GL/CAPI_GLE_GL.h	953;"	d
glRasterPos4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4d_Hook(GLdouble x, GLdouble y, GLdouble z, GLdouble w)$/;"	f	class:OVR::GLEContext
glRasterPos4dv	Src/CAPI/GL/CAPI_GLE.cpp	2867;"	d	file:
glRasterPos4dv	Src/CAPI/GL/CAPI_GLE_GL.h	954;"	d
glRasterPos4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glRasterPos4f	Src/CAPI/GL/CAPI_GLE.cpp	2875;"	d	file:
glRasterPos4f	Src/CAPI/GL/CAPI_GLE_GL.h	955;"	d
glRasterPos4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4f_Hook(GLfloat x, GLfloat y, GLfloat z, GLfloat w)$/;"	f	class:OVR::GLEContext
glRasterPos4fv	Src/CAPI/GL/CAPI_GLE.cpp	2883;"	d	file:
glRasterPos4fv	Src/CAPI/GL/CAPI_GLE_GL.h	956;"	d
glRasterPos4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glRasterPos4i	Src/CAPI/GL/CAPI_GLE.cpp	2891;"	d	file:
glRasterPos4i	Src/CAPI/GL/CAPI_GLE_GL.h	957;"	d
glRasterPos4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4i_Hook(GLint x, GLint y, GLint z, GLint w)$/;"	f	class:OVR::GLEContext
glRasterPos4iv	Src/CAPI/GL/CAPI_GLE.cpp	2899;"	d	file:
glRasterPos4iv	Src/CAPI/GL/CAPI_GLE_GL.h	958;"	d
glRasterPos4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glRasterPos4s	Src/CAPI/GL/CAPI_GLE.cpp	2907;"	d	file:
glRasterPos4s	Src/CAPI/GL/CAPI_GLE_GL.h	959;"	d
glRasterPos4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4s_Hook(GLshort x, GLshort y, GLshort z, GLshort w)$/;"	f	class:OVR::GLEContext
glRasterPos4sv	Src/CAPI/GL/CAPI_GLE.cpp	2915;"	d	file:
glRasterPos4sv	Src/CAPI/GL/CAPI_GLE_GL.h	960;"	d
glRasterPos4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRasterPos4sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glReadBuffer	Src/CAPI/GL/CAPI_GLE.cpp	2923;"	d	file:
glReadBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	961;"	d
glReadBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glReadBuffer_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glReadPixels	Src/CAPI/GL/CAPI_GLE.cpp	2931;"	d	file:
glReadPixels	Src/CAPI/GL/CAPI_GLE_GL.h	962;"	d
glReadPixels_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glReadPixels_Hook(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)$/;"	f	class:OVR::GLEContext
glRectd	Src/CAPI/GL/CAPI_GLE.cpp	2939;"	d	file:
glRectd	Src/CAPI/GL/CAPI_GLE_GL.h	963;"	d
glRectd_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectd_Hook(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)$/;"	f	class:OVR::GLEContext
glRectdv	Src/CAPI/GL/CAPI_GLE.cpp	2947;"	d	file:
glRectdv	Src/CAPI/GL/CAPI_GLE_GL.h	964;"	d
glRectdv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectdv_Hook(const GLdouble *v1, const GLdouble *v2)$/;"	f	class:OVR::GLEContext
glRectf	Src/CAPI/GL/CAPI_GLE.cpp	2955;"	d	file:
glRectf	Src/CAPI/GL/CAPI_GLE_GL.h	965;"	d
glRectf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectf_Hook(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)$/;"	f	class:OVR::GLEContext
glRectfv	Src/CAPI/GL/CAPI_GLE.cpp	2963;"	d	file:
glRectfv	Src/CAPI/GL/CAPI_GLE_GL.h	966;"	d
glRectfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectfv_Hook(const GLfloat *v1, const GLfloat *v2)$/;"	f	class:OVR::GLEContext
glRecti	Src/CAPI/GL/CAPI_GLE.cpp	2971;"	d	file:
glRecti	Src/CAPI/GL/CAPI_GLE_GL.h	967;"	d
glRecti_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRecti_Hook(GLint x1, GLint y1, GLint x2, GLint y2)$/;"	f	class:OVR::GLEContext
glRectiv	Src/CAPI/GL/CAPI_GLE.cpp	2979;"	d	file:
glRectiv	Src/CAPI/GL/CAPI_GLE_GL.h	968;"	d
glRectiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectiv_Hook(const GLint *v1, const GLint *v2)$/;"	f	class:OVR::GLEContext
glRects	Src/CAPI/GL/CAPI_GLE.cpp	2987;"	d	file:
glRects	Src/CAPI/GL/CAPI_GLE_GL.h	969;"	d
glRects_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRects_Hook(GLshort x1, GLshort y1, GLshort x2, GLshort y2)$/;"	f	class:OVR::GLEContext
glRectsv	Src/CAPI/GL/CAPI_GLE.cpp	2995;"	d	file:
glRectsv	Src/CAPI/GL/CAPI_GLE_GL.h	970;"	d
glRectsv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRectsv_Hook(const GLshort *v1, const GLshort *v2)$/;"	f	class:OVR::GLEContext
glReleaseShaderCompiler	Src/CAPI/GL/CAPI_GLE_GL.h	3342;"	d
glReleaseShaderCompiler_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glReleaseShaderCompiler_Hook()$/;"	f	class:OVR::GLEContext
glReleaseShaderCompiler_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler_Impl;$/;"	m	class:OVR::GLEContext
glRenderMode	Src/CAPI/GL/CAPI_GLE.cpp	3003;"	d	file:
glRenderMode	Src/CAPI/GL/CAPI_GLE_GL.h	971;"	d
glRenderMode	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLRENDERMODEPROC                      glRenderMode;$/;"	m	namespace:OVR::CAPI::GL	file:
glRenderMode_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLint OVR::GLEContext::glRenderMode_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glRenderbufferStorage	Src/CAPI/GL/CAPI_GLE_GL.h	3468;"	d
glRenderbufferStorageMultisample	Src/CAPI/GL/CAPI_GLE_GL.h	3469;"	d
glRenderbufferStorageMultisample_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRenderbufferStorageMultisample_Hook(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glRenderbufferStorageMultisample_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample_Impl;$/;"	m	class:OVR::GLEContext
glRenderbufferStorage_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRenderbufferStorage_Hook(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glRenderbufferStorage_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage_Impl;$/;"	m	class:OVR::GLEContext
glRotated	Src/CAPI/GL/CAPI_GLE.cpp	3012;"	d	file:
glRotated	Src/CAPI/GL/CAPI_GLE_GL.h	972;"	d
glRotated_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRotated_Hook(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glRotatef	Src/CAPI/GL/CAPI_GLE.cpp	3020;"	d	file:
glRotatef	Src/CAPI/GL/CAPI_GLE_GL.h	973;"	d
glRotatef_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glRotatef_Hook(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glSampleCoverage	Src/CAPI/GL/CAPI_GLE_GL.h	1697;"	d
glSampleCoverage_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSampleCoverage_Hook(GLclampf value, GLboolean invert)$/;"	f	class:OVR::GLEContext
glSampleCoverage_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSAMPLECOVERAGEPROC glSampleCoverage_Impl;$/;"	m	class:OVR::GLEContext
glSampleMaski	Src/CAPI/GL/CAPI_GLE_GL.h	3519;"	d
glSampleMaski_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSampleMaski_Hook(GLuint index, GLbitfield mask)$/;"	f	class:OVR::GLEContext
glSampleMaski_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSAMPLEMASKIPROC glSampleMaski_Impl;$/;"	m	class:OVR::GLEContext
glScaled	Src/CAPI/GL/CAPI_GLE.cpp	3028;"	d	file:
glScaled	Src/CAPI/GL/CAPI_GLE_GL.h	974;"	d
glScaled_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glScaled_Hook(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glScalef	Src/CAPI/GL/CAPI_GLE.cpp	3036;"	d	file:
glScalef	Src/CAPI/GL/CAPI_GLE_GL.h	975;"	d
glScalef_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glScalef_Hook(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glScissor	Src/CAPI/GL/CAPI_GLE.cpp	3044;"	d	file:
glScissor	Src/CAPI/GL/CAPI_GLE_GL.h	976;"	d
glScissor_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glScissor_Hook(GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glSecondaryColor3b	Src/CAPI/GL/CAPI_GLE_GL.h	1808;"	d
glSecondaryColor3b_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3b_Hook(GLbyte red, GLbyte green, GLbyte blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3b_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3bv	Src/CAPI/GL/CAPI_GLE_GL.h	1809;"	d
glSecondaryColor3bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3bv_Hook(const GLbyte *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3bv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3d	Src/CAPI/GL/CAPI_GLE_GL.h	1810;"	d
glSecondaryColor3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3d_Hook(GLdouble red, GLdouble green, GLdouble blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3dv	Src/CAPI/GL/CAPI_GLE_GL.h	1811;"	d
glSecondaryColor3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3f	Src/CAPI/GL/CAPI_GLE_GL.h	1812;"	d
glSecondaryColor3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3f_Hook(GLfloat red, GLfloat green, GLfloat blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3fv	Src/CAPI/GL/CAPI_GLE_GL.h	1813;"	d
glSecondaryColor3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3i	Src/CAPI/GL/CAPI_GLE_GL.h	1814;"	d
glSecondaryColor3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3i_Hook(GLint red, GLint green, GLint blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3iv	Src/CAPI/GL/CAPI_GLE_GL.h	1815;"	d
glSecondaryColor3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3s	Src/CAPI/GL/CAPI_GLE_GL.h	1816;"	d
glSecondaryColor3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3s_Hook(GLshort red, GLshort green, GLshort blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3sv	Src/CAPI/GL/CAPI_GLE_GL.h	1817;"	d
glSecondaryColor3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3ub	Src/CAPI/GL/CAPI_GLE_GL.h	1818;"	d
glSecondaryColor3ub_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3ub_Hook(GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3ub_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3ubv	Src/CAPI/GL/CAPI_GLE_GL.h	1819;"	d
glSecondaryColor3ubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3ubv_Hook(const GLubyte *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3ubv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3ui	Src/CAPI/GL/CAPI_GLE_GL.h	1820;"	d
glSecondaryColor3ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3ui_Hook(GLuint red, GLuint green, GLuint blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3uiv	Src/CAPI/GL/CAPI_GLE_GL.h	1821;"	d
glSecondaryColor3uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3uiv_Hook(const GLuint *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3us	Src/CAPI/GL/CAPI_GLE_GL.h	1822;"	d
glSecondaryColor3us_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3us_Hook(GLushort red, GLushort green, GLushort blue)$/;"	f	class:OVR::GLEContext
glSecondaryColor3us_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColor3usv	Src/CAPI/GL/CAPI_GLE_GL.h	1823;"	d
glSecondaryColor3usv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColor3usv_Hook(const GLushort *v)$/;"	f	class:OVR::GLEContext
glSecondaryColor3usv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv_Impl;$/;"	m	class:OVR::GLEContext
glSecondaryColorPointer	Src/CAPI/GL/CAPI_GLE_GL.h	1824;"	d
glSecondaryColorPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSecondaryColorPointer_Hook(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glSecondaryColorPointer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer_Impl;$/;"	m	class:OVR::GLEContext
glSelectBuffer	Src/CAPI/GL/CAPI_GLE.cpp	3052;"	d	file:
glSelectBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	977;"	d
glSelectBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSelectBuffer_Hook(GLsizei size, GLuint *buffer)$/;"	f	class:OVR::GLEContext
glSetFenceAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2831;"	d
glSetFenceAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glSetFenceAPPLE_Hook(GLuint fence)$/;"	f	class:OVR::GLEContext
glSetFenceAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glShadeModel	Src/CAPI/GL/CAPI_GLE.cpp	3060;"	d	file:
glShadeModel	Src/CAPI/GL/CAPI_GLE_GL.h	978;"	d
glShadeModel_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glShadeModel_Hook(GLenum mode)$/;"	f	class:OVR::GLEContext
glShaderBinary	Src/CAPI/GL/CAPI_GLE_GL.h	3343;"	d
glShaderBinary_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glShaderBinary_Hook(GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length)$/;"	f	class:OVR::GLEContext
glShaderBinary_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSHADERBINARYPROC glShaderBinary_Impl;$/;"	m	class:OVR::GLEContext
glShaderSource	Src/CAPI/GL/CAPI_GLE_GL.h	2161;"	d
glShaderSource	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLSHADERSOURCEPROC                    glShaderSource;$/;"	m	namespace:OVR::CAPI::GL	file:
glShaderSource_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glShaderSource_Hook(GLuint shader, GLsizei count, const GLchar* *string, const GLint *length)$/;"	f	class:OVR::GLEContext
glShaderSource_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSHADERSOURCEPROC glShaderSource_Impl;$/;"	m	class:OVR::GLEContext
glStencilFunc	Src/CAPI/GL/CAPI_GLE.cpp	3068;"	d	file:
glStencilFunc	Src/CAPI/GL/CAPI_GLE_GL.h	979;"	d
glStencilFuncSeparate	Src/CAPI/GL/CAPI_GLE_GL.h	2162;"	d
glStencilFuncSeparate_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilFuncSeparate_Hook(GLenum face, GLenum func, GLint ref, GLuint mask)$/;"	f	class:OVR::GLEContext
glStencilFuncSeparate_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate_Impl;$/;"	m	class:OVR::GLEContext
glStencilFunc_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilFunc_Hook(GLenum func, GLint ref, GLuint mask)$/;"	f	class:OVR::GLEContext
glStencilMask	Src/CAPI/GL/CAPI_GLE.cpp	3076;"	d	file:
glStencilMask	Src/CAPI/GL/CAPI_GLE_GL.h	980;"	d
glStencilMaskSeparate	Src/CAPI/GL/CAPI_GLE_GL.h	2163;"	d
glStencilMaskSeparate_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilMaskSeparate_Hook(GLenum face, GLuint mask)$/;"	f	class:OVR::GLEContext
glStencilMaskSeparate_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate_Impl;$/;"	m	class:OVR::GLEContext
glStencilMask_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilMask_Hook(GLuint mask)$/;"	f	class:OVR::GLEContext
glStencilOp	Src/CAPI/GL/CAPI_GLE.cpp	3084;"	d	file:
glStencilOp	Src/CAPI/GL/CAPI_GLE_GL.h	981;"	d
glStencilOpSeparate	Src/CAPI/GL/CAPI_GLE_GL.h	2164;"	d
glStencilOpSeparate_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilOpSeparate_Hook(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)$/;"	f	class:OVR::GLEContext
glStencilOpSeparate_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate_Impl;$/;"	m	class:OVR::GLEContext
glStencilOp_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glStencilOp_Hook(GLenum fail, GLenum zfail, GLenum zpass)$/;"	f	class:OVR::GLEContext
glTestFenceAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2832;"	d
glTestFenceAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glTestFenceAPPLE_Hook(GLuint fence)$/;"	f	class:OVR::GLEContext
glTestFenceAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glTestObjectAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2833;"	d
glTestObjectAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glTestObjectAPPLE_Hook(GLenum object, GLuint name)$/;"	f	class:OVR::GLEContext
glTestObjectAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glTexBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	2550;"	d
glTexBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexBuffer_Hook(GLenum target, GLenum internalformat, GLuint buffer)$/;"	f	class:OVR::GLEContext
glTexBuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXBUFFERPROC glTexBuffer_Impl;$/;"	m	class:OVR::GLEContext
glTexCoord1d	Src/CAPI/GL/CAPI_GLE.cpp	3092;"	d	file:
glTexCoord1d	Src/CAPI/GL/CAPI_GLE_GL.h	982;"	d
glTexCoord1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1d_Hook(GLdouble s)$/;"	f	class:OVR::GLEContext
glTexCoord1dv	Src/CAPI/GL/CAPI_GLE.cpp	3100;"	d	file:
glTexCoord1dv	Src/CAPI/GL/CAPI_GLE_GL.h	983;"	d
glTexCoord1dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glTexCoord1f	Src/CAPI/GL/CAPI_GLE.cpp	3108;"	d	file:
glTexCoord1f	Src/CAPI/GL/CAPI_GLE_GL.h	984;"	d
glTexCoord1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1f_Hook(GLfloat s)$/;"	f	class:OVR::GLEContext
glTexCoord1fv	Src/CAPI/GL/CAPI_GLE.cpp	3116;"	d	file:
glTexCoord1fv	Src/CAPI/GL/CAPI_GLE_GL.h	985;"	d
glTexCoord1fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glTexCoord1i	Src/CAPI/GL/CAPI_GLE.cpp	3124;"	d	file:
glTexCoord1i	Src/CAPI/GL/CAPI_GLE_GL.h	986;"	d
glTexCoord1i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1i_Hook(GLint s)$/;"	f	class:OVR::GLEContext
glTexCoord1iv	Src/CAPI/GL/CAPI_GLE.cpp	3132;"	d	file:
glTexCoord1iv	Src/CAPI/GL/CAPI_GLE_GL.h	987;"	d
glTexCoord1iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glTexCoord1s	Src/CAPI/GL/CAPI_GLE.cpp	3140;"	d	file:
glTexCoord1s	Src/CAPI/GL/CAPI_GLE_GL.h	988;"	d
glTexCoord1s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1s_Hook(GLshort s)$/;"	f	class:OVR::GLEContext
glTexCoord1sv	Src/CAPI/GL/CAPI_GLE.cpp	3148;"	d	file:
glTexCoord1sv	Src/CAPI/GL/CAPI_GLE_GL.h	989;"	d
glTexCoord1sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord1sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glTexCoord2d	Src/CAPI/GL/CAPI_GLE.cpp	3156;"	d	file:
glTexCoord2d	Src/CAPI/GL/CAPI_GLE_GL.h	990;"	d
glTexCoord2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2d_Hook(GLdouble s, GLdouble t)$/;"	f	class:OVR::GLEContext
glTexCoord2dv	Src/CAPI/GL/CAPI_GLE.cpp	3164;"	d	file:
glTexCoord2dv	Src/CAPI/GL/CAPI_GLE_GL.h	991;"	d
glTexCoord2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glTexCoord2f	Src/CAPI/GL/CAPI_GLE.cpp	3172;"	d	file:
glTexCoord2f	Src/CAPI/GL/CAPI_GLE_GL.h	992;"	d
glTexCoord2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2f_Hook(GLfloat s, GLfloat t)$/;"	f	class:OVR::GLEContext
glTexCoord2fv	Src/CAPI/GL/CAPI_GLE.cpp	3180;"	d	file:
glTexCoord2fv	Src/CAPI/GL/CAPI_GLE_GL.h	993;"	d
glTexCoord2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glTexCoord2i	Src/CAPI/GL/CAPI_GLE.cpp	3188;"	d	file:
glTexCoord2i	Src/CAPI/GL/CAPI_GLE_GL.h	994;"	d
glTexCoord2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2i_Hook(GLint s, GLint t)$/;"	f	class:OVR::GLEContext
glTexCoord2iv	Src/CAPI/GL/CAPI_GLE.cpp	3196;"	d	file:
glTexCoord2iv	Src/CAPI/GL/CAPI_GLE_GL.h	995;"	d
glTexCoord2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glTexCoord2s	Src/CAPI/GL/CAPI_GLE.cpp	3204;"	d	file:
glTexCoord2s	Src/CAPI/GL/CAPI_GLE_GL.h	996;"	d
glTexCoord2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2s_Hook(GLshort s, GLshort t)$/;"	f	class:OVR::GLEContext
glTexCoord2sv	Src/CAPI/GL/CAPI_GLE.cpp	3212;"	d	file:
glTexCoord2sv	Src/CAPI/GL/CAPI_GLE_GL.h	997;"	d
glTexCoord2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord2sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glTexCoord3d	Src/CAPI/GL/CAPI_GLE.cpp	3220;"	d	file:
glTexCoord3d	Src/CAPI/GL/CAPI_GLE_GL.h	998;"	d
glTexCoord3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3d_Hook(GLdouble s, GLdouble t, GLdouble r)$/;"	f	class:OVR::GLEContext
glTexCoord3dv	Src/CAPI/GL/CAPI_GLE.cpp	3228;"	d	file:
glTexCoord3dv	Src/CAPI/GL/CAPI_GLE_GL.h	999;"	d
glTexCoord3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glTexCoord3f	Src/CAPI/GL/CAPI_GLE.cpp	3236;"	d	file:
glTexCoord3f	Src/CAPI/GL/CAPI_GLE_GL.h	1000;"	d
glTexCoord3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3f_Hook(GLfloat s, GLfloat t, GLfloat r)$/;"	f	class:OVR::GLEContext
glTexCoord3fv	Src/CAPI/GL/CAPI_GLE.cpp	3244;"	d	file:
glTexCoord3fv	Src/CAPI/GL/CAPI_GLE_GL.h	1001;"	d
glTexCoord3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glTexCoord3i	Src/CAPI/GL/CAPI_GLE.cpp	3252;"	d	file:
glTexCoord3i	Src/CAPI/GL/CAPI_GLE_GL.h	1002;"	d
glTexCoord3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3i_Hook(GLint s, GLint t, GLint r)$/;"	f	class:OVR::GLEContext
glTexCoord3iv	Src/CAPI/GL/CAPI_GLE.cpp	3260;"	d	file:
glTexCoord3iv	Src/CAPI/GL/CAPI_GLE_GL.h	1003;"	d
glTexCoord3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glTexCoord3s	Src/CAPI/GL/CAPI_GLE.cpp	3268;"	d	file:
glTexCoord3s	Src/CAPI/GL/CAPI_GLE_GL.h	1004;"	d
glTexCoord3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3s_Hook(GLshort s, GLshort t, GLshort r)$/;"	f	class:OVR::GLEContext
glTexCoord3sv	Src/CAPI/GL/CAPI_GLE.cpp	3276;"	d	file:
glTexCoord3sv	Src/CAPI/GL/CAPI_GLE_GL.h	1005;"	d
glTexCoord3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glTexCoord4d	Src/CAPI/GL/CAPI_GLE.cpp	3284;"	d	file:
glTexCoord4d	Src/CAPI/GL/CAPI_GLE_GL.h	1006;"	d
glTexCoord4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4d_Hook(GLdouble s, GLdouble t, GLdouble r, GLdouble q)$/;"	f	class:OVR::GLEContext
glTexCoord4dv	Src/CAPI/GL/CAPI_GLE.cpp	3292;"	d	file:
glTexCoord4dv	Src/CAPI/GL/CAPI_GLE_GL.h	1007;"	d
glTexCoord4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glTexCoord4f	Src/CAPI/GL/CAPI_GLE.cpp	3300;"	d	file:
glTexCoord4f	Src/CAPI/GL/CAPI_GLE_GL.h	1008;"	d
glTexCoord4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4f_Hook(GLfloat s, GLfloat t, GLfloat r, GLfloat q)$/;"	f	class:OVR::GLEContext
glTexCoord4fv	Src/CAPI/GL/CAPI_GLE.cpp	3308;"	d	file:
glTexCoord4fv	Src/CAPI/GL/CAPI_GLE_GL.h	1009;"	d
glTexCoord4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glTexCoord4i	Src/CAPI/GL/CAPI_GLE.cpp	3316;"	d	file:
glTexCoord4i	Src/CAPI/GL/CAPI_GLE_GL.h	1010;"	d
glTexCoord4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4i_Hook(GLint s, GLint t, GLint r, GLint q)$/;"	f	class:OVR::GLEContext
glTexCoord4iv	Src/CAPI/GL/CAPI_GLE.cpp	3324;"	d	file:
glTexCoord4iv	Src/CAPI/GL/CAPI_GLE_GL.h	1011;"	d
glTexCoord4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glTexCoord4s	Src/CAPI/GL/CAPI_GLE.cpp	3332;"	d	file:
glTexCoord4s	Src/CAPI/GL/CAPI_GLE_GL.h	1012;"	d
glTexCoord4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4s_Hook(GLshort s, GLshort t, GLshort r, GLshort q)$/;"	f	class:OVR::GLEContext
glTexCoord4sv	Src/CAPI/GL/CAPI_GLE.cpp	3340;"	d	file:
glTexCoord4sv	Src/CAPI/GL/CAPI_GLE_GL.h	1013;"	d
glTexCoord4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoord4sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glTexCoordPointer	Src/CAPI/GL/CAPI_GLE.cpp	3348;"	d	file:
glTexCoordPointer	Src/CAPI/GL/CAPI_GLE_GL.h	1014;"	d
glTexCoordPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexCoordPointer_Hook(GLint size, GLenum type, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glTexEnvf	Src/CAPI/GL/CAPI_GLE.cpp	3356;"	d	file:
glTexEnvf	Src/CAPI/GL/CAPI_GLE_GL.h	1015;"	d
glTexEnvf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexEnvf_Hook(GLenum target, GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glTexEnvfv	Src/CAPI/GL/CAPI_GLE.cpp	3364;"	d	file:
glTexEnvfv	Src/CAPI/GL/CAPI_GLE_GL.h	1016;"	d
glTexEnvfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexEnvfv_Hook(GLenum target, GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glTexEnvi	Src/CAPI/GL/CAPI_GLE.cpp	3372;"	d	file:
glTexEnvi	Src/CAPI/GL/CAPI_GLE_GL.h	1017;"	d
glTexEnvi_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexEnvi_Hook(GLenum target, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glTexEnviv	Src/CAPI/GL/CAPI_GLE.cpp	3380;"	d	file:
glTexEnviv	Src/CAPI/GL/CAPI_GLE_GL.h	1018;"	d
glTexEnviv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexEnviv_Hook(GLenum target, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glTexGend	Src/CAPI/GL/CAPI_GLE.cpp	3388;"	d	file:
glTexGend	Src/CAPI/GL/CAPI_GLE_GL.h	1019;"	d
glTexGend_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGend_Hook(GLenum coord, GLenum pname, GLdouble param)$/;"	f	class:OVR::GLEContext
glTexGendv	Src/CAPI/GL/CAPI_GLE.cpp	3396;"	d	file:
glTexGendv	Src/CAPI/GL/CAPI_GLE_GL.h	1020;"	d
glTexGendv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGendv_Hook(GLenum coord, GLenum pname, const GLdouble *params)$/;"	f	class:OVR::GLEContext
glTexGenf	Src/CAPI/GL/CAPI_GLE.cpp	3404;"	d	file:
glTexGenf	Src/CAPI/GL/CAPI_GLE_GL.h	1021;"	d
glTexGenf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGenf_Hook(GLenum coord, GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glTexGenfv	Src/CAPI/GL/CAPI_GLE.cpp	3412;"	d	file:
glTexGenfv	Src/CAPI/GL/CAPI_GLE_GL.h	1022;"	d
glTexGenfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGenfv_Hook(GLenum coord, GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glTexGeni	Src/CAPI/GL/CAPI_GLE.cpp	3420;"	d	file:
glTexGeni	Src/CAPI/GL/CAPI_GLE_GL.h	1023;"	d
glTexGeni_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGeni_Hook(GLenum coord, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glTexGeniv	Src/CAPI/GL/CAPI_GLE.cpp	3428;"	d	file:
glTexGeniv	Src/CAPI/GL/CAPI_GLE_GL.h	1024;"	d
glTexGeniv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexGeniv_Hook(GLenum coord, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glTexImage1D	Src/CAPI/GL/CAPI_GLE.cpp	3436;"	d	file:
glTexImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	1025;"	d
glTexImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexImage1D_Hook(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)$/;"	f	class:OVR::GLEContext
glTexImage2D	Src/CAPI/GL/CAPI_GLE.cpp	3444;"	d	file:
glTexImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	1026;"	d
glTexImage2D	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLTEXIMAGE2DPROC                      glTexImage2D;$/;"	m	namespace:OVR::CAPI::GL	file:
glTexImage2DMultisample	Src/CAPI/GL/CAPI_GLE_GL.h	3520;"	d
glTexImage2DMultisample_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexImage2DMultisample_Hook(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)$/;"	f	class:OVR::GLEContext
glTexImage2DMultisample_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample_Impl;$/;"	m	class:OVR::GLEContext
glTexImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexImage2D_Hook(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)$/;"	f	class:OVR::GLEContext
glTexImage3D	Src/CAPI/GL/CAPI_GLE_GL.h	1461;"	d
glTexImage3DMultisample	Src/CAPI/GL/CAPI_GLE_GL.h	3521;"	d
glTexImage3DMultisample_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexImage3DMultisample_Hook(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)$/;"	f	class:OVR::GLEContext
glTexImage3DMultisample_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample_Impl;$/;"	m	class:OVR::GLEContext
glTexImage3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexImage3D_Hook(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f	class:OVR::GLEContext
glTexImage3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXIMAGE3DPROC glTexImage3D_Impl;$/;"	m	class:OVR::GLEContext
glTexParameterIiv	Src/CAPI/GL/CAPI_GLE_GL.h	2466;"	d
glTexParameterIiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameterIiv_Hook(GLenum target, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glTexParameterIiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXPARAMETERIIVPROC glTexParameterIiv_Impl;$/;"	m	class:OVR::GLEContext
glTexParameterIuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2467;"	d
glTexParameterIuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameterIuiv_Hook(GLenum target, GLenum pname, const GLuint *params)$/;"	f	class:OVR::GLEContext
glTexParameterIuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv_Impl;$/;"	m	class:OVR::GLEContext
glTexParameterf	Src/CAPI/GL/CAPI_GLE.cpp	3452;"	d	file:
glTexParameterf	Src/CAPI/GL/CAPI_GLE_GL.h	1027;"	d
glTexParameterf_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameterf_Hook(GLenum target, GLenum pname, GLfloat param)$/;"	f	class:OVR::GLEContext
glTexParameterfv	Src/CAPI/GL/CAPI_GLE.cpp	3460;"	d	file:
glTexParameterfv	Src/CAPI/GL/CAPI_GLE_GL.h	1028;"	d
glTexParameterfv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameterfv_Hook(GLenum target, GLenum pname, const GLfloat *params)$/;"	f	class:OVR::GLEContext
glTexParameteri	Src/CAPI/GL/CAPI_GLE.cpp	3468;"	d	file:
glTexParameteri	Src/CAPI/GL/CAPI_GLE_GL.h	1029;"	d
glTexParameteri	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLTEXPARAMETERIPROC                   glTexParameteri;$/;"	m	namespace:OVR::CAPI::GL	file:
glTexParameteri_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameteri_Hook(GLenum target, GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glTexParameteriv	Src/CAPI/GL/CAPI_GLE.cpp	3476;"	d	file:
glTexParameteriv	Src/CAPI/GL/CAPI_GLE_GL.h	1030;"	d
glTexParameteriv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexParameteriv_Hook(GLenum target, GLenum pname, const GLint *params)$/;"	f	class:OVR::GLEContext
glTexSubImage1D	Src/CAPI/GL/CAPI_GLE.cpp	3484;"	d	file:
glTexSubImage1D	Src/CAPI/GL/CAPI_GLE_GL.h	1031;"	d
glTexSubImage1D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexSubImage1D_Hook(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)$/;"	f	class:OVR::GLEContext
glTexSubImage2D	Src/CAPI/GL/CAPI_GLE.cpp	3492;"	d	file:
glTexSubImage2D	Src/CAPI/GL/CAPI_GLE_GL.h	1032;"	d
glTexSubImage2D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexSubImage2D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)$/;"	f	class:OVR::GLEContext
glTexSubImage3D	Src/CAPI/GL/CAPI_GLE_GL.h	1462;"	d
glTexSubImage3D_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTexSubImage3D_Hook(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)$/;"	f	class:OVR::GLEContext
glTexSubImage3D_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D_Impl;$/;"	m	class:OVR::GLEContext
glTextureRangeAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	2962;"	d
glTextureRangeAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTextureRangeAPPLE_Hook(GLenum target, GLsizei length, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glTextureRangeAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glTransformFeedbackVaryings	Src/CAPI/GL/CAPI_GLE_GL.h	2468;"	d
glTransformFeedbackVaryings_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTransformFeedbackVaryings_Hook(GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode)$/;"	f	class:OVR::GLEContext
glTransformFeedbackVaryings_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings_Impl;$/;"	m	class:OVR::GLEContext
glTranslated	Src/CAPI/GL/CAPI_GLE.cpp	3500;"	d	file:
glTranslated	Src/CAPI/GL/CAPI_GLE_GL.h	1033;"	d
glTranslated_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTranslated_Hook(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glTranslatef	Src/CAPI/GL/CAPI_GLE.cpp	3508;"	d	file:
glTranslatef	Src/CAPI/GL/CAPI_GLE_GL.h	1034;"	d
glTranslatef_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glTranslatef_Hook(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glUniform1f	Src/CAPI/GL/CAPI_GLE_GL.h	2165;"	d
glUniform1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1f_Hook(GLint location, GLfloat v0)$/;"	f	class:OVR::GLEContext
glUniform1f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1FPROC glUniform1f_Impl;$/;"	m	class:OVR::GLEContext
glUniform1fv	Src/CAPI/GL/CAPI_GLE_GL.h	2166;"	d
glUniform1fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORM1FVPROC                      glUniform1fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniform1fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1fv_Hook(GLint location, GLsizei count, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniform1fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1FVPROC glUniform1fv_Impl;$/;"	m	class:OVR::GLEContext
glUniform1i	Src/CAPI/GL/CAPI_GLE_GL.h	2167;"	d
glUniform1i	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORM1IPROC                       glUniform1i;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniform1i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1i_Hook(GLint location, GLint v0)$/;"	f	class:OVR::GLEContext
glUniform1i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1IPROC glUniform1i_Impl;$/;"	m	class:OVR::GLEContext
glUniform1iv	Src/CAPI/GL/CAPI_GLE_GL.h	2168;"	d
glUniform1iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1iv_Hook(GLint location, GLsizei count, const GLint *value)$/;"	f	class:OVR::GLEContext
glUniform1iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1IVPROC glUniform1iv_Impl;$/;"	m	class:OVR::GLEContext
glUniform1ui	Src/CAPI/GL/CAPI_GLE_GL.h	2469;"	d
glUniform1ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1ui_Hook(GLint location, GLuint v0)$/;"	f	class:OVR::GLEContext
glUniform1ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1UIPROC glUniform1ui_Impl;$/;"	m	class:OVR::GLEContext
glUniform1uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2470;"	d
glUniform1uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform1uiv_Hook(GLint location, GLsizei count, const GLuint *value)$/;"	f	class:OVR::GLEContext
glUniform1uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM1UIVPROC glUniform1uiv_Impl;$/;"	m	class:OVR::GLEContext
glUniform2f	Src/CAPI/GL/CAPI_GLE_GL.h	2169;"	d
glUniform2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2f_Hook(GLint location, GLfloat v0, GLfloat v1)$/;"	f	class:OVR::GLEContext
glUniform2f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2FPROC glUniform2f_Impl;$/;"	m	class:OVR::GLEContext
glUniform2fv	Src/CAPI/GL/CAPI_GLE_GL.h	2170;"	d
glUniform2fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORM2FVPROC                      glUniform2fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniform2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2fv_Hook(GLint location, GLsizei count, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniform2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2FVPROC glUniform2fv_Impl;$/;"	m	class:OVR::GLEContext
glUniform2i	Src/CAPI/GL/CAPI_GLE_GL.h	2171;"	d
glUniform2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2i_Hook(GLint location, GLint v0, GLint v1)$/;"	f	class:OVR::GLEContext
glUniform2i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2IPROC glUniform2i_Impl;$/;"	m	class:OVR::GLEContext
glUniform2iv	Src/CAPI/GL/CAPI_GLE_GL.h	2172;"	d
glUniform2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2iv_Hook(GLint location, GLsizei count, const GLint *value)$/;"	f	class:OVR::GLEContext
glUniform2iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2IVPROC glUniform2iv_Impl;$/;"	m	class:OVR::GLEContext
glUniform2ui	Src/CAPI/GL/CAPI_GLE_GL.h	2471;"	d
glUniform2ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2ui_Hook(GLint location, GLuint v0, GLuint v1)$/;"	f	class:OVR::GLEContext
glUniform2ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2UIPROC glUniform2ui_Impl;$/;"	m	class:OVR::GLEContext
glUniform2uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2472;"	d
glUniform2uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform2uiv_Hook(GLint location, GLsizei count, const GLuint *value)$/;"	f	class:OVR::GLEContext
glUniform2uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM2UIVPROC glUniform2uiv_Impl;$/;"	m	class:OVR::GLEContext
glUniform3f	Src/CAPI/GL/CAPI_GLE_GL.h	2173;"	d
glUniform3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3f_Hook(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)$/;"	f	class:OVR::GLEContext
glUniform3f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3FPROC glUniform3f_Impl;$/;"	m	class:OVR::GLEContext
glUniform3fv	Src/CAPI/GL/CAPI_GLE_GL.h	2174;"	d
glUniform3fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORM3FVPROC                      glUniform3fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniform3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3fv_Hook(GLint location, GLsizei count, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniform3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3FVPROC glUniform3fv_Impl;$/;"	m	class:OVR::GLEContext
glUniform3i	Src/CAPI/GL/CAPI_GLE_GL.h	2175;"	d
glUniform3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3i_Hook(GLint location, GLint v0, GLint v1, GLint v2)$/;"	f	class:OVR::GLEContext
glUniform3i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3IPROC glUniform3i_Impl;$/;"	m	class:OVR::GLEContext
glUniform3iv	Src/CAPI/GL/CAPI_GLE_GL.h	2176;"	d
glUniform3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3iv_Hook(GLint location, GLsizei count, const GLint *value)$/;"	f	class:OVR::GLEContext
glUniform3iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3IVPROC glUniform3iv_Impl;$/;"	m	class:OVR::GLEContext
glUniform3ui	Src/CAPI/GL/CAPI_GLE_GL.h	2473;"	d
glUniform3ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3ui_Hook(GLint location, GLuint v0, GLuint v1, GLuint v2)$/;"	f	class:OVR::GLEContext
glUniform3ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3UIPROC glUniform3ui_Impl;$/;"	m	class:OVR::GLEContext
glUniform3uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2474;"	d
glUniform3uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform3uiv_Hook(GLint location, GLsizei count, const GLuint *value)$/;"	f	class:OVR::GLEContext
glUniform3uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM3UIVPROC glUniform3uiv_Impl;$/;"	m	class:OVR::GLEContext
glUniform4f	Src/CAPI/GL/CAPI_GLE_GL.h	2177;"	d
glUniform4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4f_Hook(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)$/;"	f	class:OVR::GLEContext
glUniform4f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4FPROC glUniform4f_Impl;$/;"	m	class:OVR::GLEContext
glUniform4fv	Src/CAPI/GL/CAPI_GLE_GL.h	2178;"	d
glUniform4fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORM4FVPROC                      glUniform4fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniform4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4fv_Hook(GLint location, GLsizei count, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniform4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4FVPROC glUniform4fv_Impl;$/;"	m	class:OVR::GLEContext
glUniform4i	Src/CAPI/GL/CAPI_GLE_GL.h	2179;"	d
glUniform4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4i_Hook(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)$/;"	f	class:OVR::GLEContext
glUniform4i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4IPROC glUniform4i_Impl;$/;"	m	class:OVR::GLEContext
glUniform4iv	Src/CAPI/GL/CAPI_GLE_GL.h	2180;"	d
glUniform4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4iv_Hook(GLint location, GLsizei count, const GLint *value)$/;"	f	class:OVR::GLEContext
glUniform4iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4IVPROC glUniform4iv_Impl;$/;"	m	class:OVR::GLEContext
glUniform4ui	Src/CAPI/GL/CAPI_GLE_GL.h	2475;"	d
glUniform4ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4ui_Hook(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)$/;"	f	class:OVR::GLEContext
glUniform4ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4UIPROC glUniform4ui_Impl;$/;"	m	class:OVR::GLEContext
glUniform4uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2476;"	d
glUniform4uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniform4uiv_Hook(GLint location, GLsizei count, const GLuint *value)$/;"	f	class:OVR::GLEContext
glUniform4uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORM4UIVPROC glUniform4uiv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix2fv	Src/CAPI/GL/CAPI_GLE_GL.h	2181;"	d
glUniformMatrix2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix2fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix2x3fv	Src/CAPI/GL/CAPI_GLE_GL.h	2262;"	d
glUniformMatrix2x3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix2x3fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix2x3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix2x4fv	Src/CAPI/GL/CAPI_GLE_GL.h	2263;"	d
glUniformMatrix2x4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix2x4fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix2x4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix3fv	Src/CAPI/GL/CAPI_GLE_GL.h	2182;"	d
glUniformMatrix3fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORMMATRIX3FVPROC                glUniformMatrix3fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniformMatrix3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix3fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix3x2fv	Src/CAPI/GL/CAPI_GLE_GL.h	2264;"	d
glUniformMatrix3x2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix3x2fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix3x2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix3x4fv	Src/CAPI/GL/CAPI_GLE_GL.h	2265;"	d
glUniformMatrix3x4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix3x4fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix3x4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix4fv	Src/CAPI/GL/CAPI_GLE_GL.h	2183;"	d
glUniformMatrix4fv	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNIFORMMATRIX4FVPROC                glUniformMatrix4fv;$/;"	m	namespace:OVR::CAPI::GL	file:
glUniformMatrix4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix4fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix4x2fv	Src/CAPI/GL/CAPI_GLE_GL.h	2266;"	d
glUniformMatrix4x2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix4x2fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix4x2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv_Impl;$/;"	m	class:OVR::GLEContext
glUniformMatrix4x3fv	Src/CAPI/GL/CAPI_GLE_GL.h	2267;"	d
glUniformMatrix4x3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUniformMatrix4x3fv_Hook(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)$/;"	f	class:OVR::GLEContext
glUniformMatrix4x3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv_Impl;$/;"	m	class:OVR::GLEContext
glUnmapBuffer	Src/CAPI/GL/CAPI_GLE_GL.h	1941;"	d
glUnmapBuffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUNMAPBUFFERPROC                     glUnmapBuffer;$/;"	m	namespace:OVR::CAPI::GL	file:
glUnmapBuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        GLboolean OVR::GLEContext::glUnmapBuffer_Hook(GLenum target)$/;"	f	class:OVR::GLEContext
glUnmapBuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUNMAPBUFFERPROC glUnmapBuffer_Impl;$/;"	m	class:OVR::GLEContext
glUseProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2184;"	d
glUseProgram	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLUSEPROGRAMPROC                      glUseProgram;$/;"	m	namespace:OVR::CAPI::GL	file:
glUseProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glUseProgram_Hook(GLuint program)$/;"	f	class:OVR::GLEContext
glUseProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLUSEPROGRAMPROC glUseProgram_Impl;$/;"	m	class:OVR::GLEContext
glValidateProgram	Src/CAPI/GL/CAPI_GLE_GL.h	2185;"	d
glValidateProgram_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glValidateProgram_Hook(GLuint program)$/;"	f	class:OVR::GLEContext
glValidateProgram_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVALIDATEPROGRAMPROC glValidateProgram_Impl;$/;"	m	class:OVR::GLEContext
glVertex2d	Src/CAPI/GL/CAPI_GLE.cpp	3516;"	d	file:
glVertex2d	Src/CAPI/GL/CAPI_GLE_GL.h	1035;"	d
glVertex2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2d_Hook(GLdouble x, GLdouble y)$/;"	f	class:OVR::GLEContext
glVertex2dv	Src/CAPI/GL/CAPI_GLE.cpp	3524;"	d	file:
glVertex2dv	Src/CAPI/GL/CAPI_GLE_GL.h	1036;"	d
glVertex2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertex2f	Src/CAPI/GL/CAPI_GLE.cpp	3532;"	d	file:
glVertex2f	Src/CAPI/GL/CAPI_GLE_GL.h	1037;"	d
glVertex2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2f_Hook(GLfloat x, GLfloat y)$/;"	f	class:OVR::GLEContext
glVertex2fv	Src/CAPI/GL/CAPI_GLE.cpp	3540;"	d	file:
glVertex2fv	Src/CAPI/GL/CAPI_GLE_GL.h	1038;"	d
glVertex2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertex2i	Src/CAPI/GL/CAPI_GLE.cpp	3548;"	d	file:
glVertex2i	Src/CAPI/GL/CAPI_GLE_GL.h	1039;"	d
glVertex2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2i_Hook(GLint x, GLint y)$/;"	f	class:OVR::GLEContext
glVertex2iv	Src/CAPI/GL/CAPI_GLE.cpp	3556;"	d	file:
glVertex2iv	Src/CAPI/GL/CAPI_GLE_GL.h	1040;"	d
glVertex2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glVertex2s	Src/CAPI/GL/CAPI_GLE.cpp	3564;"	d	file:
glVertex2s	Src/CAPI/GL/CAPI_GLE_GL.h	1041;"	d
glVertex2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2s_Hook(GLshort x, GLshort y)$/;"	f	class:OVR::GLEContext
glVertex2sv	Src/CAPI/GL/CAPI_GLE.cpp	3572;"	d	file:
glVertex2sv	Src/CAPI/GL/CAPI_GLE_GL.h	1042;"	d
glVertex2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex2sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertex3d	Src/CAPI/GL/CAPI_GLE.cpp	3580;"	d	file:
glVertex3d	Src/CAPI/GL/CAPI_GLE_GL.h	1043;"	d
glVertex3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3d_Hook(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glVertex3dv	Src/CAPI/GL/CAPI_GLE.cpp	3588;"	d	file:
glVertex3dv	Src/CAPI/GL/CAPI_GLE_GL.h	1044;"	d
glVertex3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertex3f	Src/CAPI/GL/CAPI_GLE.cpp	3596;"	d	file:
glVertex3f	Src/CAPI/GL/CAPI_GLE_GL.h	1045;"	d
glVertex3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3f_Hook(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glVertex3fv	Src/CAPI/GL/CAPI_GLE.cpp	3604;"	d	file:
glVertex3fv	Src/CAPI/GL/CAPI_GLE_GL.h	1046;"	d
glVertex3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertex3i	Src/CAPI/GL/CAPI_GLE.cpp	3612;"	d	file:
glVertex3i	Src/CAPI/GL/CAPI_GLE_GL.h	1047;"	d
glVertex3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3i_Hook(GLint x, GLint y, GLint z)$/;"	f	class:OVR::GLEContext
glVertex3iv	Src/CAPI/GL/CAPI_GLE.cpp	3620;"	d	file:
glVertex3iv	Src/CAPI/GL/CAPI_GLE_GL.h	1048;"	d
glVertex3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glVertex3s	Src/CAPI/GL/CAPI_GLE.cpp	3628;"	d	file:
glVertex3s	Src/CAPI/GL/CAPI_GLE_GL.h	1049;"	d
glVertex3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3s_Hook(GLshort x, GLshort y, GLshort z)$/;"	f	class:OVR::GLEContext
glVertex3sv	Src/CAPI/GL/CAPI_GLE.cpp	3636;"	d	file:
glVertex3sv	Src/CAPI/GL/CAPI_GLE_GL.h	1050;"	d
glVertex3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertex4d	Src/CAPI/GL/CAPI_GLE.cpp	3644;"	d	file:
glVertex4d	Src/CAPI/GL/CAPI_GLE_GL.h	1051;"	d
glVertex4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4d_Hook(GLdouble x, GLdouble y, GLdouble z, GLdouble w)$/;"	f	class:OVR::GLEContext
glVertex4dv	Src/CAPI/GL/CAPI_GLE.cpp	3652;"	d	file:
glVertex4dv	Src/CAPI/GL/CAPI_GLE_GL.h	1052;"	d
glVertex4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertex4f	Src/CAPI/GL/CAPI_GLE.cpp	3660;"	d	file:
glVertex4f	Src/CAPI/GL/CAPI_GLE_GL.h	1053;"	d
glVertex4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4f_Hook(GLfloat x, GLfloat y, GLfloat z, GLfloat w)$/;"	f	class:OVR::GLEContext
glVertex4fv	Src/CAPI/GL/CAPI_GLE.cpp	3668;"	d	file:
glVertex4fv	Src/CAPI/GL/CAPI_GLE_GL.h	1054;"	d
glVertex4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertex4i	Src/CAPI/GL/CAPI_GLE.cpp	3676;"	d	file:
glVertex4i	Src/CAPI/GL/CAPI_GLE_GL.h	1055;"	d
glVertex4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4i_Hook(GLint x, GLint y, GLint z, GLint w)$/;"	f	class:OVR::GLEContext
glVertex4iv	Src/CAPI/GL/CAPI_GLE.cpp	3684;"	d	file:
glVertex4iv	Src/CAPI/GL/CAPI_GLE_GL.h	1056;"	d
glVertex4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glVertex4s	Src/CAPI/GL/CAPI_GLE.cpp	3692;"	d	file:
glVertex4s	Src/CAPI/GL/CAPI_GLE_GL.h	1057;"	d
glVertex4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4s_Hook(GLshort x, GLshort y, GLshort z, GLshort w)$/;"	f	class:OVR::GLEContext
glVertex4sv	Src/CAPI/GL/CAPI_GLE.cpp	3700;"	d	file:
glVertex4sv	Src/CAPI/GL/CAPI_GLE_GL.h	1058;"	d
glVertex4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertex4sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexArrayParameteriAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3020;"	d
glVertexArrayParameteriAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexArrayParameteriAPPLE_Hook(GLenum pname, GLint param)$/;"	f	class:OVR::GLEContext
glVertexArrayParameteriAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glVertexArrayRangeAPPLE	Src/CAPI/GL/CAPI_GLE_GL.h	3021;"	d
glVertexArrayRangeAPPLE_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexArrayRangeAPPLE_Hook(GLsizei length, GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glVertexArrayRangeAPPLE_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1d	Src/CAPI/GL/CAPI_GLE_GL.h	2186;"	d
glVertexAttrib1d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1d_Hook(GLuint index, GLdouble x)$/;"	f	class:OVR::GLEContext
glVertexAttrib1d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1dv	Src/CAPI/GL/CAPI_GLE_GL.h	2187;"	d
glVertexAttrib1dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1dv_Hook(GLuint index, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib1dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1f	Src/CAPI/GL/CAPI_GLE_GL.h	2188;"	d
glVertexAttrib1f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1f_Hook(GLuint index, GLfloat x)$/;"	f	class:OVR::GLEContext
glVertexAttrib1f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1fv	Src/CAPI/GL/CAPI_GLE_GL.h	2189;"	d
glVertexAttrib1fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1fv_Hook(GLuint index, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib1fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1s	Src/CAPI/GL/CAPI_GLE_GL.h	2190;"	d
glVertexAttrib1s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1s_Hook(GLuint index, GLshort x)$/;"	f	class:OVR::GLEContext
glVertexAttrib1s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib1sv	Src/CAPI/GL/CAPI_GLE_GL.h	2191;"	d
glVertexAttrib1sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib1sv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib1sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2d	Src/CAPI/GL/CAPI_GLE_GL.h	2192;"	d
glVertexAttrib2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2d_Hook(GLuint index, GLdouble x, GLdouble y)$/;"	f	class:OVR::GLEContext
glVertexAttrib2d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2dv	Src/CAPI/GL/CAPI_GLE_GL.h	2193;"	d
glVertexAttrib2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2dv_Hook(GLuint index, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib2dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2f	Src/CAPI/GL/CAPI_GLE_GL.h	2194;"	d
glVertexAttrib2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2f_Hook(GLuint index, GLfloat x, GLfloat y)$/;"	f	class:OVR::GLEContext
glVertexAttrib2f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2fv	Src/CAPI/GL/CAPI_GLE_GL.h	2195;"	d
glVertexAttrib2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2fv_Hook(GLuint index, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2s	Src/CAPI/GL/CAPI_GLE_GL.h	2196;"	d
glVertexAttrib2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2s_Hook(GLuint index, GLshort x, GLshort y)$/;"	f	class:OVR::GLEContext
glVertexAttrib2s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib2sv	Src/CAPI/GL/CAPI_GLE_GL.h	2197;"	d
glVertexAttrib2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib2sv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib2sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3d	Src/CAPI/GL/CAPI_GLE_GL.h	2198;"	d
glVertexAttrib3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3d_Hook(GLuint index, GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glVertexAttrib3d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3dv	Src/CAPI/GL/CAPI_GLE_GL.h	2199;"	d
glVertexAttrib3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3dv_Hook(GLuint index, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib3dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3f	Src/CAPI/GL/CAPI_GLE_GL.h	2200;"	d
glVertexAttrib3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3f_Hook(GLuint index, GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glVertexAttrib3f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3fv	Src/CAPI/GL/CAPI_GLE_GL.h	2201;"	d
glVertexAttrib3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3fv_Hook(GLuint index, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3s	Src/CAPI/GL/CAPI_GLE_GL.h	2202;"	d
glVertexAttrib3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3s_Hook(GLuint index, GLshort x, GLshort y, GLshort z)$/;"	f	class:OVR::GLEContext
glVertexAttrib3s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib3sv	Src/CAPI/GL/CAPI_GLE_GL.h	2203;"	d
glVertexAttrib3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib3sv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib3sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nbv	Src/CAPI/GL/CAPI_GLE_GL.h	2204;"	d
glVertexAttrib4Nbv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nbv_Hook(GLuint index, const GLbyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nbv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Niv	Src/CAPI/GL/CAPI_GLE_GL.h	2205;"	d
glVertexAttrib4Niv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Niv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Niv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nsv	Src/CAPI/GL/CAPI_GLE_GL.h	2206;"	d
glVertexAttrib4Nsv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nsv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nsv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nub	Src/CAPI/GL/CAPI_GLE_GL.h	2207;"	d
glVertexAttrib4Nub_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nub_Hook(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nub_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nubv	Src/CAPI/GL/CAPI_GLE_GL.h	2208;"	d
glVertexAttrib4Nubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nubv_Hook(GLuint index, const GLubyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nubv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nuiv	Src/CAPI/GL/CAPI_GLE_GL.h	2209;"	d
glVertexAttrib4Nuiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nuiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nuiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4Nusv	Src/CAPI/GL/CAPI_GLE_GL.h	2210;"	d
glVertexAttrib4Nusv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4Nusv_Hook(GLuint index, const GLushort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4Nusv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4bv	Src/CAPI/GL/CAPI_GLE_GL.h	2211;"	d
glVertexAttrib4bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4bv_Hook(GLuint index, const GLbyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4bv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4d	Src/CAPI/GL/CAPI_GLE_GL.h	2212;"	d
glVertexAttrib4d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4d_Hook(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)$/;"	f	class:OVR::GLEContext
glVertexAttrib4d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4dv	Src/CAPI/GL/CAPI_GLE_GL.h	2213;"	d
glVertexAttrib4dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4dv_Hook(GLuint index, const GLdouble *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4f	Src/CAPI/GL/CAPI_GLE_GL.h	2214;"	d
glVertexAttrib4f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4f_Hook(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)$/;"	f	class:OVR::GLEContext
glVertexAttrib4f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4fv	Src/CAPI/GL/CAPI_GLE_GL.h	2215;"	d
glVertexAttrib4fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4fv_Hook(GLuint index, const GLfloat *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4iv	Src/CAPI/GL/CAPI_GLE_GL.h	2216;"	d
glVertexAttrib4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4iv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4s	Src/CAPI/GL/CAPI_GLE_GL.h	2217;"	d
glVertexAttrib4s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4s_Hook(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)$/;"	f	class:OVR::GLEContext
glVertexAttrib4s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4sv	Src/CAPI/GL/CAPI_GLE_GL.h	2218;"	d
glVertexAttrib4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4sv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4ubv	Src/CAPI/GL/CAPI_GLE_GL.h	2219;"	d
glVertexAttrib4ubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4ubv_Hook(GLuint index, const GLubyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4ubv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2220;"	d
glVertexAttrib4uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4uiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttrib4usv	Src/CAPI/GL/CAPI_GLE_GL.h	2221;"	d
glVertexAttrib4usv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttrib4usv_Hook(GLuint index, const GLushort *v)$/;"	f	class:OVR::GLEContext
glVertexAttrib4usv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribDivisor	Src/CAPI/GL/CAPI_GLE_GL.h	2606;"	d
glVertexAttribDivisor_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribDivisor_Hook(GLuint index, GLuint divisor)$/;"	f	class:OVR::GLEContext
glVertexAttribDivisor_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI1i	Src/CAPI/GL/CAPI_GLE_GL.h	2477;"	d
glVertexAttribI1i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI1i_Hook(GLuint index, GLint x)$/;"	f	class:OVR::GLEContext
glVertexAttribI1i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI1iv	Src/CAPI/GL/CAPI_GLE_GL.h	2478;"	d
glVertexAttribI1iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI1iv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI1iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI1ui	Src/CAPI/GL/CAPI_GLE_GL.h	2479;"	d
glVertexAttribI1ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI1ui_Hook(GLuint index, GLuint x)$/;"	f	class:OVR::GLEContext
glVertexAttribI1ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI1uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2480;"	d
glVertexAttribI1uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI1uiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI1uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI2i	Src/CAPI/GL/CAPI_GLE_GL.h	2481;"	d
glVertexAttribI2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI2i_Hook(GLuint index, GLint x, GLint y)$/;"	f	class:OVR::GLEContext
glVertexAttribI2i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI2iv	Src/CAPI/GL/CAPI_GLE_GL.h	2482;"	d
glVertexAttribI2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI2iv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI2iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI2ui	Src/CAPI/GL/CAPI_GLE_GL.h	2483;"	d
glVertexAttribI2ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI2ui_Hook(GLuint index, GLuint x, GLuint y)$/;"	f	class:OVR::GLEContext
glVertexAttribI2ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI2uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2484;"	d
glVertexAttribI2uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI2uiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI2uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI3i	Src/CAPI/GL/CAPI_GLE_GL.h	2485;"	d
glVertexAttribI3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI3i_Hook(GLuint index, GLint x, GLint y, GLint z)$/;"	f	class:OVR::GLEContext
glVertexAttribI3i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI3iv	Src/CAPI/GL/CAPI_GLE_GL.h	2486;"	d
glVertexAttribI3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI3iv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI3iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI3ui	Src/CAPI/GL/CAPI_GLE_GL.h	2487;"	d
glVertexAttribI3ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI3ui_Hook(GLuint index, GLuint x, GLuint y, GLuint z)$/;"	f	class:OVR::GLEContext
glVertexAttribI3ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI3uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2488;"	d
glVertexAttribI3uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI3uiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI3uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4bv	Src/CAPI/GL/CAPI_GLE_GL.h	2489;"	d
glVertexAttribI4bv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4bv_Hook(GLuint index, const GLbyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4bv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4i	Src/CAPI/GL/CAPI_GLE_GL.h	2490;"	d
glVertexAttribI4i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4i_Hook(GLuint index, GLint x, GLint y, GLint z, GLint w)$/;"	f	class:OVR::GLEContext
glVertexAttribI4i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4iv	Src/CAPI/GL/CAPI_GLE_GL.h	2491;"	d
glVertexAttribI4iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4iv_Hook(GLuint index, const GLint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4sv	Src/CAPI/GL/CAPI_GLE_GL.h	2492;"	d
glVertexAttribI4sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4sv_Hook(GLuint index, const GLshort *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4ubv	Src/CAPI/GL/CAPI_GLE_GL.h	2493;"	d
glVertexAttribI4ubv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4ubv_Hook(GLuint index, const GLubyte *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4ubv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4ui	Src/CAPI/GL/CAPI_GLE_GL.h	2494;"	d
glVertexAttribI4ui_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4ui_Hook(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)$/;"	f	class:OVR::GLEContext
glVertexAttribI4ui_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4uiv	Src/CAPI/GL/CAPI_GLE_GL.h	2495;"	d
glVertexAttribI4uiv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4uiv_Hook(GLuint index, const GLuint *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4uiv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribI4usv	Src/CAPI/GL/CAPI_GLE_GL.h	2496;"	d
glVertexAttribI4usv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribI4usv_Hook(GLuint index, const GLushort *v)$/;"	f	class:OVR::GLEContext
glVertexAttribI4usv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribIPointer	Src/CAPI/GL/CAPI_GLE_GL.h	2497;"	d
glVertexAttribIPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribIPointer_Hook(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glVertexAttribIPointer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer_Impl;$/;"	m	class:OVR::GLEContext
glVertexAttribPointer	Src/CAPI/GL/CAPI_GLE_GL.h	2222;"	d
glVertexAttribPointer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLVERTEXATTRIBPOINTERPROC             glVertexAttribPointer;$/;"	m	namespace:OVR::CAPI::GL	file:
glVertexAttribPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexAttribPointer_Hook(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)$/;"	f	class:OVR::GLEContext
glVertexAttribPointer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer_Impl;$/;"	m	class:OVR::GLEContext
glVertexPointer	Src/CAPI/GL/CAPI_GLE.cpp	3708;"	d	file:
glVertexPointer	Src/CAPI/GL/CAPI_GLE_GL.h	1059;"	d
glVertexPointer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glVertexPointer_Hook(GLint size, GLenum type, GLsizei stride, const void *pointer)$/;"	f	class:OVR::GLEContext
glViewport	Src/CAPI/GL/CAPI_GLE.cpp	3716;"	d	file:
glViewport	Src/CAPI/GL/CAPI_GLE_GL.h	1060;"	d
glViewport	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNGLVIEWPORTPROC                        glViewport;$/;"	m	namespace:OVR::CAPI::GL	file:
glViewport_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glViewport_Hook(GLint x, GLint y, GLsizei width, GLsizei height)$/;"	f	class:OVR::GLEContext
glWindowPos2d	Src/CAPI/GL/CAPI_GLE_GL.h	1825;"	d
glWindowPos2d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2d_Hook(GLdouble x, GLdouble y)$/;"	f	class:OVR::GLEContext
glWindowPos2d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2DPROC glWindowPos2d_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2dv	Src/CAPI/GL/CAPI_GLE_GL.h	1826;"	d
glWindowPos2dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glWindowPos2dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2DVPROC glWindowPos2dv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2f	Src/CAPI/GL/CAPI_GLE_GL.h	1827;"	d
glWindowPos2f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2f_Hook(GLfloat x, GLfloat y)$/;"	f	class:OVR::GLEContext
glWindowPos2f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2FPROC glWindowPos2f_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2fv	Src/CAPI/GL/CAPI_GLE_GL.h	1828;"	d
glWindowPos2fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glWindowPos2fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2FVPROC glWindowPos2fv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2i	Src/CAPI/GL/CAPI_GLE_GL.h	1829;"	d
glWindowPos2i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2i_Hook(GLint x, GLint y)$/;"	f	class:OVR::GLEContext
glWindowPos2i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2IPROC glWindowPos2i_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2iv	Src/CAPI/GL/CAPI_GLE_GL.h	1830;"	d
glWindowPos2iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glWindowPos2iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2IVPROC glWindowPos2iv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2s	Src/CAPI/GL/CAPI_GLE_GL.h	1831;"	d
glWindowPos2s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2s_Hook(GLshort x, GLshort y)$/;"	f	class:OVR::GLEContext
glWindowPos2s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2SPROC glWindowPos2s_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos2sv	Src/CAPI/GL/CAPI_GLE_GL.h	1832;"	d
glWindowPos2sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos2sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glWindowPos2sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS2SVPROC glWindowPos2sv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3d	Src/CAPI/GL/CAPI_GLE_GL.h	1833;"	d
glWindowPos3d_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3d_Hook(GLdouble x, GLdouble y, GLdouble z)$/;"	f	class:OVR::GLEContext
glWindowPos3d_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3DPROC glWindowPos3d_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3dv	Src/CAPI/GL/CAPI_GLE_GL.h	1834;"	d
glWindowPos3dv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3dv_Hook(const GLdouble *v)$/;"	f	class:OVR::GLEContext
glWindowPos3dv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3DVPROC glWindowPos3dv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3f	Src/CAPI/GL/CAPI_GLE_GL.h	1835;"	d
glWindowPos3f_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3f_Hook(GLfloat x, GLfloat y, GLfloat z)$/;"	f	class:OVR::GLEContext
glWindowPos3f_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3FPROC glWindowPos3f_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3fv	Src/CAPI/GL/CAPI_GLE_GL.h	1836;"	d
glWindowPos3fv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3fv_Hook(const GLfloat *v)$/;"	f	class:OVR::GLEContext
glWindowPos3fv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3FVPROC glWindowPos3fv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3i	Src/CAPI/GL/CAPI_GLE_GL.h	1837;"	d
glWindowPos3i_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3i_Hook(GLint x, GLint y, GLint z)$/;"	f	class:OVR::GLEContext
glWindowPos3i_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3IPROC glWindowPos3i_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3iv	Src/CAPI/GL/CAPI_GLE_GL.h	1838;"	d
glWindowPos3iv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3iv_Hook(const GLint *v)$/;"	f	class:OVR::GLEContext
glWindowPos3iv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3IVPROC glWindowPos3iv_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3s	Src/CAPI/GL/CAPI_GLE_GL.h	1839;"	d
glWindowPos3s_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3s_Hook(GLshort x, GLshort y, GLshort z)$/;"	f	class:OVR::GLEContext
glWindowPos3s_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3SPROC glWindowPos3s_Impl;$/;"	m	class:OVR::GLEContext
glWindowPos3sv	Src/CAPI/GL/CAPI_GLE_GL.h	1840;"	d
glWindowPos3sv_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^        void OVR::GLEContext::glWindowPos3sv_Hook(const GLshort *v)$/;"	f	class:OVR::GLEContext
glWindowPos3sv_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLWINDOWPOS3SVPROC glWindowPos3sv_Impl;$/;"	m	class:OVR::GLEContext
glXChooseFBConfig	Src/CAPI/GL/CAPI_GLE_GL.h	4511;"	d
glXChooseFBConfig_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXFBConfig* OVR::GLEContext::glXChooseFBConfig_Hook(Display *dpy, int screen, const int *attrib_list, int *nelements)$/;"	f	class:OVR::GLEContext
glXChooseFBConfig_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXCHOOSEFBCONFIGPROC         glXChooseFBConfig_Impl;$/;"	m	class:OVR::GLEContext
glXCreateNewContext	Src/CAPI/GL/CAPI_GLE_GL.h	4512;"	d
glXCreateNewContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXContext OVR::GLEContext::glXCreateNewContext_Hook(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)$/;"	f	class:OVR::GLEContext
glXCreateNewContext_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXCREATENEWCONTEXTPROC       glXCreateNewContext_Impl;$/;"	m	class:OVR::GLEContext
glXCreatePbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	4513;"	d
glXCreatePbuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXPbuffer OVR::GLEContext::glXCreatePbuffer_Hook(Display *dpy, GLXFBConfig config, const int *attrib_list)$/;"	f	class:OVR::GLEContext
glXCreatePbuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXCREATEPBUFFERPROC          glXCreatePbuffer_Impl;$/;"	m	class:OVR::GLEContext
glXCreatePixmap	Src/CAPI/GL/CAPI_GLE_GL.h	4514;"	d
glXCreatePixmap_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXPixmap OVR::GLEContext::glXCreatePixmap_Hook(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)$/;"	f	class:OVR::GLEContext
glXCreatePixmap_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXCREATEPIXMAPPROC           glXCreatePixmap_Impl;$/;"	m	class:OVR::GLEContext
glXCreateWindow	Src/CAPI/GL/CAPI_GLE_GL.h	4515;"	d
glXCreateWindow_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXWindow OVR::GLEContext::glXCreateWindow_Hook(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)$/;"	f	class:OVR::GLEContext
glXCreateWindow_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXCREATEWINDOWPROC           glXCreateWindow_Impl;$/;"	m	class:OVR::GLEContext
glXDestroyPbuffer	Src/CAPI/GL/CAPI_GLE_GL.h	4516;"	d
glXDestroyPbuffer_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXDestroyPbuffer_Hook(Display *dpy, GLXPbuffer pbuf)$/;"	f	class:OVR::GLEContext
glXDestroyPbuffer_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXDESTROYPBUFFERPROC         glXDestroyPbuffer_Impl;$/;"	m	class:OVR::GLEContext
glXDestroyPixmap	Src/CAPI/GL/CAPI_GLE_GL.h	4517;"	d
glXDestroyPixmap_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXDestroyPixmap_Hook(Display *dpy, GLXPixmap pixmap)$/;"	f	class:OVR::GLEContext
glXDestroyPixmap_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXDESTROYPIXMAPPROC          glXDestroyPixmap_Impl;$/;"	m	class:OVR::GLEContext
glXDestroyWindow	Src/CAPI/GL/CAPI_GLE_GL.h	4518;"	d
glXDestroyWindow_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXDestroyWindow_Hook(Display *dpy, GLXWindow win)$/;"	f	class:OVR::GLEContext
glXDestroyWindow_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXDESTROYWINDOWPROC          glXDestroyWindow_Impl;$/;"	m	class:OVR::GLEContext
glXGetCurrentDisplay	Src/CAPI/GL/CAPI_GLE_GL.h	4404;"	d
glXGetCurrentDisplay_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			::Display* OVR::GLEContext::glXGetCurrentDisplay_Hook(void)$/;"	f	class:OVR::GLEContext
glXGetCurrentDisplay_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETCURRENTDISPLAYPROC      glXGetCurrentDisplay_Impl;$/;"	m	class:OVR::GLEContext
glXGetCurrentReadDrawable	Src/CAPI/GL/CAPI_GLE_GL.h	4519;"	d
glXGetCurrentReadDrawable_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXDrawable OVR::GLEContext::glXGetCurrentReadDrawable_Hook(void)$/;"	f	class:OVR::GLEContext
glXGetCurrentReadDrawable_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETCURRENTREADDRAWABLEPROC glXGetCurrentReadDrawable_Impl;$/;"	m	class:OVR::GLEContext
glXGetFBConfigAttrib	Src/CAPI/GL/CAPI_GLE_GL.h	4520;"	d
glXGetFBConfigAttrib_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    int OVR::GLEContext::glXGetFBConfigAttrib_Hook(Display *dpy, GLXFBConfig config, int attribute, int *value)$/;"	f	class:OVR::GLEContext
glXGetFBConfigAttrib_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETFBCONFIGATTRIBPROC      glXGetFBConfigAttrib_Impl;$/;"	m	class:OVR::GLEContext
glXGetFBConfigs	Src/CAPI/GL/CAPI_GLE_GL.h	4521;"	d
glXGetFBConfigs_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    GLXFBConfig* OVR::GLEContext::glXGetFBConfigs_Hook(Display *dpy, int screen, int *nelements)$/;"	f	class:OVR::GLEContext
glXGetFBConfigs_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETFBCONFIGSPROC           glXGetFBConfigs_Impl;$/;"	m	class:OVR::GLEContext
glXGetMscRateOML	Src/CAPI/GL/CAPI_GLE_GL.h	4569;"	d
glXGetMscRateOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^   			Bool OVR::GLEContext::glXGetMscRateOML_Hook(Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator)$/;"	f	class:OVR::GLEContext
glXGetMscRateOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETMSCRATEOMLPROC     glXGetMscRateOML_Impl;$/;"	m	class:OVR::GLEContext
glXGetSelectedEvent	Src/CAPI/GL/CAPI_GLE_GL.h	4522;"	d
glXGetSelectedEvent_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXGetSelectedEvent_Hook(Display *dpy, GLXDrawable draw, unsigned long *event_mask)$/;"	f	class:OVR::GLEContext
glXGetSelectedEvent_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETSELECTEDEVENTPROC       glXGetSelectedEvent_Impl;$/;"	m	class:OVR::GLEContext
glXGetSyncValuesOML	Src/CAPI/GL/CAPI_GLE_GL.h	4570;"	d
glXGetSyncValuesOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^   			Bool OVR::GLEContext::glXGetSyncValuesOML_Hook(Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc)$/;"	f	class:OVR::GLEContext
glXGetSyncValuesOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETSYNCVALUESOMLPROC  glXGetSyncValuesOML_Impl;$/;"	m	class:OVR::GLEContext
glXGetVisualFromFBConfig	Src/CAPI/GL/CAPI_GLE_GL.h	4523;"	d
glXGetVisualFromFBConfig_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    XVisualInfo* OVR::GLEContext::glXGetVisualFromFBConfig_Hook(Display *dpy, GLXFBConfig config)$/;"	f	class:OVR::GLEContext
glXGetVisualFromFBConfig_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXGETVISUALFROMFBCONFIGPROC  glXGetVisualFromFBConfig_Impl;$/;"	m	class:OVR::GLEContext
glXMakeContextCurrent	Src/CAPI/GL/CAPI_GLE_GL.h	4524;"	d
glXMakeContextCurrent_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    Bool OVR::GLEContext::glXMakeContextCurrent_Hook(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)$/;"	f	class:OVR::GLEContext
glXMakeContextCurrent_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXMAKECONTEXTCURRENTPROC     glXMakeContextCurrent_Impl;$/;"	m	class:OVR::GLEContext
glXQueryContext	Src/CAPI/GL/CAPI_GLE_GL.h	4525;"	d
glXQueryContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    int OVR::GLEContext::glXQueryContext_Hook(Display *dpy, GLXContext ctx, int attribute, int *value)$/;"	f	class:OVR::GLEContext
glXQueryContext_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXQUERYCONTEXTPROC           glXQueryContext_Impl;$/;"	m	class:OVR::GLEContext
glXQueryDrawable	Src/CAPI/GL/CAPI_GLE_GL.h	4526;"	d
glXQueryDrawable_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXQueryDrawable_Hook(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)$/;"	f	class:OVR::GLEContext
glXQueryDrawable_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXQUERYDRAWABLEPROC          glXQueryDrawable_Impl;$/;"	m	class:OVR::GLEContext
glXSelectEvent	Src/CAPI/GL/CAPI_GLE_GL.h	4527;"	d
glXSelectEvent_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXSelectEvent_Hook(Display *dpy, GLXDrawable draw, unsigned long event_mask)$/;"	f	class:OVR::GLEContext
glXSelectEvent_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXSELECTEVENTPROC            glXSelectEvent_Impl;$/;"	m	class:OVR::GLEContext
glXSwapBuffersMscOML	Src/CAPI/GL/CAPI_GLE_GL.h	4571;"	d
glXSwapBuffersMscOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^   			int64_t OVR::GLEContext::glXSwapBuffersMscOML_Hook(Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)$/;"	f	class:OVR::GLEContext
glXSwapBuffersMscOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXSWAPBUFFERSMSCOMLPROC glXSwapBuffersMscOML_Impl;$/;"	m	class:OVR::GLEContext
glXSwapIntervalEXT	Src/CAPI/GL/CAPI_GLE_GL.h	4554;"	d
glXSwapIntervalEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^		    void OVR::GLEContext::glXSwapIntervalEXT_Hook(Display* dpy, GLXDrawable drawable, int interval)$/;"	f	class:OVR::GLEContext
glXSwapIntervalEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXSWAPINTERVALEXTPROC glXSwapIntervalEXT_Impl;$/;"	m	class:OVR::GLEContext
glXWaitForMscOML	Src/CAPI/GL/CAPI_GLE_GL.h	4572;"	d
glXWaitForMscOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^   			Bool OVR::GLEContext::glXWaitForMscOML_Hook(Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc)$/;"	f	class:OVR::GLEContext
glXWaitForMscOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXWAITFORMSCOMLPROC     glXWaitForMscOML_Impl;$/;"	m	class:OVR::GLEContext
glXWaitForSbcOML	Src/CAPI/GL/CAPI_GLE_GL.h	4573;"	d
glXWaitForSbcOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^   			Bool OVR::GLEContext::glXWaitForSbcOML_Hook(Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc)$/;"	f	class:OVR::GLEContext
glXWaitForSbcOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNGLXWAITFORSBCOMLPROC     glXWaitForSbcOML_Impl;$/;"	m	class:OVR::GLEContext
gl_AMD_debug_output	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_AMD_debug_output;$/;"	m	class:OVR::GLEContext
gl_APPLE_aux_depth_stencil	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_aux_depth_stencil;$/;"	m	class:OVR::GLEContext
gl_APPLE_client_storage	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_client_storage;$/;"	m	class:OVR::GLEContext
gl_APPLE_element_array	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_element_array;$/;"	m	class:OVR::GLEContext
gl_APPLE_fence	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_fence;$/;"	m	class:OVR::GLEContext
gl_APPLE_float_pixels	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_float_pixels;$/;"	m	class:OVR::GLEContext
gl_APPLE_flush_buffer_range	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_flush_buffer_range;$/;"	m	class:OVR::GLEContext
gl_APPLE_object_purgeable	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_object_purgeable;$/;"	m	class:OVR::GLEContext
gl_APPLE_pixel_buffer	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_pixel_buffer;$/;"	m	class:OVR::GLEContext
gl_APPLE_rgb_422	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_rgb_422;$/;"	m	class:OVR::GLEContext
gl_APPLE_row_bytes	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_row_bytes;$/;"	m	class:OVR::GLEContext
gl_APPLE_specular_vector	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_specular_vector;$/;"	m	class:OVR::GLEContext
gl_APPLE_texture_range	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_texture_range;$/;"	m	class:OVR::GLEContext
gl_APPLE_transform_hint	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_transform_hint;$/;"	m	class:OVR::GLEContext
gl_APPLE_vertex_array_object	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_vertex_array_object;$/;"	m	class:OVR::GLEContext
gl_APPLE_vertex_array_range	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_vertex_array_range;$/;"	m	class:OVR::GLEContext
gl_APPLE_vertex_program_evaluators	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_vertex_program_evaluators;$/;"	m	class:OVR::GLEContext
gl_APPLE_ycbcr_422	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_APPLE_ycbcr_422;$/;"	m	class:OVR::GLEContext
gl_ARB_ES2_compatibility	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_ES2_compatibility;$/;"	m	class:OVR::GLEContext
gl_ARB_debug_output	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_debug_output;$/;"	m	class:OVR::GLEContext
gl_ARB_framebuffer_object	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_framebuffer_object;$/;"	m	class:OVR::GLEContext
gl_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_framebuffer_sRGB;$/;"	m	class:OVR::GLEContext
gl_ARB_texture_multisample	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_texture_multisample;$/;"	m	class:OVR::GLEContext
gl_ARB_texture_non_power_of_two	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_texture_non_power_of_two;$/;"	m	class:OVR::GLEContext
gl_ARB_timer_query	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_timer_query;$/;"	m	class:OVR::GLEContext
gl_ARB_vertex_array_object	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_ARB_vertex_array_object;$/;"	m	class:OVR::GLEContext
gl_EXT_draw_buffers2	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_EXT_draw_buffers2;$/;"	m	class:OVR::GLEContext
gl_EXT_texture_filter_anisotropic	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_EXT_texture_filter_anisotropic;$/;"	m	class:OVR::GLEContext
gl_GLX_EXT_swap_control	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_GLX_EXT_swap_control;$/;"	m	class:OVR::GLEContext
gl_GLX_OML_sync_control	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_GLX_OML_sync_control;$/;"	m	class:OVR::GLEContext
gl_KHR_debug	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_KHR_debug;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_buffer_region	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_buffer_region;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_create_context	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_create_context;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_create_context_profile	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_create_context_profile;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_create_context_robustness	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_create_context_robustness;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_extensions_string	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_extensions_string;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_framebuffer_sRGB;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_make_current_read	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_make_current_read;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_pbuffer	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_pbuffer;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_pixel_format	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_pixel_format;$/;"	m	class:OVR::GLEContext
gl_WGL_ARB_render_texture	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_ARB_render_texture;$/;"	m	class:OVR::GLEContext
gl_WGL_EXT_extensions_string	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_EXT_extensions_string;$/;"	m	class:OVR::GLEContext
gl_WGL_EXT_framebuffer_sRGB	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_EXT_framebuffer_sRGB;$/;"	m	class:OVR::GLEContext
gl_WGL_EXT_swap_control	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_EXT_swap_control;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_DX_interop	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_DX_interop;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_copy_image	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_copy_image;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_present_video	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_present_video;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_swap_group	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_swap_group;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_video_capture	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_video_capture;$/;"	m	class:OVR::GLEContext
gl_WGL_NV_video_output	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_NV_video_output;$/;"	m	class:OVR::GLEContext
gl_WGL_OML_sync_control	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_OML_sync_control;$/;"	m	class:OVR::GLEContext
gl_WGL_TYPE_RGBA_FLOAT_ARB	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WGL_TYPE_RGBA_FLOAT_ARB;$/;"	m	class:OVR::GLEContext
gl_WIN_swap_hint	Src/CAPI/GL/CAPI_GLE.h	/^        bool gl_WIN_swap_hint;$/;"	m	class:OVR::GLEContext
globalName	Src/Kernel/OVR_SharedMemory.h	/^		const char*					globalName;		\/\/ Name of the shared memory region$/;"	m	struct:OVR::SharedMemory::OpenParameters
globalWindow	Src/Util/Util_ImageWindow.h	/^	static ImageWindow*			globalWindow[4];$/;"	m	class:OVR::Util::ImageWindow
globalWindow	Src/Util/Util_ImageWindow.h	/^	static ImageWindow*			globalWindow[MaxWindows];$/;"	m	class:OVR::Util::ImageWindow
glsl2Prefix	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char glsl2Prefix[] =$/;"	m	namespace:OVR::CAPI::GL
glsl3Prefix	Src/CAPI/GL/CAPI_GL_DistortionShaders.h	/^    static const char glsl3Prefix[] =$/;"	m	namespace:OVR::CAPI::GL
glxpbufferclobber	Src/CAPI/GL/CAPI_GLE_GL.h	/^          GLXPbufferClobberEvent glxpbufferclobber; $/;"	m	union:__GLXEvent
greenBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  greenBits;$/;"	m	struct:OVR::FBConfig	file:
greyBitmap	Src/Util/Util_ImageWindow.h	/^	ID2D1Bitmap*				greyBitmap;$/;"	m	class:OVR::Util::ImageWindow
h	Src/Kernel/OVR_Math.h	/^    T   w, h;$/;"	m	class:OVR::Size
h	Src/Kernel/OVR_Math.h	/^    T w, h;$/;"	m	class:OVR::Rect
h	Src/OVR_CAPI.h	/^    int w, h;$/;"	m	struct:ovrSizei_
hEventSource	Src/Kernel/OVR_Log.h	/^    void* hEventSource;$/;"	m	class:OVR::Log
hInstD2d1	Src/Util/Util_ImageWindow.h	/^	static HINSTANCE            hInstD2d1;$/;"	m	class:OVR::Util::ImageWindow
hInstDwrite	Src/Util/Util_ImageWindow.h	/^	static HINSTANCE            hInstDwrite;$/;"	m	class:OVR::Util::ImageWindow
hStdError	Src/Util/GUIConsole.h	/^  HANDLE hStdIn, hStdOut, hStdError;$/;"	m	class:GUIConsole
hStdIn	Src/Util/GUIConsole.h	/^  HANDLE hStdIn, hStdOut, hStdError;$/;"	m	class:GUIConsole
hStdOut	Src/Util/GUIConsole.h	/^  HANDLE hStdIn, hStdOut, hStdError;$/;"	m	class:GUIConsole
hWindow	Src/Util/Util_ImageWindow.h	/^	HWND hWindow;$/;"	m	class:OVR::Util::ImageWindow
handleXError	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static int handleXError(_XDisplay* display, XErrorEvent* event)$/;"	f	namespace:OVR
hdc	Src/CAPI/GL/CAPI_GL_Util.h	/^    HDC                 hdc;$/;"	m	class:OVR::CAPI::GL::Context
healthAndSafety_tga	Src/CAPI/Textures/healthAndSafety.tga.h	/^const uint8_t healthAndSafety_tga[107525] = {$/;"	v
height	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int width, height; $/;"	m	struct:__anon1
height	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 height;$/;"	m	struct:OVR::LinuxDeviceScreen
height	Src/Util/Util_ImageWindow.h	/^		int				  height;$/;"	m	class:OVR::Util::Frame
imageData	Src/Util/Util_ImageWindow.h	/^		void*			  imageData;$/;"	m	class:OVR::Util::Frame
incarnation	Src/CAPI/GL/CAPI_GL_Util.h	/^    int                 incarnation;$/;"	m	class:OVR::CAPI::GL::Context
init	Src/Kernel/OVR_FileFILE.cpp	/^void FILEFile::init()$/;"	f	class:OVR::FILEFile
initBuffersAndShaders	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::initBuffersAndShaders()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
initOverdrive	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::initOverdrive()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
initShaders	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::initShaders()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
initialState	Src/Kernel/OVR_Threads.h	/^        ThreadState    initialState;     \/\/ $/;"	m	struct:OVR::Thread::CreateParams
initializeTimerSystem	Src/Kernel/OVR_Timer.cpp	/^void Timer::initializeTimerSystem()$/;"	f	class:OVR::Timer
initialized	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool                initialized;$/;"	m	class:OVR::CAPI::GL::Context
int16_t	Src/Kernel/OVR_Types.h	/^    typedef signed short      int16_t;$/;"	t
int32_t	Src/Kernel/OVR_Types.h	/^    typedef signed int        int32_t;$/;"	t
int64_t	Src/Kernel/OVR_Types.h	/^    typedef signed __int64    int64_t;$/;"	t
int8_t	Src/Kernel/OVR_Types.h	/^    typedef signed char        int8_t; $/;"	t
invokeSessionEvent	Src/Net/OVR_Session.cpp	/^void Session::invokeSessionEvent(void(SessionListener::*f)(Connection*), Connection* conn)$/;"	f	class:OVR::Net::Session
invokeSessionListeners	Src/Net/OVR_Session.cpp	/^int Session::invokeSessionListeners(ReceivePayload* rp)$/;"	f	class:OVR::Net::Session
isAtLeastOpenGL3	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^bool DistortionRenderer::GraphicsState::isAtLeastOpenGL3()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer::GraphicsState
isShuttingDown	Src/Kernel/OVR_Log.cpp	/^    static bool isShuttingDown;$/;"	m	class:LogSubject	file:
isShuttingDown	Src/Kernel/OVR_Log.cpp	/^bool LogSubject::isShuttingDown;$/;"	m	class:LogSubject	file:
isValid	Src/Displays/OVR_Linux_SDKWindow.h	/^    bool isValid()      {return (screen != -1);}$/;"	f	struct:OVR::LinuxDeviceScreen
isnan	Src/Kernel/OVR_Math.h	/^inline int isnan(double x) { return _isnan(x); };$/;"	f	namespace:OVR
largestDescriptor	Src/Net/OVR_Unix_Socket.h	/^    SocketHandle largestDescriptor;$/;"	m	class:OVR::Net::TCPSocketPollState
latencyStatisticsData	Src/CAPI/CAPI_LatencyStatistics.h	/^    LatencyStatisticsResults latencyStatisticsData;$/;"	m	class:OVR::CAPI::LagStatsCalculator
logSubject	Src/Kernel/OVR_Log.cpp	/^    OVR::ObserverScope<OVR::Log::LogHandler> logSubject;$/;"	m	class:LogSubject	file:
logSubjectLock	Src/Kernel/OVR_Log.cpp	/^    OVR::Lock logSubjectLock;$/;"	m	class:LogSubject	file:
log_ascii	Src/Kernel/OVR_UTF8Util.cpp	/^void    log_ascii(const char* line)$/;"	f	namespace:OVR::UTF8Util
log_ucs	Src/Kernel/OVR_UTF8Util.cpp	/^void    log_ucs(const uint32_t* line)$/;"	f	namespace:OVR::UTF8Util
mDeviceScreen	Src/Displays/OVR_Linux_SDKWindow.h	/^    LinuxDeviceScreen mDeviceScreen;$/;"	m	class:OVR::SDKWindow
mFBConfig	Src/Displays/OVR_Linux_SDKWindow.h	/^    GLXFBConfig      mFBConfig;$/;"	m	class:OVR::SDKWindow
mHash	Src/Kernel/OVR_Hash.h	/^    Container   mHash;$/;"	m	class:OVR::Hash
mXDisplay	Src/Displays/OVR_Linux_SDKWindow.h	/^    _XDisplay*       mXDisplay;$/;"	m	class:OVR::SDKWindow
mXScreen	Src/Displays/OVR_Linux_SDKWindow.h	/^    int              mXScreen;$/;"	m	class:OVR::SDKWindow
mXUniqueContext	Src/Displays/OVR_Linux_SDKWindow.h	/^    XContext         mXUniqueContext;$/;"	m	class:OVR::SDKWindow
mXVisual	Src/Displays/OVR_Linux_SDKWindow.h	/^    XVisualInfo*     mXVisual;$/;"	m	class:OVR::SDKWindow
mXWindow	Src/Displays/OVR_Linux_SDKWindow.h	/^    Window           mXWindow;$/;"	m	class:OVR::SDKWindow
main	Src/Kernel/OVR_UTF8Util.cpp	/^int main(int argc, const char* argv[])$/;"	f	namespace:OVR::UTF8Util
max_scaledVal	Src/OVR_Stereo.cpp	/^static float max_scaledVal = 0;$/;"	m	namespace:OVR	file:
minSizeBytes	Src/Kernel/OVR_SharedMemory.h	/^		int							minSizeBytes;	\/\/ Minimum number of bytes to request$/;"	m	struct:OVR::SharedMemory::OpenParameters
mirrorMode	Src/Displays/OVR_Display.h	/^	MirrorMode mirrorMode;$/;"	m	class:OVR::Display
mutex	Src/Kernel/OVR_Atomic.h	/^    pthread_mutex_t mutex;$/;"	m	class:OVR::Lock
new	Src/Kernel/OVR_Allocator.h	344;"	d
new	Src/Kernel/OVR_Allocator.h	45;"	d
new	Src/Kernel/OVR_Array.h	353;"	d
new	Src/Kernel/OVR_Array.h	357;"	d
new	Src/Kernel/OVR_Hash.h	1302;"	d
new	Src/Kernel/OVR_Hash.h	35;"	d
new	Src/Kernel/OVR_RefCount.h	183;"	d
new	Src/Kernel/OVR_RefCount.h	200;"	d
new	Src/Kernel/OVR_RefCount.h	218;"	d
new	Src/Kernel/OVR_RefCount.h	229;"	d
new	Src/Kernel/OVR_Types.h	842;"	d
nullptr	Src/Kernel/OVR_Nullptr.h	97;"	d
nullptr_get	Src/Kernel/OVR_Nullptr.h	/^        inline nullptr_t nullptr_get()$/;"	f	namespace:std
nullptr_t	Src/Kernel/OVR_Nullptr.h	/^        class nullptr_t$/;"	c	namespace:std
numIndices	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^		int                       numIndices;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
numVerts	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^		int                       numVerts;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
num_out_of_range	Src/OVR_Stereo.cpp	/^static int num_out_of_range = 0;$/;"	m	namespace:OVR	file:
num_out_of_range_over_1	Src/OVR_Stereo.cpp	/^static int num_out_of_range_over_1 = 0;$/;"	m	namespace:OVR	file:
num_out_of_range_over_2	Src/OVR_Stereo.cpp	/^static int num_out_of_range_over_2 = 0;$/;"	m	namespace:OVR	file:
num_out_of_range_over_3	Src/OVR_Stereo.cpp	/^static int num_out_of_range_over_3 = 0;$/;"	m	namespace:OVR	file:
num_total	Src/OVR_Stereo.cpp	/^static int num_total = 0;$/;"	m	namespace:OVR	file:
numberOfBitsAllocated	Src/Net/OVR_BitStream.h	/^	BitSize_t numberOfBitsAllocated;$/;"	m	class:OVR::Net::BitStream
numberOfBitsUsed	Src/Net/OVR_BitStream.h	/^	BitSize_t numberOfBitsUsed;$/;"	m	class:OVR::Net::BitStream
obtainXErrorHandler	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static void obtainXErrorHandler()$/;"	f	namespace:OVR
offsetX	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 offsetX;$/;"	m	struct:OVR::LinuxDeviceScreen
offsetY	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 offsetY;$/;"	m	struct:OVR::LinuxDeviceScreen
onSystemDestroy	Src/Service/Service_NetSessionCommon.cpp	/^void NetSessionCommon::onSystemDestroy()$/;"	f	class:OVR::Service::NetSessionCommon
onSystemShutdown	Src/Kernel/OVR_Allocator.h	/^    virtual void    onSystemShutdown() { }$/;"	f	class:OVR::Allocator
onSystemShutdown	Src/Kernel/OVR_Allocator.h	/^    virtual void onSystemShutdown()$/;"	f	class:OVR::Allocator_SingletonSupport
onThreadDestroy	Src/Service/Service_NetSessionCommon.cpp	/^void NetSessionCommon::onThreadDestroy()$/;"	f	class:OVR::Service::NetSessionCommon
openMode	Src/Kernel/OVR_SharedMemory.h	/^		SharedMemory::OpenMode		openMode;		\/\/ Creating the file or opening the file?$/;"	m	struct:OVR::SharedMemory::OpenParameters
operator !	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!() const$/;"	f	class:OVR::Delegate0
operator !	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!() const$/;"	f	class:OVR::Delegate1
operator !	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!() const$/;"	f	class:OVR::Delegate2
operator !	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!() const$/;"	f	class:OVR::Delegate3
operator !=	Src/Kernel/OVR_Array.h	/^        bool operator!=(const ConstIterator& it) const { return pArray != it.pArray || CurIndex != it.CurIndex; }$/;"	f	class:OVR::ArrayBase::ConstIterator
operator !=	Src/Kernel/OVR_Array.h	/^        bool operator!=(const Iterator& it) const { return pArray != it.pArray || CurIndex != it.CurIndex; }$/;"	f	class:OVR::ArrayBase::Iterator
operator !=	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!=(const this_type &rhs) const$/;"	f	class:OVR::Delegate0
operator !=	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!=(const this_type &rhs) const$/;"	f	class:OVR::Delegate1
operator !=	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!=(const this_type &rhs) const$/;"	f	class:OVR::Delegate2
operator !=	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator!=(const this_type &rhs) const$/;"	f	class:OVR::Delegate3
operator !=	Src/Kernel/OVR_Hash.h	/^        bool    operator != (const ConstIterator& it) const$/;"	f	struct:OVR::HashSetBase::ConstIterator
operator !=	Src/Kernel/OVR_Math.h	/^    bool     operator!= (const Size& b) const  { return w != b.w || h != b.h; }$/;"	f	class:OVR::Size
operator !=	Src/Kernel/OVR_Math.h	/^    bool     operator!= (const Vector2& b) const  { return x != b.x || y != b.y; }$/;"	f	class:OVR::Vector2
operator !=	Src/Kernel/OVR_Math.h	/^    bool     operator!= (const Vector3& b) const  { return x != b.x || y != b.y || z != b.z; }$/;"	f	class:OVR::Vector3
operator !=	Src/Kernel/OVR_Math.h	/^    bool     operator!= (const Vector4& b) const  { return x != b.x || y != b.y || z != b.z || w != b.w; }$/;"	f	class:OVR::Vector4
operator !=	Src/Kernel/OVR_Math.h	/^    bool operator != (const Rect& vp) const$/;"	f	class:OVR::Rect
operator !=	Src/Kernel/OVR_Math.h	/^    bool operator!= (const Angle& b) const    { return a != b.a; }$/;"	f	class:OVR::Angle
operator !=	Src/Kernel/OVR_Math.h	/^    bool operator!= (const Quat& b) const   { return x != b.x || y != b.y || z != b.z || w != b.w; }$/;"	f	class:OVR::Quat
operator !=	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator!=(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator !=	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE bool operator != (C *pother) const              { return pObject != pother; }$/;"	f	class:OVR::Ptr
operator !=	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE bool operator != (const Ptr &other) const       { return pObject != other.pObject; }$/;"	f	class:OVR::Ptr
operator !=	Src/Kernel/OVR_String.h	/^    bool        operator != (const String& str) const$/;"	f	class:OVR::String
operator !=	Src/Kernel/OVR_String.h	/^    bool        operator != (const char* str) const$/;"	f	class:OVR::String
operator !=	Src/Kernel/OVR_String.h	/^    bool    operator != (const NoCaseKey& strKey) const$/;"	f	class:OVR::String
operator !=	Src/Net/OVR_Unix_Socket.cpp	/^bool SockAddr::operator!=( const SockAddr& right ) const$/;"	f	class:OVR::Net::SockAddr
operator &=	Src/Kernel/OVR_Atomic.h	/^    T operator &= (T arg)$/;"	f	class:OVR::AtomicInt
operator ()	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE ret_type operator()() const$/;"	f	class:OVR::Delegate0
operator ()	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE ret_type operator()(arg1_type a1) const$/;"	f	class:OVR::Delegate1
operator ()	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE ret_type operator()(arg1_type a1, arg2_type a2) const$/;"	f	class:OVR::Delegate2
operator ()	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE ret_type operator()(arg1_type a1, arg2_type a2, arg3_type a3) const$/;"	f	class:OVR::Delegate3
operator ()	Src/Kernel/OVR_Hash.h	/^        size_t operator()(const K& data) const { return HashNode<C,U,HashF>::CalcHash(data); }$/;"	f	struct:OVR::HashNode::NodeAltHashF
operator ()	Src/Kernel/OVR_Hash.h	/^        size_t operator()(const K& data) const { return data.GetHash(); } $/;"	f	struct:OVR::HashNode::NodeHashF
operator ()	Src/Kernel/OVR_Hash.h	/^    size_t operator()(const C& data) const$/;"	f	class:OVR::FixedSizeHash
operator ()	Src/Kernel/OVR_Hash.h	/^    size_t operator()(const C& data) const$/;"	f	class:OVR::IdentityHash
operator ()	Src/Kernel/OVR_Math.h	/^	inline T &operator()(int i, int j) { return v[Index(i,j)]; }$/;"	f	class:OVR::SymMat3
operator ()	Src/Kernel/OVR_Math.h	/^	inline T operator()(int i, int j) const { return v[Index(i,j)]; }$/;"	f	class:OVR::SymMat3
operator ()	Src/Kernel/OVR_String.h	/^        size_t operator()(const NoCaseKey& data) const$/;"	f	struct:OVR::String::NoCaseHashFunctor
operator ()	Src/Kernel/OVR_String.h	/^        size_t operator()(const String& data) const$/;"	f	struct:OVR::String::HashFunctor
operator ()	Src/Kernel/OVR_String.h	/^        size_t operator()(const String& data) const$/;"	f	struct:OVR::String::NoCaseHashFunctor
operator ()	Src/Kernel/OVR_String.h	/^        size_t operator()(const StringDataPtr& data) const$/;"	f	struct:OVR::StringDataPtr::HashFunctor
operator ()	Src/Kernel/OVR_ThreadsPthread.cpp	/^        size_t operator()(const Thread* ptr)$/;"	f	struct:OVR::ThreadList::ThreadHashOp
operator *	Src/Kernel/OVR_Array.h	/^        ValueType& operator*() const    { OVR_ASSERT(pArray); return  (*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::Iterator
operator *	Src/Kernel/OVR_Array.h	/^        const ValueType& operator*() const  { OVR_ASSERT(pArray); return  (*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::ConstIterator
operator *	Src/Kernel/OVR_Hash.h	/^        C&  operator*() const$/;"	f	struct:OVR::HashSetBase::Iterator
operator *	Src/Kernel/OVR_Hash.h	/^        const C&    operator * () const$/;"	f	struct:OVR::HashSetBase::ConstIterator
operator *	Src/Kernel/OVR_Math.h	/^	Matrix3 operator* (T s) const$/;"	f	class:OVR::Matrix3
operator *	Src/Kernel/OVR_Math.h	/^	Matrix3 operator* (const Matrix3& b) const$/;"	f	class:OVR::Matrix3
operator *	Src/Kernel/OVR_Math.h	/^	Vector3<T> operator* (const Vector3<T> &b) const$/;"	f	class:OVR::Matrix3
operator *	Src/Kernel/OVR_Math.h	/^	inline SymMat3 operator*(T s) const$/;"	f	class:OVR::SymMat3
operator *	Src/Kernel/OVR_Math.h	/^    Matrix4 operator* (T s) const$/;"	f	class:OVR::Matrix4
operator *	Src/Kernel/OVR_Math.h	/^    Matrix4 operator* (const Matrix4& b) const$/;"	f	class:OVR::Matrix4
operator *	Src/Kernel/OVR_Math.h	/^    Pose operator*(const Pose& other) const   $/;"	f	class:OVR::Pose
operator *	Src/Kernel/OVR_Math.h	/^    Quat  operator*  (T s) const            { return Quat(x * s, y * s, z * s, w * s); }$/;"	f	class:OVR::Quat
operator *	Src/Kernel/OVR_Math.h	/^    Quat  operator* (const Quat& b) const   { return Quat(w * b.x + x * b.w + y * b.z - z * b.y,$/;"	f	class:OVR::Quat
operator *	Src/Kernel/OVR_Math.h	/^    Size  operator*  (T s) const            { return Size(w*s, h*s); }$/;"	f	class:OVR::Size
operator *	Src/Kernel/OVR_Math.h	/^    Size  operator*  (const Size& b) const  { return Size(w * b.w, h * b.h); }$/;"	f	class:OVR::Size
operator *	Src/Kernel/OVR_Math.h	/^    Vector2  operator*  (T s) const               { return Vector2(x*s, y*s); }$/;"	f	class:OVR::Vector2
operator *	Src/Kernel/OVR_Math.h	/^    Vector2  operator*  (const Vector2& b) const        { return Vector2(x * b.x,  y * b.y); }$/;"	f	class:OVR::Vector2
operator *	Src/Kernel/OVR_Math.h	/^    Vector3  operator*  (T s) const               { return Vector3(x*s, y*s, z*s); }$/;"	f	class:OVR::Vector3
operator *	Src/Kernel/OVR_Math.h	/^    Vector3  operator*  (const Vector3& b) const        { return Vector3(x * b.x, $/;"	f	class:OVR::Vector3
operator *	Src/Kernel/OVR_Math.h	/^    Vector4  operator*  (T s) const               { return Vector4(x*s, y*s, z*s, w*s); }$/;"	f	class:OVR::Vector4
operator *	Src/Kernel/OVR_Math.h	/^    Vector4  operator*  (const Vector4& b) const        { return Vector4(x * b.x, $/;"	f	class:OVR::Vector4
operator *	Src/Kernel/OVR_Math.h	/^inline Matrix3<T> operator*(const Matrix3<T>& a, const SymMat3<T>& b)$/;"	f	namespace:OVR
operator *	Src/Kernel/OVR_Math.h	/^inline Matrix3<T> operator*(const SymMat3<T>& a, const SymMat3<T>& b)$/;"	f	namespace:OVR
operator *	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE C& operator * () const          { return *pObject; }$/;"	f	class:OVR::Ptr
operator *	Src/Kernel/OVR_RefCount.h	/^    T& operator*() const$/;"	f	class:OVR::Pickable
operator *	Src/Tracking/Tracking_PoseState.h	/^PoseState<T> operator*(const OVR::Pose<T>& trans, const PoseState<T>& poseState)$/;"	f	namespace:OVR
operator *=	Src/Kernel/OVR_Atomic.h	/^    T operator *= (T arg)$/;"	f	class:OVR::AtomicInt
operator *=	Src/Kernel/OVR_Math.h	/^	Matrix3& operator*= (T s)$/;"	f	class:OVR::Matrix3
operator *=	Src/Kernel/OVR_Math.h	/^	Matrix3& operator*= (const Matrix3& b)$/;"	f	class:OVR::Matrix3
operator *=	Src/Kernel/OVR_Math.h	/^	inline this_type& operator*=(T s)$/;"	f	class:OVR::SymMat3
operator *=	Src/Kernel/OVR_Math.h	/^    Matrix4& operator*= (T s)$/;"	f	class:OVR::Matrix4
operator *=	Src/Kernel/OVR_Math.h	/^    Matrix4& operator*= (const Matrix4& b)$/;"	f	class:OVR::Matrix4
operator *=	Src/Kernel/OVR_Math.h	/^    Quat& operator*= (T s)                  { w *= s; x *= s; y *= s; z *= s; return *this; }$/;"	f	class:OVR::Quat
operator *=	Src/Kernel/OVR_Math.h	/^    Size& operator*= (T s)                  { w *= s; h *= s; return *this; }    $/;"	f	class:OVR::Size
operator *=	Src/Kernel/OVR_Math.h	/^    Size& operator*= (const Size& b)        { w *= b.w; h *= b.h; return *this; }$/;"	f	class:OVR::Size
operator *=	Src/Kernel/OVR_Math.h	/^    Vector2& operator*= (T s)                     { x *= s; y *= s; return *this; }$/;"	f	class:OVR::Vector2
operator *=	Src/Kernel/OVR_Math.h	/^    Vector3& operator*= (T s)                     { x *= s; y *= s; z *= s; return *this; }$/;"	f	class:OVR::Vector3
operator *=	Src/Kernel/OVR_Math.h	/^    Vector4& operator*= (T s)                     { x *= s; y *= s; z *= s; w *= s;return *this; }$/;"	f	class:OVR::Vector4
operator +	Src/Kernel/OVR_Array.h	/^        ConstIterator operator+(int delta) const$/;"	f	class:OVR::ArrayBase::ConstIterator
operator +	Src/Kernel/OVR_Array.h	/^        Iterator operator+(int delta) const$/;"	f	class:OVR::ArrayBase::Iterator
operator +	Src/Kernel/OVR_Math.h	/^	Angle  operator+  (const T& x) const      { Angle res = *this; res += x; return res; }$/;"	f	class:OVR::Angle
operator +	Src/Kernel/OVR_Math.h	/^	Matrix3 operator+ (const Matrix3& b) const$/;"	f	class:OVR::Matrix3
operator +	Src/Kernel/OVR_Math.h	/^    Angle  operator+  (const Angle& b) const  { Angle res = *this; res += b; return res; }$/;"	f	class:OVR::Angle
operator +	Src/Kernel/OVR_Math.h	/^    Matrix4 operator+ (const Matrix4& b) const$/;"	f	class:OVR::Matrix4
operator +	Src/Kernel/OVR_Math.h	/^    Quat  operator+  (const Quat& b) const  { return Quat(x + b.x, y + b.y, z + b.z, w + b.w); }$/;"	f	class:OVR::Quat
operator +	Src/Kernel/OVR_Math.h	/^    Size  operator+  (const Size& b) const  { return Size(w + b.w, h + b.h); }$/;"	f	class:OVR::Size
operator +	Src/Kernel/OVR_Math.h	/^    Vector2  operator+  (const Vector2& b) const  { return Vector2(x + b.x, y + b.y); }$/;"	f	class:OVR::Vector2
operator +	Src/Kernel/OVR_Math.h	/^    Vector3  operator+  (const Vector3& b) const  { return Vector3(x + b.x, y + b.y, z + b.z); }$/;"	f	class:OVR::Vector3
operator +	Src/Kernel/OVR_Math.h	/^    Vector4  operator+  (const Vector4& b) const  { return Vector4(x + b.x, y + b.y, z + b.z, w + b.w); }$/;"	f	class:OVR::Vector4
operator +	Src/Kernel/OVR_String.cpp	/^String   String::operator + (const String& src) const$/;"	f	class:OVR::String
operator +	Src/Kernel/OVR_String.cpp	/^String   String::operator + (const char* str) const$/;"	f	class:OVR::String
operator ++	Src/Kernel/OVR_Array.h	/^        ConstIterator operator++(int)$/;"	f	class:OVR::ArrayBase::ConstIterator
operator ++	Src/Kernel/OVR_Array.h	/^        ConstIterator& operator++()$/;"	f	class:OVR::ArrayBase::ConstIterator
operator ++	Src/Kernel/OVR_Array.h	/^        Iterator operator++(int)$/;"	f	class:OVR::ArrayBase::Iterator
operator ++	Src/Kernel/OVR_Array.h	/^        Iterator& operator++()$/;"	f	class:OVR::ArrayBase::Iterator
operator ++	Src/Kernel/OVR_Atomic.h	/^    inline T operator ++ ()      { return ExchangeAdd_Sync((T)1) + 1; }$/;"	f	class:OVR::AtomicInt
operator ++	Src/Kernel/OVR_Atomic.h	/^    inline T operator ++ (int)   { return ExchangeAdd_Sync((T)1); }$/;"	f	class:OVR::AtomicInt
operator ++	Src/Kernel/OVR_Atomic.h	/^    inline T* operator ++ ()      { return ExchangeAdd_Sync(1) + 1; }$/;"	f	class:OVR::AtomicPtr
operator ++	Src/Kernel/OVR_Atomic.h	/^    inline T* operator ++ (int)   { return ExchangeAdd_Sync(1); }$/;"	f	class:OVR::AtomicPtr
operator ++	Src/Kernel/OVR_Hash.h	/^        void    operator ++ ()$/;"	f	struct:OVR::HashSetBase::ConstIterator
operator +=	Src/Kernel/OVR_Atomic.h	/^    inline T operator += (T val) { return ExchangeAdd_Sync(val) + val; }$/;"	f	class:OVR::AtomicInt
operator +=	Src/Kernel/OVR_Atomic.h	/^    inline T* operator += (I val) { return ExchangeAdd_Sync(val) + val; }$/;"	f	class:OVR::AtomicPtr
operator +=	Src/Kernel/OVR_Math.h	/^	Angle& operator+= (const Angle& b)        { a = a + b.a; FastFixRange(); return *this; }$/;"	f	class:OVR::Angle
operator +=	Src/Kernel/OVR_Math.h	/^	Angle& operator+= (const T& x)            { a = a + x; FixRange(); return *this; }$/;"	f	class:OVR::Angle
operator +=	Src/Kernel/OVR_Math.h	/^	Matrix3& operator+= (const Matrix3& b)$/;"	f	class:OVR::Matrix3
operator +=	Src/Kernel/OVR_Math.h	/^	inline this_type& operator+=(const this_type& b)$/;"	f	class:OVR::SymMat3
operator +=	Src/Kernel/OVR_Math.h	/^    Matrix4& operator+= (const Matrix4& b)$/;"	f	class:OVR::Matrix4
operator +=	Src/Kernel/OVR_Math.h	/^    Quat& operator+= (const Quat& b)        { w += b.w; x += b.x; y += b.y; z += b.z; return *this; }$/;"	f	class:OVR::Quat
operator +=	Src/Kernel/OVR_Math.h	/^    Size& operator+= (const Size& b)        { w += b.w; h += b.h; return *this; }$/;"	f	class:OVR::Size
operator +=	Src/Kernel/OVR_Math.h	/^    Vector2& operator+= (const Vector2& b)        { x += b.x; y += b.y; return *this; }$/;"	f	class:OVR::Vector2
operator +=	Src/Kernel/OVR_Math.h	/^    Vector3& operator+= (const Vector3& b)        { x += b.x; y += b.y; z += b.z; return *this; }$/;"	f	class:OVR::Vector3
operator +=	Src/Kernel/OVR_Math.h	/^    Vector4& operator+= (const Vector4& b)        { x += b.x; y += b.y; z += b.z; w += b.w; return *this; }$/;"	f	class:OVR::Vector4
operator +=	Src/Kernel/OVR_String.cpp	/^void    String::operator += (const String& src)$/;"	f	class:OVR::String
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (char  ch)               { AppendChar(ch); }$/;"	f	class:OVR::String
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (char  ch)               { AppendChar(ch); }$/;"	f	class:OVR::StringBuffer
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (const String& src)      { AppendString(src.ToCStr(),src.GetSize()); }$/;"	f	class:OVR::StringBuffer
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (const char* psrc)       { AppendString(psrc); }$/;"	f	class:OVR::String
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (const char* psrc)       { AppendString(psrc); }$/;"	f	class:OVR::StringBuffer
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (const wchar_t* psrc)    { AppendString(psrc); }$/;"	f	class:OVR::String
operator +=	Src/Kernel/OVR_String.h	/^    void        operator += (const wchar_t* psrc)    { AppendString(psrc); }$/;"	f	class:OVR::StringBuffer
operator -	Src/Kernel/OVR_Array.h	/^        ConstIterator operator-(int delta) const$/;"	f	class:OVR::ArrayBase::ConstIterator
operator -	Src/Kernel/OVR_Array.h	/^        Iterator operator-(int delta) const$/;"	f	class:OVR::ArrayBase::Iterator
operator -	Src/Kernel/OVR_Array.h	/^        intptr_t operator-(const ConstIterator& right) const$/;"	f	class:OVR::ArrayBase::ConstIterator
operator -	Src/Kernel/OVR_Array.h	/^        intptr_t operator-(const Iterator& right) const$/;"	f	class:OVR::ArrayBase::Iterator
operator -	Src/Kernel/OVR_Math.h	/^	Angle  operator-  (const Angle& b) const  { Angle res = *this; res -= b; return res; }$/;"	f	class:OVR::Angle
operator -	Src/Kernel/OVR_Math.h	/^	Angle  operator-  (const T& x) const      { Angle res = *this; res -= x; return res; }$/;"	f	class:OVR::Angle
operator -	Src/Kernel/OVR_Math.h	/^	Matrix3 operator- (const Matrix3& b) const$/;"	f	class:OVR::Matrix3
operator -	Src/Kernel/OVR_Math.h	/^    Matrix4 operator- (const Matrix4& b) const$/;"	f	class:OVR::Matrix4
operator -	Src/Kernel/OVR_Math.h	/^    Quat  operator-  (const Quat& b) const  { return Quat(x - b.x, y - b.y, z - b.z, w - b.w); }$/;"	f	class:OVR::Quat
operator -	Src/Kernel/OVR_Math.h	/^    Size  operator-  (const Size& b) const  { return Size(w - b.w, h - b.h); }$/;"	f	class:OVR::Size
operator -	Src/Kernel/OVR_Math.h	/^    Size  operator- () const                { return Size(-w, -h); }$/;"	f	class:OVR::Size
operator -	Src/Kernel/OVR_Math.h	/^    Vector2  operator-  (const Vector2& b) const  { return Vector2(x - b.x, y - b.y); }$/;"	f	class:OVR::Vector2
operator -	Src/Kernel/OVR_Math.h	/^    Vector2  operator- () const                   { return Vector2(-x, -y); }$/;"	f	class:OVR::Vector2
operator -	Src/Kernel/OVR_Math.h	/^    Vector3  operator-  (const Vector3& b) const  { return Vector3(x - b.x, y - b.y, z - b.z); }$/;"	f	class:OVR::Vector3
operator -	Src/Kernel/OVR_Math.h	/^    Vector3  operator- () const                   { return Vector3(-x, -y, -z); }$/;"	f	class:OVR::Vector3
operator -	Src/Kernel/OVR_Math.h	/^    Vector4  operator-  (const Vector4& b) const  { return Vector4(x - b.x, y - b.y, z - b.z, w - b.w); }$/;"	f	class:OVR::Vector4
operator -	Src/Kernel/OVR_Math.h	/^    Vector4  operator- () const                   { return Vector4(-x, -y, -z, -w); }$/;"	f	class:OVR::Vector4
operator --	Src/Kernel/OVR_Array.h	/^        ConstIterator operator--(int)$/;"	f	class:OVR::ArrayBase::ConstIterator
operator --	Src/Kernel/OVR_Array.h	/^        ConstIterator& operator--()$/;"	f	class:OVR::ArrayBase::ConstIterator
operator --	Src/Kernel/OVR_Array.h	/^        Iterator operator--(int)$/;"	f	class:OVR::ArrayBase::Iterator
operator --	Src/Kernel/OVR_Array.h	/^        Iterator& operator--()$/;"	f	class:OVR::ArrayBase::Iterator
operator --	Src/Kernel/OVR_Atomic.h	/^    inline T operator -- ()      { return ExchangeAdd_Sync(((T)0)-1) - 1; }$/;"	f	class:OVR::AtomicInt
operator --	Src/Kernel/OVR_Atomic.h	/^    inline T operator -- (int)   { return ExchangeAdd_Sync(((T)0)-1); }$/;"	f	class:OVR::AtomicInt
operator --	Src/Kernel/OVR_Atomic.h	/^    inline T* operator -- ()      { return ExchangeAdd_Sync(-1) - 1; }$/;"	f	class:OVR::AtomicPtr
operator --	Src/Kernel/OVR_Atomic.h	/^    inline T* operator -- (int)   { return ExchangeAdd_Sync(-1); }$/;"	f	class:OVR::AtomicPtr
operator -=	Src/Kernel/OVR_Atomic.h	/^    inline T operator -= (T val) { return ExchangeAdd_Sync(0 - val) - val; }$/;"	f	class:OVR::AtomicInt
operator -=	Src/Kernel/OVR_Atomic.h	/^    inline T* operator -= (I val) { return operator += (-val); }$/;"	f	class:OVR::AtomicPtr
operator -=	Src/Kernel/OVR_Math.h	/^	Angle& operator-= (const Angle& b)        { a = a - b.a; FastFixRange(); return *this; }$/;"	f	class:OVR::Angle
operator -=	Src/Kernel/OVR_Math.h	/^	Angle& operator-= (const T& x)            { a = a - x; FixRange(); return *this; }$/;"	f	class:OVR::Angle
operator -=	Src/Kernel/OVR_Math.h	/^	Matrix3& operator-= (const Matrix3& b)$/;"	f	class:OVR::Matrix3
operator -=	Src/Kernel/OVR_Math.h	/^	inline this_type& operator-=(const this_type& b)$/;"	f	class:OVR::SymMat3
operator -=	Src/Kernel/OVR_Math.h	/^    Matrix4& operator-= (const Matrix4& b)$/;"	f	class:OVR::Matrix4
operator -=	Src/Kernel/OVR_Math.h	/^    Quat& operator-= (const Quat& b)        { w -= b.w; x -= b.x; y -= b.y; z -= b.z; return *this; }$/;"	f	class:OVR::Quat
operator -=	Src/Kernel/OVR_Math.h	/^    Size& operator-= (const Size& b)        { w -= b.w; h -= b.h; return *this; }$/;"	f	class:OVR::Size
operator -=	Src/Kernel/OVR_Math.h	/^    Vector2& operator-= (const Vector2& b)        { x -= b.x; y -= b.y; return *this; }$/;"	f	class:OVR::Vector2
operator -=	Src/Kernel/OVR_Math.h	/^    Vector3& operator-= (const Vector3& b)        { x -= b.x; y -= b.y; z -= b.z; return *this; }$/;"	f	class:OVR::Vector3
operator -=	Src/Kernel/OVR_Math.h	/^    Vector4& operator-= (const Vector4& b)        { x -= b.x; y -= b.y; z -= b.z; w -= b.w; return *this; }$/;"	f	class:OVR::Vector4
operator ->	Src/Kernel/OVR_Array.h	/^        ValueType* operator->() const   { OVR_ASSERT(pArray); return &(*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::Iterator
operator ->	Src/Kernel/OVR_Array.h	/^        const ValueType* operator->() const { OVR_ASSERT(pArray); return &(*pArray)[CurIndex]; }$/;"	f	class:OVR::ArrayBase::ConstIterator
operator ->	Src/Kernel/OVR_Atomic.h	/^    inline T* operator -> () const     { return this->Load_Acquire(); }$/;"	f	class:OVR::AtomicPtr
operator ->	Src/Kernel/OVR_Hash.h	/^        C*  operator->() const $/;"	f	struct:OVR::HashSetBase::Iterator
operator ->	Src/Kernel/OVR_Hash.h	/^        const C*    operator -> () const$/;"	f	struct:OVR::HashSetBase::ConstIterator
operator ->	Src/Kernel/OVR_Observer.h	/^	Observer<DelegateT>* operator->()$/;"	f	class:OVR::ObserverScope
operator ->	Src/Kernel/OVR_Observer.h	/^	const Observer<DelegateT>* operator->() const$/;"	f	class:OVR::ObserverScope
operator ->	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE C* operator -> ()  const        { return pObject; }$/;"	f	class:OVR::Ptr
operator ->	Src/Kernel/OVR_RefCount.h	/^    T* operator->() const$/;"	f	class:OVR::Pickable
operator /	Src/Kernel/OVR_Math.h	/^	Matrix3 operator\/ (T s) const$/;"	f	class:OVR::Matrix3
operator /	Src/Kernel/OVR_Math.h	/^    Matrix4 operator\/ (T s) const$/;"	f	class:OVR::Matrix4
operator /	Src/Kernel/OVR_Math.h	/^    Quat  operator\/  (T s) const            { T rcp = T(1)\/s; return Quat(x * rcp, y * rcp, z * rcp, w *rcp); }$/;"	f	class:OVR::Quat
operator /	Src/Kernel/OVR_Math.h	/^    Size  operator\/  (T s) const            { return Size(w\/s, h\/s); }$/;"	f	class:OVR::Size
operator /	Src/Kernel/OVR_Math.h	/^    Size  operator\/  (const Size& b) const  { return Size(w \/ b.w, h \/ b.h); }$/;"	f	class:OVR::Size
operator /	Src/Kernel/OVR_Math.h	/^    Vector2  operator\/  (T s) const               { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector2
operator /	Src/Kernel/OVR_Math.h	/^    Vector2  operator\/  (const Vector2& b) const        { return Vector2(x \/ b.x,  y \/ b.y); }$/;"	f	class:OVR::Vector2
operator /	Src/Kernel/OVR_Math.h	/^    Vector3  operator\/  (T s) const               { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector3
operator /	Src/Kernel/OVR_Math.h	/^    Vector3  operator\/  (const Vector3& b) const        { return Vector3(x \/ b.x, $/;"	f	class:OVR::Vector3
operator /	Src/Kernel/OVR_Math.h	/^    Vector4  operator\/  (T s) const               { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector4
operator /	Src/Kernel/OVR_Math.h	/^    Vector4  operator\/  (const Vector4& b) const        { return Vector4(x \/ b.x, $/;"	f	class:OVR::Vector4
operator /=	Src/Kernel/OVR_Atomic.h	/^    T operator \/= (T arg)$/;"	f	class:OVR::AtomicInt
operator /=	Src/Kernel/OVR_Math.h	/^	Matrix3& operator\/= (T s)$/;"	f	class:OVR::Matrix3
operator /=	Src/Kernel/OVR_Math.h	/^    Matrix4& operator\/= (T s)$/;"	f	class:OVR::Matrix4
operator /=	Src/Kernel/OVR_Math.h	/^    Quat& operator\/= (T s)                  { T rcp = T(1)\/s; w *= rcp; x *= rcp; y *= rcp; z *= rcp; return *this; }$/;"	f	class:OVR::Quat
operator /=	Src/Kernel/OVR_Math.h	/^    Size& operator\/= (T s)                  { w \/= s; h \/= s; return *this; }$/;"	f	class:OVR::Size
operator /=	Src/Kernel/OVR_Math.h	/^    Size& operator\/= (const Size& b)        { w \/= b.w; h \/= b.h; return *this; }$/;"	f	class:OVR::Size
operator /=	Src/Kernel/OVR_Math.h	/^    Vector2& operator\/= (T s)                     { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector2
operator /=	Src/Kernel/OVR_Math.h	/^    Vector3& operator\/= (T s)                     { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector3
operator /=	Src/Kernel/OVR_Math.h	/^    Vector4& operator\/= (T s)                     { T rcp = T(1)\/s;$/;"	f	class:OVR::Vector4
operator <	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator<(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator <	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE bool operator < (const Ptr &other) const       { return pObject < other.pObject; }$/;"	f	class:OVR::Ptr
operator <	Src/Kernel/OVR_String.h	/^    bool        operator <  (const String& str) const$/;"	f	class:OVR::String
operator <	Src/Kernel/OVR_String.h	/^    bool        operator <  (const char* pstr) const$/;"	f	class:OVR::String
operator <	Src/Net/OVR_Unix_Socket.cpp	/^bool SockAddr::operator<( const SockAddr& right ) const$/;"	f	class:OVR::Net::SockAddr
operator <<	Src/Net/OVR_BitStream.h	/^BitStream& operator<<(BitStream& out, templateType& c)$/;"	f	namespace:OVR::Net
operator <<	Src/Net/OVR_Unix_Socket.cpp	/^BitStream& operator<<(BitStream& out, SockAddr& in)$/;"	f	namespace:OVR::Net
operator <<=	Src/Kernel/OVR_Atomic.h	/^    T operator <<= (unsigned bits)$/;"	f	class:OVR::AtomicInt
operator <=	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator<=(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator =	Src/CAPI/CAPI_DistortionRenderer.h	/^    void operator = (const DistortionRenderer&) { }$/;"	f	class:OVR::CAPI::DistortionRenderer
operator =	Src/CAPI/CAPI_HMDState.h	/^    void operator=(const HMDState&) { } \/\/ Quiet warning.$/;"	f	class:OVR::CAPI::HMDState
operator =	Src/Displays/OVR_Display.h	/^	void operator= (const DisplaySearchHandle&) {}$/;"	f	class:OVR::DisplaySearchHandle
operator =	Src/Displays/OVR_Display.h	/^    void operator = (const Display&) { } \/\/ Quiet warning.$/;"	f	class:OVR::Display
operator =	Src/Kernel/OVR_Array.h	/^    const SelfType& operator = (const SelfType& a)   $/;"	f	class:OVR::ArrayBase
operator =	Src/Kernel/OVR_Array.h	/^    const SelfType& operator=(const SelfType& a) { BaseType::operator=(a); return *this; }$/;"	f	class:OVR::Array
operator =	Src/Kernel/OVR_Array.h	/^    const SelfType& operator=(const SelfType& a) { BaseType::operator=(a); return *this; }$/;"	f	class:OVR::ArrayCC
operator =	Src/Kernel/OVR_Array.h	/^    const SelfType& operator=(const SelfType& a) { BaseType::operator=(a); return *this; }$/;"	f	class:OVR::ArrayCPP
operator =	Src/Kernel/OVR_Array.h	/^    const SelfType& operator=(const SelfType& a) { BaseType::operator=(a); return *this; }$/;"	f	class:OVR::ArrayPOD
operator =	Src/Kernel/OVR_Atomic.h	/^    inline T operator = (T val)  { this->Store_Release(val); return val; }$/;"	f	class:OVR::AtomicInt
operator =	Src/Kernel/OVR_Atomic.h	/^    inline T* operator = (T* val)  { this->Store_Release(val); return val; }$/;"	f	class:OVR::AtomicPtr
operator =	Src/Kernel/OVR_Hash.h	/^    void    operator = (const SelfType& src)    { mHash = src.mHash; }$/;"	f	class:OVR::Hash
operator =	Src/Kernel/OVR_Hash.h	/^    void    operator = (const SelfType& src)$/;"	f	class:OVR::HashSetUncached
operator =	Src/Kernel/OVR_Hash.h	/^    void operator = (const NodeRef& src)  { First  = *src.pFirst; Second = *src.pSecond; }$/;"	f	struct:OVR::HashNode
operator =	Src/Kernel/OVR_Hash.h	/^    void operator = (const SelfType& src)                 { BaseType::operator = (src); }$/;"	f	class:OVR::HashIdentity
operator =	Src/Kernel/OVR_Hash.h	/^    void operator = (const SelfType& src)                 { BaseType::operator = (src); }$/;"	f	class:OVR::HashUncached
operator =	Src/Kernel/OVR_Hash.h	/^    void operator = (const SelfType& src)   { BaseType::Assign(src); }$/;"	f	class:OVR::HashSet
operator =	Src/Kernel/OVR_Math.h	/^	Vector4& operator= (const Vector3<T>& other)  { x=other.x; y=other.y; z=other.z; w=1; return *this; }$/;"	f	class:OVR::Vector4
operator =	Src/Kernel/OVR_Math.h	/^	void operator= (const Matrix3& b)$/;"	f	class:OVR::Matrix3
operator =	Src/Kernel/OVR_Math.h	/^	void operator= (const SymMat3<T>& b)$/;"	f	class:OVR::Matrix3
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& operator = (Pickable<C> src)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE Ptr<C>& operator = (Pickable<R> src)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE const Ptr<C>& operator = (C &src)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE const Ptr<C>& operator = (C *psrc)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE const Ptr<C>& operator = (const Ptr<C> &src)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE const Ptr<C>& operator = (const Ptr<R> &src)$/;"	f	class:OVR::Ptr
operator =	Src/Kernel/OVR_RefCount.h	/^    Pickable& operator =(const Pickable& other)$/;"	f	class:OVR::Pickable
operator =	Src/Kernel/OVR_RefCount.h	/^    void operator = (const RefCountImplCore &) { }  $/;"	f	class:OVR::RefCountImplCore
operator =	Src/Kernel/OVR_RefCount.h	/^    void operator = (const RefCountNTSImplCore &) { }  $/;"	f	class:OVR::RefCountNTSImplCore
operator =	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::operator = (const String& src)$/;"	f	class:OVR::StringBuffer
operator =	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::operator = (const StringBuffer& src)$/;"	f	class:OVR::StringBuffer
operator =	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::operator = (const char* pstr)$/;"	f	class:OVR::StringBuffer
operator =	Src/Kernel/OVR_String.cpp	/^void      StringBuffer::operator = (const wchar_t* pstr)$/;"	f	class:OVR::StringBuffer
operator =	Src/Kernel/OVR_String.cpp	/^void    String::operator = (const String& src)$/;"	f	class:OVR::String
operator =	Src/Kernel/OVR_String.cpp	/^void    String::operator = (const StringBuffer& src)$/;"	f	class:OVR::String
operator =	Src/Kernel/OVR_String.cpp	/^void    String::operator = (const char* pstr)$/;"	f	class:OVR::String
operator =	Src/Kernel/OVR_String.cpp	/^void    String::operator = (const wchar_t* pwstr)$/;"	f	class:OVR::String
operator =	Src/Kernel/OVR_StringHash.h	/^    void    operator = (const SelfType& src) { BaseType::operator = (src); }$/;"	f	class:OVR::StringHash
operator =	Src/Net/OVR_BitStream.h	/^	BitStream& operator = ( const BitStream& \/*invalid*\/ ) {$/;"	f	class:OVR::Net::BitStream
operator =	Src/OVR_Stereo.h	/^	void operator=(const HMDInfo& src)$/;"	f	class:OVR::HMDInfo
operator =	Src/Tracking/Tracking_SensorState.h	/^    inline LocklessSensorStatePadding& operator=(const LocklessSensorState& rhs)$/;"	f	struct:OVR::Tracking::LocklessSensorStatePadding
operator =	Src/Tracking/Tracking_SensorState.h	/^inline LocklessSensorState& LocklessSensorState::operator = (const LocklessSensorStatePadding& rhs)$/;"	f	class:OVR::Tracking::LocklessSensorState
operator ==	Src/CAPI/GL/CAPI_GL_HSWDisplay.cpp	/^    bool operator==(const HASWVertex& b) const$/;"	f	struct:OVR::CAPI::GL::HASWVertex
operator ==	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool operator== (const DisplayId& b) const$/;"	f	struct:OVR::CAPI::GL::DisplayId
operator ==	Src/Kernel/OVR_Array.h	/^        bool operator==(const ConstIterator& it) const { return pArray == it.pArray && CurIndex == it.CurIndex; }$/;"	f	class:OVR::ArrayBase::ConstIterator
operator ==	Src/Kernel/OVR_Array.h	/^        bool operator==(const Iterator& it) const { return pArray == it.pArray && CurIndex == it.CurIndex; }$/;"	f	class:OVR::ArrayBase::Iterator
operator ==	Src/Kernel/OVR_Color.h	/^    bool operator==(const Color& b) const$/;"	f	struct:OVR::Color
operator ==	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator==(const this_type &rhs) const$/;"	f	class:OVR::Delegate0
operator ==	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator==(const this_type &rhs) const$/;"	f	class:OVR::Delegate1
operator ==	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator==(const this_type &rhs) const$/;"	f	class:OVR::Delegate2
operator ==	Src/Kernel/OVR_Delegates.h	/^	OVR_FORCE_INLINE bool operator==(const this_type &rhs) const$/;"	f	class:OVR::Delegate3
operator ==	Src/Kernel/OVR_Hash.h	/^        bool    operator == (const ConstIterator& it) const$/;"	f	struct:OVR::HashSetBase::ConstIterator
operator ==	Src/Kernel/OVR_Hash.h	/^    bool operator == (const K& src) const   { return (First == src); }$/;"	f	struct:OVR::HashNode
operator ==	Src/Kernel/OVR_Math.h	/^	bool operator== (const Matrix3& b) const$/;"	f	class:OVR::Matrix3
operator ==	Src/Kernel/OVR_Math.h	/^	bool operator== (const Matrix4& b) const$/;"	f	class:OVR::Matrix4
operator ==	Src/Kernel/OVR_Math.h	/^	bool operator==(const Plane<T>& rhs) const$/;"	f	class:OVR::Plane
operator ==	Src/Kernel/OVR_Math.h	/^    bool     operator== (const Size& b) const  { return w == b.w && h == b.h; }$/;"	f	class:OVR::Size
operator ==	Src/Kernel/OVR_Math.h	/^    bool     operator== (const Vector2& b) const  { return x == b.x && y == b.y; }$/;"	f	class:OVR::Vector2
operator ==	Src/Kernel/OVR_Math.h	/^    bool     operator== (const Vector3& b) const  { return x == b.x && y == b.y && z == b.z; }$/;"	f	class:OVR::Vector3
operator ==	Src/Kernel/OVR_Math.h	/^    bool     operator== (const Vector4& b) const  { return x == b.x && y == b.y && z == b.z && w == b.w; }$/;"	f	class:OVR::Vector4
operator ==	Src/Kernel/OVR_Math.h	/^    bool operator == (const Rect& vp) const$/;"	f	class:OVR::Rect
operator ==	Src/Kernel/OVR_Math.h	/^    bool operator== (const Angle& b) const    { return a == b.a; }$/;"	f	class:OVR::Angle
operator ==	Src/Kernel/OVR_Math.h	/^    bool operator== (const Quat& b) const   { return x == b.x && y == b.y && z == b.z && w == b.w; }$/;"	f	class:OVR::Quat
operator ==	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator==(T U::* pTU, const std::nullptr_t)$/;"	f
operator ==	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator==(T* pT, const std::nullptr_t)$/;"	f
operator ==	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator==(const std::nullptr_t, T U::* pU)$/;"	f
operator ==	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator==(const std::nullptr_t, T* pT)$/;"	f
operator ==	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator==(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator ==	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE bool operator == (C *pother) const              { return pObject == pother; }$/;"	f	class:OVR::Ptr
operator ==	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE bool operator == (const Ptr &other) const       { return pObject == other.pObject; }$/;"	f	class:OVR::Ptr
operator ==	Src/Kernel/OVR_String.h	/^    bool        operator == (const String& str) const$/;"	f	class:OVR::String
operator ==	Src/Kernel/OVR_String.h	/^    bool        operator == (const char* str) const$/;"	f	class:OVR::String
operator ==	Src/Kernel/OVR_String.h	/^    bool    operator == (const NoCaseKey& strKey) const$/;"	f	class:OVR::String
operator ==	Src/Kernel/OVR_String.h	/^    bool operator== (const StringDataPtr& data) const $/;"	f	class:OVR::StringDataPtr
operator ==	Src/Kernel/OVR_SysFile.h	/^    bool operator== (const FileStat& stat) const$/;"	f	struct:OVR::FileStat
operator ==	Src/Net/OVR_Unix_Socket.cpp	/^bool SockAddr::operator==( const SockAddr& right ) const$/;"	f	class:OVR::Net::SockAddr
operator ==	Src/OVR_SerialFormat.cpp	/^bool DK2BinarySerialFormat::operator==(const DK2BinarySerialFormat& rhs)$/;"	f	class:OVR::DK2BinarySerialFormat
operator ==	Src/OVR_SerialFormat.cpp	/^bool DK2PrintedSerialFormat::operator==(const DK2BinarySerialFormat& rhs)$/;"	f	class:OVR::DK2PrintedSerialFormat
operator ==	Src/OVR_SerialFormat.cpp	/^bool DK2PrintedSerialFormat::operator==(const DK2PrintedSerialFormat& rhs)$/;"	f	class:OVR::DK2PrintedSerialFormat
operator >	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator>(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator >	Src/Kernel/OVR_String.h	/^    bool        operator >  (const String& str) const$/;"	f	class:OVR::String
operator >	Src/Kernel/OVR_String.h	/^    bool        operator >  (const char* pstr) const$/;"	f	class:OVR::String
operator >	Src/Net/OVR_Unix_Socket.cpp	/^bool SockAddr::operator>( const SockAddr& right ) const$/;"	f	class:OVR::Net::SockAddr
operator >=	Src/Kernel/OVR_Nullptr.h	/^    inline bool operator>=(const std::nullptr_t, const std::nullptr_t)$/;"	f
operator >>	Src/Net/OVR_BitStream.h	/^BitStream& operator>>(BitStream& in, templateType& c)$/;"	f	namespace:OVR::Net
operator >>	Src/Net/OVR_Unix_Socket.cpp	/^BitStream& operator>>(BitStream& in, SockAddr& out)$/;"	f	namespace:OVR::Net
operator >>=	Src/Kernel/OVR_Atomic.h	/^    T operator >>= (unsigned bits)$/;"	f	class:OVR::AtomicInt
operator C*	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE operator C* () const            { return pObject; }$/;"	f	class:OVR::Ptr
operator CompatibleType	Src/Kernel/OVR_Math.h	/^    operator CompatibleType () const$/;"	f	class:OVR::Quat
operator Observer<DelegateT>*	Src/Kernel/OVR_Observer.h	/^	operator Observer<DelegateT>*()$/;"	f	class:OVR::ObserverScope
operator T	Src/Kernel/OVR_Atomic.h	/^    inline operator T() const { return Value; }$/;"	f	class:OVR::AtomicValueBase
operator T C::*	Src/Kernel/OVR_Nullptr.h	/^            operator T C::*() const$/;"	f	class:std::nullptr_t
operator T*	Src/Kernel/OVR_Atomic.h	/^    inline operator T* () const        { return this->Load_Acquire(); }$/;"	f	class:OVR::AtomicPtr
operator T*	Src/Kernel/OVR_Nullptr.h	/^            operator T*() const$/;"	f	class:std::nullptr_t
operator []	Src/Kernel/OVR_Alg.h	/^	const T& operator [] (size_t i) const { return Data[i]; }$/;"	f	class:OVR::Alg::ConstArrayAdaptor
operator []	Src/Kernel/OVR_Alg.h	/^          T& operator [] (size_t i)       { return Data[i]; }$/;"	f	class:OVR::Alg::ArrayAdaptor
operator []	Src/Kernel/OVR_Alg.h	/^    const T& operator [] (size_t i) const { return Data[i]; }$/;"	f	class:OVR::Alg::ArrayAdaptor
operator []	Src/Kernel/OVR_Array.h	/^    ValueType& operator [] (size_t index)$/;"	f	class:OVR::ArrayBase
operator []	Src/Kernel/OVR_Array.h	/^    const ValueType& operator [] (size_t index) const$/;"	f	class:OVR::ArrayBase
operator []	Src/Kernel/OVR_Math.h	/^	T& operator[] (int idx)$/;"	f	class:OVR::Vector2
operator []	Src/Kernel/OVR_Math.h	/^	const T& operator[] (int idx) const$/;"	f	class:OVR::Vector2
operator []	Src/Kernel/OVR_Math.h	/^    T& operator[] (int idx)$/;"	f	class:OVR::Vector3
operator []	Src/Kernel/OVR_Math.h	/^    T& operator[] (int idx)$/;"	f	class:OVR::Vector4
operator []	Src/Kernel/OVR_Math.h	/^    const T& operator[] (int idx) const$/;"	f	class:OVR::Vector3
operator []	Src/Kernel/OVR_Math.h	/^    const T& operator[] (int idx) const$/;"	f	class:OVR::Vector4
operator []	Src/Kernel/OVR_String.h	/^    char&       operator [] (int index)$/;"	f	class:OVR::StringBuffer
operator []	Src/Kernel/OVR_String.h	/^    char&       operator [] (size_t index)$/;"	f	class:OVR::StringBuffer
operator []	Src/Kernel/OVR_String.h	/^    const char&     operator [] (int index) const $/;"	f	class:OVR::StringBuffer
operator []	Src/Kernel/OVR_String.h	/^    const char&     operator [] (int index) const$/;"	f	class:OVR::String
operator []	Src/Kernel/OVR_String.h	/^    const char&     operator [] (size_t index) const$/;"	f	class:OVR::String
operator []	Src/Kernel/OVR_String.h	/^    const char&     operator [] (size_t index) const$/;"	f	class:OVR::StringBuffer
operator []	Src/Util/Util_LatencyTest2Reader.cpp	/^const FrameTimeRecord& FrameTimeRecordSet::operator [] (int i) const$/;"	f	class:OVR::Util::FrameTimeRecordSet
operator ^=	Src/Kernel/OVR_Atomic.h	/^    T operator ^= (T arg)$/;"	f	class:OVR::AtomicInt
operator bool	Src/CAPI/GL/CAPI_GL_Util.h	/^    operator bool () const$/;"	f	struct:OVR::CAPI::GL::DisplayId
operator bool	Src/Kernel/OVR_Nullptr.h	/^                operator bool() const$/;"	f	class:std::nullptr_t
operator bool_	Src/Kernel/OVR_Nullptr.h	/^                operator bool_() const                      \/\/ is convertable to int which breaks other required functionality.$/;"	f	class:std::nullptr_t
operator const C&	Src/Kernel/OVR_Hash.h	/^        operator const C& () const              { return *pFirst; }$/;"	f	struct:OVR::HashNode::NodeRef
operator const CompatibleType&	Src/Kernel/OVR_Math.h	/^    operator const CompatibleType& () const$/;"	f	class:OVR::Rect
operator const CompatibleType&	Src/Kernel/OVR_Math.h	/^    operator const CompatibleType& () const$/;"	f	class:OVR::Size
operator const CompatibleType&	Src/Kernel/OVR_Math.h	/^    operator const CompatibleType& () const$/;"	f	class:OVR::Vector2
operator const CompatibleType&	Src/Kernel/OVR_Math.h	/^    operator const CompatibleType& () const$/;"	f	class:OVR::Vector3
operator const CompatibleType&	Src/Kernel/OVR_Math.h	/^    operator const CompatibleType& () const$/;"	f	class:OVR::Vector4
operator const char*	Src/Kernel/OVR_String.h	/^    operator const char*() const        { return (pData) ? pData : ""; }$/;"	f	class:OVR::StringBuffer
operator const char*	Src/Kernel/OVR_String.h	/^    operator const char*() const        { return GetData()->Data; }$/;"	f	class:OVR::String
operator const typename CompatibleTypes<Matrix3<T> >::Type	Src/Kernel/OVR_Math.h	/^	operator const typename CompatibleTypes<Matrix3<T> >::Type () const$/;"	f	class:OVR::Matrix3
operator delete	Src/Kernel/OVR_Allocator.h	/^    OVR_FORCE_INLINE void  operator delete  (void *, void *)     { }$/;"	f
operator delete	Src/Kernel/OVR_Atomic.h	/^    void    operator delete(void*) {}$/;"	f	class:OVR::Lock
operator new	Src/Kernel/OVR_Allocator.h	/^    OVR_FORCE_INLINE void* operator new     (size_t n, void *ptr) { OVR_UNUSED(n); return ptr; }$/;"	f
operator new	Src/Kernel/OVR_Types.h	/^inline void* operator new (size_t size, const char* filename, int line)$/;"	f
operator ovrFovPort	Src/OVR_CAPI.cpp	/^FovPort::operator ovrFovPort () const$/;"	f	class:OVR::FovPort
operator ovrSensorData	Src/OVR_CAPI.cpp	/^SensorDataType::operator ovrSensorData () const$/;"	f	class:OVR::SensorDataType
operator ovrTrackingState	Src/OVR_CAPI.cpp	/^TrackingState::operator ovrTrackingState() const$/;"	f	class:OVR::TrackingState
operator typename CompatibleTypes<Matrix4<T> >::Type	Src/Kernel/OVR_Math.h	/^    operator typename CompatibleTypes<Matrix4<T> >::Type () const$/;"	f	class:OVR::Matrix4
operator typename CompatibleTypes<Pose<T> >::Type	Src/Kernel/OVR_Math.h	/^    operator typename CompatibleTypes<Pose<T> >::Type () const$/;"	f	class:OVR::Pose
operator typename CompatibleTypes<PoseState<T> >::Type	Src/Tracking/Tracking_PoseState.h	/^	operator typename CompatibleTypes<PoseState<T> >::Type() const$/;"	f	class:OVR::PoseState
operator |=	Src/Kernel/OVR_Atomic.h	/^    T operator |= (T arg)$/;"	f	class:OVR::AtomicInt
ovrBool	Src/OVR_CAPI.h	/^typedef char ovrBool;$/;"	t
ovrDistortionCap_Chromatic	Src/OVR_CAPI.h	/^    ovrDistortionCap_Chromatic          = 0x01,     \/\/\/ Supports chromatic aberration correction.$/;"	e	enum:__anon9
ovrDistortionCap_FlipInput	Src/OVR_CAPI.h	/^    ovrDistortionCap_FlipInput          = 0x20,     \/\/\/ Flip the vertical texture coordinate of input images.$/;"	e	enum:__anon9
ovrDistortionCap_HqDistortion	Src/OVR_CAPI.h	/^    ovrDistortionCap_HqDistortion       = 0x100,    \/\/\/ High-quality sampling of distortion buffer for anti-aliasing$/;"	e	enum:__anon9
ovrDistortionCap_LinuxDevFullscreen	Src/OVR_CAPI.h	/^    ovrDistortionCap_LinuxDevFullscreen = 0x200,    \/\/\/ Indicates window is fullscreen on a device when set. The SDK will automatically apply distortion mesh rotation if needed.$/;"	e	enum:__anon9
ovrDistortionCap_NoRestore	Src/OVR_CAPI.h	/^    ovrDistortionCap_NoRestore          = 0x10,     \/\/\/ Do not save and restore the graphics state when rendering distortion.$/;"	e	enum:__anon9
ovrDistortionCap_Overdrive	Src/OVR_CAPI.h	/^    ovrDistortionCap_Overdrive          = 0x80,     \/\/\/ Overdrive brightness transitions to reduce artifacts on DK2+ displays$/;"	e	enum:__anon9
ovrDistortionCap_ProfileNoTimewarpSpinWaits	Src/OVR_CAPI.h	/^    ovrDistortionCap_ProfileNoTimewarpSpinWaits = 0x10000,  \/\/\/ Use when profiling with timewarp to remove false positives$/;"	e	enum:__anon9
ovrDistortionCap_SRGB	Src/OVR_CAPI.h	/^    ovrDistortionCap_SRGB               = 0x40,     \/\/\/ Assume input images are in sRGB gamma-corrected color space.$/;"	e	enum:__anon9
ovrDistortionCap_TimeWarp	Src/OVR_CAPI.h	/^    ovrDistortionCap_TimeWarp           = 0x02,     \/\/\/ Supports timewarp.$/;"	e	enum:__anon9
ovrDistortionCap_Vignette	Src/OVR_CAPI.h	/^    ovrDistortionCap_Vignette           = 0x08,     \/\/\/ Supports vignetting around the edges of the view.$/;"	e	enum:__anon9
ovrDistortionCaps	Src/OVR_CAPI.h	/^} ovrDistortionCaps;$/;"	t	typeref:enum:__anon9
ovrDistortionMesh	Src/OVR_CAPI.h	/^} ovrDistortionMesh;$/;"	t	typeref:struct:ovrDistortionMesh_
ovrDistortionMesh_	Src/OVR_CAPI.h	/^typedef struct ovrDistortionMesh_$/;"	s
ovrDistortionVertex	Src/OVR_CAPI.h	/^} ovrDistortionVertex;$/;"	t	typeref:struct:ovrDistortionVertex_
ovrDistortionVertex_	Src/OVR_CAPI.h	/^typedef struct ovrDistortionVertex_$/;"	s
ovrEyeRenderDesc	Src/OVR_CAPI.h	/^} ovrEyeRenderDesc;$/;"	t	typeref:struct:ovrEyeRenderDesc_
ovrEyeRenderDesc_	Src/OVR_CAPI.h	/^typedef struct ovrEyeRenderDesc_$/;"	s
ovrEyeType	Src/OVR_CAPI.h	/^} ovrEyeType;$/;"	t	typeref:enum:__anon10
ovrEye_Count	Src/OVR_CAPI.h	/^    ovrEye_Count = 2$/;"	e	enum:__anon10
ovrEye_Left	Src/OVR_CAPI.h	/^    ovrEye_Left  = 0,$/;"	e	enum:__anon10
ovrEye_Right	Src/OVR_CAPI.h	/^    ovrEye_Right = 1,$/;"	e	enum:__anon10
ovrFovPort	Src/OVR_CAPI.h	/^} ovrFovPort;$/;"	t	typeref:struct:ovrFovPort_
ovrFovPort	Src/OVR_Stereo.h	/^typedef struct ovrFovPort_ ovrFovPort;$/;"	t	typeref:struct:ovrFovPort_
ovrFovPort_	Src/OVR_CAPI.h	/^typedef struct ovrFovPort_$/;"	s
ovrFrameTiming	Src/OVR_CAPI.h	/^} ovrFrameTiming;$/;"	t	typeref:struct:ovrFrameTiming_
ovrFrameTiming_	Src/OVR_CAPI.h	/^typedef struct ovrFrameTiming_$/;"	s
ovrGLConfig	Src/OVR_CAPI_GL.h	/^union ovrGLConfig$/;"	u
ovrGLConfigData	Src/OVR_CAPI_GL.h	/^} ovrGLConfigData;$/;"	t	typeref:struct:ovrGLConfigData_s
ovrGLConfigData_s	Src/OVR_CAPI_GL.h	/^typedef struct ovrGLConfigData_s$/;"	s
ovrGLTexture	Src/OVR_CAPI_GL.h	/^} ovrGLTexture;$/;"	t	typeref:union:ovrGLTexture_s
ovrGLTextureData	Src/OVR_CAPI_GL.h	/^} ovrGLTextureData;$/;"	t	typeref:struct:ovrGLTextureData_s
ovrGLTextureData_s	Src/OVR_CAPI_GL.h	/^typedef struct ovrGLTextureData_s$/;"	s
ovrGLTexture_s	Src/OVR_CAPI_GL.h	/^typedef union ovrGLTexture_s$/;"	u
ovrHSWDisplayState	Src/OVR_CAPI.h	/^} ovrHSWDisplayState;$/;"	t	typeref:struct:ovrHSWDisplayState_
ovrHSWDisplayState_	Src/OVR_CAPI.h	/^typedef struct ovrHSWDisplayState_$/;"	s
ovrHmd	Src/OVR_CAPI.h	/^typedef const ovrHmdDesc * ovrHmd;$/;"	t
ovrHmdCap_Available	Src/OVR_CAPI.h	/^    ovrHmdCap_Available         = 0x0002,   \/\/\/ The HMD and its sensor are available for ownership use.$/;"	e	enum:__anon7
ovrHmdCap_Captured	Src/OVR_CAPI.h	/^    ovrHmdCap_Captured          = 0x0004,   \/\/\/ Set to 'true' if we captured ownership of this HMD.$/;"	e	enum:__anon7
ovrHmdCap_DisplayOff	Src/OVR_CAPI.h	/^    ovrHmdCap_DisplayOff        = 0x0040,   \/\/\/ Turns off HMD screen and output (only if 'ExtendDesktop' is off).$/;"	e	enum:__anon7
ovrHmdCap_DynamicPrediction	Src/OVR_CAPI.h	/^    ovrHmdCap_DynamicPrediction = 0x0200,   \/\/\/ Adjust prediction dynamically based on internally measured latency.$/;"	e	enum:__anon7
ovrHmdCap_ExtendDesktop	Src/OVR_CAPI.h	/^    ovrHmdCap_ExtendDesktop     = 0x0008,   \/\/\/ (read only) Means the display driver is in compatibility mode.$/;"	e	enum:__anon7
ovrHmdCap_LowPersistence	Src/OVR_CAPI.h	/^    ovrHmdCap_LowPersistence    = 0x0080,   \/\/\/ HMD supports low persistence mode.$/;"	e	enum:__anon7
ovrHmdCap_NoMirrorToWindow	Src/OVR_CAPI.h	/^    ovrHmdCap_NoMirrorToWindow  = 0x2000,   \/\/\/ Disables mirroring of HMD output to the window. This may improve $/;"	e	enum:__anon7
ovrHmdCap_NoVSync	Src/OVR_CAPI.h	/^    ovrHmdCap_NoVSync           = 0x1000,   \/\/\/ Support rendering without VSync for debugging.$/;"	e	enum:__anon7
ovrHmdCap_Present	Src/OVR_CAPI.h	/^    ovrHmdCap_Present           = 0x0001,   \/\/\/ The HMD is plugged in and detected by the system.$/;"	e	enum:__anon7
ovrHmdCap_Service_Mask	Src/OVR_CAPI.h	/^    ovrHmdCap_Service_Mask      = 0x23F0$/;"	e	enum:__anon7
ovrHmdCap_Writable_Mask	Src/OVR_CAPI.h	/^    ovrHmdCap_Writable_Mask     = 0x33F0,$/;"	e	enum:__anon7
ovrHmdCaps	Src/OVR_CAPI.h	/^} ovrHmdCaps;$/;"	t	typeref:enum:__anon7
ovrHmdDesc	Src/OVR_CAPI.h	/^} ovrHmdDesc;$/;"	t	typeref:struct:ovrHmdDesc_
ovrHmdDesc_	Src/OVR_CAPI.h	/^typedef struct ovrHmdDesc_$/;"	s
ovrHmdStruct	Src/CAPI/CAPI_HMDState.h	/^struct ovrHmdStruct { };$/;"	s
ovrHmdType	Src/OVR_CAPI.h	/^} ovrHmdType;$/;"	t	typeref:enum:__anon6
ovrHmd_AddDistortionTimeMeasurement	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_AddDistortionTimeMeasurement(ovrHmd hmddesc, double distortionTimeSeconds)$/;"	f
ovrHmd_AttachToWindow	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_AttachToWindow( ovrHmd hmd, void* window,$/;"	f
ovrHmd_BeginFrame	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrFrameTiming ovrHmd_BeginFrame(ovrHmd hmddesc, unsigned int frameIndex)$/;"	f
ovrHmd_BeginFrameTiming	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrFrameTiming ovrHmd_BeginFrameTiming(ovrHmd hmddesc, unsigned int frameIndex)$/;"	f
ovrHmd_ConfigureRendering	Src/OVR_CAPI.cpp	/^ovrBool ovrHmd_ConfigureRendering( ovrHmd hmddesc,$/;"	f
ovrHmd_ConfigureTracking	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_ConfigureTracking(ovrHmd hmddesc, unsigned int supportedCaps,$/;"	f
ovrHmd_Create	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrHmd ovrHmd_Create(int index)$/;"	f
ovrHmd_CreateDebug	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrHmd ovrHmd_CreateDebug(ovrHmdType type)$/;"	f
ovrHmd_CreateDistortionMesh	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_CreateDistortionMesh( ovrHmd hmddesc,$/;"	f
ovrHmd_CreateDistortionMeshInternal	Src/CAPI/CAPI_HMDState.cpp	/^ovrBool ovrHmd_CreateDistortionMeshInternal( ovrHmdStruct *  hmd,$/;"	f	namespace:OVR::CAPI
ovrHmd_DK1	Src/OVR_CAPI.h	/^    ovrHmd_DK1              = 3,$/;"	e	enum:__anon6
ovrHmd_DK2	Src/OVR_CAPI.h	/^    ovrHmd_DK2              = 6,$/;"	e	enum:__anon6
ovrHmd_DKHD	Src/OVR_CAPI.h	/^    ovrHmd_DKHD             = 4,$/;"	e	enum:__anon6
ovrHmd_Destroy	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_Destroy(ovrHmd hmddesc)$/;"	f
ovrHmd_DestroyDistortionMesh	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_DestroyDistortionMesh(ovrDistortionMesh* meshData)$/;"	f
ovrHmd_Detect	Src/OVR_CAPI.cpp	/^OVR_EXPORT int ovrHmd_Detect()$/;"	f
ovrHmd_DismissHSWDisplay	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_DismissHSWDisplay(ovrHmd hmd)$/;"	f
ovrHmd_EndFrame	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_EndFrame(ovrHmd hmddesc,$/;"	f
ovrHmd_EndFrameTiming	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_EndFrameTiming(ovrHmd hmddesc)$/;"	f
ovrHmd_GetBool	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_GetBool(ovrHmd hmddesc,$/;"	f
ovrHmd_GetEnabledCaps	Src/OVR_CAPI.cpp	/^OVR_EXPORT unsigned int ovrHmd_GetEnabledCaps(ovrHmd hmddesc)$/;"	f
ovrHmd_GetEyePoses	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_GetEyePoses(ovrHmd hmd, unsigned int frameIndex, ovrVector3f hmdToEyeViewOffset[2],$/;"	f
ovrHmd_GetEyeTimewarpMatrices	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_GetEyeTimewarpMatrices(ovrHmd hmddesc, ovrEyeType eye,$/;"	f
ovrHmd_GetFloat	Src/OVR_CAPI.cpp	/^OVR_EXPORT float ovrHmd_GetFloat(ovrHmd hmddesc,$/;"	f
ovrHmd_GetFloatArray	Src/OVR_CAPI.cpp	/^OVR_EXPORT unsigned int ovrHmd_GetFloatArray(ovrHmd hmddesc,$/;"	f
ovrHmd_GetFovTextureSize	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrSizei ovrHmd_GetFovTextureSize(ovrHmd hmddesc, ovrEyeType eye, ovrFovPort fov,$/;"	f
ovrHmd_GetFrameTiming	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrFrameTiming ovrHmd_GetFrameTiming(ovrHmd hmddesc, unsigned int frameIndex)$/;"	f
ovrHmd_GetHSWDisplayState	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_GetHSWDisplayState(ovrHmd hmd, ovrHSWDisplayState *hswDisplayState)$/;"	f
ovrHmd_GetHmdPosePerEye	Src/OVR_CAPI.cpp	/^ovrPosef ovrHmd_GetHmdPosePerEye(ovrHmd hmd, ovrEyeType eye)$/;"	f
ovrHmd_GetInt	Src/OVR_CAPI.cpp	/^OVR_EXPORT int ovrHmd_GetInt(ovrHmd hmddesc,$/;"	f
ovrHmd_GetLastError	Src/OVR_CAPI.cpp	/^OVR_EXPORT const char* ovrHmd_GetLastError(ovrHmd hmddesc)$/;"	f
ovrHmd_GetLatencyTest2DrawColor	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_GetLatencyTest2DrawColor(ovrHmd hmddesc, unsigned char rgbColorOut[3])$/;"	f
ovrHmd_GetLatencyTestDrawColor	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_GetLatencyTestDrawColor(ovrHmd hmddesc, unsigned char rgbColorOut[3])$/;"	f
ovrHmd_GetLatencyTestResult	Src/OVR_CAPI.cpp	/^OVR_EXPORT const char*  ovrHmd_GetLatencyTestResult(ovrHmd hmddesc)$/;"	f
ovrHmd_GetMeasuredLatencyTest2	Src/OVR_CAPI.cpp	/^OVR_EXPORT double ovrHmd_GetMeasuredLatencyTest2(ovrHmd hmddesc)$/;"	f
ovrHmd_GetRenderDesc	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrEyeRenderDesc ovrHmd_GetRenderDesc(ovrHmd hmddesc,$/;"	f
ovrHmd_GetRenderScaleAndOffset	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_GetRenderScaleAndOffset( ovrFovPort fov,$/;"	f
ovrHmd_GetString	Src/OVR_CAPI.cpp	/^OVR_EXPORT const char* ovrHmd_GetString(ovrHmd hmddesc,$/;"	f
ovrHmd_GetTrackingState	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrTrackingState ovrHmd_GetTrackingState(ovrHmd hmddesc, double absTime)$/;"	f
ovrHmd_None	Src/OVR_CAPI.h	/^    ovrHmd_None             = 0,$/;"	e	enum:__anon6
ovrHmd_Other	Src/OVR_CAPI.h	/^    ovrHmd_Other             \/\/ Some HMD other then the one in the enumeration.$/;"	e	enum:__anon6
ovrHmd_ProcessLatencyTest	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_ProcessLatencyTest(ovrHmd hmddesc, unsigned char rgbColorOut[3])$/;"	f
ovrHmd_RecenterPose	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_RecenterPose(ovrHmd hmddesc)$/;"	f
ovrHmd_RegisterPostDistortionCallback	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_RegisterPostDistortionCallback(ovrHmd hmddesc, PostDistortionCallback callback)$/;"	f
ovrHmd_ResetFrameTiming	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_ResetFrameTiming(ovrHmd hmddesc,  unsigned int frameIndex) $/;"	f
ovrHmd_SetBool	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_SetBool(ovrHmd hmddesc,$/;"	f
ovrHmd_SetEnabledCaps	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovrHmd_SetEnabledCaps(ovrHmd hmddesc, unsigned int capsBits)$/;"	f
ovrHmd_SetFloat	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_SetFloat(ovrHmd hmddesc,$/;"	f
ovrHmd_SetFloatArray	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_SetFloatArray(ovrHmd hmddesc,$/;"	f
ovrHmd_SetInt	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_SetInt(ovrHmd hmddesc,$/;"	f
ovrHmd_SetString	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_SetString(ovrHmd hmddesc,$/;"	f
ovrHmd_SetVsync	Src/OVR_CAPI.cpp	/^void ovrHmd_SetVsync(ovrHmd hmddesc, ovrBool vsync)$/;"	f
ovrHmd_StartPerfLog	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_StartPerfLog(ovrHmd hmd, const char* fileName, const char* userData1)$/;"	f
ovrHmd_StopPerfLog	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovrHmd_StopPerfLog(ovrHmd hmd)$/;"	f
ovrMatrix3d	Src/Kernel/OVR_Math.h	/^typedef struct ovrMatrix3d_ ovrMatrix3d;$/;"	t	typeref:struct:ovrMatrix3d_
ovrMatrix4f	Src/Kernel/OVR_Math.h	/^typedef struct ovrMatrix4f_ ovrMatrix4f;$/;"	t	typeref:struct:ovrMatrix4f_
ovrMatrix4f	Src/OVR_CAPI.h	/^} ovrMatrix4f;$/;"	t	typeref:struct:ovrMatrix4f_
ovrMatrix4f_	Src/OVR_CAPI.h	/^typedef struct ovrMatrix4f_$/;"	s
ovrMatrix4f_OrthoSubProjection	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrMatrix4f ovrMatrix4f_OrthoSubProjection(ovrMatrix4f projection, ovrVector2f orthoScale,$/;"	f
ovrMatrix4f_Projection	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrMatrix4f ovrMatrix4f_Projection(ovrFovPort fov, float znear, float zfar, ovrBool rightHanded)$/;"	f
ovrPoseStated	Src/Kernel/OVR_Math.h	/^typedef struct ovrPoseStated_ ovrPoseStated;$/;"	t	typeref:struct:ovrPoseStated_
ovrPoseStatef	Src/Kernel/OVR_Math.h	/^typedef struct ovrPoseStatef_ ovrPoseStatef;$/;"	t	typeref:struct:ovrPoseStatef_
ovrPoseStatef	Src/OVR_CAPI.h	/^} ovrPoseStatef;$/;"	t	typeref:struct:ovrPoseStatef_
ovrPoseStatef	Src/Tracking/Tracking_SensorState.h	/^typedef struct ovrPoseStatef_ ovrPoseStatef;$/;"	t	typeref:struct:ovrPoseStatef_
ovrPoseStatef_	Src/OVR_CAPI.h	/^typedef struct ovrPoseStatef_$/;"	s
ovrPosed	Src/Kernel/OVR_Math.h	/^typedef struct ovrPosed_ ovrPosed;$/;"	t	typeref:struct:ovrPosed_
ovrPosef	Src/Kernel/OVR_Math.h	/^typedef struct ovrPosef_ ovrPosef;$/;"	t	typeref:struct:ovrPosef_
ovrPosef	Src/OVR_CAPI.h	/^} ovrPosef;$/;"	t	typeref:struct:ovrPosef_
ovrPosef_	Src/OVR_CAPI.h	/^typedef struct ovrPosef_$/;"	s
ovrQuatd	Src/Kernel/OVR_Math.h	/^typedef struct ovrQuatd_ ovrQuatd;$/;"	t	typeref:struct:ovrQuatd_
ovrQuatf	Src/Kernel/OVR_Math.h	/^typedef struct ovrQuatf_ ovrQuatf;$/;"	t	typeref:struct:ovrQuatf_
ovrQuatf	Src/OVR_CAPI.h	/^} ovrQuatf;$/;"	t	typeref:struct:ovrQuatf_
ovrQuatf_	Src/OVR_CAPI.h	/^typedef struct ovrQuatf_$/;"	s
ovrRecti	Src/Kernel/OVR_Math.h	/^typedef struct ovrRecti_ ovrRecti;$/;"	t	typeref:struct:ovrRecti_
ovrRecti	Src/OVR_CAPI.h	/^} ovrRecti;$/;"	t	typeref:struct:ovrRecti_
ovrRecti	Src/OVR_Stereo.h	/^typedef struct ovrRecti_ ovrRecti;$/;"	t	typeref:struct:ovrRecti_
ovrRecti_	Src/OVR_CAPI.h	/^typedef struct ovrRecti_$/;"	s
ovrRenderAPIConfig	Src/OVR_CAPI.h	/^} ovrRenderAPIConfig;$/;"	t	typeref:struct:ovrRenderAPIConfig_
ovrRenderAPIConfigHeader	Src/OVR_CAPI.h	/^} ovrRenderAPIConfigHeader;$/;"	t	typeref:struct:ovrRenderAPIConfigHeader_
ovrRenderAPIConfigHeader_	Src/OVR_CAPI.h	/^typedef struct ovrRenderAPIConfigHeader_$/;"	s
ovrRenderAPIConfig_	Src/OVR_CAPI.h	/^typedef struct ovrRenderAPIConfig_$/;"	s
ovrRenderAPIType	Src/OVR_CAPI.h	/^} ovrRenderAPIType;$/;"	t	typeref:enum:__anon12
ovrRenderAPI_Android_GLES	Src/OVR_CAPI.h	/^    ovrRenderAPI_Android_GLES,  \/\/ May include extra native window pointers, etc.$/;"	e	enum:__anon12
ovrRenderAPI_Count	Src/OVR_CAPI.h	/^    ovrRenderAPI_Count$/;"	e	enum:__anon12
ovrRenderAPI_D3D10	Src/OVR_CAPI.h	/^    ovrRenderAPI_D3D10,$/;"	e	enum:__anon12
ovrRenderAPI_D3D11	Src/OVR_CAPI.h	/^    ovrRenderAPI_D3D11,$/;"	e	enum:__anon12
ovrRenderAPI_D3D9	Src/OVR_CAPI.h	/^    ovrRenderAPI_D3D9,$/;"	e	enum:__anon12
ovrRenderAPI_None	Src/OVR_CAPI.h	/^    ovrRenderAPI_None,$/;"	e	enum:__anon12
ovrRenderAPI_OpenGL	Src/OVR_CAPI.h	/^    ovrRenderAPI_OpenGL,$/;"	e	enum:__anon12
ovrSensorData	Src/OVR_CAPI.h	/^} ovrSensorData;$/;"	t	typeref:struct:ovrSensorData_
ovrSensorData	Src/Sensors/OVR_DeviceConstants.h	/^typedef struct ovrSensorData_ ovrSensorData;$/;"	t	typeref:struct:ovrSensorData_
ovrSensorData_	Src/OVR_CAPI.h	/^typedef struct ovrSensorData_$/;"	s
ovrSizef	Src/Kernel/OVR_Math.h	/^typedef struct ovrSizef_ ovrSizef;$/;"	t	typeref:struct:ovrSizef_
ovrSizei	Src/Kernel/OVR_Math.h	/^typedef struct ovrSizei_ ovrSizei;$/;"	t	typeref:struct:ovrSizei_
ovrSizei	Src/OVR_CAPI.h	/^} ovrSizei;$/;"	t	typeref:struct:ovrSizei_
ovrSizei_	Src/OVR_CAPI.h	/^typedef struct ovrSizei_$/;"	s
ovrStatusBits	Src/OVR_CAPI.h	/^} ovrStatusBits;$/;"	t	typeref:enum:__anon11
ovrStatus_CameraPoseTracked	Src/OVR_CAPI.h	/^    ovrStatus_CameraPoseTracked     = 0x0004,   \/\/\/ Camera pose is currently tracked.$/;"	e	enum:__anon11
ovrStatus_HmdConnected	Src/OVR_CAPI.h	/^    ovrStatus_HmdConnected          = 0x0080    \/\/\/ HMD Display is available and connected.$/;"	e	enum:__anon11
ovrStatus_OrientationTracked	Src/OVR_CAPI.h	/^    ovrStatus_OrientationTracked    = 0x0001,   \/\/\/ Orientation is currently tracked (connected and in use).$/;"	e	enum:__anon11
ovrStatus_PositionConnected	Src/OVR_CAPI.h	/^    ovrStatus_PositionConnected     = 0x0020,   \/\/\/ Position tracking hardware is connected.$/;"	e	enum:__anon11
ovrStatus_PositionTracked	Src/OVR_CAPI.h	/^    ovrStatus_PositionTracked       = 0x0002,   \/\/\/ Position is currently tracked (false if out of range).$/;"	e	enum:__anon11
ovrTexture	Src/OVR_CAPI.h	/^} ovrTexture;$/;"	t	typeref:struct:ovrTexture_
ovrTextureHeader	Src/OVR_CAPI.h	/^} ovrTextureHeader;$/;"	t	typeref:struct:ovrTextureHeader_
ovrTextureHeader_	Src/OVR_CAPI.h	/^typedef struct ovrTextureHeader_$/;"	s
ovrTexture_	Src/OVR_CAPI.h	/^typedef struct ovrTexture_$/;"	s
ovrTrackingCap_Idle	Src/OVR_CAPI.h	/^    ovrTrackingCap_Idle             = 0x0100,$/;"	e	enum:__anon8
ovrTrackingCap_MagYawCorrection	Src/OVR_CAPI.h	/^    ovrTrackingCap_MagYawCorrection = 0x0020,   \/\/\/ Supports yaw drift correction via a magnetometer or other means.$/;"	e	enum:__anon8
ovrTrackingCap_Orientation	Src/OVR_CAPI.h	/^    ovrTrackingCap_Orientation      = 0x0010,   \/\/\/ Supports orientation tracking (IMU).$/;"	e	enum:__anon8
ovrTrackingCap_Position	Src/OVR_CAPI.h	/^    ovrTrackingCap_Position         = 0x0040,   \/\/\/ Supports positional tracking.$/;"	e	enum:__anon8
ovrTrackingCaps	Src/OVR_CAPI.h	/^} ovrTrackingCaps;$/;"	t	typeref:enum:__anon8
ovrTrackingState	Src/OVR_CAPI.h	/^} ovrTrackingState;$/;"	t	typeref:struct:ovrTrackingState_
ovrTrackingState	Src/Tracking/Tracking_SensorState.h	/^typedef struct ovrTrackingState_ ovrTrackingState;$/;"	t	typeref:struct:ovrTrackingState_
ovrTrackingState_	Src/OVR_CAPI.h	/^typedef struct ovrTrackingState_$/;"	s
ovrVector2f	Src/Kernel/OVR_Math.h	/^typedef struct ovrVector2f_ ovrVector2f;$/;"	t	typeref:struct:ovrVector2f_
ovrVector2f	Src/OVR_CAPI.h	/^} ovrVector2f;$/;"	t	typeref:struct:ovrVector2f_
ovrVector2f_	Src/OVR_CAPI.h	/^typedef struct ovrVector2f_$/;"	s
ovrVector2i	Src/Kernel/OVR_Math.h	/^typedef struct ovrVector2i_ ovrVector2i;$/;"	t	typeref:struct:ovrVector2i_
ovrVector2i	Src/OVR_CAPI.h	/^} ovrVector2i;$/;"	t	typeref:struct:ovrVector2i_
ovrVector2i_	Src/OVR_CAPI.h	/^typedef struct ovrVector2i_$/;"	s
ovrVector3d	Src/Kernel/OVR_Math.h	/^typedef struct ovrVector3d_ ovrVector3d;$/;"	t	typeref:struct:ovrVector3d_
ovrVector3f	Src/Kernel/OVR_Math.h	/^typedef struct ovrVector3f_ ovrVector3f;$/;"	t	typeref:struct:ovrVector3f_
ovrVector3f	Src/OVR_CAPI.h	/^} ovrVector3f;$/;"	t	typeref:struct:ovrVector3f_
ovrVector3f_	Src/OVR_CAPI.h	/^typedef struct ovrVector3f_$/;"	s
ovr_GetTimeInSeconds	Src/Kernel/OVR_Timer.cpp	/^    double ovr_GetTimeInSeconds()$/;"	f
ovr_GetTimeInSeconds	Src/OVR_CAPI.cpp	/^OVR_EXPORT double ovr_GetTimeInSeconds()$/;"	f
ovr_GetVersionString	Src/OVR_CAPI.cpp	/^OVR_EXPORT const char* ovr_GetVersionString()$/;"	f
ovr_Initialize	Src/OVR_CAPI.cpp	/^OVR_EXPORT ovrBool ovr_Initialize()$/;"	f
ovr_InitializeRenderingShim	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovr_InitializeRenderingShim()$/;"	f
ovr_Shutdown	Src/OVR_CAPI.cpp	/^OVR_EXPORT void ovr_Shutdown()$/;"	f
ovr_WaitTillTime	Src/OVR_CAPI.cpp	/^OVR_EXPORT double ovr_WaitTillTime(double absTime)$/;"	f
ovrhmd_EnableHSWDisplaySDKRender	Src/CAPI/CAPI_HSWDisplay.cpp	/^    OVR_EXPORT void ovrhmd_EnableHSWDisplaySDKRender(ovrHmd hmd, ovrBool enabled)$/;"	f
ownsContext	Src/CAPI/GL/CAPI_GL_Util.h	/^    bool                ownsContext;$/;"	m	class:OVR::CAPI::GL::Context
pArray	Src/Kernel/OVR_Array.h	/^        SelfType*       pArray;$/;"	m	class:OVR::ArrayBase::Iterator
pArray	Src/Kernel/OVR_Array.h	/^        const SelfType* pArray;$/;"	m	class:OVR::ArrayBase::ConstIterator
pBuffer	Src/Kernel/OVR_File.h	/^    uint8_t*        pBuffer;$/;"	m	class:OVR::BufferedFile
pBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    uint8_t*  pBuffer;$/;"	m	class:OVR::CircularBuffer	file:
pClass	Src/Kernel/OVR_ThreadCommandQueue.h	/^    C*                            pClass;$/;"	m	class:OVR::ThreadCommandMF2
pClass	Src/Kernel/OVR_ThreadCommandQueue.h	/^    C*                           pClass;$/;"	m	class:OVR::ThreadCommandMF1
pClass	Src/Kernel/OVR_ThreadCommandQueue.h	/^    C*      pClass;$/;"	m	class:OVR::ThreadCommandMF0
pClient	Src/CAPI/CAPI_HMDState.h	/^	Service::NetClient*     pClient;$/;"	m	class:OVR::CAPI::HMDState
pConnection	Src/Net/OVR_Session.h	/^	Connection* pConnection; \/\/ Source connection$/;"	m	struct:OVR::Net::ReceivePayload
pConnection	Src/Net/OVR_Session.h	/^	Ptr<Connection> pConnection; \/\/ Connection to use$/;"	m	class:OVR::Net::SendParameters
pContainer	Src/Kernel/OVR_Allocator.h	/^    AllocContainer* pContainer;$/;"	m	class:OVR::Allocator_SingletonSupport
pD2DFactory	Src/Util/Util_ImageWindow.h	/^	static ID2D1Factory*		pD2DFactory;$/;"	m	class:OVR::Util::ImageWindow
pDWriteFactory	Src/Util/Util_ImageWindow.h	/^	static IDWriteFactory*		pDWriteFactory;$/;"	m	class:OVR::Util::ImageWindow
pData	Src/Kernel/OVR_String.h	/^        DataDesc* pData;$/;"	m	union:OVR::String::__anon32
pData	Src/Kernel/OVR_String.h	/^        DataDesc* pData;$/;"	m	union:OVR::String::__anon33
pData	Src/Kernel/OVR_String.h	/^    char*           pData;$/;"	m	class:OVR::StringBuffer
pData	Src/Net/OVR_Session.h	/^	const void*     pData;       \/\/ Pointer to data to send$/;"	m	class:OVR::Net::SendParameters
pData	Src/Net/OVR_Session.h	/^	uint8_t*    pData;       \/\/ Pointer to data received$/;"	m	struct:OVR::Net::ReceivePayload
pData	Src/Net/OVR_Session.h	/^    const void*     pData;       \/\/ Pointer to data to send$/;"	m	class:OVR::Net::BroadcastParameters
pEvent	Src/Kernel/OVR_ThreadCommandQueue.h	/^    NotifyEvent* pEvent;$/;"	m	class:OVR::ThreadCommand
pEyeTextures	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<Texture>        pEyeTextures[2];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
pFile	Src/Kernel/OVR_File.h	/^    Ptr<File>     pFile;$/;"	m	class:OVR::DelegatedFile
pFileTestBuffer	Src/Kernel/OVR_FileFILE.cpp	/^    uint8_t*      pFileTestBuffer;$/;"	m	class:OVR::FILEFile	file:
pFirst	Src/Kernel/OVR_Hash.h	/^        const C*   pFirst;$/;"	m	struct:OVR::HashNode::NodeRef
pFn	Src/Kernel/OVR_ThreadCommandQueue.h	/^    FnPtr                         pFn;$/;"	m	class:OVR::ThreadCommandMF2
pFn	Src/Kernel/OVR_ThreadCommandQueue.h	/^    FnPtr                        pFn;$/;"	m	class:OVR::ThreadCommandMF1
pFn	Src/Kernel/OVR_ThreadCommandQueue.h	/^    FnPtr   pFn;$/;"	m	class:OVR::ThreadCommandMF0
pFragmentShader	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Ptr<OVR::CAPI::GL::FragmentShader> pFragmentShader;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
pHSWDisplay	Src/CAPI/CAPI_HMDState.h	/^    Ptr<HSWDisplay>         pHSWDisplay;$/;"	m	class:OVR::CAPI::HMDState
pHash	Src/Kernel/OVR_Hash.h	/^        const SelfType* pHash;$/;"	m	struct:OVR::HashSetBase::ConstIterator
pHmdDesc	Src/CAPI/CAPI_HMDState.h	/^    ovrHmdDesc*             pHmdDesc;$/;"	m	class:OVR::CAPI::HMDState
pImpl	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^        ThreadCommandQueueImpl* pImpl;$/;"	m	struct:OVR::ThreadCommandQueueImpl::ExitCommand	file:
pImpl	Src/Kernel/OVR_Threads.h	/^    MutexImpl  *pImpl; $/;"	m	class:OVR::Mutex
pImpl	Src/Kernel/OVR_Threads.h	/^    WaitConditionImpl *pImpl;$/;"	m	class:OVR::WaitCondition
pIndexData	Src/OVR_CAPI.h	/^    unsigned short*      pIndexData;$/;"	m	struct:ovrDistortionMesh_
pInstance	Src/Kernel/OVR_Allocator.cpp	/^Allocator* Allocator::pInstance = 0;$/;"	m	class:OVR::Allocator	file:
pInstance	Src/Kernel/OVR_Allocator.h	/^    static Allocator* pInstance;$/;"	m	class:OVR::Allocator
pLastError	Src/CAPI/CAPI_HMDState.h	/^    const char*             pLastError;$/;"	m	class:OVR::CAPI::HMDState
pLock	Src/Kernel/OVR_Atomic.h	/^        Lock *pLock;$/;"	m	class:OVR::Lock::Locker
pMutex	Src/Kernel/OVR_Threads.h	/^        Mutex *pMutex;$/;"	m	class:OVR::Mutex::Locker
pNext	Src/Kernel/OVR_List.h	/^        T*    pNext;$/;"	m	union:OVR::ListNode::__anon24
pNtQueryTimerResolution	Src/Kernel/OVR_Timer.cpp	/^    NtQueryTimerResolutionType pNtQueryTimerResolution;$/;"	v
pObject	Src/Kernel/OVR_RefCount.h	/^    C   *pObject;$/;"	m	class:OVR::Ptr
pOverdriveTextures	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^    Ptr<Texture>    pOverdriveTextures[NumOverdriveTextures];$/;"	m	class:OVR::CAPI::GL::DistortionRenderer
pParams	Src/CAPI/GL/CAPI_GL_Util.h	/^    RenderParams*   pParams;$/;"	m	class:OVR::CAPI::GL::ShaderBase
pParams	Src/CAPI/GL/CAPI_GL_Util.h	/^    RenderParams* pParams;$/;"	m	class:OVR::CAPI::GL::Buffer
pParams	Src/CAPI/GL/CAPI_GL_Util.h	/^    RenderParams* pParams;$/;"	m	class:OVR::CAPI::GL::Texture
pPrev	Src/Kernel/OVR_List.h	/^        T*    pPrev;$/;"	m	union:OVR::ListNode::__anon23
pProfile	Src/CAPI/CAPI_HMDState.h	/^	Ptr<Profile>            pProfile;$/;"	m	class:OVR::CAPI::HMDState
pQueue	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    ThreadCommandQueue* pQueue;$/;"	m	class:OVR::ThreadCommandQueueImpl	file:
pRPC	Src/Service/Service_NetSessionCommon.h	/^	Net::Plugins::RPC1* pRPC;       \/\/ Remote procedure calls object$/;"	m	class:OVR::Service::NetSessionCommon
pRT	Src/Util/Util_ImageWindow.h	/^	ID2D1RenderTarget* pRT;$/;"	m	class:OVR::Util::ImageWindow
pRecvBuff	Src/Net/OVR_PacketizedTCPSocket.h	/^	uint8_t* pRecvBuff;     \/\/ Queued receive buffered data$/;"	m	class:OVR::Net::PacketizedTCPSocket
pRecvBuffSize	Src/Net/OVR_PacketizedTCPSocket.h	/^	int    pRecvBuffSize; \/\/ Size of receive queue in bytes$/;"	m	class:OVR::Net::PacketizedTCPSocket
pRenderer	Src/CAPI/CAPI_HMDState.h	/^    Ptr<DistortionRenderer> pRenderer;$/;"	m	class:OVR::CAPI::HMDState
pRet	Src/Kernel/OVR_ThreadCommandQueue.h	/^    R*                            pRet;$/;"	m	class:OVR::ThreadCommandMF2
pRet	Src/Kernel/OVR_ThreadCommandQueue.h	/^    R*                           pRet;$/;"	m	class:OVR::ThreadCommandMF1
pRet	Src/Kernel/OVR_ThreadCommandQueue.h	/^    R*      pRet;$/;"	m	class:OVR::ThreadCommandMF0
pRunningThreads	Src/Kernel/OVR_ThreadsPthread.cpp	/^    static ThreadList* volatile pRunningThreads;$/;"	m	class:OVR::ThreadList	file:
pRunningThreads	Src/Kernel/OVR_ThreadsPthread.cpp	/^ThreadList* volatile ThreadList::pRunningThreads = 0;$/;"	m	class:OVR::ThreadList	file:
pSecond	Src/Kernel/OVR_Hash.h	/^        const U*   pSecond;$/;"	m	struct:OVR::HashNode::NodeRef
pSession	Src/Net/OVR_NetworkPlugin.h	/^	Session *pSession;$/;"	m	class:OVR::Net::Plugins::NetworkPlugin
pSession	Src/Service/Service_NetSessionCommon.h	/^    Net::Session*       pSession;   \/\/ Networking session$/;"	m	class:OVR::Service::NetSessionCommon
pShaderSet	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Ptr<OVR::CAPI::GL::ShaderSet>      pShaderSet;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
pSharedMemory	Src/Kernel/OVR_SharedMemory.h	/^	Ptr<SharedMemory> pSharedMemory;$/;"	m	class:OVR::ISharedObject
pSocket	Src/Net/OVR_Session.h	/^	Ptr<TCPSocket> pSocket;$/;"	m	class:OVR::Net::TCPConnection
pStr	Src/Kernel/OVR_String.h	/^        const String* pStr;$/;"	m	struct:OVR::String::NoCaseKey
pStr	Src/Kernel/OVR_String.h	/^    const char* pStr;$/;"	m	class:OVR::StringDataPtr
pTable	Src/Kernel/OVR_Hash.h	/^    TableType*  pTable;$/;"	m	class:OVR::HashSetBase
pTexture	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Ptr<OVR::CAPI::GL::Texture>        pTexture;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
pV	Src/Kernel/OVR_RefCount.h	/^    T* pV;$/;"	m	class:OVR::Pickable
pVB	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Ptr<OVR::CAPI::GL::Buffer>         pVB;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
pVertexData	Src/OVR_CAPI.h	/^    ovrDistortionVertex* pVertexData;$/;"	m	struct:ovrDistortionMesh_
pVertexShader	Src/CAPI/GL/CAPI_GL_HSWDisplay.h	/^        Ptr<OVR::CAPI::GL::VertexShader>   pVertexShader;$/;"	m	class:OVR::CAPI::GL::HSWDisplay
pVoidNext	Src/Kernel/OVR_List.h	/^        void* pVoidNext;$/;"	m	union:OVR::ListNode::__anon24
pVoidPrev	Src/Kernel/OVR_List.h	/^        void* pVoidPrev;$/;"	m	union:OVR::ListNode::__anon23
pWindow	Src/CAPI/CAPI_HMDState.h	/^    void*                   pWindow;$/;"	m	class:OVR::CAPI::HMDState
pad	Src/CAPI/GL/CAPI_GLE_GL.h	/^          long pad[24]; $/;"	m	union:__GLXEvent
parseArray	Src/OVR_JSON.cpp	/^const char* JSON::parseArray(const char* buff, const char** perror)$/;"	f	class:OVR::JSON
parseEdid	Src/Displays/OVR_Linux_Display.cpp	/^static int parseEdid(uint8_t* edid, Linux::DisplayEDID& edidResult)$/;"	f	namespace:OVR
parseNumber	Src/OVR_JSON.cpp	/^const char* JSON::parseNumber(const char *num)$/;"	f	class:OVR::JSON
parseObject	Src/OVR_JSON.cpp	/^const char* JSON::parseObject(const char* buff, const char** perror)$/;"	f	class:OVR::JSON
parseString	Src/OVR_JSON.cpp	/^const char* JSON::parseString(const char* str, const char** perror)$/;"	f	class:OVR::JSON
parseValue	Src/OVR_JSON.cpp	/^const char* JSON::parseValue(const char* buff, const char** perror)$/;"	f	class:OVR::JSON
percent_out_of_range	Src/OVR_Stereo.cpp	/^static float percent_out_of_range;$/;"	m	namespace:OVR	file:
pid_t	Src/Kernel/OVR_Types.h	/^typedef unsigned long pid_t;$/;"	t	namespace:OVR
plots	Src/Util/Util_ImageWindow.h	/^		Array<CirclePlot> plots;$/;"	m	class:OVR::Util::Frame
priority	Src/Kernel/OVR_Threads.h	/^        ThreadPriority priority;         \/\/ Thread priority$/;"	m	struct:OVR::Thread::CreateParams
processor	Src/Kernel/OVR_Threads.h	/^        int            processor;        \/\/ Thread hardware processor$/;"	m	struct:OVR::Thread::CreateParams
productCode	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 productCode;$/;"	m	struct:OVR::LinuxDeviceScreen
r	Src/Util/Util_ImageWindow.h	/^		float r;$/;"	m	struct:OVR::Util::__anon16
r	Src/Util/Util_ImageWindow.h	/^		float r;$/;"	m	struct:OVR::Util::__anon17
radius	Src/Util/Util_ImageWindow.h	/^		float radius;$/;"	m	struct:OVR::Util::__anon16
rcVirtualScreen	Src/CAPI/GL/CAPI_GLE_GL.h	/^            RECT   rcVirtualScreen;$/;"	m	struct:_GPU_DEVICE
readFD	Src/Net/OVR_Unix_Socket.h	/^    fd_set readFD, exceptionFD, writeFD;$/;"	m	class:OVR::Net::TCPSocketPollState
readOffset	Src/Net/OVR_BitStream.h	/^	BitSize_t readOffset;$/;"	m	class:OVR::Net::BitStream
ready	Src/Util/Util_ImageWindow.h	/^		bool			  ready;$/;"	m	class:OVR::Util::Frame
recvBuffLock	Src/Net/OVR_PacketizedTCPSocket.h	/^    Lock   recvBuffLock;$/;"	m	class:OVR::Net::PacketizedTCPSocket
redBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  redBits;$/;"	m	struct:OVR::FBConfig	file:
registerRPC	Src/Service/Service_NetClient.cpp	/^void NetClient::registerRPC()$/;"	f	class:OVR::Service::NetClient
registeredBlockingFunctions	Src/Net/OVR_RPC1.h	/^	Hash< String, RPCDelegate, String::HashFunctor > registeredBlockingFunctions;$/;"	m	class:OVR::Net::Plugins::RPC1
releaseXErrorHandler	Src/Displays/OVR_Linux_SDKWindow.cpp	/^static void releaseXErrorHandler(_XDisplay* display)$/;"	f	namespace:OVR
remoteMode	Src/Kernel/OVR_SharedMemory.h	/^		SharedMemory::RemoteMode	remoteMode;		\/\/ When creating, what access should other processes get?$/;"	m	struct:OVR::SharedMemory::OpenParameters
removeThread	Src/Kernel/OVR_ThreadsPthread.cpp	/^    void removeThread(Thread *pthread)$/;"	f	class:OVR::ThreadList	file:
renderDistortion	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::renderDistortion(Texture* leftEyeTexture, Texture* rightEyeTexture)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
renderEndFrame	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::renderEndFrame()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
renderLatencyPixel	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::renderLatencyPixel(unsigned char* latencyTesterPixelColor)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
renderLatencyQuad	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::renderLatencyQuad(unsigned char* latencyTesterDrawColor)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
renderPrimitives	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::renderPrimitives($/;"	f	class:OVR::CAPI::GL::DistortionRenderer
reportInvalidDelete	Src/Kernel/OVR_RefCount.cpp	/^void RefCountImplCore::reportInvalidDelete(void *pmem)$/;"	f	class:OVR::RefCountImplCore
reportInvalidDelete	Src/Kernel/OVR_RefCount.cpp	/^void RefCountNTSImplCore::reportInvalidDelete(void *pmem)$/;"	f	class:OVR::RefCountNTSImplCore
resetPerfStats	Src/CAPI/CAPI_LatencyStatistics.cpp	/^void LagStatsCalculator::resetPerfStats(double resetTime)$/;"	f	class:OVR::CAPI::LagStatsCalculator
resolution	Src/Util/Util_ImageWindow.h	/^	D2D1_SIZE_U resolution;$/;"	m	class:OVR::Util::ImageWindow
rotation	Src/Displays/OVR_Linux_SDKWindow.h	/^    DistortionRotation  rotation;$/;"	m	struct:OVR::LinuxDeviceScreen
roundUpSize	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    inline size_t roundUpSize(size_t size)$/;"	f	class:OVR::CircularBuffer	file:
screen	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 screen;   \/\/\/< X Screen this device occupies.$/;"	m	struct:OVR::LinuxDeviceScreen
sendLock	Src/Net/OVR_PacketizedTCPSocket.h	/^    Lock   sendLock;$/;"	m	class:OVR::Net::PacketizedTCPSocket
send_event	Src/CAPI/GL/CAPI_GLE_GL.h	/^          Bool send_event; $/;"	m	struct:__anon1
serial	Src/CAPI/GL/CAPI_GLE_GL.h	/^          unsigned long serial; $/;"	m	struct:__anon1
set	Src/Displays/OVR_Linux_SDKWindow.h	/^    void set(int xScreen, XID xid, DistortionRotation rot, int prodCode,$/;"	f	struct:OVR::LinuxDeviceScreen
setBoolValue	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::setBoolValue(const char* propertyName, bool value)$/;"	f	class:OVR::CAPI::HMDState
setCenteredFromWorld	Src/Tracking/Tracking_SensorStateReader.h	/^    void setCenteredFromWorld(const Posed _CenteredFromWorld)$/;"	f	class:OVR::Tracking::SensorStateReader
setFloatArray	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::setFloatArray(const char* propertyName, float values[], unsigned arraySize)$/;"	f	class:OVR::CAPI::HMDState
setFloatValue	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::setFloatValue(const char* propertyName, float value)$/;"	f	class:OVR::CAPI::HMDState
setInstance	Src/Kernel/OVR_Allocator.h	/^    static  void    setInstance(Allocator* palloc)    $/;"	f	class:OVR::Allocator
setIntValue	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::setIntValue(const char* propertyName, int value)$/;"	f	class:OVR::CAPI::HMDState
setRawCapacity	Src/Kernel/OVR_Hash.h	/^    void    setRawCapacity(size_t newSize)    $/;"	f	class:OVR::HashSetBase
setString	Src/CAPI/CAPI_HMDState.cpp	/^bool HMDState::setString(const char* propertyName, const char* value)$/;"	f	class:OVR::CAPI::HMDState
setViewport	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^void DistortionRenderer::setViewport(const Recti& vp)$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
setupViewportScaleAndOffsets	Src/Util/Util_Render_Stereo.cpp	/^ViewportScaleAndOffsetBothEyes StereoConfig::setupViewportScaleAndOffsets()$/;"	f	class:OVR::Util::Render::StereoConfig
sharedInit	Src/CAPI/CAPI_HMDState.cpp	/^void HMDState::sharedInit(Profile* profile)$/;"	f	class:OVR::CAPI::HMDState
shutdownTimerSystem	Src/Kernel/OVR_Timer.cpp	/^void Timer::shutdownTimerSystem()$/;"	f	class:OVR::Timer
singleRPCLock	Src/Net/OVR_RPC1.h	/^    Lock            singleRPCLock;$/;"	m	class:OVR::Net::Plugins::RPC1
skip	Src/OVR_JSON.cpp	/^static const char* skip(const char* in)$/;"	f	namespace:OVR
slotHash	Src/Net/OVR_RPC1.h	/^	ObserverHash< RPCSlot > slotHash;$/;"	m	class:OVR::Net::Plugins::RPC1
stackData	Src/Net/OVR_BitStream.h	/^	unsigned char stackData[BITSTREAM_STACK_ALLOCATION_SIZE];$/;"	m	class:OVR::Net::BitStream
stackLock	Src/Kernel/OVR_System.cpp	/^static Lock stackLock;$/;"	m	namespace:OVR	file:
stackSize	Src/Kernel/OVR_Threads.h	/^        size_t         stackSize;        \/\/ Thread stack size$/;"	m	struct:OVR::Thread::CreateParams
static_assert	Src/Kernel/OVR_Types.h	650;"	d
std	Src/Kernel/OVR_Nullptr.h	/^    namespace std$/;"	n
stencilBits	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  int  stencilBits;$/;"	m	struct:OVR::FBConfig	file:
systemContext	Src/CAPI/GL/CAPI_GL_Util.h	/^    CGLContextObj       systemContext;$/;"	m	class:OVR::CAPI::GL::Context
systemContext	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLXContext          systemContext;$/;"	m	class:OVR::CAPI::GL::Context
systemContext	Src/CAPI/GL/CAPI_GL_Util.h	/^    HGLRC               systemContext;$/;"	m	class:OVR::CAPI::GL::Context
t	Src/Kernel/OVR_Atomic.h	/^    union C2T_union { C c; T t; };$/;"	m	union:OVR::AtomicOps::C2T_union
text	Src/Util/Util_ImageWindow.h	/^	OVR::String text;$/;"	m	struct:OVR::Util::__anon17
textLines	Src/Util/Util_ImageWindow.h	/^	Array<TextPlot>			textLines;$/;"	m	class:OVR::Util::Frame
texture	Src/CAPI/GL/CAPI_GL_DistortionRenderer.h	/^		GLuint                    texture;$/;"	m	struct:OVR::CAPI::GL::DistortionRenderer::FOR_EACH_EYE
this_type	Src/Kernel/OVR_Delegates.h	/^	typedef Delegate0<ret_type> this_type;$/;"	t	class:OVR::Delegate0
this_type	Src/Kernel/OVR_Delegates.h	/^	typedef Delegate1<ret_type, arg1_type> this_type;$/;"	t	class:OVR::Delegate1
this_type	Src/Kernel/OVR_Delegates.h	/^	typedef Delegate2<ret_type, arg1_type, arg2_type> this_type;$/;"	t	class:OVR::Delegate2
this_type	Src/Kernel/OVR_Delegates.h	/^	typedef Delegate3<ret_type, arg1_type, arg2_type, arg3_type> this_type;$/;"	t	class:OVR::Delegate3
this_type	Src/Kernel/OVR_Math.h	/^	typedef SymMat3<T> this_type;$/;"	t	class:OVR::SymMat3
threadFunction	Src/Kernel/OVR_Threads.h	/^        ThreadFn       threadFunction;   \/\/ Thread function$/;"	m	struct:OVR::Thread::CreateParams
timer	Src/CAPI/CAPI_DistortionRenderer.h	/^    HANDLE timer;$/;"	m	class:OVR::CAPI::DistortionRenderer
toCommand	Src/Kernel/OVR_ThreadCommandQueue.h	/^        ThreadCommand* toCommand() const { return (ThreadCommand*)Buffer; }$/;"	f	class:OVR::ThreadCommand::PopBuffer
toLock	Src/Kernel/OVR_Atomic.h	/^    Lock* toLock() { return (Lock*)Buffer; }$/;"	f	class:OVR::SharedLock
uint16_t	Src/Kernel/OVR_Types.h	/^    typedef unsigned short   uint16_t;$/;"	t
uint32_t	Src/Kernel/OVR_Types.h	/^    typedef unsigned int     uint32_t;$/;"	t
uint64_t	Src/Kernel/OVR_Types.h	/^    typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	Src/Kernel/OVR_Types.h	/^    typedef unsigned char     uint8_t;$/;"	t
updateState	Src/Kernel/OVR_ThreadsPthread.cpp	/^void Event::updateState(bool newState, bool newTemp, bool mustNotify)$/;"	f	class:OVR::Event
useFakeSeconds	Src/Kernel/OVR_Timer.cpp	/^bool   Timer::useFakeSeconds = false;$/;"	m	class:OVR::Timer	file:
useFakeSeconds	Src/Kernel/OVR_Timer.h	/^    static bool   useFakeSeconds;$/;"	m	class:OVR::Timer
userHandle	Src/Kernel/OVR_Threads.h	/^        void*          userHandle;       \/\/ User handle passes to a thread$/;"	m	struct:OVR::Thread::CreateParams
v	Src/Kernel/OVR_Math.h	/^	T v[6]; \/\/ _00 _01 _02 _11 _12 _22$/;"	m	class:OVR::SymMat3
w	Src/Kernel/OVR_Math.h	/^    T   w, h;$/;"	m	class:OVR::Size
w	Src/Kernel/OVR_Math.h	/^    T w, h;$/;"	m	class:OVR::Rect
w	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;    $/;"	m	class:OVR::Quat
w	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;$/;"	m	class:OVR::Vector4
w	Src/OVR_CAPI.h	/^    float x, y, z, w;$/;"	m	struct:ovrQuatf_
w	Src/OVR_CAPI.h	/^    int w, h;$/;"	m	struct:ovrSizei_
wait	Src/Kernel/OVR_ThreadCommandQueue.h	/^    bool PushCall(R (C::*fn)(), bool wait = false)$/;"	m	class:OVR::ThreadCommandQueue
waitableTimerInterval	Src/CAPI/CAPI_DistortionRenderer.h	/^    LARGE_INTEGER waitableTimerInterval;$/;"	m	class:OVR::CAPI::DistortionRenderer
wglBindSwapBarrierNV	Src/CAPI/GL/CAPI_GLE_GL.h	4204;"	d
wglBindSwapBarrierNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglBindSwapBarrierNV_Hook(GLuint group, GLuint barrier)$/;"	f	class:OVR::GLEContext
wglBindSwapBarrierNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLBINDSWAPBARRIERNVPROC    wglBindSwapBarrierNV_Impl;$/;"	m	class:OVR::GLEContext
wglBindTexImageARB	Src/CAPI/GL/CAPI_GLE_GL.h	4030;"	d
wglBindTexImageARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglBindTexImageARB_Hook(HPBUFFERARB hPbuffer, int iBuffer)$/;"	f	class:OVR::GLEContext
wglBindTexImageARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLBINDTEXIMAGEARBPROC     wglBindTexImageARB_Impl;$/;"	m	class:OVR::GLEContext
wglBindVideoCaptureDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4235;"	d
wglBindVideoCaptureDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglBindVideoCaptureDeviceNV_Hook(UINT uVideoSlot, HVIDEOINPUTDEVICENV hDevice)$/;"	f	class:OVR::GLEContext
wglBindVideoCaptureDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLBINDVIDEOCAPTUREDEVICENVPROC       wglBindVideoCaptureDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglBindVideoDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4066;"	d
wglBindVideoDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglBindVideoDeviceNV_Hook(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)$/;"	f	class:OVR::GLEContext
wglBindVideoDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLBINDVIDEODEVICENVPROC       wglBindVideoDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglBindVideoImageNV	Src/CAPI/GL/CAPI_GLE_GL.h	4184;"	d
wglBindVideoImageNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglBindVideoImageNV_Hook(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)$/;"	f	class:OVR::GLEContext
wglBindVideoImageNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLBINDVIDEOIMAGENVPROC     wglBindVideoImageNV_Impl;$/;"	m	class:OVR::GLEContext
wglChoosePixelFormatARB	Src/CAPI/GL/CAPI_GLE_GL.h	3940;"	d
wglChoosePixelFormatARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglChoosePixelFormatARB_Hook(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)$/;"	f	class:OVR::GLEContext
wglChoosePixelFormatARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLCHOOSEPIXELFORMATARBPROC      wglChoosePixelFormatARB_Impl;$/;"	m	class:OVR::GLEContext
wglCopyContext	Src/CAPI/GL/CAPI_GLE.cpp	6747;"	d	file:
wglCopyContext	Src/CAPI/GL/CAPI_GLE_GL.h	3801;"	d
wglCopyContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglCopyContext_Hook(HGLRC hglrcSrc, HGLRC hglrcDst, UINT mask)$/;"	f	class:OVR::GLEContext
wglCopyImageSubDataNV	Src/CAPI/GL/CAPI_GLE_GL.h	4250;"	d
wglCopyImageSubDataNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglCopyImageSubDataNV_Hook(HGLRC hSrcRC, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, HGLRC hDstRC,$/;"	f	class:OVR::GLEContext
wglCopyImageSubDataNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLCOPYIMAGESUBDATANVPROC wglCopyImageSubDataNV_Impl;$/;"	m	class:OVR::GLEContext
wglCreateBufferRegionARB	Src/CAPI/GL/CAPI_GLE_GL.h	3861;"	d
wglCreateBufferRegionARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HANDLE OVR::GLEContext::wglCreateBufferRegionARB_Hook(HDC hDC, int iLayerPlane, UINT uType)$/;"	f	class:OVR::GLEContext
wglCreateBufferRegionARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLCREATEBUFFERREGIONARBPROC  wglCreateBufferRegionARB_Impl;$/;"	m	class:OVR::GLEContext
wglCreateContext	Src/CAPI/GL/CAPI_GLE.cpp	6756;"	d	file:
wglCreateContext	Src/CAPI/GL/CAPI_GLE_GL.h	3802;"	d
wglCreateContext	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLCREATECONTEXTPROC                  wglCreateContext;$/;"	m	namespace:OVR::CAPI::GL	file:
wglCreateContextAttribsARB	Src/CAPI/GL/CAPI_GLE_GL.h	4086;"	d
wglCreateContextAttribsARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HGLRC OVR::GLEContext::wglCreateContextAttribsARB_Hook(HDC hDC, HGLRC hShareContext, const int *attribList)$/;"	f	class:OVR::GLEContext
wglCreateContextAttribsARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB_Impl;$/;"	m	class:OVR::GLEContext
wglCreateContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HGLRC OVR::GLEContext::wglCreateContext_Hook(HDC hdc)$/;"	f	class:OVR::GLEContext
wglCreateLayerContext	Src/CAPI/GL/CAPI_GLE.cpp	6765;"	d	file:
wglCreateLayerContext	Src/CAPI/GL/CAPI_GLE_GL.h	3803;"	d
wglCreateLayerContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HGLRC OVR::GLEContext::wglCreateLayerContext_Hook(HDC hdc, int iLayerPlane)$/;"	f	class:OVR::GLEContext
wglCreatePbufferARB	Src/CAPI/GL/CAPI_GLE_GL.h	3979;"	d
wglCreatePbufferARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HPBUFFERARB OVR::GLEContext::wglCreatePbufferARB_Hook(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)$/;"	f	class:OVR::GLEContext
wglCreatePbufferARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLCREATEPBUFFERARBPROC    wglCreatePbufferARB_Impl;$/;"	m	class:OVR::GLEContext
wglDXCloseDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4272;"	d
wglDXCloseDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXCloseDeviceNV_Hook(HANDLE hDevice)$/;"	f	class:OVR::GLEContext
wglDXCloseDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXCLOSEDEVICENVPROC            wglDXCloseDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXLockObjectsNV	Src/CAPI/GL/CAPI_GLE_GL.h	4273;"	d
wglDXLockObjectsNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXLockObjectsNV_Hook(HANDLE hDevice, GLint count, HANDLE *hObjects)$/;"	f	class:OVR::GLEContext
wglDXLockObjectsNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXLOCKOBJECTSNVPROC            wglDXLockObjectsNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXObjectAccessNV	Src/CAPI/GL/CAPI_GLE_GL.h	4274;"	d
wglDXObjectAccessNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXObjectAccessNV_Hook(HANDLE hObject, GLenum access)$/;"	f	class:OVR::GLEContext
wglDXObjectAccessNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXOBJECTACCESSNVPROC           wglDXObjectAccessNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXOpenDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4275;"	d
wglDXOpenDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HANDLE OVR::GLEContext::wglDXOpenDeviceNV_Hook(void *dxDevice)$/;"	f	class:OVR::GLEContext
wglDXOpenDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXOPENDEVICENVPROC             wglDXOpenDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXRegisterObjectNV	Src/CAPI/GL/CAPI_GLE_GL.h	4276;"	d
wglDXRegisterObjectNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HANDLE OVR::GLEContext::wglDXRegisterObjectNV_Hook(HANDLE hDevice, void *dxObject, GLuint name, GLenum type, GLenum access)$/;"	f	class:OVR::GLEContext
wglDXRegisterObjectNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXREGISTEROBJECTNVPROC         wglDXRegisterObjectNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXSetResourceShareHandleNV	Src/CAPI/GL/CAPI_GLE_GL.h	4277;"	d
wglDXSetResourceShareHandleNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXSetResourceShareHandleNV_Hook(void *dxObject, HANDLE shareHandle)$/;"	f	class:OVR::GLEContext
wglDXSetResourceShareHandleNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXSETRESOURCESHAREHANDLENVPROC wglDXSetResourceShareHandleNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXUnlockObjectsNV	Src/CAPI/GL/CAPI_GLE_GL.h	4278;"	d
wglDXUnlockObjectsNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXUnlockObjectsNV_Hook(HANDLE hDevice, GLint count, HANDLE *hObjects)$/;"	f	class:OVR::GLEContext
wglDXUnlockObjectsNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXUNLOCKOBJECTSNVPROC          wglDXUnlockObjectsNV_Impl;$/;"	m	class:OVR::GLEContext
wglDXUnregisterObjectNV	Src/CAPI/GL/CAPI_GLE_GL.h	4279;"	d
wglDXUnregisterObjectNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDXUnregisterObjectNV_Hook(HANDLE hDevice, HANDLE hObject)$/;"	f	class:OVR::GLEContext
wglDXUnregisterObjectNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDXUNREGISTEROBJECTNVPROC       wglDXUnregisterObjectNV_Impl;$/;"	m	class:OVR::GLEContext
wglDeleteBufferRegionARB	Src/CAPI/GL/CAPI_GLE_GL.h	3862;"	d
wglDeleteBufferRegionARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			VOID OVR::GLEContext::wglDeleteBufferRegionARB_Hook(HANDLE hRegion)$/;"	f	class:OVR::GLEContext
wglDeleteBufferRegionARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDELETEBUFFERREGIONARBPROC  wglDeleteBufferRegionARB_Impl;$/;"	m	class:OVR::GLEContext
wglDeleteContext	Src/CAPI/GL/CAPI_GLE.cpp	6774;"	d	file:
wglDeleteContext	Src/CAPI/GL/CAPI_GLE_GL.h	3804;"	d
wglDeleteContext	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLDELETECONTEXTPROC                  wglDeleteContext;$/;"	m	namespace:OVR::CAPI::GL	file:
wglDeleteContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDeleteContext_Hook(HGLRC hglrc)$/;"	f	class:OVR::GLEContext
wglDescribeLayerPlane	Src/CAPI/GL/CAPI_GLE.cpp	6864;"	d	file:
wglDescribeLayerPlane	Src/CAPI/GL/CAPI_GLE_GL.h	3814;"	d
wglDescribeLayerPlane_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDescribeLayerPlane_Hook(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nBytes, LPLAYERPLANEDESCRIPTOR plpd)$/;"	f	class:OVR::GLEContext
wglDestroyPbufferARB	Src/CAPI/GL/CAPI_GLE_GL.h	3982;"	d
wglDestroyPbufferARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglDestroyPbufferARB_Hook(HPBUFFERARB hPbuffer)$/;"	f	class:OVR::GLEContext
wglDestroyPbufferARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLDESTROYPBUFFERARBPROC   wglDestroyPbufferARB_Impl;$/;"	m	class:OVR::GLEContext
wglEnumerateVideoCaptureDevicesNV	Src/CAPI/GL/CAPI_GLE_GL.h	4236;"	d
wglEnumerateVideoCaptureDevicesNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			UINT OVR::GLEContext::wglEnumerateVideoCaptureDevicesNV_Hook(HDC hDc, HVIDEOINPUTDEVICENV *phDeviceList)$/;"	f	class:OVR::GLEContext
wglEnumerateVideoCaptureDevicesNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLENUMERATEVIDEOCAPTUREDEVICESNVPROC wglEnumerateVideoCaptureDevicesNV_Impl;$/;"	m	class:OVR::GLEContext
wglEnumerateVideoDevicesNV	Src/CAPI/GL/CAPI_GLE_GL.h	4065;"	d
wglEnumerateVideoDevicesNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			int OVR::GLEContext::wglEnumerateVideoDevicesNV_Hook(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)$/;"	f	class:OVR::GLEContext
wglEnumerateVideoDevicesNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLENUMERATEVIDEODEVICESNVPROC wglEnumerateVideoDevicesNV_Impl;$/;"	m	class:OVR::GLEContext
wglGetCurrentContext	Src/CAPI/GL/CAPI_GLE.cpp	6783;"	d	file:
wglGetCurrentContext	Src/CAPI/GL/CAPI_GLE_GL.h	3805;"	d
wglGetCurrentContext	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLGETCURRENTCONTEXTPROC              wglGetCurrentContext;$/;"	m	namespace:OVR::CAPI::GL	file:
wglGetCurrentContext_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HGLRC OVR::GLEContext::wglGetCurrentContext_Hook()$/;"	f	class:OVR::GLEContext
wglGetCurrentDC	Src/CAPI/GL/CAPI_GLE.cpp	6792;"	d	file:
wglGetCurrentDC	Src/CAPI/GL/CAPI_GLE_GL.h	3806;"	d
wglGetCurrentDC	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLGETCURRENTDCPROC                   wglGetCurrentDC;$/;"	m	namespace:OVR::CAPI::GL	file:
wglGetCurrentDC_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HDC OVR::GLEContext::wglGetCurrentDC_Hook()$/;"	f	class:OVR::GLEContext
wglGetCurrentReadDCARB	Src/CAPI/GL/CAPI_GLE_GL.h	3956;"	d
wglGetCurrentReadDCARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HDC OVR::GLEContext::wglGetCurrentReadDCARB_Hook()$/;"	f	class:OVR::GLEContext
wglGetCurrentReadDCARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETCURRENTREADDCARBPROC   wglGetCurrentReadDCARB_Impl;$/;"	m	class:OVR::GLEContext
wglGetExtensionsStringARB	Src/CAPI/GL/CAPI_GLE_GL.h	3875;"	d
wglGetExtensionsStringARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			const char * OVR::GLEContext::wglGetExtensionsStringARB_Hook(HDC hdc)$/;"	f	class:OVR::GLEContext
wglGetExtensionsStringARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETEXTENSIONSSTRINGARBPROC wglGetExtensionsStringARB_Impl;$/;"	m	class:OVR::GLEContext
wglGetExtensionsStringEXT	Src/CAPI/GL/CAPI_GLE_GL.h	4121;"	d
wglGetExtensionsStringEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			const char * OVR::GLEContext::wglGetExtensionsStringEXT_Hook()$/;"	f	class:OVR::GLEContext
wglGetExtensionsStringEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETEXTENSIONSSTRINGEXTPROC wglGetExtensionsStringEXT_Impl;$/;"	m	class:OVR::GLEContext
wglGetLayerPaletteEntries	Src/CAPI/GL/CAPI_GLE.cpp	6882;"	d	file:
wglGetLayerPaletteEntries	Src/CAPI/GL/CAPI_GLE_GL.h	3816;"	d
wglGetLayerPaletteEntries_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			int OVR::GLEContext::wglGetLayerPaletteEntries_Hook(HDC hdc, int iLayerPlane, int iStart, int cEntries, COLORREF *pcr)$/;"	f	class:OVR::GLEContext
wglGetMscRateOML	Src/CAPI/GL/CAPI_GLE_GL.h	4151;"	d
wglGetMscRateOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL  OVR::GLEContext::wglGetMscRateOML_Hook(HDC hdc, INT32 *numerator, INT32 *denominator)$/;"	f	class:OVR::GLEContext
wglGetMscRateOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETMSCRATEOMLPROC          wglGetMscRateOML_Impl;$/;"	m	class:OVR::GLEContext
wglGetPbufferDCARB	Src/CAPI/GL/CAPI_GLE_GL.h	3980;"	d
wglGetPbufferDCARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			HDC OVR::GLEContext::wglGetPbufferDCARB_Hook(HPBUFFERARB hPbuffer)$/;"	f	class:OVR::GLEContext
wglGetPbufferDCARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETPBUFFERDCARBPROC     wglGetPbufferDCARB_Impl;$/;"	m	class:OVR::GLEContext
wglGetPixelFormatAttribfvARB	Src/CAPI/GL/CAPI_GLE_GL.h	3939;"	d
wglGetPixelFormatAttribfvARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglGetPixelFormatAttribfvARB_Hook(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)$/;"	f	class:OVR::GLEContext
wglGetPixelFormatAttribfvARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETPIXELFORMATATTRIBFVARBPROC wglGetPixelFormatAttribfvARB_Impl;$/;"	m	class:OVR::GLEContext
wglGetPixelFormatAttribivARB	Src/CAPI/GL/CAPI_GLE_GL.h	3938;"	d
wglGetPixelFormatAttribivARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglGetPixelFormatAttribivARB_Hook(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)$/;"	f	class:OVR::GLEContext
wglGetPixelFormatAttribivARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETPIXELFORMATATTRIBIVARBPROC wglGetPixelFormatAttribivARB_Impl;$/;"	m	class:OVR::GLEContext
wglGetProcAddress	Src/CAPI/GL/CAPI_GLE.cpp	72;"	d	file:
wglGetProcAddress	Src/CAPI/GL/CAPI_GLE_GL.h	3807;"	d
wglGetProcAddress	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLGETPROCADDRESS                     wglGetProcAddress;$/;"	m	namespace:OVR::CAPI::GL	file:
wglGetProcAddress_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			PROC OVR::GLEContext::wglGetProcAddress_Hook(LPCSTR lpszProc)$/;"	f	class:OVR::GLEContext
wglGetSwapIntervalEXT	Src/CAPI/GL/CAPI_GLE_GL.h	4133;"	d
wglGetSwapIntervalEXT	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLGETSWAPINTERVALEXTPROC             wglGetSwapIntervalEXT;$/;"	m	namespace:OVR::CAPI::GL	file:
wglGetSwapIntervalEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			int OVR::GLEContext::wglGetSwapIntervalEXT_Hook()$/;"	f	class:OVR::GLEContext
wglGetSwapIntervalEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT_Impl;$/;"	m	class:OVR::GLEContext
wglGetSyncValuesOML	Src/CAPI/GL/CAPI_GLE_GL.h	4150;"	d
wglGetSyncValuesOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL  OVR::GLEContext::wglGetSyncValuesOML_Hook(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc)$/;"	f	class:OVR::GLEContext
wglGetSyncValuesOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETSYNCVALUESOMLPROC       wglGetSyncValuesOML_Impl;$/;"	m	class:OVR::GLEContext
wglGetVideoDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4182;"	d
wglGetVideoDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglGetVideoDeviceNV_Hook(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)$/;"	f	class:OVR::GLEContext
wglGetVideoDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETVIDEODEVICENVPROC     wglGetVideoDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglGetVideoInfoNV	Src/CAPI/GL/CAPI_GLE_GL.h	4187;"	d
wglGetVideoInfoNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglGetVideoInfoNV_Hook(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)$/;"	f	class:OVR::GLEContext
wglGetVideoInfoNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLGETVIDEOINFONVPROC       wglGetVideoInfoNV_Impl;$/;"	m	class:OVR::GLEContext
wglJoinSwapGroupNV	Src/CAPI/GL/CAPI_GLE_GL.h	4203;"	d
wglJoinSwapGroupNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglJoinSwapGroupNV_Hook(HDC hDC, GLuint group)$/;"	f	class:OVR::GLEContext
wglJoinSwapGroupNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLJOINSWAPGROUPNVPROC      wglJoinSwapGroupNV_Impl;$/;"	m	class:OVR::GLEContext
wglLockVideoCaptureDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4237;"	d
wglLockVideoCaptureDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglLockVideoCaptureDeviceNV_Hook(HDC hDc, HVIDEOINPUTDEVICENV hDevice)$/;"	f	class:OVR::GLEContext
wglLockVideoCaptureDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLLOCKVIDEOCAPTUREDEVICENVPROC       wglLockVideoCaptureDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglMakeContextCurrentARB	Src/CAPI/GL/CAPI_GLE_GL.h	3955;"	d
wglMakeContextCurrentARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglMakeContextCurrentARB_Hook(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)$/;"	f	class:OVR::GLEContext
wglMakeContextCurrentARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLMAKECONTEXTCURRENTARBPROC wglMakeContextCurrentARB_Impl;$/;"	m	class:OVR::GLEContext
wglMakeCurrent	Src/CAPI/GL/CAPI_GLE.cpp	6810;"	d	file:
wglMakeCurrent	Src/CAPI/GL/CAPI_GLE_GL.h	3808;"	d
wglMakeCurrent	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLMAKECURRENTPROC                    wglMakeCurrent;$/;"	m	namespace:OVR::CAPI::GL	file:
wglMakeCurrent_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglMakeCurrent_Hook(HDC hdc, HGLRC hglrc)$/;"	f	class:OVR::GLEContext
wglQueryCurrentContextNV	Src/CAPI/GL/CAPI_GLE_GL.h	4067;"	d
wglQueryCurrentContextNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQueryCurrentContextNV_Hook(int iAttribute, int *piValue)$/;"	f	class:OVR::GLEContext
wglQueryCurrentContextNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYCURRENTCONTEXTNVPROC   wglQueryCurrentContextNV_Impl;$/;"	m	class:OVR::GLEContext
wglQueryFrameCountNV	Src/CAPI/GL/CAPI_GLE_GL.h	4207;"	d
wglQueryFrameCountNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQueryFrameCountNV_Hook(HDC hDC, GLuint *count)$/;"	f	class:OVR::GLEContext
wglQueryFrameCountNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYFRAMECOUNTNVPROC    wglQueryFrameCountNV_Impl;$/;"	m	class:OVR::GLEContext
wglQueryMaxSwapGroupsNV	Src/CAPI/GL/CAPI_GLE_GL.h	4206;"	d
wglQueryMaxSwapGroupsNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQueryMaxSwapGroupsNV_Hook(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)$/;"	f	class:OVR::GLEContext
wglQueryMaxSwapGroupsNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYMAXSWAPGROUPSNVPROC wglQueryMaxSwapGroupsNV_Impl;$/;"	m	class:OVR::GLEContext
wglQueryPbufferARB	Src/CAPI/GL/CAPI_GLE_GL.h	3983;"	d
wglQueryPbufferARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQueryPbufferARB_Hook(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)$/;"	f	class:OVR::GLEContext
wglQueryPbufferARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYPBUFFERARBPROC     wglQueryPbufferARB_Impl;$/;"	m	class:OVR::GLEContext
wglQuerySwapGroupNV	Src/CAPI/GL/CAPI_GLE_GL.h	4205;"	d
wglQuerySwapGroupNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQuerySwapGroupNV_Hook(HDC hDC, GLuint *group, GLuint *barrier)$/;"	f	class:OVR::GLEContext
wglQuerySwapGroupNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYSWAPGROUPNVPROC     wglQuerySwapGroupNV_Impl;$/;"	m	class:OVR::GLEContext
wglQueryVideoCaptureDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4238;"	d
wglQueryVideoCaptureDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglQueryVideoCaptureDeviceNV_Hook(HDC hDc, HVIDEOINPUTDEVICENV hDevice, int iAttribute, int *piValue)$/;"	f	class:OVR::GLEContext
wglQueryVideoCaptureDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLQUERYVIDEOCAPTUREDEVICENVPROC      wglQueryVideoCaptureDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglRealizeLayerPalette	Src/CAPI/GL/CAPI_GLE.cpp	6891;"	d	file:
wglRealizeLayerPalette	Src/CAPI/GL/CAPI_GLE_GL.h	3817;"	d
wglRealizeLayerPalette_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglRealizeLayerPalette_Hook(HDC hdc, int iLayerPlane, BOOL bRealize)$/;"	f	class:OVR::GLEContext
wglReleasePbufferDCARB	Src/CAPI/GL/CAPI_GLE_GL.h	3981;"	d
wglReleasePbufferDCARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			int OVR::GLEContext::wglReleasePbufferDCARB_Hook(HPBUFFERARB hPbuffer, HDC hDC)$/;"	f	class:OVR::GLEContext
wglReleasePbufferDCARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRELEASEPBUFFERDCARBPROC wglReleasePbufferDCARB_Impl;$/;"	m	class:OVR::GLEContext
wglReleaseTexImageARB	Src/CAPI/GL/CAPI_GLE_GL.h	4031;"	d
wglReleaseTexImageARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglReleaseTexImageARB_Hook(HPBUFFERARB hPbuffer, int iBuffer)$/;"	f	class:OVR::GLEContext
wglReleaseTexImageARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRELEASETEXIMAGEARBPROC  wglReleaseTexImageARB_Impl;$/;"	m	class:OVR::GLEContext
wglReleaseVideoCaptureDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4239;"	d
wglReleaseVideoCaptureDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglReleaseVideoCaptureDeviceNV_Hook(HDC hDc, HVIDEOINPUTDEVICENV hDevice)$/;"	f	class:OVR::GLEContext
wglReleaseVideoCaptureDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRELEASEVIDEOCAPTUREDEVICENVPROC    wglReleaseVideoCaptureDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglReleaseVideoDeviceNV	Src/CAPI/GL/CAPI_GLE_GL.h	4183;"	d
wglReleaseVideoDeviceNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglReleaseVideoDeviceNV_Hook(HPVIDEODEV hVideoDevice)$/;"	f	class:OVR::GLEContext
wglReleaseVideoDeviceNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRELEASEVIDEODEVICENVPROC wglReleaseVideoDeviceNV_Impl;$/;"	m	class:OVR::GLEContext
wglReleaseVideoImageNV	Src/CAPI/GL/CAPI_GLE_GL.h	4185;"	d
wglReleaseVideoImageNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglReleaseVideoImageNV_Hook(HPBUFFERARB hPbuffer, int iVideoBuffer)$/;"	f	class:OVR::GLEContext
wglReleaseVideoImageNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRELEASEVIDEOIMAGENVPROC  wglReleaseVideoImageNV_Impl;$/;"	m	class:OVR::GLEContext
wglResetFrameCountNV	Src/CAPI/GL/CAPI_GLE_GL.h	4208;"	d
wglResetFrameCountNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglResetFrameCountNV_Hook(HDC hDC)$/;"	f	class:OVR::GLEContext
wglResetFrameCountNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRESETFRAMECOUNTNVPROC    wglResetFrameCountNV_Impl;$/;"	m	class:OVR::GLEContext
wglRestoreBufferRegionARB	Src/CAPI/GL/CAPI_GLE_GL.h	3864;"	d
wglRestoreBufferRegionARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglRestoreBufferRegionARB_Hook(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)$/;"	f	class:OVR::GLEContext
wglRestoreBufferRegionARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLRESTOREBUFFERREGIONARBPROC wglRestoreBufferRegionARB_Impl;$/;"	m	class:OVR::GLEContext
wglSaveBufferRegionARB	Src/CAPI/GL/CAPI_GLE_GL.h	3863;"	d
wglSaveBufferRegionARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglSaveBufferRegionARB_Hook(HANDLE hRegion, int x, int y, int width, int height)$/;"	f	class:OVR::GLEContext
wglSaveBufferRegionARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSAVEBUFFERREGIONARBPROC    wglSaveBufferRegionARB_Impl;$/;"	m	class:OVR::GLEContext
wglSendPbufferToVideoNV	Src/CAPI/GL/CAPI_GLE_GL.h	4186;"	d
wglSendPbufferToVideoNV_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglSendPbufferToVideoNV_Hook(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)$/;"	f	class:OVR::GLEContext
wglSendPbufferToVideoNV_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSENDPBUFFERTOVIDEONVPROC wglSendPbufferToVideoNV_Impl;$/;"	m	class:OVR::GLEContext
wglSetLayerPaletteEntries	Src/CAPI/GL/CAPI_GLE.cpp	6873;"	d	file:
wglSetLayerPaletteEntries	Src/CAPI/GL/CAPI_GLE_GL.h	3815;"	d
wglSetLayerPaletteEntries_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			int OVR::GLEContext::wglSetLayerPaletteEntries_Hook(HDC hdc, int iLayerPlane, int iStart, int cEntries, const COLORREF *pcr)$/;"	f	class:OVR::GLEContext
wglSetPbufferAttribARB	Src/CAPI/GL/CAPI_GLE_GL.h	4032;"	d
wglSetPbufferAttribARB_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglSetPbufferAttribARB_Hook(HPBUFFERARB hPbuffer, const int *piAttribList)$/;"	f	class:OVR::GLEContext
wglSetPbufferAttribARB_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSETPBUFFERATTRIBARBPROC wglSetPbufferAttribARB_Impl;$/;"	m	class:OVR::GLEContext
wglShareLists	Src/CAPI/GL/CAPI_GLE.cpp	6819;"	d	file:
wglShareLists	Src/CAPI/GL/CAPI_GLE_GL.h	3809;"	d
wglShareLists	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLSHARELISTSPROC                     wglShareLists;$/;"	m	namespace:OVR::CAPI::GL	file:
wglShareLists_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglShareLists_Hook(HGLRC hglrc1, HGLRC hglrc2)$/;"	f	class:OVR::GLEContext
wglSwapBuffersMscOML	Src/CAPI/GL/CAPI_GLE_GL.h	4152;"	d
wglSwapBuffersMscOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			INT64 OVR::GLEContext::wglSwapBuffersMscOML_Hook(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder)$/;"	f	class:OVR::GLEContext
wglSwapBuffersMscOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSWAPBUFFERSMSCOMLPROC      wglSwapBuffersMscOML_Impl;$/;"	m	class:OVR::GLEContext
wglSwapIntervalEXT	Src/CAPI/GL/CAPI_GLE_GL.h	4134;"	d
wglSwapIntervalEXT	Src/CAPI/GL/CAPI_GL_Util.cpp	/^PFNWGLSWAPINTERVALEXTPROC                wglSwapIntervalEXT;$/;"	m	namespace:OVR::CAPI::GL	file:
wglSwapIntervalEXT_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglSwapIntervalEXT_Hook(int interval)$/;"	f	class:OVR::GLEContext
wglSwapIntervalEXT_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSWAPINTERVALEXTPROC    wglSwapIntervalEXT_Impl;$/;"	m	class:OVR::GLEContext
wglSwapLayerBuffers	Src/CAPI/GL/CAPI_GLE.cpp	6900;"	d	file:
wglSwapLayerBuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3818;"	d
wglSwapLayerBuffersMscOML	Src/CAPI/GL/CAPI_GLE_GL.h	4153;"	d
wglSwapLayerBuffersMscOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			INT64 OVR::GLEContext::wglSwapLayerBuffersMscOML_Hook(HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)$/;"	f	class:OVR::GLEContext
wglSwapLayerBuffersMscOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLSWAPLAYERBUFFERSMSCOMLPROC wglSwapLayerBuffersMscOML_Impl;$/;"	m	class:OVR::GLEContext
wglSwapLayerBuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglSwapLayerBuffers_Hook(HDC hdc, UINT fuPlanes)$/;"	f	class:OVR::GLEContext
wglSwapMultipleBuffers	Src/CAPI/GL/CAPI_GLE.cpp	6909;"	d	file:
wglSwapMultipleBuffers	Src/CAPI/GL/CAPI_GLE_GL.h	3819;"	d
wglSwapMultipleBuffers_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			DWORD OVR::GLEContext::wglSwapMultipleBuffers_Hook(UINT i, CONST WGLSWAP* p)$/;"	f	class:OVR::GLEContext
wglUseFontBitmapsA	Src/CAPI/GL/CAPI_GLE.cpp	6828;"	d	file:
wglUseFontBitmapsA	Src/CAPI/GL/CAPI_GLE_GL.h	3810;"	d
wglUseFontBitmapsA_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglUseFontBitmapsA_Hook(HDC hdc, DWORD first, DWORD count, DWORD listBase)$/;"	f	class:OVR::GLEContext
wglUseFontBitmapsW	Src/CAPI/GL/CAPI_GLE.cpp	6837;"	d	file:
wglUseFontBitmapsW	Src/CAPI/GL/CAPI_GLE_GL.h	3811;"	d
wglUseFontBitmapsW_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglUseFontBitmapsW_Hook(HDC hdc, DWORD first, DWORD count, DWORD listBase)$/;"	f	class:OVR::GLEContext
wglUseFontOutlinesA	Src/CAPI/GL/CAPI_GLE.cpp	6846;"	d	file:
wglUseFontOutlinesA	Src/CAPI/GL/CAPI_GLE_GL.h	3812;"	d
wglUseFontOutlinesA_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglUseFontOutlinesA_Hook(HDC hdc, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)$/;"	f	class:OVR::GLEContext
wglUseFontOutlinesW	Src/CAPI/GL/CAPI_GLE.cpp	6855;"	d	file:
wglUseFontOutlinesW	Src/CAPI/GL/CAPI_GLE_GL.h	3813;"	d
wglUseFontOutlinesW_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL OVR::GLEContext::wglUseFontOutlinesW_Hook(HDC hdc, DWORD first, DWORD count, DWORD listBase, FLOAT deviation, FLOAT extrusion, int format, LPGLYPHMETRICSFLOAT lpgmf)$/;"	f	class:OVR::GLEContext
wglWaitForMscOML	Src/CAPI/GL/CAPI_GLE_GL.h	4154;"	d
wglWaitForMscOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL  OVR::GLEContext::wglWaitForMscOML_Hook(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)$/;"	f	class:OVR::GLEContext
wglWaitForMscOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLWAITFORMSCOMLPROC          wglWaitForMscOML_Impl;$/;"	m	class:OVR::GLEContext
wglWaitForSbcOML	Src/CAPI/GL/CAPI_GLE_GL.h	4155;"	d
wglWaitForSbcOML_Hook	Src/CAPI/GL/CAPI_GLE.cpp	/^			BOOL  OVR::GLEContext::wglWaitForSbcOML_Hook(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)$/;"	f	class:OVR::GLEContext
wglWaitForSbcOML_Impl	Src/CAPI/GL/CAPI_GLE.h	/^        PFNWGLWAITFORSBCOMLPROC          wglWaitForSbcOML_Impl;$/;"	m	class:OVR::GLEContext
width	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int width, height; $/;"	m	struct:__anon1
width	Src/Displays/OVR_Linux_SDKWindow.h	/^    int                 width;$/;"	m	struct:OVR::LinuxDeviceScreen
width	Src/Util/Util_ImageWindow.h	/^		int				  width;$/;"	m	class:OVR::Util::Frame
windowCount	Src/Util/Util_ImageWindow.h	/^	static int					windowCount;$/;"	m	class:OVR::Util::ImageWindow
words	Src/Tracking/Tracking_SensorState.h	/^    uint64_t words[64];$/;"	m	struct:OVR::Tracking::LocklessSensorStatePadding
writeFD	Src/Net/OVR_Unix_Socket.h	/^    fd_set readFD, exceptionFD, writeFD;$/;"	m	class:OVR::Net::TCPSocketPollState
x	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int x, y; $/;"	m	struct:__anon1
x	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;    $/;"	m	class:OVR::Quat
x	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;$/;"	m	class:OVR::Vector4
x	Src/Kernel/OVR_Math.h	/^    T x, y, z;$/;"	m	class:OVR::Vector3
x	Src/Kernel/OVR_Math.h	/^    T x, y;$/;"	m	class:OVR::Rect
x	Src/Kernel/OVR_Math.h	/^    T x, y;$/;"	m	class:OVR::Vector2
x	Src/OVR_CAPI.h	/^    float x, y, z, w;$/;"	m	struct:ovrQuatf_
x	Src/OVR_CAPI.h	/^    float x, y, z;$/;"	m	struct:ovrVector3f_
x	Src/OVR_CAPI.h	/^    float x, y;$/;"	m	struct:ovrVector2f_
x	Src/OVR_CAPI.h	/^    int x, y;$/;"	m	struct:ovrVector2i_
x	Src/Util/Util_ImageWindow.h	/^		float x;$/;"	m	struct:OVR::Util::__anon16
x	Src/Util/Util_ImageWindow.h	/^		float x;$/;"	m	struct:OVR::Util::__anon17
x11Display	Src/CAPI/GL/CAPI_GL_Util.h	/^    Display            *x11Display;$/;"	m	class:OVR::CAPI::GL::Context
x11Drawable	Src/CAPI/GL/CAPI_GL_Util.h	/^    GLXDrawable         x11Drawable;$/;"	m	class:OVR::CAPI::GL::Context
x11Visual	Src/CAPI/GL/CAPI_GL_Util.h	/^    XVisualInfo         x11Visual;$/;"	m	class:OVR::CAPI::GL::Context
xcfg	Src/Displays/OVR_Linux_SDKWindow.cpp	/^  GLXFBConfig xcfg;$/;"	m	struct:OVR::FBConfig	file:
y	Src/CAPI/GL/CAPI_GLE_GL.h	/^          int x, y; $/;"	m	struct:__anon1
y	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;    $/;"	m	class:OVR::Quat
y	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;$/;"	m	class:OVR::Vector4
y	Src/Kernel/OVR_Math.h	/^    T x, y, z;$/;"	m	class:OVR::Vector3
y	Src/Kernel/OVR_Math.h	/^    T x, y;$/;"	m	class:OVR::Rect
y	Src/Kernel/OVR_Math.h	/^    T x, y;$/;"	m	class:OVR::Vector2
y	Src/OVR_CAPI.h	/^    float x, y, z, w;$/;"	m	struct:ovrQuatf_
y	Src/OVR_CAPI.h	/^    float x, y, z;$/;"	m	struct:ovrVector3f_
y	Src/OVR_CAPI.h	/^    float x, y;$/;"	m	struct:ovrVector2f_
y	Src/OVR_CAPI.h	/^    int x, y;$/;"	m	struct:ovrVector2i_
y	Src/Util/Util_ImageWindow.h	/^		float y;$/;"	m	struct:OVR::Util::__anon16
y	Src/Util/Util_ImageWindow.h	/^		float y;$/;"	m	struct:OVR::Util::__anon17
z	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;    $/;"	m	class:OVR::Quat
z	Src/Kernel/OVR_Math.h	/^    T x, y, z, w;$/;"	m	class:OVR::Vector4
z	Src/Kernel/OVR_Math.h	/^    T x, y, z;$/;"	m	class:OVR::Vector3
z	Src/OVR_CAPI.h	/^    float x, y, z, w;$/;"	m	struct:ovrQuatf_
z	Src/OVR_CAPI.h	/^    float x, y, z;$/;"	m	struct:ovrVector3f_
~Allocator	Src/Kernel/OVR_Allocator.h	/^    virtual ~Allocator(){}$/;"	f	class:OVR::Allocator
~ArrayDataBase	Src/Kernel/OVR_Array.h	/^    ~ArrayDataBase() $/;"	f	struct:OVR::ArrayDataBase
~BerkleySocket	Src/Net/OVR_Socket.cpp	/^BerkleySocket::~BerkleySocket()$/;"	f	class:OVR::Net::BerkleySocket
~BitStream	Src/Net/OVR_BitStream.cpp	/^BitStream::~BitStream()$/;"	f	class:OVR::Net::BitStream
~Buffer	Src/CAPI/GL/CAPI_GL_Util.cpp	/^Buffer::~Buffer()$/;"	f	class:OVR::CAPI::GL::Buffer
~BufferedFile	Src/Kernel/OVR_File.cpp	/^BufferedFile::~BufferedFile()$/;"	f	class:OVR::BufferedFile
~CircularBuffer	Src/Kernel/OVR_Deque.h	/^    virtual ~CircularBuffer(){}$/;"	f	class:OVR::CircularBuffer
~CircularBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^    ~CircularBuffer()$/;"	f	class:OVR::CircularBuffer
~Connection	Src/Net/OVR_Session.h	/^	virtual ~Connection() \/\/ Allow delete from base$/;"	f	class:OVR::Net::Connection
~Deque	Src/Kernel/OVR_Deque.h	/^Deque<Elem, Allocator>::~Deque(void)$/;"	f	class:OVR::Deque
~Display	Src/Displays/OVR_Display.h	/^	virtual ~Display() { }$/;"	f	class:OVR::Display
~DisplaySearchHandle	Src/Displays/OVR_Display.h	/^	virtual ~DisplaySearchHandle() {}$/;"	f	class:OVR::DisplaySearchHandle
~DistortionRenderer	Src/CAPI/CAPI_DistortionRenderer.h	/^    virtual ~DistortionRenderer()$/;"	f	class:OVR::CAPI::DistortionRenderer
~DistortionRenderer	Src/CAPI/GL/CAPI_GL_DistortionRenderer.cpp	/^DistortionRenderer::~DistortionRenderer()$/;"	f	class:OVR::CAPI::GL::DistortionRenderer
~Event	Src/Kernel/OVR_Threads.h	/^    ~Event() { }$/;"	f	class:OVR::Event
~FILEFile	Src/Kernel/OVR_FileFILE.cpp	/^    ~FILEFile()$/;"	f	class:OVR::FILEFile
~FakeMemoryBlock	Src/Kernel/OVR_SharedMemory.cpp	/^        ~FakeMemoryBlock()$/;"	f	class:OVR::FakeMemoryBlock
~FakeMemoryManager	Src/Kernel/OVR_SharedMemory.cpp	/^    FakeMemoryManager::~FakeMemoryManager()$/;"	f	class:OVR::FakeMemoryManager
~Frame	Src/Util/Util_ImageWindow.h	/^	~Frame()$/;"	f	class:OVR::Util::Frame
~GLEContext	Src/CAPI/GL/CAPI_GLE.cpp	/^    OVR::GLEContext::~GLEContext()$/;"	f	class:OVR::GLEContext
~GraphicsState	Src/CAPI/CAPI_DistortionRenderer.h	/^        virtual ~GraphicsState() {}$/;"	f	class:OVR::CAPI::DistortionRenderer::GraphicsState
~HMDState	Src/CAPI/CAPI_HMDState.cpp	/^HMDState::~HMDState()$/;"	f	class:OVR::CAPI::HMDState
~HSWDisplay	Src/CAPI/CAPI_HSWDisplay.cpp	/^HSWDisplay::~HSWDisplay()$/;"	f	class:OVR::CAPI::HSWDisplay
~Hash	Src/Kernel/OVR_Hash.h	/^    ~Hash()                                                     { }$/;"	f	class:OVR::Hash
~HashIdentity	Src/Kernel/OVR_Hash.h	/^    ~HashIdentity()                                       { }$/;"	f	class:OVR::HashIdentity
~HashSet	Src/Kernel/OVR_Hash.h	/^    ~HashSet()                                     {   }$/;"	f	class:OVR::HashSet
~HashSetBase	Src/Kernel/OVR_Hash.h	/^    ~HashSetBase()                                     $/;"	f	class:OVR::HashSetBase
~HashSetUncached	Src/Kernel/OVR_Hash.h	/^    ~HashSetUncached()                                       { }$/;"	f	class:OVR::HashSetUncached
~HashUncached	Src/Kernel/OVR_Hash.h	/^    ~HashUncached()                                       { }$/;"	f	class:OVR::HashUncached
~ImageWindow	Src/Util/Util_ImageWindow.h	/^	virtual ~ImageWindow() { }$/;"	f	class:OVR::Util::ImageWindow
~InPlaceMutableDeque	Src/Kernel/OVR_Deque.h	/^	virtual ~InPlaceMutableDeque() {};$/;"	f	class:OVR::InPlaceMutableDeque
~InitStruct	Src/Kernel/OVR_String.h	/^        virtual ~InitStruct() { }$/;"	f	struct:OVR::String::InitStruct
~JSON	Src/OVR_JSON.cpp	/^JSON::~JSON()$/;"	f	class:OVR::JSON
~LatencyStatisticsCSV	Src/CAPI/CAPI_LatencyStatistics.cpp	/^LatencyStatisticsCSV::~LatencyStatisticsCSV()$/;"	f	class:OVR::CAPI::LatencyStatisticsCSV
~LinuxDisplayGeneric	Src/Displays/OVR_Linux_Display.h	/^    virtual ~LinuxDisplayGeneric()$/;"	f	class:OVR::Linux::LinuxDisplayGeneric
~LinuxDisplaySearchHandle	Src/Displays/OVR_Linux_Display.h	/^    virtual ~LinuxDisplaySearchHandle()   {}$/;"	f	class:OVR::Linux::LinuxDisplaySearchHandle
~Lock	Src/Kernel/OVR_Atomic.cpp	/^Lock::~Lock()$/;"	f	class:OVR::Lock
~Lock	Src/Kernel/OVR_Atomic.h	/^    inline ~Lock() { }    $/;"	f	class:OVR::Lock
~Lock	Src/Kernel/OVR_Atomic.h	/^    ~Lock ()                { pthread_mutex_destroy(&mutex); }$/;"	f	class:OVR::Lock
~Locker	Src/Kernel/OVR_Atomic.h	/^        inline ~Locker()$/;"	f	class:OVR::Lock::Locker
~Locker	Src/Kernel/OVR_Threads.h	/^        ~Locker()$/;"	f	class:OVR::Mutex::Locker
~Log	Src/Kernel/OVR_Log.cpp	/^Log::~Log()$/;"	f	class:OVR::Log
~LogSubject	Src/Kernel/OVR_Log.cpp	/^    virtual ~LogSubject(){} \/\/ Required because we use delete this below.$/;"	f	class:LogSubject
~Mutex	Src/Kernel/OVR_ThreadsPthread.cpp	/^Mutex::~Mutex()$/;"	f	class:OVR::Mutex
~MutexImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^MutexImpl::~MutexImpl()$/;"	f	class:OVR::MutexImpl
~NetClient	Src/Service/Service_NetClient.cpp	/^NetClient::~NetClient()$/;"	f	class:OVR::Service::NetClient
~NetSessionCommon	Src/Service/Service_NetSessionCommon.cpp	/^NetSessionCommon::~NetSessionCommon()$/;"	f	class:OVR::Service::NetSessionCommon
~NetworkConnection	Src/Net/OVR_Session.h	/^    virtual ~NetworkConnection()$/;"	f	class:OVR::Net::NetworkConnection
~NetworkPlugin	Src/Net/OVR_NetworkPlugin.cpp	/^NetworkPlugin::~NetworkPlugin()$/;"	f	class:OVR::Net::Plugins::NetworkPlugin
~Observer	Src/Kernel/OVR_Observer.h	/^	~Observer()$/;"	f	class:OVR::Observer
~ObserverHash	Src/Kernel/OVR_Observer.h	/^	~ObserverHash() {Clear();}$/;"	f	class:OVR::ObserverHash
~ObserverScope	Src/Kernel/OVR_Observer.h	/^	~ObserverScope()$/;"	f	class:OVR::ObserverScope
~PacketizedTCPConnection	Src/Net/OVR_Session.h	/^    virtual ~PacketizedTCPConnection()$/;"	f	class:OVR::Net::PacketizedTCPConnection
~PacketizedTCPSocket	Src/Net/OVR_PacketizedTCPSocket.cpp	/^PacketizedTCPSocket::~PacketizedTCPSocket()$/;"	f	class:OVR::Net::PacketizedTCPSocket
~PopBuffer	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^ThreadCommand::PopBuffer::~PopBuffer()$/;"	f	class:OVR::ThreadCommand::PopBuffer
~Profile	Src/OVR_Profile.cpp	/^Profile::~Profile()$/;"	f	class:OVR::Profile
~ProfileManager	Src/OVR_Profile.cpp	/^ProfileManager::~ProfileManager()$/;"	f	class:OVR::ProfileManager
~Ptr	Src/Kernel/OVR_RefCount.h	/^    OVR_FORCE_INLINE ~Ptr()$/;"	f	class:OVR::Ptr
~RPC1	Src/Net/OVR_RPC1.cpp	/^RPC1::~RPC1()$/;"	f	class:OVR::Net::Plugins::RPC1
~RefCountImplCore	Src/Kernel/OVR_RefCount.cpp	/^RefCountImplCore::~RefCountImplCore()$/;"	f	class:OVR::RefCountImplCore
~RefCountNTSImplCore	Src/Kernel/OVR_RefCount.cpp	/^RefCountNTSImplCore::~RefCountNTSImplCore()$/;"	f	class:OVR::RefCountNTSImplCore
~SDKWindow	Src/Displays/OVR_Linux_SDKWindow.cpp	/^SDKWindow::~SDKWindow()$/;"	f	class:OVR::SDKWindow
~Scope	Src/CAPI/CAPI_HMDState.h	/^        ~Scope() { }$/;"	f	struct:OVR::CAPI::ThreadChecker::Scope
~Session	Src/Net/OVR_Session.h	/^    virtual ~Session()$/;"	f	class:OVR::Net::Session
~SessionListener	Src/Net/OVR_Session.h	/^	virtual ~SessionListener(){}$/;"	f	class:OVR::Net::SessionListener
~Shader	Src/CAPI/GL/CAPI_GL_Util.h	/^    virtual ~Shader() {}$/;"	f	class:OVR::CAPI::GL::Shader
~ShaderBase	Src/CAPI/GL/CAPI_GL_Util.h	/^	~ShaderBase()$/;"	f	class:OVR::CAPI::GL::ShaderBase
~ShaderImpl	Src/CAPI/GL/CAPI_GL_Util.h	/^    ~ShaderImpl()$/;"	f	class:OVR::CAPI::GL::ShaderImpl
~ShaderSet	Src/CAPI/GL/CAPI_GL_Util.cpp	/^ShaderSet::~ShaderSet()$/;"	f	class:OVR::CAPI::GL::ShaderSet
~SharedMemory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemory::~SharedMemory()$/;"	f	class:OVR::SharedMemory
~SharedMemoryFactory	Src/Kernel/OVR_SharedMemory.cpp	/^SharedMemoryFactory::~SharedMemoryFactory()$/;"	f	class:OVR::SharedMemoryFactory
~SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^	~SharedMemoryInternal()$/;"	f	class:OVR::SharedMemoryInternal
~SharedMemoryInternal	Src/Kernel/OVR_SharedMemory.cpp	/^        ~SharedMemoryInternal()$/;"	f	class:OVR::SharedMemoryInternal
~SocketEvent_TCP	Src/Net/OVR_Socket.h	/^	virtual ~SocketEvent_TCP(){}$/;"	f	class:OVR::Net::SocketEvent_TCP
~SocketEvent_UDP	Src/Net/OVR_Socket.h	/^	virtual ~SocketEvent_UDP(){}$/;"	f	class:OVR::Net::SocketEvent_UDP
~String	Src/Kernel/OVR_String.h	/^    ~String()$/;"	f	class:OVR::String
~StringBuffer	Src/Kernel/OVR_String.cpp	/^StringBuffer::~StringBuffer()$/;"	f	class:OVR::StringBuffer
~SysErrorModeDisabler	Src/Kernel/OVR_FileFILE.cpp	/^    ~SysErrorModeDisabler()$/;"	f	class:OVR::SysErrorModeDisabler
~System	Src/Kernel/OVR_System.h	/^    ~System()$/;"	f	class:OVR::System
~SystemSingletonBase	Src/Kernel/OVR_System.h	/^    ~SystemSingletonBase()$/;"	f	class:OVR::SystemSingletonBase
~SystemSingletonInternal	Src/Kernel/OVR_System.h	/^    virtual ~SystemSingletonInternal(){}$/;"	f	class:OVR::SystemSingletonInternal
~TCPConnection	Src/Net/OVR_Session.h	/^    virtual ~TCPConnection()$/;"	f	class:OVR::Net::TCPConnection
~TCPSocket	Src/Net/OVR_Unix_Socket.cpp	/^TCPSocket::~TCPSocket()$/;"	f	class:OVR::Net::TCPSocket
~Texture	Src/CAPI/GL/CAPI_GL_Util.cpp	/^Texture::~Texture()$/;"	f	class:OVR::CAPI::GL::Texture
~Thread	Src/Kernel/OVR_ThreadsPthread.cpp	/^Thread::~Thread()$/;"	f	class:OVR::Thread
~ThreadCommand	Src/Kernel/OVR_ThreadCommandQueue.h	/^    virtual ~ThreadCommand() { }$/;"	f	class:OVR::ThreadCommand
~ThreadCommandQueue	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^ThreadCommandQueue::~ThreadCommandQueue()$/;"	f	class:OVR::ThreadCommandQueue
~ThreadCommandQueueImpl	Src/Kernel/OVR_ThreadCommandQueue.cpp	/^ThreadCommandQueueImpl::~ThreadCommandQueueImpl()$/;"	f	class:OVR::ThreadCommandQueueImpl
~ThreadList	Src/Kernel/OVR_ThreadsPthread.cpp	/^    ~ThreadList() { }$/;"	f	class:OVR::ThreadList
~UDPSocket	Src/Net/OVR_Unix_Socket.cpp	/^UDPSocket::~UDPSocket()$/;"	f	class:OVR::Net::UDPSocket
~UnopenedFile	Src/Kernel/OVR_SysFile.cpp	/^    ~UnopenedFile() { }$/;"	f	class:OVR::UnopenedFile
~WaitCondition	Src/Kernel/OVR_ThreadsPthread.cpp	/^WaitCondition::~WaitCondition()$/;"	f	class:OVR::WaitCondition
~WaitConditionImpl	Src/Kernel/OVR_ThreadsPthread.cpp	/^WaitConditionImpl::~WaitConditionImpl()$/;"	f	class:OVR::WaitConditionImpl
